

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Mar 12 13:01:28 2019

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58  0000                     
    59                           ; Version 1.44
    60                           ; Generated 14/09/2017 GMT
    61                           ; 
    62                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F46K22 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataCOMRAM
    95  00324C                     __pidataCOMRAM:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _cnt
    99  00324C  0001               	dw	1
   100                           
   101                           	psect	smallconst
   102  001000                     __psmallconst:
   103                           	opt stack 0
   104  001000  00                 	db	0
   105  001001                     _dpowers:
   106                           	opt stack 0
   107  001001  0001               	dw	1
   108  001003  0000               	dw	0
   109  001005  000A               	dw	10
   110  001007  0000               	dw	0
   111  001009  0064               	dw	100
   112  00100B  0000               	dw	0
   113  00100D  03E8               	dw	1000
   114  00100F  0000               	dw	0
   115  001011  2710               	dw	10000
   116  001013  0000               	dw	0
   117  001015  86A0               	dw	34464
   118  001017  0001               	dw	1
   119  001019  4240               	dw	16960
   120  00101B  000F               	dw	15
   121  00101D  9680               	dw	38528
   122  00101F  0098               	dw	152
   123  001021  E100               	dw	57600
   124  001023  05F5               	dw	1525
   125  001025  CA00               	dw	51712
   126  001027  3B9A               	dw	15258
   127  001029                     __end_of_dpowers:
   128                           	opt stack 0
   129  001029                     __powers_:
   130                           	opt stack 0
   131  001029  00                 	db	0
   132  00102A  80                 	db	128
   133  00102B  3F                 	db	63
   134  00102C  00                 	db	0
   135  00102D  20                 	db	32
   136  00102E  41                 	db	65
   137  00102F  00                 	db	0
   138  001030  C8                 	db	200
   139  001031  42                 	db	66
   140  001032  00                 	db	0
   141  001033  7A                 	db	122
   142  001034  44                 	db	68
   143  001035  40                 	db	64
   144  001036  1C                 	db	28
   145  001037  46                 	db	70
   146  001038  50                 	db	80
   147  001039  C3                 	db	195
   148  00103A  47                 	db	71
   149  00103B  24                 	db	36
   150  00103C  74                 	db	116
   151  00103D  49                 	db	73
   152  00103E  97                 	db	151
   153  00103F  18                 	db	24
   154  001040  4B                 	db	75
   155  001041  BC                 	db	188
   156  001042  BE                 	db	190
   157  001043  4C                 	db	76
   158  001044  6B                 	db	107
   159  001045  6E                 	db	110
   160  001046  4E                 	db	78
   161  001047  03                 	db	3
   162  001048  15                 	db	21
   163  001049  50                 	db	80
   164  00104A  79                 	db	121
   165  00104B  AD                 	db	173
   166  00104C  60                 	db	96
   167  00104D  F3                 	db	243
   168  00104E  49                 	db	73
   169  00104F  71                 	db	113
   170  001050                     __end_of__powers_:
   171                           	opt stack 0
   172  001050                     __npowers_:
   173                           	opt stack 0
   174  001050  00                 	db	0
   175  001051  80                 	db	128
   176  001052  3F                 	db	63
   177  001053  CD                 	db	205
   178  001054  CC                 	db	204
   179  001055  3D                 	db	61
   180  001056  D7                 	db	215
   181  001057  23                 	db	35
   182  001058  3C                 	db	60
   183  001059  12                 	db	18
   184  00105A  83                 	db	131
   185  00105B  3A                 	db	58
   186  00105C  B7                 	db	183
   187  00105D  D1                 	db	209
   188  00105E  38                 	db	56
   189  00105F  C6                 	db	198
   190  001060  27                 	db	39
   191  001061  37                 	db	55
   192  001062  38                 	db	56
   193  001063  86                 	db	134
   194  001064  35                 	db	53
   195  001065  C0                 	db	192
   196  001066  D6                 	db	214
   197  001067  33                 	db	51
   198  001068  CC                 	db	204
   199  001069  2B                 	db	43
   200  00106A  32                 	db	50
   201  00106B  70                 	db	112
   202  00106C  89                 	db	137
   203  00106D  30                 	db	48
   204  00106E  E7                 	db	231
   205  00106F  DB                 	db	219
   206  001070  2E                 	db	46
   207  001071  E5                 	db	229
   208  001072  3C                 	db	60
   209  001073  1E                 	db	30
   210  001074  42                 	db	66
   211  001075  A2                 	db	162
   212  001076  0D                 	db	13
   213  001077                     __end_of__npowers_:
   214                           	opt stack 0
   215  0000                     _ANSELAbits	set	3896
   216  0000                     _CCPR3L	set	3934
   217  0000                     _CCP3CON	set	3933
   218  0000                     _CCPTMRS0	set	3913
   219  0000                     _ANSELE	set	3900
   220  0000                     _ANSELD	set	3899
   221  0000                     _ANSELC	set	3898
   222  0000                     _ANSELB	set	3897
   223  0000                     _ANSELA	set	3896
   224  0000                     _SSPBUF	set	4041
   225  0000                     _SSP1BUF	set	4041
   226  0000                     _SSP1CON2bits	set	4037
   227  0000                     _SSP1STAT	set	4039
   228  0000                     _SSP1ADD	set	4040
   229  0000                     _SSP1CON2	set	4037
   230  0000                     _SSP1CON1	set	4038
   231  0000                     _PIE1bits	set	3997
   232  0000                     _INTCONbits	set	4082
   233  0000                     _TRISCbits	set	3988
   234  0000                     _ADCON2bits	set	4032
   235  0000                     _ADCON2	set	4032
   236  0000                     _ADCON1	set	4033
   237  0000                     _TRISAbits	set	3986
   238  0000                     _PR2	set	4027
   239  0000                     _T2CON	set	4026
   240  0000                     _CCP1CON	set	4029
   241  0000                     _CCP2CON	set	3942
   242  0000                     _OSCTUNEbits	set	3995
   243  0000                     _OSCCON	set	4051
   244  0000                     _LATE	set	3981
   245  0000                     _LATD	set	3980
   246  0000                     _LATC	set	3979
   247  0000                     _LATB	set	3978
   248  0000                     _LATA	set	3977
   249  0000                     _PORTE	set	3972
   250  0000                     _PORTD	set	3971
   251  0000                     _PORTC	set	3970
   252  0000                     _PORTB	set	3969
   253  0000                     _PORTA	set	3968
   254  0000                     _TRISE	set	3990
   255  0000                     _TRISD	set	3989
   256  0000                     _TRISC	set	3988
   257  0000                     _TRISB	set	3987
   258  0000                     _TRISA	set	3986
   259  0000                     _ADCON0bits	set	4034
   260  0000                     _CCPR2L	set	3943
   261  0000                     _CCPR1L	set	4030
   262  0000                     _ADRESH	set	4036
   263  0000                     _ADCON0	set	4034
   264  0000                     _LATDbits	set	3980
   265  0000                     _TRISDbits	set	3989
   266  001077                     STR_9:
   267                           
   268                           ; BSR set to: 15
   269  001077  54                 	db	84	;'T'
   270  001078  65                 	db	101	;'e'
   271  001079  73                 	db	115	;'s'
   272  00107A  74                 	db	116	;'t'
   273  00107B  00                 	db	0
   274  00107C                     STR_2:
   275                           
   276                           ; BSR set to: 15
   277  00107C  25                 	db	37
   278  00107D  2E                 	db	46
   279  00107E  32                 	db	50	;'2'
   280  00107F  66                 	db	102	;'f'
   281  001080  00                 	db	0
   282  001081                     STR_6:
   283                           
   284                           ; BSR set to: 15
   285  001081  55                 	db	85	;'U'
   286  001082  69                 	db	105	;'i'
   287  001083  3D                 	db	61	;'='
   288  001084  00                 	db	0
   289  001085                     STR_3:
   290                           
   291                           ; BSR set to: 15
   292  001085  49                 	db	73	;'I'
   293  001086  3D                 	db	61	;'='
   294  001087  00                 	db	0
   295  001088                     STR_1:
   296                           
   297                           ; BSR set to: 15
   298  001088  55                 	db	85	;'U'
   299  001089  3D                 	db	61	;'='
   300  00108A  00                 	db	0
   301  00108B                     STR_5:
   302                           
   303                           ; BSR set to: 15
   304  00108B  20                 	db	32
   305  00108C  41                 	db	65	;'A'
   306  00108D  00                 	db	0
   307  00108E                     STR_8:
   308                           
   309                           ; BSR set to: 15
   310  00108E  20                 	db	32
   311  00108F  56                 	db	86	;'V'
   312  001090  00                 	db	0
   313  0000                     
   314                           ; #config settings
   315  001091  00                 	db	0	; dummy byte at the end
   316  0000                     
   317                           	psect	cinit
   318  00307A                     __pcinit:
   319                           	opt stack 0
   320  00307A                     start_initialization:
   321                           	opt stack 0
   322  00307A                     __initialization:
   323                           	opt stack 0
   324                           
   325                           ; Initialize objects allocated to COMRAM (2 bytes)
   326                           ; load TBLPTR registers with __pidataCOMRAM
   327  00307A  0E4C               	movlw	low __pidataCOMRAM
   328  00307C  6EF6               	movwf	tblptrl,c
   329  00307E  0E32               	movlw	high __pidataCOMRAM
   330  003080  6EF7               	movwf	tblptrh,c
   331  003082  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   332  003084  6EF8               	movwf	tblptru,c
   333  003086  0009               	tblrd		*+	;fetch initializer
   334  003088  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   335  00308C  0009               	tblrd		*+	;fetch initializer
   336  00308E  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
   337                           
   338                           ; Clear objects allocated to BANK1 (64 bytes)
   339  003092  EE01  F000         	lfsr	0,__pbssBANK1
   340  003096  0E40               	movlw	64
   341  003098                     clear_0:
   342  003098  6AEE               	clrf	postinc0,c
   343  00309A  06E8               	decf	wreg,f,c
   344  00309C  E1FD               	bnz	clear_0
   345                           
   346                           ; Clear objects allocated to BANK0 (66 bytes)
   347  00309E  EE00  F0A6         	lfsr	0,__pbssBANK0
   348  0030A2  0E42               	movlw	66
   349  0030A4                     clear_1:
   350  0030A4  6AEE               	clrf	postinc0,c
   351  0030A6  06E8               	decf	wreg,f,c
   352  0030A8  E1FD               	bnz	clear_1
   353                           
   354                           ; Clear objects allocated to COMRAM (14 bytes)
   355  0030AA  EE00  F04F         	lfsr	0,__pbssCOMRAM
   356  0030AE  0E0E               	movlw	14
   357  0030B0                     clear_2:
   358  0030B0  6AEE               	clrf	postinc0,c
   359  0030B2  06E8               	decf	wreg,f,c
   360  0030B4  E1FD               	bnz	clear_2
   361  0030B6                     end_of_initialization:
   362                           	opt stack 0
   363  0030B6                     __end_of__initialization:
   364                           	opt stack 0
   365  0030B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   366  0030B8  6EF8               	movwf	tblptru,c
   367  0030BA  0100               	movlb	0
   368  0030BC  EFD1  F00D         	goto	_main	;jump to C main() function
   369                           tblptru	equ	0xFF8
   370                           tblptrh	equ	0xFF7
   371                           tblptrl	equ	0xFF6
   372                           tablat	equ	0xFF5
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           
   376                           	psect	bssCOMRAM
   377  00004F                     __pbssCOMRAM:
   378                           	opt stack 0
   379  00004F                     _tens:
   380                           	opt stack 0
   381  00004F                     	ds	2
   382  000051                     _rez_adc_U:
   383                           	opt stack 0
   384  000051                     	ds	2
   385  000053                     _tens_A:
   386                           	opt stack 0
   387  000053                     	ds	2
   388  000055                     _rez_adc_A:
   389                           	opt stack 0
   390  000055                     	ds	2
   391  000057                     _c:
   392                           	opt stack 0
   393  000057                     	ds	2
   394  000059                     _duty_boost:
   395                           	opt stack 0
   396  000059                     	ds	2
   397  00005B                     _UQEnd:
   398                           	opt stack 0
   399  00005B                     	ds	1
   400  00005C                     _UQFront:
   401                           	opt stack 0
   402  00005C                     	ds	1
   403                           tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           
   410                           	psect	dataCOMRAM
   411  00005D                     __pdataCOMRAM:
   412                           	opt stack 0
   413  00005D                     _cnt:
   414                           	opt stack 0
   415  00005D                     	ds	2
   416                           tblptru	equ	0xFF8
   417                           tblptrh	equ	0xFF7
   418                           tblptrl	equ	0xFF6
   419                           tablat	equ	0xFF5
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           
   423                           	psect	bssBANK0
   424  0000A6                     __pbssBANK0:
   425                           	opt stack 0
   426  0000A6                     _str:
   427                           	opt stack 0
   428  0000A6                     	ds	20
   429  0000BA                     _Uin:
   430                           	opt stack 0
   431  0000BA                     	ds	2
   432  0000BC                     _Uout:
   433                           	opt stack 0
   434  0000BC                     	ds	2
   435  0000BE                     _Iout:
   436                           	opt stack 0
   437  0000BE                     	ds	2
   438  0000C0                     _data:
   439                           	opt stack 0
   440  0000C0                     	ds	2
   441  0000C2                     _dty_car:
   442                           	opt stack 0
   443  0000C2                     	ds	2
   444  0000C4                     _boost:
   445                           	opt stack 0
   446  0000C4                     	ds	2
   447  0000C6                     _buck:
   448                           	opt stack 0
   449  0000C6                     	ds	2
   450  0000C8                     _dty:
   451                           	opt stack 0
   452  0000C8                     	ds	2
   453  0000CA                     _type:
   454                           	opt stack 0
   455  0000CA                     	ds	2
   456  0000CC                     _adcn:
   457                           	opt stack 0
   458  0000CC                     	ds	2
   459  0000CE                     _adcp:
   460                           	opt stack 0
   461  0000CE                     	ds	2
   462  0000D0                     _d:
   463                           	opt stack 0
   464  0000D0                     	ds	2
   465  0000D2                     _b:
   466                           	opt stack 0
   467  0000D2                     	ds	2
   468  0000D4                     _nt:
   469                           	opt stack 0
   470  0000D4                     	ds	2
   471  0000D6                     _sel_pasi:
   472                           	opt stack 0
   473  0000D6                     	ds	2
   474  0000D8                     _pasi_int:
   475                           	opt stack 0
   476  0000D8                     	ds	2
   477  0000DA                     _start:
   478                           	opt stack 0
   479  0000DA                     	ds	2
   480  0000DC                     _go_stepper:
   481                           	opt stack 0
   482  0000DC                     	ds	2
   483  0000DE                     _directie_2:
   484                           	opt stack 0
   485  0000DE                     	ds	2
   486  0000E0                     _nr_pasi:
   487                           	opt stack 0
   488  0000E0                     	ds	2
   489  0000E2                     _dir:
   490                           	opt stack 0
   491  0000E2                     	ds	2
   492  0000E4                     _pasi:
   493                           	opt stack 0
   494  0000E4                     	ds	2
   495  0000E6                     _duty_buck:
   496                           	opt stack 0
   497  0000E6                     	ds	2
   498                           tblptru	equ	0xFF8
   499                           tblptrh	equ	0xFF7
   500                           tblptrl	equ	0xFF6
   501                           tablat	equ	0xFF5
   502                           postinc0	equ	0xFEE
   503                           wreg	equ	0xFE8
   504                           
   505                           	psect	bssBANK1
   506  000100                     __pbssBANK1:
   507                           	opt stack 0
   508  000100                     _URBuff:
   509                           	opt stack 0
   510  000100                     	ds	64
   511                           tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           
   518                           	psect	cstackBANK0
   519  000060                     __pcstackBANK0:
   520                           	opt stack 0
   521  000060                     _sprintf$1570:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x0
   525  000060                     	ds	3
   526  000063                     sprintf@ap:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x3
   530  000063                     	ds	2
   531  000065                     sprintf@flag:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x5
   535  000065                     	ds	2
   536  000067                     sprintf@val:
   537                           	opt stack 0
   538                           
   539                           ; 4 bytes @ 0x7
   540  000067                     	ds	4
   541  00006B                     sprintf@exp:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0xB
   545  00006B                     	ds	2
   546  00006D                     sprintf@tmpval:
   547                           	opt stack 0
   548                           
   549                           ; 4 bytes @ 0xD
   550  00006D                     	ds	4
   551  000071                     sprintf@prec:
   552                           	opt stack 0
   553                           
   554                           ; 2 bytes @ 0x11
   555  000071                     	ds	2
   556  000073                     sprintf@fval:
   557                           	opt stack 0
   558                           
   559                           ; 3 bytes @ 0x13
   560  000073                     	ds	3
   561  000076                     sprintf@c:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x16
   565  000076                     	ds	1
   566  000077                     main@Power:
   567                           	opt stack 0
   568                           
   569                           ; 3 bytes @ 0x17
   570  000077                     	ds	3
   571  00007A                     main@dty:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x1A
   575  00007A                     	ds	2
   576  00007C                     main@str_A:
   577                           	opt stack 0
   578                           
   579                           ; 8 bytes @ 0x1C
   580  00007C                     	ds	8
   581  000084                     main@str_V:
   582                           	opt stack 0
   583                           
   584                           ; 8 bytes @ 0x24
   585  000084                     	ds	8
   586  00008C                     main@curent:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0x2C
   590  00008C                     	ds	3
   591  00008F                     main@Uin:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0x2F
   595  00008F                     	ds	3
   596  000092                     main@tens_A:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0x32
   600  000092                     	ds	3
   601  000095                     main@Iout:
   602                           	opt stack 0
   603                           
   604                           ; 3 bytes @ 0x35
   605  000095                     	ds	3
   606  000098                     main@Uout:
   607                           	opt stack 0
   608                           
   609                           ; 3 bytes @ 0x38
   610  000098                     	ds	3
   611  00009B                     main@rez_adc_A:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x3B
   615  00009B                     	ds	2
   616  00009D                     main@rez_adc_U:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x3D
   620  00009D                     	ds	2
   621  00009F                     main@c:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x3F
   625  00009F                     	ds	2
   626  0000A1                     main@tens:
   627                           	opt stack 0
   628                           
   629                           ; 3 bytes @ 0x41
   630  0000A1                     	ds	3
   631  0000A4                     main@port:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x44
   635  0000A4                     	ds	2
   636                           tblptru	equ	0xFF8
   637                           tblptrh	equ	0xFF7
   638                           tblptrl	equ	0xFF6
   639                           tablat	equ	0xFF5
   640                           postinc0	equ	0xFEE
   641                           wreg	equ	0xFE8
   642                           
   643                           	psect	cstackCOMRAM
   644  000001                     __pcstackCOMRAM:
   645                           	opt stack 0
   646  000001                     ??_isdigit:
   647  000001                     ??_I2C_Master_Wait:
   648  000001                     ?___awmod:
   649                           	opt stack 0
   650  000001                     ?___ftpack:
   651                           	opt stack 0
   652  000001                     ?___ftneg:
   653                           	opt stack 0
   654  000001                     ?__tdiv_to_l_:
   655                           	opt stack 0
   656  000001                     ?__div_to_l_:
   657                           	opt stack 0
   658  000001                     ?___lldiv:
   659                           	opt stack 0
   660  000001                     ?___llmod:
   661                           	opt stack 0
   662  000001                     ___awmod@dividend:
   663                           	opt stack 0
   664  000001                     __div_to_l_@f1:
   665                           	opt stack 0
   666  000001                     ___ftpack@arg:
   667                           	opt stack 0
   668  000001                     __tdiv_to_l_@f1:
   669                           	opt stack 0
   670  000001                     ___ftge@ff1:
   671                           	opt stack 0
   672  000001                     ___ftneg@f1:
   673                           	opt stack 0
   674  000001                     ___lldiv@dividend:
   675                           	opt stack 0
   676  000001                     ___llmod@dividend:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x0
   680  000001                     	ds	1
   681  000002                     _isdigit$1193:
   682                           	opt stack 0
   683  000002                     I2C_Write_Display@d:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x1
   687  000002                     	ds	1
   688  000003                     isdigit@c:
   689                           	opt stack 0
   690  000003                     ___awmod@divisor:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x2
   694  000003                     	ds	1
   695  000004                     Lcd_Port@data:
   696                           	opt stack 0
   697  000004                     ___ftpack@exp:
   698                           	opt stack 0
   699  000004                     __div_to_l_@f2:
   700                           	opt stack 0
   701  000004                     __tdiv_to_l_@f2:
   702                           	opt stack 0
   703  000004                     ___ftge@ff2:
   704                           	opt stack 0
   705                           
   706                           ; 3 bytes @ 0x3
   707  000004                     	ds	1
   708  000005                     ??_Lcd_Cmd:
   709  000005                     Lcd_Write_Char@a:
   710                           	opt stack 0
   711  000005                     ___awmod@counter:
   712                           	opt stack 0
   713  000005                     ___ftpack@sign:
   714                           	opt stack 0
   715  000005                     ___lldiv@divisor:
   716                           	opt stack 0
   717  000005                     ___llmod@divisor:
   718                           	opt stack 0
   719                           
   720                           ; 4 bytes @ 0x4
   721  000005                     	ds	1
   722  000006                     ??___ftpack:
   723  000006                     Lcd_Write_Char@y:
   724                           	opt stack 0
   725  000006                     ___awmod@sign:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x5
   729  000006                     	ds	1
   730  000007                     ??__tdiv_to_l_:
   731  000007                     ??___ftge:
   732  000007                     ?___awdiv:
   733                           	opt stack 0
   734  000007                     _Lcd_Cmd$813:
   735                           	opt stack 0
   736  000007                     Lcd_Write_Char@temp:
   737                           	opt stack 0
   738  000007                     ___awdiv@dividend:
   739                           	opt stack 0
   740  000007                     __div_to_l_@quot:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0x6
   744  000007                     	ds	1
   745  000008                     Lcd_Cmd@buff:
   746                           	opt stack 0
   747  000008                     Lcd_Write_String@a:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x7
   751  000008                     	ds	1
   752  000009                     ?___awtoft:
   753                           	opt stack 0
   754  000009                     ?___lltoft:
   755                           	opt stack 0
   756  000009                     ___llmod@counter:
   757                           	opt stack 0
   758  000009                     ___awdiv@divisor:
   759                           	opt stack 0
   760  000009                     ___awtoft@c:
   761                           	opt stack 0
   762  000009                     ___lldiv@quotient:
   763                           	opt stack 0
   764  000009                     ___lltoft@c:
   765                           	opt stack 0
   766                           
   767                           ; 4 bytes @ 0x8
   768  000009                     	ds	1
   769  00000A                     ??_Lcd_Write_String:
   770  00000A                     Lcd_Cmd@a:
   771                           	opt stack 0
   772  00000A                     __tdiv_to_l_@quot:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x9
   776  00000A                     	ds	1
   777  00000B                     ??_Lcd_Init:
   778  00000B                     Lcd_Set_Cursor@b:
   779                           	opt stack 0
   780  00000B                     ___awdiv@counter:
   781                           	opt stack 0
   782  00000B                     __div_to_l_@cntr:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0xA
   786  00000B                     	ds	1
   787  00000C                     Lcd_Set_Cursor@a:
   788                           	opt stack 0
   789  00000C                     ___awdiv@sign:
   790                           	opt stack 0
   791  00000C                     ___awtoft@sign:
   792                           	opt stack 0
   793  00000C                     __div_to_l_@exp1:
   794                           	opt stack 0
   795  00000C                     Lcd_Write_String@i:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0xB
   799  00000C                     	ds	1
   800  00000D                     ??___lltoft:
   801  00000D                     ?___ftdiv:
   802                           	opt stack 0
   803  00000D                     Lcd_Set_Cursor@z:
   804                           	opt stack 0
   805  00000D                     ___lldiv@counter:
   806                           	opt stack 0
   807  00000D                     ___awdiv@quotient:
   808                           	opt stack 0
   809  00000D                     ___ftdiv@f1:
   810                           	opt stack 0
   811                           
   812                           ; 3 bytes @ 0xC
   813  00000D                     	ds	1
   814  00000E                     Lcd_Set_Cursor@y:
   815                           	opt stack 0
   816  00000E                     __tdiv_to_l_@cntr:
   817                           	opt stack 0
   818  00000E                     I2C_Master_Init@c:
   819                           	opt stack 0
   820                           
   821                           ; 4 bytes @ 0xD
   822  00000E                     	ds	1
   823  00000F                     ?___wmul:
   824                           	opt stack 0
   825  00000F                     Lcd_Set_Cursor@temp:
   826                           	opt stack 0
   827  00000F                     __tdiv_to_l_@exp1:
   828                           	opt stack 0
   829  00000F                     ___wmul@multiplier:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0xE
   833  00000F                     	ds	1
   834  000010                     ___ftdiv@f2:
   835                           	opt stack 0
   836                           
   837                           ; 3 bytes @ 0xF
   838  000010                     	ds	1
   839  000011                     ___lltoft@exp:
   840                           	opt stack 0
   841  000011                     ___wmul@multiplicand:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x10
   845  000011                     	ds	1
   846  000012                     ??_I2C_Master_Init:
   847                           
   848                           ; 1 bytes @ 0x11
   849  000012                     	ds	1
   850  000013                     ??___ftdiv:
   851  000013                     ___wmul@product:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x12
   855  000013                     	ds	2
   856  000015                     ?___ftmul:
   857                           	opt stack 0
   858  000015                     ___ftmul@f1:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x14
   862  000015                     	ds	1
   863  000016                     ??_init_io_display:
   864  000016                     ___ftdiv@cntr:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x15
   868  000016                     	ds	1
   869  000017                     ___ftdiv@f3:
   870                           	opt stack 0
   871                           
   872                           ; 3 bytes @ 0x16
   873  000017                     	ds	1
   874  000018                     ___ftmul@f2:
   875                           	opt stack 0
   876                           
   877                           ; 3 bytes @ 0x17
   878  000018                     	ds	2
   879  00001A                     ___ftdiv@exp:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x19
   883  00001A                     	ds	1
   884  00001B                     ??___ftmul:
   885  00001B                     ___ftdiv@sign:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x1A
   889  00001B                     	ds	3
   890  00001E                     ___ftmul@exp:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x1D
   894  00001E                     	ds	1
   895  00001F                     ___ftmul@f3_as_product:
   896                           	opt stack 0
   897                           
   898                           ; 3 bytes @ 0x1E
   899  00001F                     	ds	3
   900  000022                     ___ftmul@cntr:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x21
   904  000022                     	ds	1
   905  000023                     ___ftmul@sign:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x22
   909  000023                     	ds	1
   910  000024                     ?_fround:
   911                           	opt stack 0
   912  000024                     ?_scale:
   913                           	opt stack 0
   914                           
   915                           ; 3 bytes @ 0x23
   916  000024                     	ds	3
   917  000027                     _fround$1568:
   918                           	opt stack 0
   919  000027                     _scale$1569:
   920                           	opt stack 0
   921                           
   922                           ; 3 bytes @ 0x26
   923  000027                     	ds	3
   924  00002A                     scale@scl:
   925                           	opt stack 0
   926  00002A                     _fround$1567:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x29
   930  00002A                     	ds	1
   931  00002B                     ?___fttol:
   932                           	opt stack 0
   933  00002B                     ___fttol@f1:
   934                           	opt stack 0
   935                           
   936                           ; 3 bytes @ 0x2A
   937  00002B                     	ds	2
   938  00002D                     fround@prec:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x2C
   942  00002D                     	ds	1
   943  00002E                     ?___ftadd:
   944                           	opt stack 0
   945  00002E                     ___ftadd@f1:
   946                           	opt stack 0
   947                           
   948                           ; 3 bytes @ 0x2D
   949  00002E                     	ds	1
   950  00002F                     ??___fttol:
   951                           
   952                           ; 1 bytes @ 0x2E
   953  00002F                     	ds	2
   954  000031                     ___ftadd@f2:
   955                           	opt stack 0
   956                           
   957                           ; 3 bytes @ 0x30
   958  000031                     	ds	3
   959  000034                     ??___ftadd:
   960  000034                     ___fttol@sign1:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x33
   964  000034                     	ds	1
   965  000035                     ___fttol@lval:
   966                           	opt stack 0
   967                           
   968                           ; 4 bytes @ 0x34
   969  000035                     	ds	2
   970  000037                     ___ftadd@sign:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x36
   974  000037                     	ds	1
   975  000038                     ___ftadd@exp2:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x37
   979  000038                     	ds	1
   980  000039                     ___ftadd@exp1:
   981                           	opt stack 0
   982  000039                     ___fttol@exp1:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x38
   986  000039                     	ds	1
   987  00003A                     ??_read_Uout:
   988  00003A                     ??_read_Iout:
   989  00003A                     ??_read_Uin:
   990  00003A                     ?___ftsub:
   991                           	opt stack 0
   992  00003A                     ___ftsub@f1:
   993                           	opt stack 0
   994                           
   995                           ; 3 bytes @ 0x39
   996  00003A                     	ds	3
   997  00003D                     ___ftsub@f2:
   998                           	opt stack 0
   999                           
  1000                           ; 3 bytes @ 0x3C
  1001  00003D                     	ds	3
  1002  000040                     ?_sprintf:
  1003                           	opt stack 0
  1004  000040                     sprintf@sp:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x3F
  1008  000040                     	ds	2
  1009  000042                     sprintf@f:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x41
  1013  000042                     	ds	5
  1014  000047                     ??_sprintf:
  1015                           
  1016                           ; 1 bytes @ 0x46
  1017  000047                     	ds	6
  1018  00004D                     ??_main:
  1019                           
  1020                           ; 1 bytes @ 0x4C
  1021  00004D                     	ds	2
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           
  1029 ;;
  1030 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1031 ;;
  1032 ;; *************** function _main *****************
  1033 ;; Defined at:
  1034 ;;		line 24 in file "main.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;		None
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;  pwm_buffer     20    0        unsigned char [20]
  1039 ;;  str_V           8   36[BANK0 ] unsigned char [8]
  1040 ;;  str_A           8   28[BANK0 ] unsigned char [8]
  1041 ;;  str_P           8    0        unsigned char [8]
  1042 ;;  tens            3   65[BANK0 ] float 
  1043 ;;  Uout            3   56[BANK0 ] float 
  1044 ;;  Iout            3   53[BANK0 ] float 
  1045 ;;  tens_A          3   50[BANK0 ] float 
  1046 ;;  Uin             3   47[BANK0 ] float 
  1047 ;;  curent          3   44[BANK0 ] float 
  1048 ;;  Power           3   23[BANK0 ] float 
  1049 ;;  numar           3    0        float 
  1050 ;;  port            2   68[BANK0 ] int 
  1051 ;;  c               2   63[BANK0 ] int 
  1052 ;;  rez_adc_U       2   61[BANK0 ] int 
  1053 ;;  rez_adc_A       2   59[BANK0 ] int 
  1054 ;;  dty             2   26[BANK0 ] int 
  1055 ;;  tip             2    0        int 
  1056 ;;  rez_adc         2    0        int 
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1067 ;;      Locals:         0      47       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1068 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Totals:         2      47       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;Total ram usage:       49 bytes
  1071 ;; Hardware stack levels required when called:    6
  1072 ;; This function calls:
  1073 ;;		_Lcd_Clear
  1074 ;;		_Lcd_Set_Cursor
  1075 ;;		_Lcd_Write_String
  1076 ;;		___awtoft
  1077 ;;		___ftdiv
  1078 ;;		___ftge
  1079 ;;		___ftmul
  1080 ;;		_adc_config
  1081 ;;		_config
  1082 ;;		_init_io_display
  1083 ;;		_pwm_config
  1084 ;;		_read_Iout
  1085 ;;		_read_Uin
  1086 ;;		_read_Uout
  1087 ;;		_sprintf
  1088 ;; This function is called by:
  1089 ;;		Startup code after reset
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text0
  1094  001BA2                     __ptext0:
  1095                           	opt stack 0
  1096  001BA2                     _main:
  1097                           	opt stack 25
  1098                           
  1099                           ;main.c: 27: char pwm_buffer[20];
  1100                           ;main.c: 28: config();
  1101                           
  1102                           ;incstack = 0
  1103  001BA2  ECC3  F017         	call	_config	;wreg free
  1104                           
  1105                           ;main.c: 29: pwm_config();
  1106  001BA6  EC9C  F018         	call	_pwm_config	;wreg free
  1107                           
  1108                           ;main.c: 30: adc_config();
  1109  001BAA  ECF5  F018         	call	_adc_config	;wreg free
  1110                           
  1111                           ;main.c: 31: init_io_display();
  1112  001BAE  ECD3  F016         	call	_init_io_display	;wreg free
  1113                           
  1114                           ;main.c: 32: char str_V[8],str_A[8],str_P[8];
  1115                           ;main.c: 33: float tens,tens_A,curent,Power,Iout,Uout,Uin;
  1116                           ;main.c: 34: int rez_adc_A,rez_adc_U;
  1117                           ;main.c: 35: int dty,rez_adc,tip,port,c=100;
  1118  001BB2  0E00               	movlw	0
  1119  001BB4  0100               	movlb	0	; () banked
  1120  001BB6  6FA0               	movwf	(main@c+1)& (0+255),b
  1121  001BB8  0E64               	movlw	100
  1122  001BBA  6F9F               	movwf	main@c& (0+255),b
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;main.c: 36: float numar;
  1126                           ;main.c: 37: dty=0;
  1127  001BBC  0E00               	movlw	0
  1128  001BBE  6F7B               	movwf	(main@dty+1)& (0+255),b
  1129  001BC0  0E00               	movlw	0
  1130  001BC2  6F7A               	movwf	main@dty& (0+255),b
  1131                           
  1132                           ; BSR set to: 0
  1133                           ;main.c: 38: port=0;
  1134  001BC4  0E00               	movlw	0
  1135  001BC6  6FA5               	movwf	(main@port+1)& (0+255),b
  1136  001BC8  0E00               	movlw	0
  1137  001BCA  6FA4               	movwf	main@port& (0+255),b
  1138                           
  1139                           ; BSR set to: 0
  1140                           ;main.c: 39: TRISDbits.RD4=0;
  1141  001BCC  9895               	bcf	3989,4,c	;volatile
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;main.c: 40: LATDbits.LD6=0;
  1145  001BCE  9C8C               	bcf	3980,6,c	;volatile
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;main.c: 41: LATDbits.LD7=0;
  1149  001BD0  9E8C               	bcf	3980,7,c	;volatile
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;main.c: 42: LATDbits.LD5=0;
  1153  001BD2  9A8C               	bcf	3980,5,c	;volatile
  1154                           
  1155                           ; BSR set to: 0
  1156                           ;main.c: 43: LATDbits.LD4=0;
  1157  001BD4  988C               	bcf	3980,4,c	;volatile
  1158                           
  1159                           ; BSR set to: 0
  1160                           ;main.c: 46: ADCON0=0b00010011;
  1161  001BD6  0E13               	movlw	19
  1162  001BD8  6EC2               	movwf	4034,c	;volatile
  1163                           
  1164                           ; BSR set to: 0
  1165                           ;main.c: 48: Lcd_Clear();
  1166  001BDA  EC0B  F019         	call	_Lcd_Clear	;wreg free
  1167  001BDE                     
  1168                           ;main.c: 59: {
  1169                           ;main.c: 60: read_Uout();
  1170  001BDE  EC0E  F014         	call	_read_Uout	;wreg free
  1171                           
  1172                           ;main.c: 62: Lcd_Set_Cursor(1,1);
  1173  001BE2  0E01               	movlw	1
  1174  001BE4  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1175  001BE6  0E01               	movlw	1
  1176  001BE8  ECED  F017         	call	_Lcd_Set_Cursor
  1177                           
  1178                           ;main.c: 63: Lcd_Write_String("U=");
  1179  001BEC  0E88               	movlw	low STR_1
  1180  001BEE  6E08               	movwf	Lcd_Write_String@a,c
  1181  001BF0  0E10               	movlw	high STR_1
  1182  001BF2  6E09               	movwf	Lcd_Write_String@a+1,c
  1183  001BF4  EC60  F016         	call	_Lcd_Write_String	;wreg free
  1184                           
  1185                           ;main.c: 64: sprintf(str_V, "%.2f", tens);
  1186  001BF8  0E84               	movlw	low main@str_V
  1187  001BFA  6E40               	movwf	sprintf@sp,c
  1188  001BFC  0E00               	movlw	high main@str_V
  1189  001BFE  6E41               	movwf	sprintf@sp+1,c
  1190  001C00  0E7C               	movlw	low STR_2
  1191  001C02  6E42               	movwf	sprintf@f,c
  1192  001C04  0E10               	movlw	high STR_2
  1193  001C06  6E43               	movwf	sprintf@f+1,c
  1194  001C08  C0A1  F044         	movff	main@tens,?_sprintf+4
  1195  001C0C  C0A2  F045         	movff	main@tens+1,?_sprintf+5
  1196  001C10  C0A3  F046         	movff	main@tens+2,?_sprintf+6
  1197  001C14  EC49  F008         	call	_sprintf	;wreg free
  1198                           
  1199                           ;main.c: 65: Lcd_Set_Cursor(1,3);
  1200  001C18  0E03               	movlw	3
  1201  001C1A  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1202  001C1C  0E01               	movlw	1
  1203  001C1E  ECED  F017         	call	_Lcd_Set_Cursor
  1204                           
  1205                           ;main.c: 66: Lcd_Write_String(str_V);
  1206  001C22  0E84               	movlw	low main@str_V
  1207  001C24  6E08               	movwf	Lcd_Write_String@a,c
  1208  001C26  0E00               	movlw	high main@str_V
  1209  001C28  6E09               	movwf	Lcd_Write_String@a+1,c
  1210  001C2A  EC60  F016         	call	_Lcd_Write_String	;wreg free
  1211                           
  1212                           ;main.c: 67: port=1;
  1213  001C2E  0E00               	movlw	0
  1214  001C30  0100               	movlb	0	; () banked
  1215  001C32  6FA5               	movwf	(main@port+1)& (0+255),b
  1216  001C34  0E01               	movlw	1
  1217  001C36  6FA4               	movwf	main@port& (0+255),b
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 68: _delay((unsigned long)((100)*(64000000/4000.0)));
  1221  001C38  0E09               	movlw	9
  1222  001C3A  6E4E               	movwf	(??_main+1)& (0+255),c
  1223  001C3C  0E1E               	movlw	30
  1224  001C3E  6E4D               	movwf	??_main& (0+255),c
  1225  001C40  0EE4               	movlw	228
  1226  001C42                     u2967:
  1227  001C42  2EE8               	decfsz	wreg,f,c
  1228  001C44  D7FE               	bra	u2967
  1229  001C46  2E4D               	decfsz	??_main& (0+255),f,c
  1230  001C48  D7FC               	bra	u2967
  1231  001C4A  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1232  001C4C  D7FA               	bra	u2967
  1233  001C4E  D000               	nop2	
  1234                           
  1235                           ;main.c: 69: ADRESH=0X00;
  1236  001C50  0E00               	movlw	0
  1237  001C52  6EC4               	movwf	4036,c	;volatile
  1238                           
  1239                           ;main.c: 70: _delay((unsigned long)((100)*(64000000/4000.0)));
  1240  001C54  0E09               	movlw	9
  1241  001C56  6E4E               	movwf	(??_main+1)& (0+255),c
  1242  001C58  0E1E               	movlw	30
  1243  001C5A  6E4D               	movwf	??_main& (0+255),c
  1244  001C5C  0EE4               	movlw	228
  1245  001C5E                     u2977:
  1246  001C5E  2EE8               	decfsz	wreg,f,c
  1247  001C60  D7FE               	bra	u2977
  1248  001C62  2E4D               	decfsz	??_main& (0+255),f,c
  1249  001C64  D7FC               	bra	u2977
  1250  001C66  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1251  001C68  D7FA               	bra	u2977
  1252  001C6A  D000               	nop2	
  1253                           
  1254                           ;main.c: 74: {
  1255                           ;main.c: 75: read_Iout();
  1256  001C6C  ECE4  F015         	call	_read_Iout	;wreg free
  1257                           
  1258                           ;main.c: 77: Lcd_Set_Cursor(2,1);
  1259  001C70  0E01               	movlw	1
  1260  001C72  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1261  001C74  0E02               	movlw	2
  1262  001C76  ECED  F017         	call	_Lcd_Set_Cursor
  1263                           
  1264                           ;main.c: 78: Lcd_Write_String("I=");
  1265  001C7A  0E85               	movlw	low STR_3
  1266  001C7C  6E08               	movwf	Lcd_Write_String@a,c
  1267  001C7E  0E10               	movlw	high STR_3
  1268  001C80  6E09               	movwf	Lcd_Write_String@a+1,c
  1269  001C82  EC60  F016         	call	_Lcd_Write_String	;wreg free
  1270                           
  1271                           ;main.c: 79: sprintf(str_A, "%.2f", curent);
  1272  001C86  0E7C               	movlw	low main@str_A
  1273  001C88  6E40               	movwf	sprintf@sp,c
  1274  001C8A  0E00               	movlw	high main@str_A
  1275  001C8C  6E41               	movwf	sprintf@sp+1,c
  1276  001C8E  0E7C               	movlw	low STR_2
  1277  001C90  6E42               	movwf	sprintf@f,c
  1278  001C92  0E10               	movlw	high STR_2
  1279  001C94  6E43               	movwf	sprintf@f+1,c
  1280  001C96  C08C  F044         	movff	main@curent,?_sprintf+4
  1281  001C9A  C08D  F045         	movff	main@curent+1,?_sprintf+5
  1282  001C9E  C08E  F046         	movff	main@curent+2,?_sprintf+6
  1283  001CA2  EC49  F008         	call	_sprintf	;wreg free
  1284                           
  1285                           ;main.c: 80: Lcd_Set_Cursor(2,3);
  1286  001CA6  0E03               	movlw	3
  1287  001CA8  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1288  001CAA  0E02               	movlw	2
  1289  001CAC  ECED  F017         	call	_Lcd_Set_Cursor
  1290                           
  1291                           ;main.c: 81: Lcd_Write_String(str_A);
  1292  001CB0  0E7C               	movlw	low main@str_A
  1293  001CB2  6E08               	movwf	Lcd_Write_String@a,c
  1294  001CB4  0E00               	movlw	high main@str_A
  1295  001CB6  6E09               	movwf	Lcd_Write_String@a+1,c
  1296  001CB8  EC60  F016         	call	_Lcd_Write_String	;wreg free
  1297                           
  1298                           ;main.c: 82: Lcd_Write_String(" A");
  1299  001CBC  0E8B               	movlw	low STR_5
  1300  001CBE  6E08               	movwf	Lcd_Write_String@a,c
  1301  001CC0  0E10               	movlw	high STR_5
  1302  001CC2  6E09               	movwf	Lcd_Write_String@a+1,c
  1303  001CC4  EC60  F016         	call	_Lcd_Write_String	;wreg free
  1304                           
  1305                           ;main.c: 83: port=2;
  1306  001CC8  0E00               	movlw	0
  1307  001CCA  0100               	movlb	0	; () banked
  1308  001CCC  6FA5               	movwf	(main@port+1)& (0+255),b
  1309  001CCE  0E02               	movlw	2
  1310  001CD0  6FA4               	movwf	main@port& (0+255),b
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 84: _delay((unsigned long)((100)*(64000000/4000.0)));
  1314  001CD2  0E09               	movlw	9
  1315  001CD4  6E4E               	movwf	(??_main+1)& (0+255),c
  1316  001CD6  0E1E               	movlw	30
  1317  001CD8  6E4D               	movwf	??_main& (0+255),c
  1318  001CDA  0EE4               	movlw	228
  1319  001CDC                     u2987:
  1320  001CDC  2EE8               	decfsz	wreg,f,c
  1321  001CDE  D7FE               	bra	u2987
  1322  001CE0  2E4D               	decfsz	??_main& (0+255),f,c
  1323  001CE2  D7FC               	bra	u2987
  1324  001CE4  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1325  001CE6  D7FA               	bra	u2987
  1326  001CE8  D000               	nop2	
  1327                           
  1328                           ;main.c: 85: ADRESH=0X00;
  1329  001CEA  0E00               	movlw	0
  1330  001CEC  6EC4               	movwf	4036,c	;volatile
  1331                           
  1332                           ;main.c: 86: _delay((unsigned long)((100)*(64000000/4000.0)));
  1333  001CEE  0E09               	movlw	9
  1334  001CF0  6E4E               	movwf	(??_main+1)& (0+255),c
  1335  001CF2  0E1E               	movlw	30
  1336  001CF4  6E4D               	movwf	??_main& (0+255),c
  1337  001CF6  0EE4               	movlw	228
  1338  001CF8                     u2997:
  1339  001CF8  2EE8               	decfsz	wreg,f,c
  1340  001CFA  D7FE               	bra	u2997
  1341  001CFC  2E4D               	decfsz	??_main& (0+255),f,c
  1342  001CFE  D7FC               	bra	u2997
  1343  001D00  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1344  001D02  D7FA               	bra	u2997
  1345  001D04  D000               	nop2	
  1346                           
  1347                           ;main.c: 89: {
  1348                           ;main.c: 90: read_Uin();
  1349  001D06  EC68  F014         	call	_read_Uin	;wreg free
  1350                           
  1351                           ;main.c: 92: Lcd_Set_Cursor(1,9);
  1352  001D0A  0E09               	movlw	9
  1353  001D0C  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1354  001D0E  0E01               	movlw	1
  1355  001D10  ECED  F017         	call	_Lcd_Set_Cursor
  1356                           
  1357                           ;main.c: 93: Lcd_Write_String("Ui=");
  1358  001D14  0E81               	movlw	low STR_6
  1359  001D16  6E08               	movwf	Lcd_Write_String@a,c
  1360  001D18  0E10               	movlw	high STR_6
  1361  001D1A  6E09               	movwf	Lcd_Write_String@a+1,c
  1362  001D1C  EC60  F016         	call	_Lcd_Write_String	;wreg free
  1363                           
  1364                           ;main.c: 94: sprintf(str_V, "%.2f", tens);
  1365  001D20  0E84               	movlw	low main@str_V
  1366  001D22  6E40               	movwf	sprintf@sp,c
  1367  001D24  0E00               	movlw	high main@str_V
  1368  001D26  6E41               	movwf	sprintf@sp+1,c
  1369  001D28  0E7C               	movlw	low STR_2
  1370  001D2A  6E42               	movwf	sprintf@f,c
  1371  001D2C  0E10               	movlw	high STR_2
  1372  001D2E  6E43               	movwf	sprintf@f+1,c
  1373  001D30  C0A1  F044         	movff	main@tens,?_sprintf+4
  1374  001D34  C0A2  F045         	movff	main@tens+1,?_sprintf+5
  1375  001D38  C0A3  F046         	movff	main@tens+2,?_sprintf+6
  1376  001D3C  EC49  F008         	call	_sprintf	;wreg free
  1377                           
  1378                           ;main.c: 95: Lcd_Set_Cursor(1,12);
  1379  001D40  0E0C               	movlw	12
  1380  001D42  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1381  001D44  0E01               	movlw	1
  1382  001D46  ECED  F017         	call	_Lcd_Set_Cursor
  1383                           
  1384                           ;main.c: 96: Lcd_Write_String(str_V);
  1385  001D4A  0E84               	movlw	low main@str_V
  1386  001D4C  6E08               	movwf	Lcd_Write_String@a,c
  1387  001D4E  0E00               	movlw	high main@str_V
  1388  001D50  6E09               	movwf	Lcd_Write_String@a+1,c
  1389  001D52  EC60  F016         	call	_Lcd_Write_String	;wreg free
  1390                           
  1391                           ;main.c: 97: Lcd_Write_String(" V");
  1392  001D56  0E8E               	movlw	low STR_8
  1393  001D58  6E08               	movwf	Lcd_Write_String@a,c
  1394  001D5A  0E10               	movlw	high STR_8
  1395  001D5C  6E09               	movwf	Lcd_Write_String@a+1,c
  1396  001D5E  EC60  F016         	call	_Lcd_Write_String	;wreg free
  1397                           
  1398                           ;main.c: 98: port=0;
  1399  001D62  0E00               	movlw	0
  1400  001D64  0100               	movlb	0	; () banked
  1401  001D66  6FA5               	movwf	(main@port+1)& (0+255),b
  1402  001D68  0E00               	movlw	0
  1403  001D6A  6FA4               	movwf	main@port& (0+255),b
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;main.c: 99: _delay((unsigned long)((100)*(64000000/4000.0)));
  1407  001D6C  0E09               	movlw	9
  1408  001D6E  6E4E               	movwf	(??_main+1)& (0+255),c
  1409  001D70  0E1E               	movlw	30
  1410  001D72  6E4D               	movwf	??_main& (0+255),c
  1411  001D74  0EE4               	movlw	228
  1412  001D76                     u3007:
  1413  001D76  2EE8               	decfsz	wreg,f,c
  1414  001D78  D7FE               	bra	u3007
  1415  001D7A  2E4D               	decfsz	??_main& (0+255),f,c
  1416  001D7C  D7FC               	bra	u3007
  1417  001D7E  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1418  001D80  D7FA               	bra	u3007
  1419  001D82  D000               	nop2	
  1420                           
  1421                           ;main.c: 100: ADRESH=0X00;
  1422  001D84  0E00               	movlw	0
  1423  001D86  6EC4               	movwf	4036,c	;volatile
  1424                           
  1425                           ;main.c: 101: _delay((unsigned long)((100)*(64000000/4000.0)));
  1426  001D88  0E09               	movlw	9
  1427  001D8A  6E4E               	movwf	(??_main+1)& (0+255),c
  1428  001D8C  0E1E               	movlw	30
  1429  001D8E  6E4D               	movwf	??_main& (0+255),c
  1430  001D90  0EE4               	movlw	228
  1431  001D92                     u3017:
  1432  001D92  2EE8               	decfsz	wreg,f,c
  1433  001D94  D7FE               	bra	u3017
  1434  001D96  2E4D               	decfsz	??_main& (0+255),f,c
  1435  001D98  D7FC               	bra	u3017
  1436  001D9A  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1437  001D9C  D7FA               	bra	u3017
  1438  001D9E  D000               	nop2	
  1439                           
  1440                           ;main.c: 102: }
  1441                           ;main.c: 105: if(Uin<12)
  1442  001DA0  C08F  F001         	movff	main@Uin,___ftge@ff1
  1443  001DA4  C090  F002         	movff	main@Uin+1,___ftge@ff1+1
  1444  001DA8  C091  F003         	movff	main@Uin+2,___ftge@ff1+2
  1445  001DAC  0E00               	movlw	0
  1446  001DAE  6E04               	movwf	___ftge@ff2,c
  1447  001DB0  0E40               	movlw	64
  1448  001DB2  6E05               	movwf	___ftge@ff2+1,c
  1449  001DB4  0E41               	movlw	65
  1450  001DB6  6E06               	movwf	___ftge@ff2+2,c
  1451  001DB8  EC19  F015         	call	___ftge	;wreg free
  1452  001DBC  B0D8               	btfsc	status,0,c
  1453  001DBE  D70F               	goto	l67
  1454                           
  1455                           ;main.c: 106: {
  1456                           ;main.c: 107: CCPR1L=0;
  1457  001DC0  0E00               	movlw	0
  1458  001DC2  6EBE               	movwf	4030,c	;volatile
  1459                           
  1460                           ;main.c: 108: Power=Uout*Iout;
  1461  001DC4  C098  F015         	movff	main@Uout,___ftmul@f1
  1462  001DC8  C099  F016         	movff	main@Uout+1,___ftmul@f1+1
  1463  001DCC  C09A  F017         	movff	main@Uout+2,___ftmul@f1+2
  1464  001DD0  C095  F018         	movff	main@Iout,___ftmul@f2
  1465  001DD4  C096  F019         	movff	main@Iout+1,___ftmul@f2+1
  1466  001DD8  C097  F01A         	movff	main@Iout+2,___ftmul@f2+2
  1467  001DDC  EC21  F013         	call	___ftmul	;wreg free
  1468  001DE0  C015  F077         	movff	?___ftmul,main@Power
  1469  001DE4  C016  F078         	movff	?___ftmul+1,main@Power+1
  1470  001DE8  C017  F079         	movff	?___ftmul+2,main@Power+2
  1471                           
  1472                           ;main.c: 109: CCPR2L=c;
  1473  001DEC  C09F  FF67         	movff	main@c,3943	;volatile
  1474                           
  1475                           ;main.c: 110: ADCON0=0b00001011;
  1476  001DF0  0E0B               	movlw	11
  1477  001DF2  6EC2               	movwf	4034,c	;volatile
  1478                           
  1479                           ;main.c: 111: _delay((unsigned long)((10)*(64000000/4000.0)));
  1480  001DF4  0ED0               	movlw	208
  1481  001DF6  6E4D               	movwf	??_main& (0+255),c
  1482  001DF8  0ECA               	movlw	202
  1483  001DFA                     u3027:
  1484  001DFA  2EE8               	decfsz	wreg,f,c
  1485  001DFC  D7FE               	bra	u3027
  1486  001DFE  2E4D               	decfsz	??_main& (0+255),f,c
  1487  001E00  D7FC               	bra	u3027
  1488                           
  1489                           ;main.c: 112: ADCON0bits.GO=1;
  1490  001E02  82C2               	bsf	4034,1,c	;volatile
  1491                           
  1492                           ;main.c: 113: _delay((unsigned long)((100)*(64000000/4000.0)));
  1493  001E04  0E09               	movlw	9
  1494  001E06  6E4E               	movwf	(??_main+1)& (0+255),c
  1495  001E08  0E1E               	movlw	30
  1496  001E0A  6E4D               	movwf	??_main& (0+255),c
  1497  001E0C  0EE4               	movlw	228
  1498  001E0E                     u3037:
  1499  001E0E  2EE8               	decfsz	wreg,f,c
  1500  001E10  D7FE               	bra	u3037
  1501  001E12  2E4D               	decfsz	??_main& (0+255),f,c
  1502  001E14  D7FC               	bra	u3037
  1503  001E16  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1504  001E18  D7FA               	bra	u3037
  1505  001E1A  D000               	nop2	
  1506                           
  1507                           ;main.c: 114: rez_adc_A=ADRESH;
  1508  001E1C  CFC4 F09B          	movff	4036,main@rez_adc_A	;volatile
  1509  001E20  0100               	movlb	0	; () banked
  1510  001E22  6B9C               	clrf	(main@rez_adc_A+1)& (0+255),b
  1511                           
  1512                           ;main.c: 115: tens_A=rez_adc_A*0.0181372549019608;
  1513  001E24  C09B  F009         	movff	main@rez_adc_A,___awtoft@c
  1514  001E28  C09C  F00A         	movff	main@rez_adc_A+1,___awtoft@c+1
  1515  001E2C  EC80  F018         	call	___awtoft	;wreg free
  1516  001E30  C009  F015         	movff	?___awtoft,___ftmul@f1
  1517  001E34  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  1518  001E38  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  1519  001E3C  0E95               	movlw	149
  1520  001E3E  6E18               	movwf	___ftmul@f2,c
  1521  001E40  0E94               	movlw	148
  1522  001E42  6E19               	movwf	___ftmul@f2+1,c
  1523  001E44  0E3C               	movlw	60
  1524  001E46  6E1A               	movwf	___ftmul@f2+2,c
  1525  001E48  EC21  F013         	call	___ftmul	;wreg free
  1526  001E4C  C015  F092         	movff	?___ftmul,main@tens_A
  1527  001E50  C016  F093         	movff	?___ftmul+1,main@tens_A+1
  1528  001E54  C017  F094         	movff	?___ftmul+2,main@tens_A+2
  1529                           
  1530                           ;main.c: 116: Iout=tens_A;
  1531  001E58  C092  F095         	movff	main@tens_A,main@Iout
  1532  001E5C  C093  F096         	movff	main@tens_A+1,main@Iout+1
  1533  001E60  C094  F097         	movff	main@tens_A+2,main@Iout+2
  1534                           
  1535                           ;main.c: 118: ADCON0=0b00000111;
  1536  001E64  0E07               	movlw	7
  1537  001E66  6EC2               	movwf	4034,c	;volatile
  1538                           
  1539                           ;main.c: 119: _delay((unsigned long)((10)*(64000000/4000.0)));
  1540  001E68  0ED0               	movlw	208
  1541  001E6A  6E4D               	movwf	??_main& (0+255),c
  1542  001E6C  0ECA               	movlw	202
  1543  001E6E                     u3047:
  1544  001E6E  2EE8               	decfsz	wreg,f,c
  1545  001E70  D7FE               	bra	u3047
  1546  001E72  2E4D               	decfsz	??_main& (0+255),f,c
  1547  001E74  D7FC               	bra	u3047
  1548                           
  1549                           ;main.c: 120: ADCON0bits.GO=1;
  1550  001E76  82C2               	bsf	4034,1,c	;volatile
  1551                           
  1552                           ;main.c: 121: _delay((unsigned long)((100)*(64000000/4000.0)));
  1553  001E78  0E09               	movlw	9
  1554  001E7A  6E4E               	movwf	(??_main+1)& (0+255),c
  1555  001E7C  0E1E               	movlw	30
  1556  001E7E  6E4D               	movwf	??_main& (0+255),c
  1557  001E80  0EE4               	movlw	228
  1558  001E82                     u3057:
  1559  001E82  2EE8               	decfsz	wreg,f,c
  1560  001E84  D7FE               	bra	u3057
  1561  001E86  2E4D               	decfsz	??_main& (0+255),f,c
  1562  001E88  D7FC               	bra	u3057
  1563  001E8A  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1564  001E8C  D7FA               	bra	u3057
  1565  001E8E  D000               	nop2	
  1566                           
  1567                           ;main.c: 122: rez_adc_U=ADRESH;
  1568  001E90  CFC4 F09D          	movff	4036,main@rez_adc_U	;volatile
  1569  001E94  0100               	movlb	0	; () banked
  1570  001E96  6B9E               	clrf	(main@rez_adc_U+1)& (0+255),b
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;main.c: 123: tens=rez_adc_U*0.01953125;
  1574  001E98  C09D  F009         	movff	main@rez_adc_U,___awtoft@c
  1575  001E9C  C09E  F00A         	movff	main@rez_adc_U+1,___awtoft@c+1
  1576  001EA0  EC80  F018         	call	___awtoft	;wreg free
  1577  001EA4  C009  F015         	movff	?___awtoft,___ftmul@f1
  1578  001EA8  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  1579  001EAC  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  1580  001EB0  0E00               	movlw	0
  1581  001EB2  6E18               	movwf	___ftmul@f2,c
  1582  001EB4  0EA0               	movlw	160
  1583  001EB6  6E19               	movwf	___ftmul@f2+1,c
  1584  001EB8  0E3C               	movlw	60
  1585  001EBA  6E1A               	movwf	___ftmul@f2+2,c
  1586  001EBC  EC21  F013         	call	___ftmul	;wreg free
  1587  001EC0  C015  F0A1         	movff	?___ftmul,main@tens
  1588  001EC4  C016  F0A2         	movff	?___ftmul+1,main@tens+1
  1589  001EC8  C017  F0A3         	movff	?___ftmul+2,main@tens+2
  1590                           
  1591                           ;main.c: 124: Uout=tens/0.25;
  1592  001ECC  C0A1  F00D         	movff	main@tens,___ftdiv@f1
  1593  001ED0  C0A2  F00E         	movff	main@tens+1,___ftdiv@f1+1
  1594  001ED4  C0A3  F00F         	movff	main@tens+2,___ftdiv@f1+2
  1595  001ED8  0E00               	movlw	0
  1596  001EDA  6E10               	movwf	___ftdiv@f2,c
  1597  001EDC  0E80               	movlw	128
  1598  001EDE  6E11               	movwf	___ftdiv@f2+1,c
  1599  001EE0  0E3E               	movlw	62
  1600  001EE2  6E12               	movwf	___ftdiv@f2+2,c
  1601  001EE4  EC9B  F013         	call	___ftdiv	;wreg free
  1602  001EE8  C00D  F098         	movff	?___ftdiv,main@Uout
  1603  001EEC  C00E  F099         	movff	?___ftdiv+1,main@Uout+1
  1604  001EF0  C00F  F09A         	movff	?___ftdiv+2,main@Uout+2
  1605  001EF4  D674               	goto	l67
  1606  001EF6                     __end_of_main:
  1607                           	opt stack 0
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           status	equ	0xFD8
  1615                           
  1616 ;; *************** function _sprintf *****************
  1617 ;; Defined at:
  1618 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1621 ;;		 -> main@str_A(8), main@str_V(8), 
  1622 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1623 ;;		 -> STR_7(5), STR_4(5), STR_2(5), 
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;  tmpval          4   13[BANK0 ] struct .
  1626 ;;  val             4    7[BANK0 ] unsigned long 
  1627 ;;  fval            3   19[BANK0 ] unsigned long 
  1628 ;;  cp              3    0        PTR const unsigned char 
  1629 ;;  prec            2   17[BANK0 ] int 
  1630 ;;  exp             2   11[BANK0 ] int 
  1631 ;;  flag            2    5[BANK0 ] unsigned short 
  1632 ;;  ap              2    3[BANK0 ] PTR void [1]
  1633 ;;		 -> ?_sprintf(2), 
  1634 ;;  len             2    0        unsigned int 
  1635 ;;  width           2    0        int 
  1636 ;;  c               1   22[BANK0 ] char 
  1637 ;;  d               1    0        unsigned char 
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  2   63[COMRAM] int 
  1640 ;; Registers used:
  1641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 0/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1647 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1650 ;;      Totals:        13      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1651 ;;Total ram usage:       36 bytes
  1652 ;; Hardware stack levels used:    1
  1653 ;; Hardware stack levels required when called:    3
  1654 ;; This function calls:
  1655 ;;		___awdiv
  1656 ;;		___ftadd
  1657 ;;		___ftge
  1658 ;;		___ftmul
  1659 ;;		___ftneg
  1660 ;;		___ftsub
  1661 ;;		___fttol
  1662 ;;		___lldiv
  1663 ;;		___llmod
  1664 ;;		___lltoft
  1665 ;;		___wmul
  1666 ;;		__div_to_l_
  1667 ;;		__tdiv_to_l_
  1668 ;;		_fround
  1669 ;;		_isdigit
  1670 ;;		_scale
  1671 ;; This function is called by:
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           	psect	text1
  1677  001092                     __ptext1:
  1678                           	opt stack 0
  1679  001092                     _sprintf:
  1680                           	opt stack 27
  1681                           
  1682                           ;doprnt.c: 494: va_list ap;
  1683                           ;doprnt.c: 499: signed char c;
  1684                           ;doprnt.c: 501: int width;
  1685                           ;doprnt.c: 504: int prec;
  1686                           ;doprnt.c: 508: unsigned short flag;
  1687                           ;doprnt.c: 515: char d;
  1688                           ;doprnt.c: 516: double fval;
  1689                           ;doprnt.c: 517: int exp;
  1690                           ;doprnt.c: 523: union {
  1691                           ;doprnt.c: 524: unsigned long vd;
  1692                           ;doprnt.c: 525: double integ;
  1693                           ;doprnt.c: 526: } tmpval;
  1694                           ;doprnt.c: 528: unsigned long val;
  1695                           ;doprnt.c: 529: unsigned len;
  1696                           ;doprnt.c: 530: const char * cp;
  1697                           ;doprnt.c: 533: *ap = __va_start();
  1698                           
  1699                           ;incstack = 0
  1700  001092  0E44               	movlw	low (?_sprintf+4)
  1701  001094  0100               	movlb	0	; () banked
  1702  001096  6F63               	movwf	sprintf@ap& (0+255),b
  1703  001098  0E00               	movlw	high (?_sprintf+4)
  1704  00109A  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  1705                           
  1706                           ;doprnt.c: 536: while(c = *f++) {
  1707  00109C  D36B               	goto	l470
  1708  00109E                     
  1709                           ; BSR set to: 0
  1710                           ;doprnt.c: 538: if(c != '%')
  1711                           
  1712                           ; BSR set to: 0
  1713  00109E  0E25               	movlw	37
  1714  0010A0  1976               	xorwf	sprintf@c& (0+255),w,b
  1715  0010A2  B4D8               	btfsc	status,2,c
  1716  0010A4  D007               	goto	l416
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;doprnt.c: 540: {
  1720                           ;doprnt.c: 541: ((*sp++ = (c)));
  1721  0010A6  C040  FFD9         	movff	sprintf@sp,fsr2l
  1722  0010AA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1723  0010AE  C076  FFDF         	movff	sprintf@c,indf2
  1724  0010B2  D35E               	goto	l3371
  1725  0010B4                     l416:
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;doprnt.c: 543: }
  1729                           ;doprnt.c: 548: flag = 0;
  1730                           
  1731                           ; BSR set to: 0
  1732  0010B4  0E00               	movlw	0
  1733  0010B6  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  1734  0010B8  0E00               	movlw	0
  1735  0010BA  6F65               	movwf	sprintf@flag& (0+255),b
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;doprnt.c: 611: if(*f == '.') {
  1739  0010BC  C042  FFF6         	movff	sprintf@f,tblptrl
  1740  0010C0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1741  0010C4                     	if	0	;tblptru may be non-zero
  1742  0010C4                     	endif
  1743  0010C4                     	if	0	;tblptru may be non-zero
  1744  0010C4                     	endif
  1745  0010C4  0008               	tblrd		*
  1746  0010C6  50F5               	movf	tablat,w,c
  1747  0010C8  0A2E               	xorlw	46
  1748  0010CA  A4D8               	btfss	status,2,c
  1749  0010CC  D02F               	goto	l417
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;doprnt.c: 612: flag |= 0x4000;
  1753  0010CE  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  1754                           
  1755                           ;doprnt.c: 613: f++;
  1756  0010D0  4A42               	infsnz	sprintf@f,f,c
  1757  0010D2  2A43               	incf	sprintf@f+1,f,c
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;doprnt.c: 620: {
  1761                           ;doprnt.c: 621: prec = 0;
  1762  0010D4  0E00               	movlw	0
  1763  0010D6  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1764  0010D8  0E00               	movlw	0
  1765  0010DA  6F71               	movwf	sprintf@prec& (0+255),b
  1766                           
  1767                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1768  0010DC  D01C               	goto	l418
  1769  0010DE                     
  1770                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1771                           
  1772                           ; BSR set to: 0
  1773  0010DE  C071  F00F         	movff	sprintf@prec,___wmul@multiplier
  1774  0010E2  C072  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1775  0010E6  0E00               	movlw	0
  1776  0010E8  6E12               	movwf	___wmul@multiplicand+1,c
  1777  0010EA  0E0A               	movlw	10
  1778  0010EC  6E11               	movwf	___wmul@multiplicand,c
  1779  0010EE  ECB0  F018         	call	___wmul	;wreg free
  1780  0010F2  C042  FFF6         	movff	sprintf@f,tblptrl
  1781  0010F6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1782  0010FA                     	if	0	;tblptru may be non-zero
  1783  0010FA                     	endif
  1784  0010FA                     	if	0	;tblptru may be non-zero
  1785  0010FA                     	endif
  1786  0010FA  0008               	tblrd		*
  1787  0010FC  50F5               	movf	tablat,w,c
  1788  0010FE  260F               	addwf	?___wmul,f,c
  1789  001100  0E00               	movlw	0
  1790  001102  2210               	addwfc	?___wmul+1,f,c
  1791  001104  0ED0               	movlw	208
  1792  001106  240F               	addwf	?___wmul,w,c
  1793  001108  0100               	movlb	0	; () banked
  1794  00110A  6F71               	movwf	sprintf@prec& (0+255),b
  1795  00110C  0EFF               	movlw	255
  1796  00110E  2010               	addwfc	?___wmul+1,w,c
  1797  001110  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1798                           
  1799                           ; BSR set to: 0
  1800  001112  4A42               	infsnz	sprintf@f,f,c
  1801  001114  2A43               	incf	sprintf@f+1,f,c
  1802  001116                     l418:
  1803                           
  1804                           ; BSR set to: 0
  1805                           
  1806                           ; BSR set to: 0
  1807  001116  C042  FFF6         	movff	sprintf@f,tblptrl
  1808  00111A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1809  00111E                     	if	0	;tblptru may be non-zero
  1810  00111E                     	endif
  1811  00111E                     	if	0	;tblptru may be non-zero
  1812  00111E                     	endif
  1813  00111E  0008               	tblrd		*
  1814  001120  50F5               	movf	tablat,w,c
  1815  001122  ECE6  F018         	call	_isdigit
  1816  001126  A0D8               	btfss	status,0,c
  1817  001128  D00A               	goto	l422
  1818  00112A  D7D9               	goto	l419
  1819  00112C                     l417:
  1820                           
  1821                           ;doprnt.c: 626: prec = 0;
  1822  00112C  0E00               	movlw	0
  1823  00112E  0100               	movlb	0	; () banked
  1824  001130  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1825  001132  0E00               	movlw	0
  1826  001134  6F71               	movwf	sprintf@prec& (0+255),b
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;doprnt.c: 628: flag |= 0x1000;
  1830  001136  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;doprnt.c: 630: }
  1834                           ;doprnt.c: 635: switch(c = *f++) {
  1835  001138  D002               	goto	l422
  1836  00113A                     
  1837                           ; BSR set to: 0
  1838                           ;doprnt.c: 663: flag |= 0x400;
  1839                           
  1840                           ; BSR set to: 0
  1841  00113A  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  1842                           
  1843                           ;doprnt.c: 664: break;
  1844  00113C  D012               	goto	l426
  1845  00113E                     l422:
  1846                           
  1847                           ; BSR set to: 0
  1848  00113E  C042  FFF6         	movff	sprintf@f,tblptrl
  1849  001142  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1850  001146  4A42               	infsnz	sprintf@f,f,c
  1851  001148  2A43               	incf	sprintf@f+1,f,c
  1852  00114A                     	if	0	;tblptru may be non-zero
  1853  00114A                     	endif
  1854  00114A                     	if	0	;tblptru may be non-zero
  1855  00114A                     	endif
  1856  00114A  0008               	tblrd		*
  1857  00114C  CFF5 F076          	movff	tablat,sprintf@c
  1858  001150  0100               	movlb	0	; () banked
  1859  001152  5176               	movf	sprintf@c& (0+255),w,b
  1860                           
  1861                           ; Switch size 1, requested type "space"
  1862                           ; Number of cases is 2, Range of values is 0 to 102
  1863                           ; switch strategies available:
  1864                           ; Name         Instructions Cycles
  1865                           ; simple_byte            7     4 (average)
  1866                           ;	Chosen strategy is simple_byte
  1867  001154  0A00               	xorlw	0	; case 0
  1868  001156  B4D8               	btfsc	status,2,c
  1869  001158  D319               	goto	u2880
  1870  00115A  0A66               	xorlw	102	; case 102
  1871  00115C  B4D8               	btfsc	status,2,c
  1872  00115E  D7ED               	goto	l425
  1873  001160  D309               	goto	l470
  1874  001162                     l426:
  1875                           
  1876                           ; BSR set to: 0
  1877                           ;doprnt.c: 825: if(flag & (0x700)) {
  1878                           
  1879                           ; BSR set to: 0
  1880  001162  0E07               	movlw	7
  1881  001164  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1882  001166  B4D8               	btfsc	status,2,c
  1883  001168  D2C9               	goto	l428
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;doprnt.c: 827: if(flag & 0x1000)
  1887  00116A  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  1888  00116C  D004               	goto	l429
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;doprnt.c: 829: prec = 6;
  1892  00116E  0E00               	movlw	0
  1893  001170  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1894  001172  0E06               	movlw	6
  1895  001174  6F71               	movwf	sprintf@prec& (0+255),b
  1896  001176                     l429:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1900                           
  1901                           ; BSR set to: 0
  1902  001176  C063  FFD9         	movff	sprintf@ap,fsr2l
  1903  00117A  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1904  00117E  CFDE F073          	movff	postinc2,sprintf@fval
  1905  001182  CFDE F074          	movff	postinc2,sprintf@fval+1
  1906  001186  CFDD F075          	movff	postdec2,sprintf@fval+2
  1907                           
  1908                           ; BSR set to: 0
  1909  00118A  0E03               	movlw	3
  1910  00118C  2763               	addwf	sprintf@ap& (0+255),f,b
  1911  00118E  0E00               	movlw	0
  1912  001190  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;doprnt.c: 831: if(fval < 0.0) {
  1916  001192  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1917  001194  D011               	goto	l430
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;doprnt.c: 832: fval = -fval;
  1921  001196  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1922  00119A  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1923  00119E  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1924  0011A2  ECC3  F018         	call	___ftneg	;wreg free
  1925  0011A6  C001  F073         	movff	?___ftneg,sprintf@fval
  1926  0011AA  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1927  0011AE  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1928                           
  1929                           ;doprnt.c: 833: flag |= 0x03;
  1930  0011B2  0E03               	movlw	3
  1931  0011B4  0100               	movlb	0	; () banked
  1932  0011B6  1365               	iorwf	sprintf@flag& (0+255),f,b
  1933  0011B8                     l430:
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;doprnt.c: 834: }
  1937                           ;doprnt.c: 835: exp = 0;
  1938                           
  1939                           ; BSR set to: 0
  1940  0011B8  0E00               	movlw	0
  1941  0011BA  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1942  0011BC  0E00               	movlw	0
  1943  0011BE  6F6B               	movwf	sprintf@exp& (0+255),b
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;doprnt.c: 836: if( fval!=0) {
  1947  0011C0  5173               	movf	sprintf@fval& (0+255),w,b
  1948  0011C2  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1949  0011C4  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1950  0011C6  B4D8               	btfsc	status,2,c
  1951  0011C8  D086               	goto	l435
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1955  0011CA  0E82               	movlw	130
  1956  0011CC  6E47               	movwf	??_sprintf& (0+255),c
  1957  0011CE  0EFF               	movlw	255
  1958  0011D0  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1959  0011D2  C073  F049         	movff	sprintf@fval,??_sprintf+2
  1960  0011D6  C074  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1961  0011DA  C075  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1962  0011DE  C076  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1963  0011E2  0E10               	movlw	16
  1964  0011E4  D005               	goto	u2630
  1965  0011E6                     u2635:
  1966  0011E6  90D8               	bcf	status,0,c
  1967  0011E8  324C               	rrcf	??_sprintf+5,f,c
  1968  0011EA  324B               	rrcf	??_sprintf+4,f,c
  1969  0011EC  324A               	rrcf	??_sprintf+3,f,c
  1970  0011EE  3249               	rrcf	??_sprintf+2,f,c
  1971  0011F0                     u2630:
  1972  0011F0  2EE8               	decfsz	wreg,f,c
  1973  0011F2  D7F9               	goto	u2635
  1974  0011F4  5049               	movf	??_sprintf+2,w,c
  1975  0011F6  2447               	addwf	??_sprintf,w,c
  1976  0011F8  6F6B               	movwf	sprintf@exp& (0+255),b
  1977  0011FA  0E00               	movlw	0
  1978  0011FC  2048               	addwfc	??_sprintf+1,w,c
  1979  0011FE  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;doprnt.c: 838: exp--;
  1983  001200  076B               	decf	sprintf@exp& (0+255),f,b
  1984  001202  A0D8               	btfss	status,0,c
  1985  001204  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;doprnt.c: 839: exp *= 3;
  1989  001206  C06B  F00F         	movff	sprintf@exp,___wmul@multiplier
  1990  00120A  C06C  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1991  00120E  0E00               	movlw	0
  1992  001210  6E12               	movwf	___wmul@multiplicand+1,c
  1993  001212  0E03               	movlw	3
  1994  001214  6E11               	movwf	___wmul@multiplicand,c
  1995  001216  ECB0  F018         	call	___wmul	;wreg free
  1996  00121A  C00F  F06B         	movff	?___wmul,sprintf@exp
  1997  00121E  C010  F06C         	movff	?___wmul+1,sprintf@exp+1
  1998                           
  1999                           ;doprnt.c: 840: exp /= 10;
  2000  001222  C06B  F007         	movff	sprintf@exp,___awdiv@dividend
  2001  001226  C06C  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2002  00122A  0E00               	movlw	0
  2003  00122C  6E0A               	movwf	___awdiv@divisor+1,c
  2004  00122E  0E0A               	movlw	10
  2005  001230  6E09               	movwf	___awdiv@divisor,c
  2006  001232  EC61  F015         	call	___awdiv	;wreg free
  2007  001236  C007  F06B         	movff	?___awdiv,sprintf@exp
  2008  00123A  C008  F06C         	movff	?___awdiv+1,sprintf@exp+1
  2009                           
  2010                           ;doprnt.c: 841: if(exp < 0)
  2011  00123E  0100               	movlb	0	; () banked
  2012  001240  AF6C               	btfss	(sprintf@exp+1)& (0+255),7,b
  2013  001242  D003               	goto	l432
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;doprnt.c: 842: exp--;
  2017  001244  076B               	decf	sprintf@exp& (0+255),f,b
  2018  001246  A0D8               	btfss	status,0,c
  2019  001248  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  2020  00124A                     l432:
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2024                           
  2025                           ; BSR set to: 0
  2026  00124A  516B               	movf	sprintf@exp& (0+255),w,b
  2027  00124C  0800               	sublw	0
  2028  00124E  ECCD  F00B         	call	_scale
  2029  001252  C024  F06D         	movff	?_scale,sprintf@tmpval
  2030  001256  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  2031  00125A  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  2032                           
  2033                           ;doprnt.c: 847: tmpval.integ *= fval;
  2034  00125E  C06D  F015         	movff	sprintf@tmpval,___ftmul@f1
  2035  001262  C06E  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2036  001266  C06F  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2037  00126A  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2038  00126E  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2039  001272  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2040  001276  EC21  F013         	call	___ftmul	;wreg free
  2041  00127A  C015  F06D         	movff	?___ftmul,sprintf@tmpval
  2042  00127E  C016  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  2043  001282  C017  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  2044                           
  2045                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2046  001286  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  2047  00128A  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2048  00128E  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2049  001292  0E00               	movlw	0
  2050  001294  6E04               	movwf	___ftge@ff2,c
  2051  001296  0E80               	movlw	128
  2052  001298  6E05               	movwf	___ftge@ff2+1,c
  2053  00129A  0E3F               	movlw	63
  2054  00129C  6E06               	movwf	___ftge@ff2+2,c
  2055  00129E  EC19  F015         	call	___ftge	;wreg free
  2056  0012A2  B0D8               	btfsc	status,0,c
  2057  0012A4  D005               	goto	l433
  2058                           
  2059                           ;doprnt.c: 849: exp--;
  2060  0012A6  0100               	movlb	0	; () banked
  2061  0012A8  076B               	decf	sprintf@exp& (0+255),f,b
  2062  0012AA  A0D8               	btfss	status,0,c
  2063  0012AC  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  2064  0012AE  D013               	goto	l435
  2065  0012B0                     l433:
  2066                           
  2067                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2068                           
  2069                           ; BSR set to: 0
  2070  0012B0  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  2071  0012B4  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2072  0012B8  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2073  0012BC  0E00               	movlw	0
  2074  0012BE  6E04               	movwf	___ftge@ff2,c
  2075  0012C0  0E20               	movlw	32
  2076  0012C2  6E05               	movwf	___ftge@ff2+1,c
  2077  0012C4  0E41               	movlw	65
  2078  0012C6  6E06               	movwf	___ftge@ff2+2,c
  2079  0012C8  EC19  F015         	call	___ftge	;wreg free
  2080  0012CC  A0D8               	btfss	status,0,c
  2081  0012CE  D003               	goto	l435
  2082                           
  2083                           ;doprnt.c: 851: exp++;
  2084  0012D0  0100               	movlb	0	; () banked
  2085  0012D2  4B6B               	infsnz	sprintf@exp& (0+255),f,b
  2086  0012D4  2B6C               	incf	(sprintf@exp+1)& (0+255),f,b
  2087  0012D6                     l435:
  2088                           
  2089                           ;doprnt.c: 852: }
  2090                           ;doprnt.c: 1112: if(prec <= 12)
  2091                           
  2092                           ; BSR set to: 0
  2093                           
  2094                           ; BSR set to: 0
  2095                           
  2096                           ; BSR set to: 0
  2097  0012D6  0100               	movlb	0	; () banked
  2098  0012D8  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2099  0012DA  D006               	goto	u2670
  2100  0012DC  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2101  0012DE  E11B               	bnz	l3253
  2102  0012E0  0E0D               	movlw	13
  2103  0012E2  5D71               	subwf	sprintf@prec& (0+255),w,b
  2104  0012E4  B0D8               	btfsc	status,0,c
  2105  0012E6  D017               	goto	l436
  2106  0012E8                     u2670:
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;doprnt.c: 1113: fval += fround(prec);
  2110  0012E8  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  2111  0012EC  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  2112  0012F0  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  2113  0012F4  5171               	movf	sprintf@prec& (0+255),w,b
  2114  0012F6  EC7B  F00F         	call	_fround
  2115  0012FA  C024  F031         	movff	?_fround,___ftadd@f2
  2116  0012FE  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2117  001302  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2118  001306  ECA4  F010         	call	___ftadd	;wreg free
  2119  00130A  C02E  F073         	movff	?___ftadd,sprintf@fval
  2120  00130E  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  2121  001312  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  2122  001316                     l436:
  2123  001316                     l3253:
  2124                           
  2125                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2126  001316  0100               	movlb	0	; () banked
  2127  001318  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2128  00131A  D006               	goto	u2680
  2129  00131C  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  2130  00131E  E120               	bnz	l3261
  2131  001320  0E0A               	movlw	10
  2132  001322  5D6B               	subwf	sprintf@exp& (0+255),w,b
  2133  001324  B0D8               	btfsc	status,0,c
  2134  001326  D01C               	goto	u2710
  2135  001328                     u2680:
  2136                           
  2137                           ; BSR set to: 0
  2138  001328  5173               	movf	sprintf@fval& (0+255),w,b
  2139  00132A  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2140  00132C  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2141  00132E  B4D8               	btfsc	status,2,c
  2142  001330  D056               	goto	l437
  2143                           
  2144                           ; BSR set to: 0
  2145  001332  C073  F02B         	movff	sprintf@fval,___fttol@f1
  2146  001336  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2147  00133A  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2148  00133E  ECA7  F012         	call	___fttol	;wreg free
  2149  001342  502B               	movf	?___fttol,w,c
  2150  001344  102C               	iorwf	?___fttol+1,w,c
  2151  001346  102D               	iorwf	?___fttol+2,w,c
  2152  001348  102E               	iorwf	?___fttol+3,w,c
  2153  00134A  A4D8               	btfss	status,2,c
  2154  00134C  D048               	goto	l437
  2155  00134E  0100               	movlb	0	; () banked
  2156  001350  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2157  001352  D045               	goto	l437
  2158  001354  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  2159  001356  E104               	bnz	l3261
  2160  001358  0E02               	movlw	2
  2161  00135A  5D6B               	subwf	sprintf@exp& (0+255),w,b
  2162  00135C  A0D8               	btfss	status,0,c
  2163  00135E  D03F               	goto	l437
  2164  001360                     u2710:
  2165  001360                     l3261:
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2169  001360  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  2170  001364  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2171  001368  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2172  00136C  0E70               	movlw	112
  2173  00136E  6E04               	movwf	___ftge@ff2,c
  2174  001370  0E89               	movlw	137
  2175  001372  6E05               	movwf	___ftge@ff2+1,c
  2176  001374  0E40               	movlw	64
  2177  001376  6E06               	movwf	___ftge@ff2+2,c
  2178  001378  EC19  F015         	call	___ftge	;wreg free
  2179  00137C  B0D8               	btfsc	status,0,c
  2180  00137E  D003               	goto	l440
  2181                           
  2182                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2183  001380  0100               	movlb	0	; () banked
  2184  001382  0EF7               	movlw	247
  2185  001384  D002               	goto	L1
  2186  001386                     l440:
  2187                           
  2188                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2189                           
  2190                           ; BSR set to: 0
  2191  001386  0100               	movlb	0	; () banked
  2192  001388  0EF8               	movlw	248
  2193  00138A                     L1:
  2194  00138A  276B               	addwf	sprintf@exp& (0+255),f,b
  2195  00138C  0EFF               	movlw	255
  2196  00138E  236C               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;doprnt.c: 1124: }
  2200                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2201                           
  2202                           ; BSR set to: 0
  2203  001390  516B               	movf	sprintf@exp& (0+255),w,b
  2204  001392  ECCD  F00B         	call	_scale
  2205  001396  C024  F06D         	movff	?_scale,sprintf@tmpval
  2206  00139A  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  2207  00139E  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  2208                           
  2209                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2210  0013A2  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2211  0013A6  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2212  0013AA  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2213  0013AE  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2214  0013B2  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2215  0013B6  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2216  0013BA  EC7A  F011         	call	__tdiv_to_l_	;wreg free
  2217  0013BE  C001  F067         	movff	?__tdiv_to_l_,sprintf@val
  2218  0013C2  C002  F068         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2219  0013C6  C003  F069         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2220  0013CA  C004  F06A         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2221                           
  2222                           ;doprnt.c: 1129: fval = 0.0;
  2223  0013CE  0E00               	movlw	0
  2224  0013D0  0100               	movlb	0	; () banked
  2225  0013D2  6F73               	movwf	sprintf@fval& (0+255),b
  2226  0013D4  0E00               	movlw	0
  2227  0013D6  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  2228  0013D8  0E00               	movlw	0
  2229  0013DA  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  2230                           
  2231                           ;doprnt.c: 1130: } else {
  2232  0013DC  D033               	goto	l446
  2233  0013DE                     l437:
  2234                           
  2235                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2236                           
  2237                           ; BSR set to: 0
  2238  0013DE  C073  F02B         	movff	sprintf@fval,___fttol@f1
  2239  0013E2  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2240  0013E6  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2241  0013EA  ECA7  F012         	call	___fttol	;wreg free
  2242  0013EE  C02B  F067         	movff	?___fttol,sprintf@val
  2243  0013F2  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  2244  0013F6  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  2245  0013FA  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  2246                           
  2247                           ;doprnt.c: 1132: fval -= (double)val;
  2248  0013FE  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  2249  001402  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2250  001406  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2251  00140A  C067  F009         	movff	sprintf@val,___lltoft@c
  2252  00140E  C068  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2253  001412  C069  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2254  001416  C06A  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2255  00141A  EC3C  F017         	call	___lltoft	;wreg free
  2256  00141E  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2257  001422  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2258  001426  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2259  00142A  EC60  F018         	call	___ftsub	;wreg free
  2260  00142E  C03A  F073         	movff	?___ftsub,sprintf@fval
  2261  001432  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  2262  001436  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  2263                           
  2264                           ;doprnt.c: 1133: exp = 0;
  2265  00143A  0E00               	movlw	0
  2266  00143C  0100               	movlb	0	; () banked
  2267  00143E  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  2268  001440  0E00               	movlw	0
  2269  001442  6F6B               	movwf	sprintf@exp& (0+255),b
  2270  001444                     l446:
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;doprnt.c: 1134: }
  2274                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2275                           
  2276                           ; BSR set to: 0
  2277  001444  0E01               	movlw	1
  2278  001446  6F76               	movwf	sprintf@c& (0+255),b
  2279  001448                     l3281:
  2280                           
  2281                           ; BSR set to: 0
  2282  001448  0E0A               	movlw	10
  2283  00144A  1976               	xorwf	sprintf@c& (0+255),w,b
  2284  00144C  B4D8               	btfsc	status,2,c
  2285  00144E  D018               	goto	u2750
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;doprnt.c: 1137: if(val < dpowers[c])
  2289                           
  2290                           ; BSR set to: 0
  2291                           
  2292                           ; BSR set to: 0
  2293  001450  5176               	movf	sprintf@c& (0+255),w,b
  2294  001452  0D04               	mullw	4
  2295  001454  0E01               	movlw	low _dpowers
  2296  001456  24F3               	addwf	prodl,w,c
  2297  001458  6EF6               	movwf	tblptrl,c
  2298  00145A  0E10               	movlw	high _dpowers
  2299  00145C  20F4               	addwfc	prodh,w,c
  2300  00145E  6EF7               	movwf	tblptrh,c
  2301  001460                     	if	0	;There are less than 3 active tblptr bytes
  2302  001460                     	endif
  2303  001460  0009               	tblrd		*+
  2304  001462  50F5               	movf	tablat,w,c
  2305  001464  5D67               	subwf	sprintf@val& (0+255),w,b
  2306  001466  0009               	tblrd		*+
  2307  001468  50F5               	movf	tablat,w,c
  2308  00146A  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  2309  00146C  0009               	tblrd		*+
  2310  00146E  50F5               	movf	tablat,w,c
  2311  001470  5969               	subwfb	(sprintf@val+2)& (0+255),w,b
  2312  001472  0009               	tblrd		*+
  2313  001474  50F5               	movf	tablat,w,c
  2314  001476  596A               	subwfb	(sprintf@val+3)& (0+255),w,b
  2315  001478  A0D8               	btfss	status,0,c
  2316  00147A  D002               	goto	u2750
  2317                           
  2318                           ; BSR set to: 0
  2319                           
  2320                           ; BSR set to: 0
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;doprnt.c: 1138: break;
  2324  00147C  2B76               	incf	sprintf@c& (0+255),f,b
  2325  00147E  D7E4               	goto	l3281
  2326  001480                     u2750:
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;doprnt.c: 1175: {
  2330                           ;doprnt.c: 1188: if(flag & 0x03)
  2331                           
  2332                           ; BSR set to: 0
  2333  001480  0E03               	movlw	3
  2334  001482  1565               	andwf	sprintf@flag& (0+255),w,b
  2335  001484  6E47               	movwf	??_sprintf& (0+255),c
  2336  001486  0E00               	movlw	0
  2337  001488  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2338  00148A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2339  00148C  5047               	movf	??_sprintf,w,c
  2340  00148E  1048               	iorwf	??_sprintf+1,w,c
  2341  001490  B4D8               	btfsc	status,2,c
  2342  001492  D050               	goto	l451
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2346  001494  C040  FFD9         	movff	sprintf@sp,fsr2l
  2347  001498  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2348  00149C  0E2D               	movlw	45
  2349  00149E  D047               	goto	L2
  2350  0014A0                     
  2351                           ; BSR set to: 0
  2352                           ;doprnt.c: 1200: {
  2353                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2354                           
  2355                           ; BSR set to: 0
  2356  0014A0  C067  F001         	movff	sprintf@val,___lldiv@dividend
  2357  0014A4  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2358  0014A8  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2359  0014AC  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2360  0014B0  5176               	movf	sprintf@c& (0+255),w,b
  2361  0014B2  0D04               	mullw	4
  2362  0014B4  0E01               	movlw	low _dpowers
  2363  0014B6  24F3               	addwf	prodl,w,c
  2364  0014B8  6EF6               	movwf	tblptrl,c
  2365  0014BA  0E10               	movlw	high _dpowers
  2366  0014BC  20F4               	addwfc	prodh,w,c
  2367  0014BE  6EF7               	movwf	tblptrh,c
  2368  0014C0                     	if	0	;There are less than 3 active tblptr bytes
  2369  0014C0                     	endif
  2370  0014C0  0009               	tblrd		*+
  2371  0014C2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2372  0014C6  0009               	tblrd		*+
  2373  0014C8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2374  0014CC  0009               	tblrd		*+
  2375  0014CE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2376  0014D2  000A               	tblrd		*-
  2377  0014D4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2378  0014D8  ECA3  F015         	call	___lldiv	;wreg free
  2379  0014DC  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2380  0014E0  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2381  0014E4  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2382  0014E8  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2383                           
  2384                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2385  0014EC  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2386  0014F0  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2387  0014F4  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2388  0014F8  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2389  0014FC  0E0A               	movlw	10
  2390  0014FE  6E05               	movwf	___llmod@divisor,c
  2391  001500  0E00               	movlw	0
  2392  001502  6E06               	movwf	___llmod@divisor+1,c
  2393  001504  0E00               	movlw	0
  2394  001506  6E07               	movwf	___llmod@divisor+2,c
  2395  001508  0E00               	movlw	0
  2396  00150A  6E08               	movwf	___llmod@divisor+3,c
  2397  00150C  EC09  F017         	call	___llmod	;wreg free
  2398  001510  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2399  001514  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2400  001518  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2401  00151C  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2402                           
  2403                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2404  001520  0100               	movlb	0	; () banked
  2405  001522  516D               	movf	sprintf@tmpval& (0+255),w,b
  2406  001524  0F30               	addlw	48
  2407  001526  C040  FFD9         	movff	sprintf@sp,fsr2l
  2408  00152A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2409  00152E                     L2:
  2410  00152E  6EDF               	movwf	indf2,c
  2411                           
  2412                           ; BSR set to: 0
  2413  001530  4A40               	infsnz	sprintf@sp,f,c
  2414  001532  2A41               	incf	sprintf@sp+1,f,c
  2415  001534                     l451:
  2416                           
  2417                           ; BSR set to: 0
  2418                           
  2419                           ; BSR set to: 0
  2420  001534  0776               	decf	sprintf@c& (0+255),f,b
  2421  001536  2976               	incf	sprintf@c& (0+255),w,b
  2422  001538  B4D8               	btfsc	status,2,c
  2423  00153A  D00C               	goto	l454
  2424  00153C  D7B1               	goto	l452
  2425  00153E                     l3309:
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2429  00153E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2430  001542  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2431  001546  0E30               	movlw	48
  2432  001548  6EDF               	movwf	indf2,c
  2433                           
  2434                           ; BSR set to: 0
  2435  00154A  4A40               	infsnz	sprintf@sp,f,c
  2436  00154C  2A41               	incf	sprintf@sp+1,f,c
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;doprnt.c: 1209: exp--;
  2440  00154E  076B               	decf	sprintf@exp& (0+255),f,b
  2441  001550  A0D8               	btfss	status,0,c
  2442  001552  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  2443  001554                     l454:
  2444                           
  2445                           ; BSR set to: 0
  2446                           
  2447                           ; BSR set to: 0
  2448  001554  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2449  001556  D005               	goto	u2780
  2450  001558  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  2451  00155A  E1F1               	bnz	l3309
  2452  00155C  056B               	decf	sprintf@exp& (0+255),w,b
  2453  00155E  B0D8               	btfsc	status,0,c
  2454  001560  D7EE               	goto	l455
  2455  001562                     u2780:
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;doprnt.c: 1210: }
  2459                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2460                           
  2461                           ; BSR set to: 0
  2462  001562  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2463  001564  D009               	goto	l457
  2464  001566  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2465  001568  E104               	bnz	u2790
  2466  00156A  0E09               	movlw	9
  2467  00156C  5D71               	subwf	sprintf@prec& (0+255),w,b
  2468  00156E  A0D8               	btfss	status,0,c
  2469  001570  D003               	goto	l457
  2470  001572                     u2790:
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2474  001572  0E08               	movlw	8
  2475  001574  6F76               	movwf	sprintf@c& (0+255),b
  2476  001576  D002               	goto	l458
  2477  001578                     l457:
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;doprnt.c: 1213: else
  2481                           ;doprnt.c: 1214: c = prec;
  2482  001578  C071  F076         	movff	sprintf@prec,sprintf@c
  2483  00157C                     l458:
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;doprnt.c: 1215: prec -= c;
  2487                           
  2488                           ; BSR set to: 0
  2489  00157C  5176               	movf	sprintf@c& (0+255),w,b
  2490  00157E  5F71               	subwf	sprintf@prec& (0+255),f,b
  2491  001580  0E00               	movlw	0
  2492  001582  BF76               	btfsc	sprintf@c& (0+255),7,b
  2493  001584  0EFF               	movlw	255
  2494  001586  5B72               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;doprnt.c: 1219: if(c)
  2498  001588  5176               	movf	sprintf@c& (0+255),w,b
  2499  00158A  B4D8               	btfsc	status,2,c
  2500  00158C  D008               	goto	l459
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2504  00158E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2505  001592  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2506  001596  0E2E               	movlw	46
  2507  001598  6EDF               	movwf	indf2,c
  2508                           
  2509                           ; BSR set to: 0
  2510  00159A  4A40               	infsnz	sprintf@sp,f,c
  2511  00159C  2A41               	incf	sprintf@sp+1,f,c
  2512  00159E                     l459:
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2516                           
  2517                           ; BSR set to: 0
  2518  00159E  5176               	movf	sprintf@c& (0+255),w,b
  2519  0015A0  ECCD  F00B         	call	_scale
  2520  0015A4  C024  F060         	movff	?_scale,_sprintf$1570
  2521  0015A8  C025  F061         	movff	?_scale+1,_sprintf$1570+1
  2522  0015AC  C026  F062         	movff	?_scale+2,_sprintf$1570+2
  2523                           
  2524                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2525  0015B0  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2526  0015B4  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2527  0015B8  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2528  0015BC  C060  F015         	movff	_sprintf$1570,___ftmul@f1
  2529  0015C0  C061  F016         	movff	_sprintf$1570+1,___ftmul@f1+1
  2530  0015C4  C062  F017         	movff	_sprintf$1570+2,___ftmul@f1+2
  2531  0015C8  EC21  F013         	call	___ftmul	;wreg free
  2532  0015CC  C015  F02B         	movff	?___ftmul,___fttol@f1
  2533  0015D0  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2534  0015D4  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2535  0015D8  ECA7  F012         	call	___fttol	;wreg free
  2536  0015DC  C02B  F067         	movff	?___fttol,sprintf@val
  2537  0015E0  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  2538  0015E4  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  2539  0015E8  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  2540                           
  2541                           ;doprnt.c: 1228: while(c--) {
  2542  0015EC  D071               	goto	l460
  2543  0015EE                     
  2544                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2545  0015EE  C067  F001         	movff	sprintf@val,___lldiv@dividend
  2546  0015F2  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2547  0015F6  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2548  0015FA  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2549  0015FE  0100               	movlb	0	; () banked
  2550  001600  5176               	movf	sprintf@c& (0+255),w,b
  2551  001602  0D04               	mullw	4
  2552  001604  0E01               	movlw	low _dpowers
  2553  001606  24F3               	addwf	prodl,w,c
  2554  001608  6EF6               	movwf	tblptrl,c
  2555  00160A  0E10               	movlw	high _dpowers
  2556  00160C  20F4               	addwfc	prodh,w,c
  2557  00160E  6EF7               	movwf	tblptrh,c
  2558  001610                     	if	0	;There are less than 3 active tblptr bytes
  2559  001610                     	endif
  2560  001610  0009               	tblrd		*+
  2561  001612  CFF5 F005          	movff	tablat,___lldiv@divisor
  2562  001616  0009               	tblrd		*+
  2563  001618  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2564  00161C  0009               	tblrd		*+
  2565  00161E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2566  001622  000A               	tblrd		*-
  2567  001624  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2568  001628  ECA3  F015         	call	___lldiv	;wreg free
  2569  00162C  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2570  001630  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2571  001634  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2572  001638  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2573                           
  2574                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2575  00163C  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2576  001640  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2577  001644  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2578  001648  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2579  00164C  0E0A               	movlw	10
  2580  00164E  6E05               	movwf	___llmod@divisor,c
  2581  001650  0E00               	movlw	0
  2582  001652  6E06               	movwf	___llmod@divisor+1,c
  2583  001654  0E00               	movlw	0
  2584  001656  6E07               	movwf	___llmod@divisor+2,c
  2585  001658  0E00               	movlw	0
  2586  00165A  6E08               	movwf	___llmod@divisor+3,c
  2587  00165C  EC09  F017         	call	___llmod	;wreg free
  2588  001660  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2589  001664  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2590  001668  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2591  00166C  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2592                           
  2593                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2594  001670  0100               	movlb	0	; () banked
  2595  001672  516D               	movf	sprintf@tmpval& (0+255),w,b
  2596  001674  0F30               	addlw	48
  2597  001676  C040  FFD9         	movff	sprintf@sp,fsr2l
  2598  00167A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2599  00167E  6EDF               	movwf	indf2,c
  2600                           
  2601                           ; BSR set to: 0
  2602  001680  4A40               	infsnz	sprintf@sp,f,c
  2603  001682  2A41               	incf	sprintf@sp+1,f,c
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;doprnt.c: 1232: val %= dpowers[c];
  2607  001684  C067  F001         	movff	sprintf@val,___llmod@dividend
  2608  001688  C068  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2609  00168C  C069  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2610  001690  C06A  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2611  001694  5176               	movf	sprintf@c& (0+255),w,b
  2612  001696  0D04               	mullw	4
  2613  001698  0E01               	movlw	low _dpowers
  2614  00169A  24F3               	addwf	prodl,w,c
  2615  00169C  6EF6               	movwf	tblptrl,c
  2616  00169E  0E10               	movlw	high _dpowers
  2617  0016A0  20F4               	addwfc	prodh,w,c
  2618  0016A2  6EF7               	movwf	tblptrh,c
  2619  0016A4                     	if	0	;There are less than 3 active tblptr bytes
  2620  0016A4                     	endif
  2621  0016A4  0009               	tblrd		*+
  2622  0016A6  CFF5 F005          	movff	tablat,___llmod@divisor
  2623  0016AA  0009               	tblrd		*+
  2624  0016AC  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2625  0016B0  0009               	tblrd		*+
  2626  0016B2  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2627  0016B6  000A               	tblrd		*-
  2628  0016B8  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2629  0016BC  EC09  F017         	call	___llmod	;wreg free
  2630  0016C0  C001  F067         	movff	?___llmod,sprintf@val
  2631  0016C4  C002  F068         	movff	?___llmod+1,sprintf@val+1
  2632  0016C8  C003  F069         	movff	?___llmod+2,sprintf@val+2
  2633  0016CC  C004  F06A         	movff	?___llmod+3,sprintf@val+3
  2634  0016D0                     l460:
  2635  0016D0  0100               	movlb	0	; () banked
  2636  0016D2  0776               	decf	sprintf@c& (0+255),f,b
  2637  0016D4  2976               	incf	sprintf@c& (0+255),w,b
  2638  0016D6  B4D8               	btfsc	status,2,c
  2639  0016D8  D00C               	goto	l463
  2640  0016DA  D789               	goto	l461
  2641  0016DC                     
  2642                           ; BSR set to: 0
  2643                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2644                           
  2645                           ; BSR set to: 0
  2646  0016DC  C040  FFD9         	movff	sprintf@sp,fsr2l
  2647  0016E0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2648  0016E4  0E30               	movlw	48
  2649  0016E6  6EDF               	movwf	indf2,c
  2650                           
  2651                           ; BSR set to: 0
  2652  0016E8  4A40               	infsnz	sprintf@sp,f,c
  2653  0016EA  2A41               	incf	sprintf@sp+1,f,c
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;doprnt.c: 1237: prec--;
  2657  0016EC  0771               	decf	sprintf@prec& (0+255),f,b
  2658  0016EE  A0D8               	btfss	status,0,c
  2659  0016F0  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2660  0016F2                     l463:
  2661                           
  2662                           ; BSR set to: 0
  2663                           
  2664                           ; BSR set to: 0
  2665  0016F2  5171               	movf	sprintf@prec& (0+255),w,b
  2666  0016F4  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2667  0016F6  B4D8               	btfsc	status,2,c
  2668  0016F8  D03D               	goto	l470
  2669  0016FA  D7F0               	goto	l464
  2670  0016FC                     l428:
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;doprnt.c: 1246: }
  2674                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2675                           
  2676                           ; BSR set to: 0
  2677  0016FC  5171               	movf	sprintf@prec& (0+255),w,b
  2678  0016FE  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2679  001700  A4D8               	btfss	status,2,c
  2680  001702  D008               	goto	l466
  2681                           
  2682                           ; BSR set to: 0
  2683  001704  5167               	movf	sprintf@val& (0+255),w,b
  2684  001706  1168               	iorwf	(sprintf@val+1)& (0+255),w,b
  2685  001708  1169               	iorwf	(sprintf@val+2)& (0+255),w,b
  2686  00170A  116A               	iorwf	(sprintf@val+3)& (0+255),w,b
  2687  00170C  A4D8               	btfss	status,2,c
  2688  00170E  D002               	goto	l466
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;doprnt.c: 1291: prec++;
  2692  001710  4B71               	infsnz	sprintf@prec& (0+255),f,b
  2693  001712  2B72               	incf	(sprintf@prec+1)& (0+255),f,b
  2694  001714                     l466:
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;doprnt.c: 1339: if(c < prec)
  2698                           
  2699                           ; BSR set to: 0
  2700  001714  0E80               	movlw	128
  2701  001716  BF76               	btfsc	sprintf@c& (0+255),7,b
  2702  001718  0E7F               	movlw	127
  2703  00171A  6E47               	movwf	??_sprintf& (0+255),c
  2704  00171C  5171               	movf	sprintf@prec& (0+255),w,b
  2705  00171E  5D76               	subwf	sprintf@c& (0+255),w,b
  2706  001720  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2707  001722  0A80               	xorlw	128
  2708  001724  5847               	subwfb	??_sprintf& (0+255),w,c
  2709  001726  B0D8               	btfsc	status,0,c
  2710  001728  D003               	goto	l467
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;doprnt.c: 1340: c = prec;
  2714  00172A  C071  F076         	movff	sprintf@prec,sprintf@c
  2715  00172E  D010               	goto	l469
  2716  001730                     l467:
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;doprnt.c: 1341: else if(prec < c)
  2720                           
  2721                           ; BSR set to: 0
  2722  001730  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2723  001732  0A80               	xorlw	128
  2724  001734  6E47               	movwf	??_sprintf& (0+255),c
  2725  001736  5176               	movf	sprintf@c& (0+255),w,b
  2726  001738  5D71               	subwf	sprintf@prec& (0+255),w,b
  2727  00173A  0E80               	movlw	128
  2728  00173C  BF76               	btfsc	sprintf@c& (0+255),7,b
  2729  00173E  0E7F               	movlw	127
  2730  001740  5847               	subwfb	??_sprintf& (0+255),w,c
  2731  001742  B0D8               	btfsc	status,0,c
  2732  001744  D005               	goto	l469
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;doprnt.c: 1342: prec = c;
  2736  001746  5176               	movf	sprintf@c& (0+255),w,b
  2737  001748  6F71               	movwf	sprintf@prec& (0+255),b
  2738  00174A  6B72               	clrf	(sprintf@prec+1)& (0+255),b
  2739  00174C  BF71               	btfsc	sprintf@prec& (0+255),7,b
  2740  00174E  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2741  001750                     l469:
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;doprnt.c: 1422: {
  2745                           ;doprnt.c: 1438: if(flag & 0x03)
  2746                           
  2747                           ; BSR set to: 0
  2748                           
  2749                           ; BSR set to: 0
  2750  001750  0E03               	movlw	3
  2751  001752  1565               	andwf	sprintf@flag& (0+255),w,b
  2752  001754  6E47               	movwf	??_sprintf& (0+255),c
  2753  001756  0E00               	movlw	0
  2754  001758  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2755  00175A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2756  00175C  5047               	movf	??_sprintf,w,c
  2757  00175E  1048               	iorwf	??_sprintf+1,w,c
  2758  001760  B4D8               	btfsc	status,2,c
  2759  001762  D008               	goto	l470
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2763  001764  C040  FFD9         	movff	sprintf@sp,fsr2l
  2764  001768  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2765  00176C  0E2D               	movlw	45
  2766  00176E  6EDF               	movwf	indf2,c
  2767  001770                     l3371:
  2768                           
  2769                           ; BSR set to: 0
  2770  001770  4A40               	infsnz	sprintf@sp,f,c
  2771  001772  2A41               	incf	sprintf@sp+1,f,c
  2772  001774                     l470:
  2773                           
  2774                           ; BSR set to: 0
  2775                           
  2776                           ; BSR set to: 0
  2777                           
  2778                           ; BSR set to: 0
  2779  001774  C042  FFF6         	movff	sprintf@f,tblptrl
  2780  001778  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2781  00177C  4A42               	infsnz	sprintf@f,f,c
  2782  00177E  2A43               	incf	sprintf@f+1,f,c
  2783  001780                     	if	0	;tblptru may be non-zero
  2784  001780                     	endif
  2785  001780                     	if	0	;tblptru may be non-zero
  2786  001780                     	endif
  2787  001780  0008               	tblrd		*
  2788  001782  CFF5 F076          	movff	tablat,sprintf@c
  2789  001786  5176               	movf	sprintf@c& (0+255),w,b
  2790  001788  A4D8               	btfss	status,2,c
  2791  00178A  D489               	goto	l415
  2792  00178C                     u2880:
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;doprnt.c: 1538: *sp = 0;
  2796                           
  2797                           ; BSR set to: 0
  2798                           
  2799                           ;doprnt.c: 1469: }
  2800                           ;doprnt.c: 1533: }
  2801                           ;doprnt.c: 1535: alldone:
  2802                           
  2803                           ; BSR set to: 0
  2804  00178C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2805  001790  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2806  001794  0E00               	movlw	0
  2807  001796  6EDF               	movwf	indf2,c
  2808  001798  0012               	return	
  2809  00179A                     __end_of_sprintf:
  2810                           	opt stack 0
  2811                           tblptru	equ	0xFF8
  2812                           tblptrh	equ	0xFF7
  2813                           tblptrl	equ	0xFF6
  2814                           tablat	equ	0xFF5
  2815                           prodh	equ	0xFF4
  2816                           prodl	equ	0xFF3
  2817                           postinc0	equ	0xFEE
  2818                           wreg	equ	0xFE8
  2819                           indf2	equ	0xFDF
  2820                           postinc2	equ	0xFDE
  2821                           postdec2	equ	0xFDD
  2822                           fsr2h	equ	0xFDA
  2823                           fsr2l	equ	0xFD9
  2824                           status	equ	0xFD8
  2825                           
  2826 ;; *************** function _scale *****************
  2827 ;; Defined at:
  2828 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  scl             1    wreg     char 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  scl             1   41[COMRAM] char 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  3   35[COMRAM] char 
  2835 ;; Registers used:
  2836 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2842 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2846 ;;Total ram usage:        7 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:    2
  2849 ;; This function calls:
  2850 ;;		___awdiv
  2851 ;;		___awmod
  2852 ;;		___ftmul
  2853 ;;		___wmul
  2854 ;; This function is called by:
  2855 ;;		_sprintf
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           	psect	text2
  2860  00179A                     __ptext2:
  2861                           	opt stack 0
  2862  00179A                     _scale:
  2863                           	opt stack 27
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;incstack = 0
  2867                           ;scale@scl stored from wreg
  2868  00179A  6E2A               	movwf	scale@scl,c
  2869                           
  2870                           ;doprnt.c: 428: if(scl < 0) {
  2871  00179C  AE2A               	btfss	scale@scl,7,c
  2872  00179E  D101               	goto	l404
  2873                           
  2874                           ;doprnt.c: 429: scl = -scl;
  2875  0017A0  6C2A               	negf	scale@scl,c
  2876                           
  2877                           ;doprnt.c: 430: if(scl>=110)
  2878  0017A2  502A               	movf	scale@scl,w,c
  2879  0017A4  0A80               	xorlw	128
  2880  0017A6  0F12               	addlw	-238
  2881  0017A8  A0D8               	btfss	status,0,c
  2882  0017AA  D091               	goto	l405
  2883                           
  2884                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2885  0017AC  0E00               	movlw	0
  2886  0017AE  6E12               	movwf	___wmul@multiplicand+1,c
  2887  0017B0  0E03               	movlw	3
  2888  0017B2  6E11               	movwf	___wmul@multiplicand,c
  2889  0017B4  0E00               	movlw	0
  2890  0017B6  6E0A               	movwf	___awdiv@divisor+1,c
  2891  0017B8  0E0A               	movlw	10
  2892  0017BA  6E09               	movwf	___awdiv@divisor,c
  2893  0017BC  0E00               	movlw	0
  2894  0017BE  6E04               	movwf	___awmod@divisor+1,c
  2895  0017C0  0E64               	movlw	100
  2896  0017C2  6E03               	movwf	___awmod@divisor,c
  2897  0017C4  502A               	movf	scale@scl,w,c
  2898  0017C6  6E01               	movwf	___awmod@dividend,c
  2899  0017C8  6A02               	clrf	___awmod@dividend+1,c
  2900  0017CA  BE01               	btfsc	___awmod@dividend,7,c
  2901  0017CC  0602               	decf	___awmod@dividend+1,f,c
  2902  0017CE  EC9B  F016         	call	___awmod	;wreg free
  2903  0017D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2904  0017D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2905  0017DA  EC61  F015         	call	___awdiv	;wreg free
  2906  0017DE  0E09               	movlw	9
  2907  0017E0  2407               	addwf	?___awdiv,w,c
  2908  0017E2  6E0F               	movwf	___wmul@multiplier,c
  2909  0017E4  0E00               	movlw	0
  2910  0017E6  2008               	addwfc	?___awdiv+1,w,c
  2911  0017E8  6E10               	movwf	___wmul@multiplier+1,c
  2912  0017EA  ECB0  F018         	call	___wmul	;wreg free
  2913  0017EE  0E50               	movlw	low __npowers_
  2914  0017F0  240F               	addwf	?___wmul,w,c
  2915  0017F2  6EF6               	movwf	tblptrl,c
  2916  0017F4  0E10               	movlw	high __npowers_
  2917  0017F6  2010               	addwfc	?___wmul+1,w,c
  2918  0017F8  6EF7               	movwf	tblptrh,c
  2919  0017FA                     	if	0	;There are less than 3 active tblptr bytes
  2920  0017FA                     	endif
  2921  0017FA  0009               	tblrd		*+
  2922  0017FC  CFF5 F018          	movff	tablat,___ftmul@f2
  2923  001800  0009               	tblrd		*+
  2924  001802  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2925  001806  000A               	tblrd		*-
  2926  001808  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2927  00180C  0E00               	movlw	0
  2928  00180E  6E0A               	movwf	___awdiv@divisor+1,c
  2929  001810  0E64               	movlw	100
  2930  001812  6E09               	movwf	___awdiv@divisor,c
  2931  001814  502A               	movf	scale@scl,w,c
  2932  001816  6E07               	movwf	___awdiv@dividend,c
  2933  001818  6A08               	clrf	___awdiv@dividend+1,c
  2934  00181A  BE07               	btfsc	___awdiv@dividend,7,c
  2935  00181C  0608               	decf	___awdiv@dividend+1,f,c
  2936  00181E  EC61  F015         	call	___awdiv	;wreg free
  2937  001822  0E12               	movlw	18
  2938  001824  2407               	addwf	?___awdiv,w,c
  2939  001826  6E0F               	movwf	___wmul@multiplier,c
  2940  001828  0E00               	movlw	0
  2941  00182A  2008               	addwfc	?___awdiv+1,w,c
  2942  00182C  6E10               	movwf	___wmul@multiplier+1,c
  2943  00182E  0E00               	movlw	0
  2944  001830  6E12               	movwf	___wmul@multiplicand+1,c
  2945  001832  0E03               	movlw	3
  2946  001834  6E11               	movwf	___wmul@multiplicand,c
  2947  001836  ECB0  F018         	call	___wmul	;wreg free
  2948  00183A  0E50               	movlw	low __npowers_
  2949  00183C  240F               	addwf	?___wmul,w,c
  2950  00183E  6EF6               	movwf	tblptrl,c
  2951  001840  0E10               	movlw	high __npowers_
  2952  001842  2010               	addwfc	?___wmul+1,w,c
  2953  001844  6EF7               	movwf	tblptrh,c
  2954  001846                     	if	0	;There are less than 3 active tblptr bytes
  2955  001846                     	endif
  2956  001846  0009               	tblrd		*+
  2957  001848  CFF5 F015          	movff	tablat,___ftmul@f1
  2958  00184C  0009               	tblrd		*+
  2959  00184E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2960  001852  000A               	tblrd		*-
  2961  001854  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2962  001858  EC21  F013         	call	___ftmul	;wreg free
  2963  00185C  C015  F027         	movff	?___ftmul,_scale$1569
  2964  001860  C016  F028         	movff	?___ftmul+1,_scale$1569+1
  2965  001864  C017  F029         	movff	?___ftmul+2,_scale$1569+2
  2966                           
  2967                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2968  001868  C027  F015         	movff	_scale$1569,___ftmul@f1
  2969  00186C  C028  F016         	movff	_scale$1569+1,___ftmul@f1+1
  2970  001870  C029  F017         	movff	_scale$1569+2,___ftmul@f1+2
  2971  001874  0E00               	movlw	0
  2972  001876  6E12               	movwf	___wmul@multiplicand+1,c
  2973  001878  0E03               	movlw	3
  2974  00187A  6E11               	movwf	___wmul@multiplicand,c
  2975  00187C  0E00               	movlw	0
  2976  00187E  6E04               	movwf	___awmod@divisor+1,c
  2977  001880  0E0A               	movlw	10
  2978  001882  6E03               	movwf	___awmod@divisor,c
  2979  001884  502A               	movf	scale@scl,w,c
  2980  001886  6E01               	movwf	___awmod@dividend,c
  2981  001888  6A02               	clrf	___awmod@dividend+1,c
  2982  00188A  BE01               	btfsc	___awmod@dividend,7,c
  2983  00188C  0602               	decf	___awmod@dividend+1,f,c
  2984  00188E  EC9B  F016         	call	___awmod	;wreg free
  2985  001892  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2986  001896  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2987  00189A  ECB0  F018         	call	___wmul	;wreg free
  2988  00189E  0E50               	movlw	low __npowers_
  2989  0018A0  240F               	addwf	?___wmul,w,c
  2990  0018A2  6EF6               	movwf	tblptrl,c
  2991  0018A4  0E10               	movlw	high __npowers_
  2992  0018A6  2010               	addwfc	?___wmul+1,w,c
  2993  0018A8  6EF7               	movwf	tblptrh,c
  2994  0018AA                     	if	0	;There are less than 3 active tblptr bytes
  2995  0018AA                     	endif
  2996  0018AA  0009               	tblrd		*+
  2997  0018AC  CFF5 F018          	movff	tablat,___ftmul@f2
  2998  0018B0  0009               	tblrd		*+
  2999  0018B2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3000  0018B6  000A               	tblrd		*-
  3001  0018B8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3002  0018BC  EC21  F013         	call	___ftmul	;wreg free
  3003  0018C0  C015  F024         	movff	?___ftmul,?_scale
  3004  0018C4  C016  F025         	movff	?___ftmul+1,?_scale+1
  3005  0018C8  C017  F026         	movff	?___ftmul+2,?_scale+2
  3006  0018CC  0012               	return	
  3007  0018CE                     l405:
  3008                           
  3009                           ;doprnt.c: 432: else if(scl > 10)
  3010  0018CE  502A               	movf	scale@scl,w,c
  3011  0018D0  0A80               	xorlw	128
  3012  0018D2  0F75               	addlw	-139
  3013  0018D4  A0D8               	btfss	status,0,c
  3014  0018D6  D053               	goto	l408
  3015                           
  3016                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3017  0018D8  0E00               	movlw	0
  3018  0018DA  6E0A               	movwf	___awdiv@divisor+1,c
  3019  0018DC  0E0A               	movlw	10
  3020  0018DE  6E09               	movwf	___awdiv@divisor,c
  3021  0018E0  502A               	movf	scale@scl,w,c
  3022  0018E2  6E07               	movwf	___awdiv@dividend,c
  3023  0018E4  6A08               	clrf	___awdiv@dividend+1,c
  3024  0018E6  BE07               	btfsc	___awdiv@dividend,7,c
  3025  0018E8  0608               	decf	___awdiv@dividend+1,f,c
  3026  0018EA  EC61  F015         	call	___awdiv	;wreg free
  3027  0018EE  0E09               	movlw	9
  3028  0018F0  2407               	addwf	?___awdiv,w,c
  3029  0018F2  6E0F               	movwf	___wmul@multiplier,c
  3030  0018F4  0E00               	movlw	0
  3031  0018F6  2008               	addwfc	?___awdiv+1,w,c
  3032  0018F8  6E10               	movwf	___wmul@multiplier+1,c
  3033  0018FA  0E00               	movlw	0
  3034  0018FC  6E12               	movwf	___wmul@multiplicand+1,c
  3035  0018FE  0E03               	movlw	3
  3036  001900  6E11               	movwf	___wmul@multiplicand,c
  3037  001902  ECB0  F018         	call	___wmul	;wreg free
  3038  001906  0E50               	movlw	low __npowers_
  3039  001908  240F               	addwf	?___wmul,w,c
  3040  00190A  6EF6               	movwf	tblptrl,c
  3041  00190C  0E10               	movlw	high __npowers_
  3042  00190E  2010               	addwfc	?___wmul+1,w,c
  3043  001910  6EF7               	movwf	tblptrh,c
  3044  001912                     	if	0	;There are less than 3 active tblptr bytes
  3045  001912                     	endif
  3046  001912  0009               	tblrd		*+
  3047  001914  CFF5 F015          	movff	tablat,___ftmul@f1
  3048  001918  0009               	tblrd		*+
  3049  00191A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3050  00191E  000A               	tblrd		*-
  3051  001920  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3052  001924  0E00               	movlw	0
  3053  001926  6E12               	movwf	___wmul@multiplicand+1,c
  3054  001928  0E03               	movlw	3
  3055  00192A  6E11               	movwf	___wmul@multiplicand,c
  3056  00192C  0E00               	movlw	0
  3057  00192E  6E04               	movwf	___awmod@divisor+1,c
  3058  001930  0E0A               	movlw	10
  3059  001932  6E03               	movwf	___awmod@divisor,c
  3060  001934  502A               	movf	scale@scl,w,c
  3061  001936  6E01               	movwf	___awmod@dividend,c
  3062  001938  6A02               	clrf	___awmod@dividend+1,c
  3063  00193A  BE01               	btfsc	___awmod@dividend,7,c
  3064  00193C  0602               	decf	___awmod@dividend+1,f,c
  3065  00193E  EC9B  F016         	call	___awmod	;wreg free
  3066  001942  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3067  001946  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3068  00194A  ECB0  F018         	call	___wmul	;wreg free
  3069  00194E  0E50               	movlw	low __npowers_
  3070  001950  240F               	addwf	?___wmul,w,c
  3071  001952  6EF6               	movwf	tblptrl,c
  3072  001954  0E10               	movlw	high __npowers_
  3073  001956  2010               	addwfc	?___wmul+1,w,c
  3074  001958  6EF7               	movwf	tblptrh,c
  3075  00195A                     	if	0	;There are less than 3 active tblptr bytes
  3076  00195A                     	endif
  3077  00195A  0009               	tblrd		*+
  3078  00195C  CFF5 F018          	movff	tablat,___ftmul@f2
  3079  001960  0009               	tblrd		*+
  3080  001962  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3081  001966  000A               	tblrd		*-
  3082  001968  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3083  00196C  EC21  F013         	call	___ftmul	;wreg free
  3084  001970  C015  F024         	movff	?___ftmul,?_scale
  3085  001974  C016  F025         	movff	?___ftmul+1,?_scale+1
  3086  001978  C017  F026         	movff	?___ftmul+2,?_scale+2
  3087  00197C  0012               	return	
  3088  00197E                     l408:
  3089                           
  3090                           ;doprnt.c: 434: return _npowers_[scl];
  3091  00197E  502A               	movf	scale@scl,w,c
  3092  001980  0D03               	mullw	3
  3093  001982  0E50               	movlw	low __npowers_
  3094  001984  24F3               	addwf	prodl,w,c
  3095  001986  6EF6               	movwf	tblptrl,c
  3096  001988  0E10               	movlw	high __npowers_
  3097  00198A  20F4               	addwfc	prodh,w,c
  3098  00198C  6EF7               	movwf	tblptrh,c
  3099  00198E                     	if	0	;There are less than 3 active tblptr bytes
  3100  00198E                     	endif
  3101  00198E  0009               	tblrd		*+
  3102  001990  CFF5 F024          	movff	tablat,?_scale
  3103  001994  0009               	tblrd		*+
  3104  001996  CFF5 F025          	movff	tablat,?_scale+1
  3105  00199A  000A               	tblrd		*-
  3106  00199C  CFF5 F026          	movff	tablat,?_scale+2
  3107  0019A0  0012               	return	
  3108  0019A2                     l404:
  3109                           
  3110                           ;doprnt.c: 435: }
  3111                           ;doprnt.c: 436: if(scl>=110)
  3112  0019A2  502A               	movf	scale@scl,w,c
  3113  0019A4  0A80               	xorlw	128
  3114  0019A6  0F12               	addlw	-238
  3115  0019A8  A0D8               	btfss	status,0,c
  3116  0019AA  D091               	goto	l409
  3117                           
  3118                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3119  0019AC  0E00               	movlw	0
  3120  0019AE  6E12               	movwf	___wmul@multiplicand+1,c
  3121  0019B0  0E03               	movlw	3
  3122  0019B2  6E11               	movwf	___wmul@multiplicand,c
  3123  0019B4  0E00               	movlw	0
  3124  0019B6  6E0A               	movwf	___awdiv@divisor+1,c
  3125  0019B8  0E0A               	movlw	10
  3126  0019BA  6E09               	movwf	___awdiv@divisor,c
  3127  0019BC  0E00               	movlw	0
  3128  0019BE  6E04               	movwf	___awmod@divisor+1,c
  3129  0019C0  0E64               	movlw	100
  3130  0019C2  6E03               	movwf	___awmod@divisor,c
  3131  0019C4  502A               	movf	scale@scl,w,c
  3132  0019C6  6E01               	movwf	___awmod@dividend,c
  3133  0019C8  6A02               	clrf	___awmod@dividend+1,c
  3134  0019CA  BE01               	btfsc	___awmod@dividend,7,c
  3135  0019CC  0602               	decf	___awmod@dividend+1,f,c
  3136  0019CE  EC9B  F016         	call	___awmod	;wreg free
  3137  0019D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  3138  0019D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3139  0019DA  EC61  F015         	call	___awdiv	;wreg free
  3140  0019DE  0E09               	movlw	9
  3141  0019E0  2407               	addwf	?___awdiv,w,c
  3142  0019E2  6E0F               	movwf	___wmul@multiplier,c
  3143  0019E4  0E00               	movlw	0
  3144  0019E6  2008               	addwfc	?___awdiv+1,w,c
  3145  0019E8  6E10               	movwf	___wmul@multiplier+1,c
  3146  0019EA  ECB0  F018         	call	___wmul	;wreg free
  3147  0019EE  0E29               	movlw	low __powers_
  3148  0019F0  240F               	addwf	?___wmul,w,c
  3149  0019F2  6EF6               	movwf	tblptrl,c
  3150  0019F4  0E10               	movlw	high __powers_
  3151  0019F6  2010               	addwfc	?___wmul+1,w,c
  3152  0019F8  6EF7               	movwf	tblptrh,c
  3153  0019FA                     	if	0	;There are less than 3 active tblptr bytes
  3154  0019FA                     	endif
  3155  0019FA  0009               	tblrd		*+
  3156  0019FC  CFF5 F018          	movff	tablat,___ftmul@f2
  3157  001A00  0009               	tblrd		*+
  3158  001A02  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3159  001A06  000A               	tblrd		*-
  3160  001A08  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3161  001A0C  0E00               	movlw	0
  3162  001A0E  6E0A               	movwf	___awdiv@divisor+1,c
  3163  001A10  0E64               	movlw	100
  3164  001A12  6E09               	movwf	___awdiv@divisor,c
  3165  001A14  502A               	movf	scale@scl,w,c
  3166  001A16  6E07               	movwf	___awdiv@dividend,c
  3167  001A18  6A08               	clrf	___awdiv@dividend+1,c
  3168  001A1A  BE07               	btfsc	___awdiv@dividend,7,c
  3169  001A1C  0608               	decf	___awdiv@dividend+1,f,c
  3170  001A1E  EC61  F015         	call	___awdiv	;wreg free
  3171  001A22  0E12               	movlw	18
  3172  001A24  2407               	addwf	?___awdiv,w,c
  3173  001A26  6E0F               	movwf	___wmul@multiplier,c
  3174  001A28  0E00               	movlw	0
  3175  001A2A  2008               	addwfc	?___awdiv+1,w,c
  3176  001A2C  6E10               	movwf	___wmul@multiplier+1,c
  3177  001A2E  0E00               	movlw	0
  3178  001A30  6E12               	movwf	___wmul@multiplicand+1,c
  3179  001A32  0E03               	movlw	3
  3180  001A34  6E11               	movwf	___wmul@multiplicand,c
  3181  001A36  ECB0  F018         	call	___wmul	;wreg free
  3182  001A3A  0E29               	movlw	low __powers_
  3183  001A3C  240F               	addwf	?___wmul,w,c
  3184  001A3E  6EF6               	movwf	tblptrl,c
  3185  001A40  0E10               	movlw	high __powers_
  3186  001A42  2010               	addwfc	?___wmul+1,w,c
  3187  001A44  6EF7               	movwf	tblptrh,c
  3188  001A46                     	if	0	;There are less than 3 active tblptr bytes
  3189  001A46                     	endif
  3190  001A46  0009               	tblrd		*+
  3191  001A48  CFF5 F015          	movff	tablat,___ftmul@f1
  3192  001A4C  0009               	tblrd		*+
  3193  001A4E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3194  001A52  000A               	tblrd		*-
  3195  001A54  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3196  001A58  EC21  F013         	call	___ftmul	;wreg free
  3197  001A5C  C015  F027         	movff	?___ftmul,_scale$1569
  3198  001A60  C016  F028         	movff	?___ftmul+1,_scale$1569+1
  3199  001A64  C017  F029         	movff	?___ftmul+2,_scale$1569+2
  3200                           
  3201                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3202  001A68  C027  F015         	movff	_scale$1569,___ftmul@f1
  3203  001A6C  C028  F016         	movff	_scale$1569+1,___ftmul@f1+1
  3204  001A70  C029  F017         	movff	_scale$1569+2,___ftmul@f1+2
  3205  001A74  0E00               	movlw	0
  3206  001A76  6E12               	movwf	___wmul@multiplicand+1,c
  3207  001A78  0E03               	movlw	3
  3208  001A7A  6E11               	movwf	___wmul@multiplicand,c
  3209  001A7C  0E00               	movlw	0
  3210  001A7E  6E04               	movwf	___awmod@divisor+1,c
  3211  001A80  0E0A               	movlw	10
  3212  001A82  6E03               	movwf	___awmod@divisor,c
  3213  001A84  502A               	movf	scale@scl,w,c
  3214  001A86  6E01               	movwf	___awmod@dividend,c
  3215  001A88  6A02               	clrf	___awmod@dividend+1,c
  3216  001A8A  BE01               	btfsc	___awmod@dividend,7,c
  3217  001A8C  0602               	decf	___awmod@dividend+1,f,c
  3218  001A8E  EC9B  F016         	call	___awmod	;wreg free
  3219  001A92  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3220  001A96  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3221  001A9A  ECB0  F018         	call	___wmul	;wreg free
  3222  001A9E  0E29               	movlw	low __powers_
  3223  001AA0  240F               	addwf	?___wmul,w,c
  3224  001AA2  6EF6               	movwf	tblptrl,c
  3225  001AA4  0E10               	movlw	high __powers_
  3226  001AA6  2010               	addwfc	?___wmul+1,w,c
  3227  001AA8  6EF7               	movwf	tblptrh,c
  3228  001AAA                     	if	0	;There are less than 3 active tblptr bytes
  3229  001AAA                     	endif
  3230  001AAA  0009               	tblrd		*+
  3231  001AAC  CFF5 F018          	movff	tablat,___ftmul@f2
  3232  001AB0  0009               	tblrd		*+
  3233  001AB2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3234  001AB6  000A               	tblrd		*-
  3235  001AB8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3236  001ABC  EC21  F013         	call	___ftmul	;wreg free
  3237  001AC0  C015  F024         	movff	?___ftmul,?_scale
  3238  001AC4  C016  F025         	movff	?___ftmul+1,?_scale+1
  3239  001AC8  C017  F026         	movff	?___ftmul+2,?_scale+2
  3240  001ACC  0012               	return	
  3241  001ACE                     l409:
  3242                           
  3243                           ;doprnt.c: 438: else if(scl > 10)
  3244  001ACE  502A               	movf	scale@scl,w,c
  3245  001AD0  0A80               	xorlw	128
  3246  001AD2  0F75               	addlw	-139
  3247  001AD4  A0D8               	btfss	status,0,c
  3248  001AD6  D053               	goto	l411
  3249                           
  3250                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3251  001AD8  0E00               	movlw	0
  3252  001ADA  6E0A               	movwf	___awdiv@divisor+1,c
  3253  001ADC  0E0A               	movlw	10
  3254  001ADE  6E09               	movwf	___awdiv@divisor,c
  3255  001AE0  502A               	movf	scale@scl,w,c
  3256  001AE2  6E07               	movwf	___awdiv@dividend,c
  3257  001AE4  6A08               	clrf	___awdiv@dividend+1,c
  3258  001AE6  BE07               	btfsc	___awdiv@dividend,7,c
  3259  001AE8  0608               	decf	___awdiv@dividend+1,f,c
  3260  001AEA  EC61  F015         	call	___awdiv	;wreg free
  3261  001AEE  0E09               	movlw	9
  3262  001AF0  2407               	addwf	?___awdiv,w,c
  3263  001AF2  6E0F               	movwf	___wmul@multiplier,c
  3264  001AF4  0E00               	movlw	0
  3265  001AF6  2008               	addwfc	?___awdiv+1,w,c
  3266  001AF8  6E10               	movwf	___wmul@multiplier+1,c
  3267  001AFA  0E00               	movlw	0
  3268  001AFC  6E12               	movwf	___wmul@multiplicand+1,c
  3269  001AFE  0E03               	movlw	3
  3270  001B00  6E11               	movwf	___wmul@multiplicand,c
  3271  001B02  ECB0  F018         	call	___wmul	;wreg free
  3272  001B06  0E29               	movlw	low __powers_
  3273  001B08  240F               	addwf	?___wmul,w,c
  3274  001B0A  6EF6               	movwf	tblptrl,c
  3275  001B0C  0E10               	movlw	high __powers_
  3276  001B0E  2010               	addwfc	?___wmul+1,w,c
  3277  001B10  6EF7               	movwf	tblptrh,c
  3278  001B12                     	if	0	;There are less than 3 active tblptr bytes
  3279  001B12                     	endif
  3280  001B12  0009               	tblrd		*+
  3281  001B14  CFF5 F015          	movff	tablat,___ftmul@f1
  3282  001B18  0009               	tblrd		*+
  3283  001B1A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3284  001B1E  000A               	tblrd		*-
  3285  001B20  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3286  001B24  0E00               	movlw	0
  3287  001B26  6E12               	movwf	___wmul@multiplicand+1,c
  3288  001B28  0E03               	movlw	3
  3289  001B2A  6E11               	movwf	___wmul@multiplicand,c
  3290  001B2C  0E00               	movlw	0
  3291  001B2E  6E04               	movwf	___awmod@divisor+1,c
  3292  001B30  0E0A               	movlw	10
  3293  001B32  6E03               	movwf	___awmod@divisor,c
  3294  001B34  502A               	movf	scale@scl,w,c
  3295  001B36  6E01               	movwf	___awmod@dividend,c
  3296  001B38  6A02               	clrf	___awmod@dividend+1,c
  3297  001B3A  BE01               	btfsc	___awmod@dividend,7,c
  3298  001B3C  0602               	decf	___awmod@dividend+1,f,c
  3299  001B3E  EC9B  F016         	call	___awmod	;wreg free
  3300  001B42  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3301  001B46  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3302  001B4A  ECB0  F018         	call	___wmul	;wreg free
  3303  001B4E  0E29               	movlw	low __powers_
  3304  001B50  240F               	addwf	?___wmul,w,c
  3305  001B52  6EF6               	movwf	tblptrl,c
  3306  001B54  0E10               	movlw	high __powers_
  3307  001B56  2010               	addwfc	?___wmul+1,w,c
  3308  001B58  6EF7               	movwf	tblptrh,c
  3309  001B5A                     	if	0	;There are less than 3 active tblptr bytes
  3310  001B5A                     	endif
  3311  001B5A  0009               	tblrd		*+
  3312  001B5C  CFF5 F018          	movff	tablat,___ftmul@f2
  3313  001B60  0009               	tblrd		*+
  3314  001B62  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3315  001B66  000A               	tblrd		*-
  3316  001B68  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3317  001B6C  EC21  F013         	call	___ftmul	;wreg free
  3318  001B70  C015  F024         	movff	?___ftmul,?_scale
  3319  001B74  C016  F025         	movff	?___ftmul+1,?_scale+1
  3320  001B78  C017  F026         	movff	?___ftmul+2,?_scale+2
  3321  001B7C  0012               	return	
  3322  001B7E                     l411:
  3323                           
  3324                           ;doprnt.c: 440: return _powers_[scl];
  3325  001B7E  502A               	movf	scale@scl,w,c
  3326  001B80  0D03               	mullw	3
  3327  001B82  0E29               	movlw	low __powers_
  3328  001B84  24F3               	addwf	prodl,w,c
  3329  001B86  6EF6               	movwf	tblptrl,c
  3330  001B88  0E10               	movlw	high __powers_
  3331  001B8A  20F4               	addwfc	prodh,w,c
  3332  001B8C  6EF7               	movwf	tblptrh,c
  3333  001B8E                     	if	0	;There are less than 3 active tblptr bytes
  3334  001B8E                     	endif
  3335  001B8E  0009               	tblrd		*+
  3336  001B90  CFF5 F024          	movff	tablat,?_scale
  3337  001B94  0009               	tblrd		*+
  3338  001B96  CFF5 F025          	movff	tablat,?_scale+1
  3339  001B9A  000A               	tblrd		*-
  3340  001B9C  CFF5 F026          	movff	tablat,?_scale+2
  3341  001BA0  0012               	return	
  3342  001BA2                     __end_of_scale:
  3343                           	opt stack 0
  3344                           tblptru	equ	0xFF8
  3345                           tblptrh	equ	0xFF7
  3346                           tblptrl	equ	0xFF6
  3347                           tablat	equ	0xFF5
  3348                           prodh	equ	0xFF4
  3349                           prodl	equ	0xFF3
  3350                           postinc0	equ	0xFEE
  3351                           wreg	equ	0xFE8
  3352                           indf2	equ	0xFDF
  3353                           postinc2	equ	0xFDE
  3354                           postdec2	equ	0xFDD
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function _isdigit *****************
  3360 ;; Defined at:
  3361 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  c               1    wreg     unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  c               1    2[COMRAM] unsigned char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;		None               void
  3368 ;; Registers used:
  3369 ;;		wreg, status,2, status,0
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;Total ram usage:        3 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; This function calls:
  3382 ;;		Nothing
  3383 ;; This function is called by:
  3384 ;;		_sprintf
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text3
  3389  0031CC                     __ptext3:
  3390                           	opt stack 0
  3391  0031CC                     _isdigit:
  3392                           	opt stack 29
  3393                           
  3394                           ;incstack = 0
  3395                           ;isdigit@c stored from wreg
  3396  0031CC  6E03               	movwf	isdigit@c,c
  3397  0031CE  0E00               	movlw	0
  3398  0031D0  6E02               	movwf	_isdigit$1193,c
  3399  0031D2  0E3A               	movlw	58
  3400  0031D4  6003               	cpfslt	isdigit@c,c
  3401  0031D6  D005               	goto	l836
  3402  0031D8  0E2F               	movlw	47
  3403  0031DA  6403               	cpfsgt	isdigit@c,c
  3404  0031DC  D002               	goto	l836
  3405  0031DE  0E01               	movlw	1
  3406  0031E0  6E02               	movwf	_isdigit$1193,c
  3407  0031E2                     l836:
  3408  0031E2  C002  F001         	movff	_isdigit$1193,??_isdigit
  3409  0031E6  3001               	rrcf	??_isdigit,w,c
  3410  0031E8  0012               	return	
  3411  0031EA                     __end_of_isdigit:
  3412                           	opt stack 0
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           postinc0	equ	0xFEE
  3420                           wreg	equ	0xFE8
  3421                           indf2	equ	0xFDF
  3422                           postinc2	equ	0xFDE
  3423                           postdec2	equ	0xFDD
  3424                           fsr2h	equ	0xFDA
  3425                           fsr2l	equ	0xFD9
  3426                           status	equ	0xFD8
  3427                           
  3428 ;; *************** function _fround *****************
  3429 ;; Defined at:
  3430 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  prec            1    wreg     unsigned char 
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;  prec            1   44[COMRAM] unsigned char 
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  3   35[COMRAM] unsigned char 
  3437 ;; Registers used:
  3438 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3444 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;Total ram usage:       10 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:    2
  3451 ;; This function calls:
  3452 ;;		___awdiv
  3453 ;;		___awmod
  3454 ;;		___ftmul
  3455 ;;		___wmul
  3456 ;; This function is called by:
  3457 ;;		_sprintf
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           	psect	text4
  3462  001EF6                     __ptext4:
  3463                           	opt stack 0
  3464  001EF6                     _fround:
  3465                           	opt stack 27
  3466                           
  3467                           ;incstack = 0
  3468                           ;fround@prec stored from wreg
  3469  001EF6  6E2D               	movwf	fround@prec,c
  3470                           
  3471                           ;doprnt.c: 413: if(prec>=110)
  3472  001EF8  0E6D               	movlw	109
  3473  001EFA  642D               	cpfsgt	fround@prec,c
  3474  001EFC  D09F               	goto	l398
  3475                           
  3476                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3477  001EFE  0E00               	movlw	0
  3478  001F00  6E12               	movwf	___wmul@multiplicand+1,c
  3479  001F02  0E03               	movlw	3
  3480  001F04  6E11               	movwf	___wmul@multiplicand,c
  3481  001F06  0E00               	movlw	0
  3482  001F08  6E0A               	movwf	___awdiv@divisor+1,c
  3483  001F0A  0E0A               	movlw	10
  3484  001F0C  6E09               	movwf	___awdiv@divisor,c
  3485  001F0E  0E00               	movlw	0
  3486  001F10  6E04               	movwf	___awmod@divisor+1,c
  3487  001F12  0E64               	movlw	100
  3488  001F14  6E03               	movwf	___awmod@divisor,c
  3489  001F16  C02D  F001         	movff	fround@prec,___awmod@dividend
  3490  001F1A  6A02               	clrf	___awmod@dividend+1,c
  3491  001F1C  EC9B  F016         	call	___awmod	;wreg free
  3492  001F20  C001  F007         	movff	?___awmod,___awdiv@dividend
  3493  001F24  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3494  001F28  EC61  F015         	call	___awdiv	;wreg free
  3495  001F2C  0E09               	movlw	9
  3496  001F2E  2407               	addwf	?___awdiv,w,c
  3497  001F30  6E0F               	movwf	___wmul@multiplier,c
  3498  001F32  0E00               	movlw	0
  3499  001F34  2008               	addwfc	?___awdiv+1,w,c
  3500  001F36  6E10               	movwf	___wmul@multiplier+1,c
  3501  001F38  ECB0  F018         	call	___wmul	;wreg free
  3502  001F3C  0E50               	movlw	low __npowers_
  3503  001F3E  240F               	addwf	?___wmul,w,c
  3504  001F40  6EF6               	movwf	tblptrl,c
  3505  001F42  0E10               	movlw	high __npowers_
  3506  001F44  2010               	addwfc	?___wmul+1,w,c
  3507  001F46  6EF7               	movwf	tblptrh,c
  3508  001F48                     	if	0	;There are less than 3 active tblptr bytes
  3509  001F48                     	endif
  3510  001F48  0009               	tblrd		*+
  3511  001F4A  CFF5 F018          	movff	tablat,___ftmul@f2
  3512  001F4E  0009               	tblrd		*+
  3513  001F50  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3514  001F54  000A               	tblrd		*-
  3515  001F56  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3516  001F5A  0E00               	movlw	0
  3517  001F5C  6E0A               	movwf	___awdiv@divisor+1,c
  3518  001F5E  0E64               	movlw	100
  3519  001F60  6E09               	movwf	___awdiv@divisor,c
  3520  001F62  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3521  001F66  6A08               	clrf	___awdiv@dividend+1,c
  3522  001F68  EC61  F015         	call	___awdiv	;wreg free
  3523  001F6C  0E12               	movlw	18
  3524  001F6E  2407               	addwf	?___awdiv,w,c
  3525  001F70  6E0F               	movwf	___wmul@multiplier,c
  3526  001F72  0E00               	movlw	0
  3527  001F74  2008               	addwfc	?___awdiv+1,w,c
  3528  001F76  6E10               	movwf	___wmul@multiplier+1,c
  3529  001F78  0E00               	movlw	0
  3530  001F7A  6E12               	movwf	___wmul@multiplicand+1,c
  3531  001F7C  0E03               	movlw	3
  3532  001F7E  6E11               	movwf	___wmul@multiplicand,c
  3533  001F80  ECB0  F018         	call	___wmul	;wreg free
  3534  001F84  0E50               	movlw	low __npowers_
  3535  001F86  240F               	addwf	?___wmul,w,c
  3536  001F88  6EF6               	movwf	tblptrl,c
  3537  001F8A  0E10               	movlw	high __npowers_
  3538  001F8C  2010               	addwfc	?___wmul+1,w,c
  3539  001F8E  6EF7               	movwf	tblptrh,c
  3540  001F90                     	if	0	;There are less than 3 active tblptr bytes
  3541  001F90                     	endif
  3542  001F90  0009               	tblrd		*+
  3543  001F92  CFF5 F015          	movff	tablat,___ftmul@f1
  3544  001F96  0009               	tblrd		*+
  3545  001F98  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3546  001F9C  000A               	tblrd		*-
  3547  001F9E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3548  001FA2  EC21  F013         	call	___ftmul	;wreg free
  3549  001FA6  C015  F02A         	movff	?___ftmul,_fround$1567
  3550  001FAA  C016  F02B         	movff	?___ftmul+1,_fround$1567+1
  3551  001FAE  C017  F02C         	movff	?___ftmul+2,_fround$1567+2
  3552                           
  3553                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3554  001FB2  0E00               	movlw	0
  3555  001FB4  6E12               	movwf	___wmul@multiplicand+1,c
  3556  001FB6  0E03               	movlw	3
  3557  001FB8  6E11               	movwf	___wmul@multiplicand,c
  3558  001FBA  0E00               	movlw	0
  3559  001FBC  6E04               	movwf	___awmod@divisor+1,c
  3560  001FBE  0E0A               	movlw	10
  3561  001FC0  6E03               	movwf	___awmod@divisor,c
  3562  001FC2  C02D  F001         	movff	fround@prec,___awmod@dividend
  3563  001FC6  6A02               	clrf	___awmod@dividend+1,c
  3564  001FC8  EC9B  F016         	call	___awmod	;wreg free
  3565  001FCC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3566  001FD0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3567  001FD4  ECB0  F018         	call	___wmul	;wreg free
  3568  001FD8  0E50               	movlw	low __npowers_
  3569  001FDA  240F               	addwf	?___wmul,w,c
  3570  001FDC  6EF6               	movwf	tblptrl,c
  3571  001FDE  0E10               	movlw	high __npowers_
  3572  001FE0  2010               	addwfc	?___wmul+1,w,c
  3573  001FE2  6EF7               	movwf	tblptrh,c
  3574  001FE4                     	if	0	;There are less than 3 active tblptr bytes
  3575  001FE4                     	endif
  3576  001FE4  0009               	tblrd		*+
  3577  001FE6  CFF5 F018          	movff	tablat,___ftmul@f2
  3578  001FEA  0009               	tblrd		*+
  3579  001FEC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3580  001FF0  000A               	tblrd		*-
  3581  001FF2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3582  001FF6  C02A  F015         	movff	_fround$1567,___ftmul@f1
  3583  001FFA  C02B  F016         	movff	_fround$1567+1,___ftmul@f1+1
  3584  001FFE  C02C  F017         	movff	_fround$1567+2,___ftmul@f1+2
  3585  002002  EC21  F013         	call	___ftmul	;wreg free
  3586  002006  C015  F027         	movff	?___ftmul,_fround$1568
  3587  00200A  C016  F028         	movff	?___ftmul+1,_fround$1568+1
  3588  00200E  C017  F029         	movff	?___ftmul+2,_fround$1568+2
  3589                           
  3590                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3591  002012  C027  F015         	movff	_fround$1568,___ftmul@f1
  3592  002016  C028  F016         	movff	_fround$1568+1,___ftmul@f1+1
  3593  00201A  C029  F017         	movff	_fround$1568+2,___ftmul@f1+2
  3594  00201E  0E00               	movlw	0
  3595  002020  6E18               	movwf	___ftmul@f2,c
  3596  002022  0E00               	movlw	0
  3597  002024  6E19               	movwf	___ftmul@f2+1,c
  3598  002026  0E3F               	movlw	63
  3599  002028  6E1A               	movwf	___ftmul@f2+2,c
  3600  00202A  EC21  F013         	call	___ftmul	;wreg free
  3601  00202E  C015  F024         	movff	?___ftmul,?_fround
  3602  002032  C016  F025         	movff	?___ftmul+1,?_fround+1
  3603  002036  C017  F026         	movff	?___ftmul+2,?_fround+2
  3604  00203A  0012               	return	
  3605  00203C                     l398:
  3606                           
  3607                           ;doprnt.c: 415: else if(prec > 10)
  3608  00203C  0E0A               	movlw	10
  3609  00203E  642D               	cpfsgt	fround@prec,c
  3610  002040  D063               	goto	l401
  3611                           
  3612                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3613  002042  0E00               	movlw	0
  3614  002044  6E12               	movwf	___wmul@multiplicand+1,c
  3615  002046  0E03               	movlw	3
  3616  002048  6E11               	movwf	___wmul@multiplicand,c
  3617  00204A  0E00               	movlw	0
  3618  00204C  6E04               	movwf	___awmod@divisor+1,c
  3619  00204E  0E0A               	movlw	10
  3620  002050  6E03               	movwf	___awmod@divisor,c
  3621  002052  C02D  F001         	movff	fround@prec,___awmod@dividend
  3622  002056  6A02               	clrf	___awmod@dividend+1,c
  3623  002058  EC9B  F016         	call	___awmod	;wreg free
  3624  00205C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3625  002060  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3626  002064  ECB0  F018         	call	___wmul	;wreg free
  3627  002068  0E50               	movlw	low __npowers_
  3628  00206A  240F               	addwf	?___wmul,w,c
  3629  00206C  6EF6               	movwf	tblptrl,c
  3630  00206E  0E10               	movlw	high __npowers_
  3631  002070  2010               	addwfc	?___wmul+1,w,c
  3632  002072  6EF7               	movwf	tblptrh,c
  3633  002074                     	if	0	;There are less than 3 active tblptr bytes
  3634  002074                     	endif
  3635  002074  0009               	tblrd		*+
  3636  002076  CFF5 F018          	movff	tablat,___ftmul@f2
  3637  00207A  0009               	tblrd		*+
  3638  00207C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3639  002080  000A               	tblrd		*-
  3640  002082  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3641  002086  0E00               	movlw	0
  3642  002088  6E0A               	movwf	___awdiv@divisor+1,c
  3643  00208A  0E0A               	movlw	10
  3644  00208C  6E09               	movwf	___awdiv@divisor,c
  3645  00208E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3646  002092  6A08               	clrf	___awdiv@dividend+1,c
  3647  002094  EC61  F015         	call	___awdiv	;wreg free
  3648  002098  0E09               	movlw	9
  3649  00209A  2407               	addwf	?___awdiv,w,c
  3650  00209C  6E0F               	movwf	___wmul@multiplier,c
  3651  00209E  0E00               	movlw	0
  3652  0020A0  2008               	addwfc	?___awdiv+1,w,c
  3653  0020A2  6E10               	movwf	___wmul@multiplier+1,c
  3654  0020A4  0E00               	movlw	0
  3655  0020A6  6E12               	movwf	___wmul@multiplicand+1,c
  3656  0020A8  0E03               	movlw	3
  3657  0020AA  6E11               	movwf	___wmul@multiplicand,c
  3658  0020AC  ECB0  F018         	call	___wmul	;wreg free
  3659  0020B0  0E50               	movlw	low __npowers_
  3660  0020B2  240F               	addwf	?___wmul,w,c
  3661  0020B4  6EF6               	movwf	tblptrl,c
  3662  0020B6  0E10               	movlw	high __npowers_
  3663  0020B8  2010               	addwfc	?___wmul+1,w,c
  3664  0020BA  6EF7               	movwf	tblptrh,c
  3665  0020BC                     	if	0	;There are less than 3 active tblptr bytes
  3666  0020BC                     	endif
  3667  0020BC  0009               	tblrd		*+
  3668  0020BE  CFF5 F015          	movff	tablat,___ftmul@f1
  3669  0020C2  0009               	tblrd		*+
  3670  0020C4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3671  0020C8  000A               	tblrd		*-
  3672  0020CA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3673  0020CE  EC21  F013         	call	___ftmul	;wreg free
  3674  0020D2  C015  F02A         	movff	?___ftmul,_fround$1567
  3675  0020D6  C016  F02B         	movff	?___ftmul+1,_fround$1567+1
  3676  0020DA  C017  F02C         	movff	?___ftmul+2,_fround$1567+2
  3677                           
  3678                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3679  0020DE  C02A  F015         	movff	_fround$1567,___ftmul@f1
  3680  0020E2  C02B  F016         	movff	_fround$1567+1,___ftmul@f1+1
  3681  0020E6  C02C  F017         	movff	_fround$1567+2,___ftmul@f1+2
  3682  0020EA  0E00               	movlw	0
  3683  0020EC  6E18               	movwf	___ftmul@f2,c
  3684  0020EE  0E00               	movlw	0
  3685  0020F0  6E19               	movwf	___ftmul@f2+1,c
  3686  0020F2  0E3F               	movlw	63
  3687  0020F4  6E1A               	movwf	___ftmul@f2+2,c
  3688  0020F6  EC21  F013         	call	___ftmul	;wreg free
  3689  0020FA  C015  F024         	movff	?___ftmul,?_fround
  3690  0020FE  C016  F025         	movff	?___ftmul+1,?_fround+1
  3691  002102  C017  F026         	movff	?___ftmul+2,?_fround+2
  3692  002106  0012               	return	
  3693  002108                     l401:
  3694                           
  3695                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3696  002108  502D               	movf	fround@prec,w,c
  3697  00210A  0D03               	mullw	3
  3698  00210C  0E50               	movlw	low __npowers_
  3699  00210E  24F3               	addwf	prodl,w,c
  3700  002110  6EF6               	movwf	tblptrl,c
  3701  002112  0E10               	movlw	high __npowers_
  3702  002114  20F4               	addwfc	prodh,w,c
  3703  002116  6EF7               	movwf	tblptrh,c
  3704  002118                     	if	0	;There are less than 3 active tblptr bytes
  3705  002118                     	endif
  3706  002118  0009               	tblrd		*+
  3707  00211A  CFF5 F015          	movff	tablat,___ftmul@f1
  3708  00211E  0009               	tblrd		*+
  3709  002120  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3710  002124  000A               	tblrd		*-
  3711  002126  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3712  00212A  0E00               	movlw	0
  3713  00212C  6E18               	movwf	___ftmul@f2,c
  3714  00212E  0E00               	movlw	0
  3715  002130  6E19               	movwf	___ftmul@f2+1,c
  3716  002132  0E3F               	movlw	63
  3717  002134  6E1A               	movwf	___ftmul@f2+2,c
  3718  002136  EC21  F013         	call	___ftmul	;wreg free
  3719  00213A  C015  F024         	movff	?___ftmul,?_fround
  3720  00213E  C016  F025         	movff	?___ftmul+1,?_fround+1
  3721  002142  C017  F026         	movff	?___ftmul+2,?_fround+2
  3722  002146  0012               	return	
  3723  002148                     __end_of_fround:
  3724                           	opt stack 0
  3725                           tblptru	equ	0xFF8
  3726                           tblptrh	equ	0xFF7
  3727                           tblptrl	equ	0xFF6
  3728                           tablat	equ	0xFF5
  3729                           prodh	equ	0xFF4
  3730                           prodl	equ	0xFF3
  3731                           postinc0	equ	0xFEE
  3732                           wreg	equ	0xFE8
  3733                           indf2	equ	0xFDF
  3734                           postinc2	equ	0xFDE
  3735                           postdec2	equ	0xFDD
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function ___wmul *****************
  3741 ;; Defined at:
  3742 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  multiplier      2   14[COMRAM] unsigned int 
  3745 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;  product         2   18[COMRAM] unsigned int 
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  2   14[COMRAM] unsigned int 
  3750 ;; Registers used:
  3751 ;;		wreg, status,2, status,0, prodl, prodh
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3757 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3760 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3761 ;;Total ram usage:        6 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; This function calls:
  3764 ;;		Nothing
  3765 ;; This function is called by:
  3766 ;;		_fround
  3767 ;;		_scale
  3768 ;;		_sprintf
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text5
  3773  003160                     __ptext5:
  3774                           	opt stack 0
  3775  003160                     ___wmul:
  3776                           	opt stack 28
  3777                           
  3778                           ;incstack = 0
  3779  003160  500F               	movf	___wmul@multiplier,w,c
  3780  003162  0211               	mulwf	___wmul@multiplicand,c
  3781  003164  CFF3 F013          	movff	prodl,___wmul@product
  3782  003168  CFF4 F014          	movff	prodh,___wmul@product+1
  3783  00316C  500F               	movf	___wmul@multiplier,w,c
  3784  00316E  0212               	mulwf	___wmul@multiplicand+1,c
  3785  003170  50F3               	movf	prodl,w,c
  3786  003172  2614               	addwf	___wmul@product+1,f,c
  3787  003174  5010               	movf	___wmul@multiplier+1,w,c
  3788  003176  0211               	mulwf	___wmul@multiplicand,c
  3789  003178  50F3               	movf	prodl,w,c
  3790  00317A  2614               	addwf	___wmul@product+1,f,c
  3791  00317C  C013  F00F         	movff	___wmul@product,?___wmul
  3792  003180  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3793  003184  0012               	return	
  3794  003186                     __end_of___wmul:
  3795                           	opt stack 0
  3796                           tblptru	equ	0xFF8
  3797                           tblptrh	equ	0xFF7
  3798                           tblptrl	equ	0xFF6
  3799                           tablat	equ	0xFF5
  3800                           prodh	equ	0xFF4
  3801                           prodl	equ	0xFF3
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           indf2	equ	0xFDF
  3805                           postinc2	equ	0xFDE
  3806                           postdec2	equ	0xFDD
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function ___awmod *****************
  3812 ;; Defined at:
  3813 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  dividend        2    0[COMRAM] int 
  3816 ;;  divisor         2    2[COMRAM] int 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  sign            1    5[COMRAM] unsigned char 
  3819 ;;  counter         1    4[COMRAM] unsigned char 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  2    0[COMRAM] int 
  3822 ;; Registers used:
  3823 ;;		wreg, status,2, status,0
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3829 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;Total ram usage:        6 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; This function calls:
  3836 ;;		Nothing
  3837 ;; This function is called by:
  3838 ;;		_fround
  3839 ;;		_scale
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text6
  3844  002D36                     __ptext6:
  3845                           	opt stack 0
  3846  002D36                     ___awmod:
  3847                           	opt stack 28
  3848                           
  3849                           ;incstack = 0
  3850  002D36  0E00               	movlw	0
  3851  002D38  6E06               	movwf	___awmod@sign,c
  3852  002D3A  AE02               	btfss	___awmod@dividend+1,7,c
  3853  002D3C  D006               	goto	l653
  3854  002D3E  6C01               	negf	___awmod@dividend,c
  3855  002D40  1E02               	comf	___awmod@dividend+1,f,c
  3856  002D42  B0D8               	btfsc	status,0,c
  3857  002D44  2A02               	incf	___awmod@dividend+1,f,c
  3858  002D46  0E01               	movlw	1
  3859  002D48  6E06               	movwf	___awmod@sign,c
  3860  002D4A                     l653:
  3861  002D4A  AE04               	btfss	___awmod@divisor+1,7,c
  3862  002D4C  D004               	goto	l654
  3863  002D4E  6C03               	negf	___awmod@divisor,c
  3864  002D50  1E04               	comf	___awmod@divisor+1,f,c
  3865  002D52  B0D8               	btfsc	status,0,c
  3866  002D54  2A04               	incf	___awmod@divisor+1,f,c
  3867  002D56                     l654:
  3868  002D56  5003               	movf	___awmod@divisor,w,c
  3869  002D58  1004               	iorwf	___awmod@divisor+1,w,c
  3870  002D5A  B4D8               	btfsc	status,2,c
  3871  002D5C  D018               	goto	l661
  3872  002D5E  0E01               	movlw	1
  3873  002D60  6E05               	movwf	___awmod@counter,c
  3874  002D62  D004               	goto	l656
  3875  002D64  90D8               	bcf	status,0,c
  3876  002D66  3603               	rlcf	___awmod@divisor,f,c
  3877  002D68  3604               	rlcf	___awmod@divisor+1,f,c
  3878  002D6A  2A05               	incf	___awmod@counter,f,c
  3879  002D6C                     l656:
  3880  002D6C  AE04               	btfss	___awmod@divisor+1,7,c
  3881  002D6E  D7FA               	goto	l657
  3882  002D70                     u1960:
  3883  002D70  5003               	movf	___awmod@divisor,w,c
  3884  002D72  5C01               	subwf	___awmod@dividend,w,c
  3885  002D74  5004               	movf	___awmod@divisor+1,w,c
  3886  002D76  5802               	subwfb	___awmod@dividend+1,w,c
  3887  002D78  A0D8               	btfss	status,0,c
  3888  002D7A  D004               	goto	l660
  3889  002D7C  5003               	movf	___awmod@divisor,w,c
  3890  002D7E  5E01               	subwf	___awmod@dividend,f,c
  3891  002D80  5004               	movf	___awmod@divisor+1,w,c
  3892  002D82  5A02               	subwfb	___awmod@dividend+1,f,c
  3893  002D84                     l660:
  3894  002D84  90D8               	bcf	status,0,c
  3895  002D86  3204               	rrcf	___awmod@divisor+1,f,c
  3896  002D88  3203               	rrcf	___awmod@divisor,f,c
  3897  002D8A  2E05               	decfsz	___awmod@counter,f,c
  3898  002D8C  D7F1               	goto	u1960
  3899  002D8E                     l661:
  3900  002D8E  5006               	movf	___awmod@sign,w,c
  3901  002D90  B4D8               	btfsc	status,2,c
  3902  002D92  D004               	goto	l662
  3903  002D94  6C01               	negf	___awmod@dividend,c
  3904  002D96  1E02               	comf	___awmod@dividend+1,f,c
  3905  002D98  B0D8               	btfsc	status,0,c
  3906  002D9A  2A02               	incf	___awmod@dividend+1,f,c
  3907  002D9C                     l662:
  3908  002D9C  C001  F001         	movff	___awmod@dividend,?___awmod
  3909  002DA0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3910  002DA4  0012               	return	
  3911  002DA6                     __end_of___awmod:
  3912                           	opt stack 0
  3913                           tblptru	equ	0xFF8
  3914                           tblptrh	equ	0xFF7
  3915                           tblptrl	equ	0xFF6
  3916                           tablat	equ	0xFF5
  3917                           prodh	equ	0xFF4
  3918                           prodl	equ	0xFF3
  3919                           postinc0	equ	0xFEE
  3920                           wreg	equ	0xFE8
  3921                           indf2	equ	0xFDF
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function ___awdiv *****************
  3929 ;; Defined at:
  3930 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  dividend        2    6[COMRAM] int 
  3933 ;;  divisor         2    8[COMRAM] int 
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;  quotient        2   12[COMRAM] int 
  3936 ;;  sign            1   11[COMRAM] unsigned char 
  3937 ;;  counter         1   10[COMRAM] unsigned char 
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  2    6[COMRAM] int 
  3940 ;; Registers used:
  3941 ;;		wreg, status,2, status,0
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3947 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;Total ram usage:        8 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; This function calls:
  3954 ;;		Nothing
  3955 ;; This function is called by:
  3956 ;;		_fround
  3957 ;;		_scale
  3958 ;;		_sprintf
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text7
  3963  002AC2                     __ptext7:
  3964                           	opt stack 0
  3965  002AC2                     ___awdiv:
  3966                           	opt stack 28
  3967                           
  3968                           ;incstack = 0
  3969  002AC2  0E00               	movlw	0
  3970  002AC4  6E0C               	movwf	___awdiv@sign,c
  3971  002AC6  AE0A               	btfss	___awdiv@divisor+1,7,c
  3972  002AC8  D006               	goto	l640
  3973  002ACA  6C09               	negf	___awdiv@divisor,c
  3974  002ACC  1E0A               	comf	___awdiv@divisor+1,f,c
  3975  002ACE  B0D8               	btfsc	status,0,c
  3976  002AD0  2A0A               	incf	___awdiv@divisor+1,f,c
  3977  002AD2  0E01               	movlw	1
  3978  002AD4  6E0C               	movwf	___awdiv@sign,c
  3979  002AD6                     l640:
  3980  002AD6  AE08               	btfss	___awdiv@dividend+1,7,c
  3981  002AD8  D006               	goto	l641
  3982  002ADA  6C07               	negf	___awdiv@dividend,c
  3983  002ADC  1E08               	comf	___awdiv@dividend+1,f,c
  3984  002ADE  B0D8               	btfsc	status,0,c
  3985  002AE0  2A08               	incf	___awdiv@dividend+1,f,c
  3986  002AE2  0E01               	movlw	1
  3987  002AE4  1A0C               	xorwf	___awdiv@sign,f,c
  3988  002AE6                     l641:
  3989  002AE6  0E00               	movlw	0
  3990  002AE8  6E0E               	movwf	___awdiv@quotient+1,c
  3991  002AEA  0E00               	movlw	0
  3992  002AEC  6E0D               	movwf	___awdiv@quotient,c
  3993  002AEE  5009               	movf	___awdiv@divisor,w,c
  3994  002AF0  100A               	iorwf	___awdiv@divisor+1,w,c
  3995  002AF2  B4D8               	btfsc	status,2,c
  3996  002AF4  D01C               	goto	l648
  3997  002AF6  0E01               	movlw	1
  3998  002AF8  6E0B               	movwf	___awdiv@counter,c
  3999  002AFA  D004               	goto	l643
  4000  002AFC  90D8               	bcf	status,0,c
  4001  002AFE  3609               	rlcf	___awdiv@divisor,f,c
  4002  002B00  360A               	rlcf	___awdiv@divisor+1,f,c
  4003  002B02  2A0B               	incf	___awdiv@counter,f,c
  4004  002B04                     l643:
  4005  002B04  AE0A               	btfss	___awdiv@divisor+1,7,c
  4006  002B06  D7FA               	goto	l644
  4007  002B08                     u1900:
  4008  002B08  90D8               	bcf	status,0,c
  4009  002B0A  360D               	rlcf	___awdiv@quotient,f,c
  4010  002B0C  360E               	rlcf	___awdiv@quotient+1,f,c
  4011  002B0E  5009               	movf	___awdiv@divisor,w,c
  4012  002B10  5C07               	subwf	___awdiv@dividend,w,c
  4013  002B12  500A               	movf	___awdiv@divisor+1,w,c
  4014  002B14  5808               	subwfb	___awdiv@dividend+1,w,c
  4015  002B16  A0D8               	btfss	status,0,c
  4016  002B18  D005               	goto	l647
  4017  002B1A  5009               	movf	___awdiv@divisor,w,c
  4018  002B1C  5E07               	subwf	___awdiv@dividend,f,c
  4019  002B1E  500A               	movf	___awdiv@divisor+1,w,c
  4020  002B20  5A08               	subwfb	___awdiv@dividend+1,f,c
  4021  002B22  800D               	bsf	___awdiv@quotient,0,c
  4022  002B24                     l647:
  4023  002B24  90D8               	bcf	status,0,c
  4024  002B26  320A               	rrcf	___awdiv@divisor+1,f,c
  4025  002B28  3209               	rrcf	___awdiv@divisor,f,c
  4026  002B2A  2E0B               	decfsz	___awdiv@counter,f,c
  4027  002B2C  D7ED               	goto	u1900
  4028  002B2E                     l648:
  4029  002B2E  500C               	movf	___awdiv@sign,w,c
  4030  002B30  B4D8               	btfsc	status,2,c
  4031  002B32  D004               	goto	l649
  4032  002B34  6C0D               	negf	___awdiv@quotient,c
  4033  002B36  1E0E               	comf	___awdiv@quotient+1,f,c
  4034  002B38  B0D8               	btfsc	status,0,c
  4035  002B3A  2A0E               	incf	___awdiv@quotient+1,f,c
  4036  002B3C                     l649:
  4037  002B3C  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4038  002B40  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4039  002B44  0012               	return	
  4040  002B46                     __end_of___awdiv:
  4041                           	opt stack 0
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           prodh	equ	0xFF4
  4047                           prodl	equ	0xFF3
  4048                           postinc0	equ	0xFEE
  4049                           wreg	equ	0xFE8
  4050                           indf2	equ	0xFDF
  4051                           postinc2	equ	0xFDE
  4052                           postdec2	equ	0xFDD
  4053                           fsr2h	equ	0xFDA
  4054                           fsr2l	equ	0xFD9
  4055                           status	equ	0xFD8
  4056                           
  4057 ;; *************** function __tdiv_to_l_ *****************
  4058 ;; Defined at:
  4059 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  f1              3    0[COMRAM] float 
  4062 ;;  f2              3    3[COMRAM] float 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  quot            4    9[COMRAM] unsigned long 
  4065 ;;  exp1            1   14[COMRAM] unsigned char 
  4066 ;;  cntr            1   13[COMRAM] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  4    0[COMRAM] unsigned long 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4076 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;Total ram usage:       15 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; This function calls:
  4083 ;;		Nothing
  4084 ;; This function is called by:
  4085 ;;		_sprintf
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text8
  4090  0022F4                     __ptext8:
  4091                           	opt stack 0
  4092  0022F4                     __tdiv_to_l_:
  4093                           	opt stack 29
  4094                           
  4095                           ;incstack = 0
  4096  0022F4  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4097  0022F8  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4098  0022FA  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4099  0022FC  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4100  0022FE  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4101  002300  E301               	bnc	u2171
  4102  002302  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4103  002304                     u2171:
  4104  002304  5007               	movf	??__tdiv_to_l_,w,c
  4105  002306  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4106  002308  500F               	movf	__tdiv_to_l_@exp1,w,c
  4107  00230A  A4D8               	btfss	status,2,c
  4108  00230C  D009               	goto	l776
  4109  00230E  0E00               	movlw	0
  4110  002310  6E01               	movwf	?__tdiv_to_l_,c
  4111  002312  0E00               	movlw	0
  4112  002314  6E02               	movwf	?__tdiv_to_l_+1,c
  4113  002316  0E00               	movlw	0
  4114  002318  6E03               	movwf	?__tdiv_to_l_+2,c
  4115  00231A  0E00               	movlw	0
  4116  00231C  6E04               	movwf	?__tdiv_to_l_+3,c
  4117  00231E  0012               	return	
  4118  002320                     l776:
  4119  002320  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4120  002324  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4121  002326  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4122  002328  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4123  00232A  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4124  00232C  E301               	bnc	u2191
  4125  00232E  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4126  002330                     u2191:
  4127  002330  5007               	movf	??__tdiv_to_l_,w,c
  4128  002332  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4129  002334  500E               	movf	__tdiv_to_l_@cntr,w,c
  4130  002336  A4D8               	btfss	status,2,c
  4131  002338  D009               	goto	l778
  4132  00233A  0E00               	movlw	0
  4133  00233C  6E01               	movwf	?__tdiv_to_l_,c
  4134  00233E  0E00               	movlw	0
  4135  002340  6E02               	movwf	?__tdiv_to_l_+1,c
  4136  002342  0E00               	movlw	0
  4137  002344  6E03               	movwf	?__tdiv_to_l_+2,c
  4138  002346  0E00               	movlw	0
  4139  002348  6E04               	movwf	?__tdiv_to_l_+3,c
  4140  00234A  0012               	return	
  4141  00234C                     l778:
  4142  00234C  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4143  00234E  0EFF               	movlw	255
  4144  002350  1601               	andwf	__tdiv_to_l_@f1,f,c
  4145  002352  0EFF               	movlw	255
  4146  002354  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4147  002356  0E00               	movlw	0
  4148  002358  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4149  00235A  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4150  00235C  0EFF               	movlw	255
  4151  00235E  1604               	andwf	__tdiv_to_l_@f2,f,c
  4152  002360  0EFF               	movlw	255
  4153  002362  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4154  002364  0E00               	movlw	0
  4155  002366  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4156  002368  0E00               	movlw	0
  4157  00236A  6E0A               	movwf	__tdiv_to_l_@quot,c
  4158  00236C  0E00               	movlw	0
  4159  00236E  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4160  002370  0E00               	movlw	0
  4161  002372  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4162  002374  0E00               	movlw	0
  4163  002376  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4164  002378  0E7F               	movlw	127
  4165  00237A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4166  00237C  500E               	movf	__tdiv_to_l_@cntr,w,c
  4167  00237E  0F98               	addlw	152
  4168  002380  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4169  002382  0E18               	movlw	24
  4170  002384  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4171  002386                     l779:
  4172  002386  90D8               	bcf	status,0,c
  4173  002388  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4174  00238A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4175  00238C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4176  00238E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4177  002390  5004               	movf	__tdiv_to_l_@f2,w,c
  4178  002392  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4179  002394  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4180  002396  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4181  002398  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4182  00239A  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4183  00239C  A0D8               	btfss	status,0,c
  4184  00239E  D007               	goto	l780
  4185  0023A0  5004               	movf	__tdiv_to_l_@f2,w,c
  4186  0023A2  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4187  0023A4  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4188  0023A6  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4189  0023A8  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4190  0023AA  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4191  0023AC  800A               	bsf	__tdiv_to_l_@quot,0,c
  4192  0023AE                     l780:
  4193  0023AE  90D8               	bcf	status,0,c
  4194  0023B0  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4195  0023B2  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4196  0023B4  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4197  0023B6  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4198  0023B8  D7E6               	goto	l779
  4199  0023BA  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4200  0023BC  D016               	goto	l782
  4201  0023BE  500F               	movf	__tdiv_to_l_@exp1,w,c
  4202  0023C0  0A80               	xorlw	128
  4203  0023C2  0F97               	addlw	151
  4204  0023C4  B0D8               	btfsc	status,0,c
  4205  0023C6  D009               	goto	l783
  4206  0023C8  0E00               	movlw	0
  4207  0023CA  6E01               	movwf	?__tdiv_to_l_,c
  4208  0023CC  0E00               	movlw	0
  4209  0023CE  6E02               	movwf	?__tdiv_to_l_+1,c
  4210  0023D0  0E00               	movlw	0
  4211  0023D2  6E03               	movwf	?__tdiv_to_l_+2,c
  4212  0023D4  0E00               	movlw	0
  4213  0023D6  6E04               	movwf	?__tdiv_to_l_+3,c
  4214  0023D8  0012               	return	
  4215  0023DA                     l783:
  4216  0023DA  90D8               	bcf	status,0,c
  4217  0023DC  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4218  0023DE  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4219  0023E0  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4220  0023E2  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4221  0023E4  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4222  0023E6  D7F9               	goto	l783
  4223  0023E8  D015               	goto	u2250
  4224  0023EA                     l782:
  4225  0023EA  0E17               	movlw	23
  4226  0023EC  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4227  0023EE  D00F               	goto	l788
  4228  0023F0  0E00               	movlw	0
  4229  0023F2  6E01               	movwf	?__tdiv_to_l_,c
  4230  0023F4  0E00               	movlw	0
  4231  0023F6  6E02               	movwf	?__tdiv_to_l_+1,c
  4232  0023F8  0E00               	movlw	0
  4233  0023FA  6E03               	movwf	?__tdiv_to_l_+2,c
  4234  0023FC  0E00               	movlw	0
  4235  0023FE  6E04               	movwf	?__tdiv_to_l_+3,c
  4236  002400  0012               	return	
  4237  002402  90D8               	bcf	status,0,c
  4238  002404  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4239  002406  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4240  002408  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4241  00240A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4242  00240C  060F               	decf	__tdiv_to_l_@exp1,f,c
  4243  00240E                     l788:
  4244  00240E  500F               	movf	__tdiv_to_l_@exp1,w,c
  4245  002410  A4D8               	btfss	status,2,c
  4246  002412  D7F7               	goto	l789
  4247  002414                     u2250:
  4248  002414  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4249  002418  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4250  00241C  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4251  002420  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4252  002424  0012               	return		;funcret
  4253  002426                     __end_of__tdiv_to_l_:
  4254                           	opt stack 0
  4255                           tblptru	equ	0xFF8
  4256                           tblptrh	equ	0xFF7
  4257                           tblptrl	equ	0xFF6
  4258                           tablat	equ	0xFF5
  4259                           prodh	equ	0xFF4
  4260                           prodl	equ	0xFF3
  4261                           postinc0	equ	0xFEE
  4262                           wreg	equ	0xFE8
  4263                           indf2	equ	0xFDF
  4264                           postinc2	equ	0xFDE
  4265                           postdec2	equ	0xFDD
  4266                           fsr2h	equ	0xFDA
  4267                           fsr2l	equ	0xFD9
  4268                           status	equ	0xFD8
  4269                           
  4270 ;; *************** function __div_to_l_ *****************
  4271 ;; Defined at:
  4272 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  f1              3    0[COMRAM] unsigned long 
  4275 ;;  f2              3    3[COMRAM] unsigned long 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;  quot            4    6[COMRAM] unsigned long 
  4278 ;;  exp1            1   11[COMRAM] unsigned char 
  4279 ;;  cntr            1   10[COMRAM] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  4    0[COMRAM] unsigned long 
  4282 ;; Registers used:
  4283 ;;		wreg, status,2, status,0
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4289 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;Total ram usage:       12 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; This function calls:
  4296 ;;		Nothing
  4297 ;; This function is called by:
  4298 ;;		_sprintf
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           	psect	text9
  4303  002426                     __ptext9:
  4304                           	opt stack 0
  4305  002426                     __div_to_l_:
  4306                           	opt stack 29
  4307                           
  4308                           ;incstack = 0
  4309  002426  3403               	rlcf	__div_to_l_@f1+2,w,c
  4310  002428  3404               	rlcf	__div_to_l_@f1+3,w,c
  4311  00242A  6E0C               	movwf	__div_to_l_@exp1,c
  4312  00242C  500C               	movf	__div_to_l_@exp1,w,c
  4313  00242E  A4D8               	btfss	status,2,c
  4314  002430  D009               	goto	l672
  4315  002432  0E00               	movlw	0
  4316  002434  6E01               	movwf	?__div_to_l_,c
  4317  002436  0E00               	movlw	0
  4318  002438  6E02               	movwf	?__div_to_l_+1,c
  4319  00243A  0E00               	movlw	0
  4320  00243C  6E03               	movwf	?__div_to_l_+2,c
  4321  00243E  0E00               	movlw	0
  4322  002440  6E04               	movwf	?__div_to_l_+3,c
  4323  002442  0012               	return	
  4324  002444                     l672:
  4325  002444  3406               	rlcf	__div_to_l_@f2+2,w,c
  4326  002446  3407               	rlcf	__div_to_l_@f2+3,w,c
  4327  002448  6E0B               	movwf	__div_to_l_@cntr,c
  4328  00244A  500B               	movf	__div_to_l_@cntr,w,c
  4329  00244C  A4D8               	btfss	status,2,c
  4330  00244E  D009               	goto	l674
  4331  002450  0E00               	movlw	0
  4332  002452  6E01               	movwf	?__div_to_l_,c
  4333  002454  0E00               	movlw	0
  4334  002456  6E02               	movwf	?__div_to_l_+1,c
  4335  002458  0E00               	movlw	0
  4336  00245A  6E03               	movwf	?__div_to_l_+2,c
  4337  00245C  0E00               	movlw	0
  4338  00245E  6E04               	movwf	?__div_to_l_+3,c
  4339  002460  0012               	return	
  4340  002462                     l674:
  4341  002462  8E03               	bsf	__div_to_l_@f1+2,7,c
  4342  002464  0EFF               	movlw	255
  4343  002466  1601               	andwf	__div_to_l_@f1,f,c
  4344  002468  0EFF               	movlw	255
  4345  00246A  1602               	andwf	__div_to_l_@f1+1,f,c
  4346  00246C  0EFF               	movlw	255
  4347  00246E  1603               	andwf	__div_to_l_@f1+2,f,c
  4348  002470  0E00               	movlw	0
  4349  002472  1604               	andwf	__div_to_l_@f1+3,f,c
  4350  002474  8E06               	bsf	__div_to_l_@f2+2,7,c
  4351  002476  0EFF               	movlw	255
  4352  002478  1604               	andwf	__div_to_l_@f2,f,c
  4353  00247A  0EFF               	movlw	255
  4354  00247C  1605               	andwf	__div_to_l_@f2+1,f,c
  4355  00247E  0EFF               	movlw	255
  4356  002480  1606               	andwf	__div_to_l_@f2+2,f,c
  4357  002482  0E00               	movlw	0
  4358  002484  1607               	andwf	__div_to_l_@f2+3,f,c
  4359  002486  0E00               	movlw	0
  4360  002488  6E07               	movwf	__div_to_l_@quot,c
  4361  00248A  0E00               	movlw	0
  4362  00248C  6E08               	movwf	__div_to_l_@quot+1,c
  4363  00248E  0E00               	movlw	0
  4364  002490  6E09               	movwf	__div_to_l_@quot+2,c
  4365  002492  0E00               	movlw	0
  4366  002494  6E0A               	movwf	__div_to_l_@quot+3,c
  4367  002496  0E7F               	movlw	127
  4368  002498  5E0C               	subwf	__div_to_l_@exp1,f,c
  4369  00249A  500B               	movf	__div_to_l_@cntr,w,c
  4370  00249C  0FA0               	addlw	160
  4371  00249E  5E0C               	subwf	__div_to_l_@exp1,f,c
  4372  0024A0  0E20               	movlw	32
  4373  0024A2  6E0B               	movwf	__div_to_l_@cntr,c
  4374  0024A4  90D8               	bcf	status,0,c
  4375  0024A6  3607               	rlcf	__div_to_l_@quot,f,c
  4376  0024A8  3608               	rlcf	__div_to_l_@quot+1,f,c
  4377  0024AA  3609               	rlcf	__div_to_l_@quot+2,f,c
  4378  0024AC  360A               	rlcf	__div_to_l_@quot+3,f,c
  4379  0024AE  5004               	movf	__div_to_l_@f2,w,c
  4380  0024B0  5C01               	subwf	__div_to_l_@f1,w,c
  4381  0024B2  5005               	movf	__div_to_l_@f2+1,w,c
  4382  0024B4  5802               	subwfb	__div_to_l_@f1+1,w,c
  4383  0024B6  5006               	movf	__div_to_l_@f2+2,w,c
  4384  0024B8  5803               	subwfb	__div_to_l_@f1+2,w,c
  4385  0024BA  5007               	movf	__div_to_l_@f2+3,w,c
  4386  0024BC  5804               	subwfb	__div_to_l_@f1+3,w,c
  4387  0024BE  A0D8               	btfss	status,0,c
  4388  0024C0  D009               	goto	l676
  4389  0024C2  5004               	movf	__div_to_l_@f2,w,c
  4390  0024C4  5E01               	subwf	__div_to_l_@f1,f,c
  4391  0024C6  5005               	movf	__div_to_l_@f2+1,w,c
  4392  0024C8  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4393  0024CA  5006               	movf	__div_to_l_@f2+2,w,c
  4394  0024CC  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4395  0024CE  5007               	movf	__div_to_l_@f2+3,w,c
  4396  0024D0  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4397  0024D2  8007               	bsf	__div_to_l_@quot,0,c
  4398  0024D4                     l676:
  4399  0024D4  90D8               	bcf	status,0,c
  4400  0024D6  3601               	rlcf	__div_to_l_@f1,f,c
  4401  0024D8  3602               	rlcf	__div_to_l_@f1+1,f,c
  4402  0024DA  3603               	rlcf	__div_to_l_@f1+2,f,c
  4403  0024DC  3604               	rlcf	__div_to_l_@f1+3,f,c
  4404  0024DE  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4405  0024E0  D7E1               	goto	l675
  4406  0024E2  AE0C               	btfss	__div_to_l_@exp1,7,c
  4407  0024E4  D016               	goto	l678
  4408  0024E6  500C               	movf	__div_to_l_@exp1,w,c
  4409  0024E8  0A80               	xorlw	128
  4410  0024EA  0F9F               	addlw	159
  4411  0024EC  B0D8               	btfsc	status,0,c
  4412  0024EE  D009               	goto	l679
  4413  0024F0  0E00               	movlw	0
  4414  0024F2  6E01               	movwf	?__div_to_l_,c
  4415  0024F4  0E00               	movlw	0
  4416  0024F6  6E02               	movwf	?__div_to_l_+1,c
  4417  0024F8  0E00               	movlw	0
  4418  0024FA  6E03               	movwf	?__div_to_l_+2,c
  4419  0024FC  0E00               	movlw	0
  4420  0024FE  6E04               	movwf	?__div_to_l_+3,c
  4421  002500  0012               	return	
  4422  002502                     l679:
  4423  002502  90D8               	bcf	status,0,c
  4424  002504  320A               	rrcf	__div_to_l_@quot+3,f,c
  4425  002506  3209               	rrcf	__div_to_l_@quot+2,f,c
  4426  002508  3208               	rrcf	__div_to_l_@quot+1,f,c
  4427  00250A  3207               	rrcf	__div_to_l_@quot,f,c
  4428  00250C  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4429  00250E  D7F9               	goto	l679
  4430  002510  D015               	goto	u2320
  4431  002512                     l678:
  4432  002512  0E1F               	movlw	31
  4433  002514  640C               	cpfsgt	__div_to_l_@exp1,c
  4434  002516  D00F               	goto	l684
  4435  002518  0E00               	movlw	0
  4436  00251A  6E01               	movwf	?__div_to_l_,c
  4437  00251C  0E00               	movlw	0
  4438  00251E  6E02               	movwf	?__div_to_l_+1,c
  4439  002520  0E00               	movlw	0
  4440  002522  6E03               	movwf	?__div_to_l_+2,c
  4441  002524  0E00               	movlw	0
  4442  002526  6E04               	movwf	?__div_to_l_+3,c
  4443  002528  0012               	return	
  4444  00252A  90D8               	bcf	status,0,c
  4445  00252C  3607               	rlcf	__div_to_l_@quot,f,c
  4446  00252E  3608               	rlcf	__div_to_l_@quot+1,f,c
  4447  002530  3609               	rlcf	__div_to_l_@quot+2,f,c
  4448  002532  360A               	rlcf	__div_to_l_@quot+3,f,c
  4449  002534  060C               	decf	__div_to_l_@exp1,f,c
  4450  002536                     l684:
  4451  002536  500C               	movf	__div_to_l_@exp1,w,c
  4452  002538  A4D8               	btfss	status,2,c
  4453  00253A  D7F7               	goto	l685
  4454  00253C                     u2320:
  4455  00253C  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4456  002540  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4457  002544  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4458  002548  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4459  00254C  0012               	return		;funcret
  4460  00254E                     __end_of__div_to_l_:
  4461                           	opt stack 0
  4462                           tblptru	equ	0xFF8
  4463                           tblptrh	equ	0xFF7
  4464                           tblptrl	equ	0xFF6
  4465                           tablat	equ	0xFF5
  4466                           prodh	equ	0xFF4
  4467                           prodl	equ	0xFF3
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           indf2	equ	0xFDF
  4471                           postinc2	equ	0xFDE
  4472                           postdec2	equ	0xFDD
  4473                           fsr2h	equ	0xFDA
  4474                           fsr2l	equ	0xFD9
  4475                           status	equ	0xFD8
  4476                           
  4477 ;; *************** function ___lltoft *****************
  4478 ;; Defined at:
  4479 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;  c               4    8[COMRAM] unsigned long 
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  exp             1   16[COMRAM] unsigned char 
  4484 ;; Return value:  Size  Location     Type
  4485 ;;                  3    8[COMRAM] float 
  4486 ;; Registers used:
  4487 ;;		wreg, status,2, status,0, cstack
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4493 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;Total ram usage:        9 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; Hardware stack levels required when called:    1
  4500 ;; This function calls:
  4501 ;;		___ftpack
  4502 ;; This function is called by:
  4503 ;;		_sprintf
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           	psect	text10
  4508  002E78                     __ptext10:
  4509                           	opt stack 0
  4510  002E78                     ___lltoft:
  4511                           	opt stack 28
  4512                           
  4513                           ;incstack = 0
  4514  002E78  0E8E               	movlw	142
  4515  002E7A  6E11               	movwf	___lltoft@exp,c
  4516  002E7C  D006               	goto	l883
  4517  002E7E  90D8               	bcf	status,0,c
  4518  002E80  320C               	rrcf	___lltoft@c+3,f,c
  4519  002E82  320B               	rrcf	___lltoft@c+2,f,c
  4520  002E84  320A               	rrcf	___lltoft@c+1,f,c
  4521  002E86  3209               	rrcf	___lltoft@c,f,c
  4522  002E88  2A11               	incf	___lltoft@exp,f,c
  4523  002E8A                     l883:
  4524  002E8A  0E00               	movlw	0
  4525  002E8C  1409               	andwf	___lltoft@c,w,c
  4526  002E8E  6E0D               	movwf	??___lltoft& (0+255),c
  4527  002E90  0E00               	movlw	0
  4528  002E92  140A               	andwf	___lltoft@c+1,w,c
  4529  002E94  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4530  002E96  0E00               	movlw	0
  4531  002E98  140B               	andwf	___lltoft@c+2,w,c
  4532  002E9A  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4533  002E9C  0EFF               	movlw	255
  4534  002E9E  140C               	andwf	___lltoft@c+3,w,c
  4535  002EA0  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4536  002EA2  500D               	movf	??___lltoft,w,c
  4537  002EA4  100E               	iorwf	??___lltoft+1,w,c
  4538  002EA6  100F               	iorwf	??___lltoft+2,w,c
  4539  002EA8  1010               	iorwf	??___lltoft+3,w,c
  4540  002EAA  A4D8               	btfss	status,2,c
  4541  002EAC  D7E8               	goto	l884
  4542  002EAE  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4543  002EB2  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4544  002EB6  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4545  002EBA  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4546  002EBE  0E00               	movlw	0
  4547  002EC0  6E05               	movwf	___ftpack@sign,c
  4548  002EC2  ECC2  F014         	call	___ftpack	;wreg free
  4549  002EC6  C001  F009         	movff	?___ftpack,?___lltoft
  4550  002ECA  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4551  002ECE  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4552  002ED2  0012               	return	
  4553  002ED4                     __end_of___lltoft:
  4554                           	opt stack 0
  4555                           tblptru	equ	0xFF8
  4556                           tblptrh	equ	0xFF7
  4557                           tblptrl	equ	0xFF6
  4558                           tablat	equ	0xFF5
  4559                           prodh	equ	0xFF4
  4560                           prodl	equ	0xFF3
  4561                           postinc0	equ	0xFEE
  4562                           wreg	equ	0xFE8
  4563                           indf2	equ	0xFDF
  4564                           postinc2	equ	0xFDE
  4565                           postdec2	equ	0xFDD
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function ___llmod *****************
  4571 ;; Defined at:
  4572 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  dividend        4    0[COMRAM] unsigned long 
  4575 ;;  divisor         4    4[COMRAM] unsigned long 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  counter         1    8[COMRAM] unsigned char 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  4    0[COMRAM] unsigned long 
  4580 ;; Registers used:
  4581 ;;		wreg, status,2, status,0
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4587 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;Total ram usage:        9 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; This function calls:
  4594 ;;		Nothing
  4595 ;; This function is called by:
  4596 ;;		_sprintf
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text11
  4601  002E12                     __ptext11:
  4602                           	opt stack 0
  4603  002E12                     ___llmod:
  4604                           	opt stack 29
  4605                           
  4606                           ;incstack = 0
  4607  002E12  5005               	movf	___llmod@divisor,w,c
  4608  002E14  1006               	iorwf	___llmod@divisor+1,w,c
  4609  002E16  1007               	iorwf	___llmod@divisor+2,w,c
  4610  002E18  1008               	iorwf	___llmod@divisor+3,w,c
  4611  002E1A  B4D8               	btfsc	status,2,c
  4612  002E1C  D024               	goto	l877
  4613  002E1E  0E01               	movlw	1
  4614  002E20  6E09               	movwf	___llmod@counter,c
  4615  002E22  D006               	goto	l872
  4616  002E24  90D8               	bcf	status,0,c
  4617  002E26  3605               	rlcf	___llmod@divisor,f,c
  4618  002E28  3606               	rlcf	___llmod@divisor+1,f,c
  4619  002E2A  3607               	rlcf	___llmod@divisor+2,f,c
  4620  002E2C  3608               	rlcf	___llmod@divisor+3,f,c
  4621  002E2E  2A09               	incf	___llmod@counter,f,c
  4622  002E30                     l872:
  4623  002E30  AE08               	btfss	___llmod@divisor+3,7,c
  4624  002E32  D7F8               	goto	l873
  4625  002E34                     u2530:
  4626  002E34  5005               	movf	___llmod@divisor,w,c
  4627  002E36  5C01               	subwf	___llmod@dividend,w,c
  4628  002E38  5006               	movf	___llmod@divisor+1,w,c
  4629  002E3A  5802               	subwfb	___llmod@dividend+1,w,c
  4630  002E3C  5007               	movf	___llmod@divisor+2,w,c
  4631  002E3E  5803               	subwfb	___llmod@dividend+2,w,c
  4632  002E40  5008               	movf	___llmod@divisor+3,w,c
  4633  002E42  5804               	subwfb	___llmod@dividend+3,w,c
  4634  002E44  A0D8               	btfss	status,0,c
  4635  002E46  D008               	goto	l876
  4636  002E48  5005               	movf	___llmod@divisor,w,c
  4637  002E4A  5E01               	subwf	___llmod@dividend,f,c
  4638  002E4C  5006               	movf	___llmod@divisor+1,w,c
  4639  002E4E  5A02               	subwfb	___llmod@dividend+1,f,c
  4640  002E50  5007               	movf	___llmod@divisor+2,w,c
  4641  002E52  5A03               	subwfb	___llmod@dividend+2,f,c
  4642  002E54  5008               	movf	___llmod@divisor+3,w,c
  4643  002E56  5A04               	subwfb	___llmod@dividend+3,f,c
  4644  002E58                     l876:
  4645  002E58  90D8               	bcf	status,0,c
  4646  002E5A  3208               	rrcf	___llmod@divisor+3,f,c
  4647  002E5C  3207               	rrcf	___llmod@divisor+2,f,c
  4648  002E5E  3206               	rrcf	___llmod@divisor+1,f,c
  4649  002E60  3205               	rrcf	___llmod@divisor,f,c
  4650  002E62  2E09               	decfsz	___llmod@counter,f,c
  4651  002E64  D7E7               	goto	u2530
  4652  002E66                     l877:
  4653  002E66  C001  F001         	movff	___llmod@dividend,?___llmod
  4654  002E6A  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4655  002E6E  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4656  002E72  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4657  002E76  0012               	return		;funcret
  4658  002E78                     __end_of___llmod:
  4659                           	opt stack 0
  4660                           tblptru	equ	0xFF8
  4661                           tblptrh	equ	0xFF7
  4662                           tblptrl	equ	0xFF6
  4663                           tablat	equ	0xFF5
  4664                           prodh	equ	0xFF4
  4665                           prodl	equ	0xFF3
  4666                           postinc0	equ	0xFEE
  4667                           wreg	equ	0xFE8
  4668                           indf2	equ	0xFDF
  4669                           postinc2	equ	0xFDE
  4670                           postdec2	equ	0xFDD
  4671                           fsr2h	equ	0xFDA
  4672                           fsr2l	equ	0xFD9
  4673                           status	equ	0xFD8
  4674                           
  4675 ;; *************** function ___ftsub *****************
  4676 ;; Defined at:
  4677 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;  f1              3   57[COMRAM] float 
  4680 ;;  f2              3   60[COMRAM] float 
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;		None
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  3   57[COMRAM] float 
  4685 ;; Registers used:
  4686 ;;		wreg, status,2, status,0, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4692 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;Total ram usage:        6 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    2
  4699 ;; This function calls:
  4700 ;;		___ftadd
  4701 ;; This function is called by:
  4702 ;;		_sprintf
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           	psect	text12
  4707  0030C0                     __ptext12:
  4708                           	opt stack 0
  4709  0030C0                     ___ftsub:
  4710                           	opt stack 27
  4711                           
  4712                           ;incstack = 0
  4713  0030C0  503D               	movf	___ftsub@f2,w,c
  4714  0030C2  103E               	iorwf	___ftsub@f2+1,w,c
  4715  0030C4  103F               	iorwf	___ftsub@f2+2,w,c
  4716  0030C6  B4D8               	btfsc	status,2,c
  4717  0030C8  D006               	goto	l817
  4718  0030CA  0E00               	movlw	0
  4719  0030CC  1A3D               	xorwf	___ftsub@f2,f,c
  4720  0030CE  0E00               	movlw	0
  4721  0030D0  1A3E               	xorwf	___ftsub@f2+1,f,c
  4722  0030D2  0E80               	movlw	128
  4723  0030D4  1A3F               	xorwf	___ftsub@f2+2,f,c
  4724  0030D6                     l817:
  4725  0030D6  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4726  0030DA  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4727  0030DE  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4728  0030E2  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4729  0030E6  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4730  0030EA  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4731  0030EE  ECA4  F010         	call	___ftadd	;wreg free
  4732  0030F2  C02E  F03A         	movff	?___ftadd,?___ftsub
  4733  0030F6  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4734  0030FA  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4735  0030FE  0012               	return	
  4736  003100                     __end_of___ftsub:
  4737                           	opt stack 0
  4738                           tblptru	equ	0xFF8
  4739                           tblptrh	equ	0xFF7
  4740                           tblptrl	equ	0xFF6
  4741                           tablat	equ	0xFF5
  4742                           prodh	equ	0xFF4
  4743                           prodl	equ	0xFF3
  4744                           postinc0	equ	0xFEE
  4745                           wreg	equ	0xFE8
  4746                           indf2	equ	0xFDF
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function ___ftadd *****************
  4754 ;; Defined at:
  4755 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  f1              3   45[COMRAM] float 
  4758 ;;  f2              3   48[COMRAM] float 
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;  exp1            1   56[COMRAM] unsigned char 
  4761 ;;  exp2            1   55[COMRAM] unsigned char 
  4762 ;;  sign            1   54[COMRAM] unsigned char 
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  3   45[COMRAM] float 
  4765 ;; Registers used:
  4766 ;;		wreg, status,2, status,0, cstack
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4772 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4774 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4775 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4776 ;;Total ram usage:       12 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    1
  4779 ;; This function calls:
  4780 ;;		___ftpack
  4781 ;; This function is called by:
  4782 ;;		_sprintf
  4783 ;;		___ftsub
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           	psect	text13
  4788  002148                     __ptext13:
  4789                           	opt stack 0
  4790  002148                     ___ftadd:
  4791                           	opt stack 27
  4792                           
  4793                           ;incstack = 0
  4794  002148  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4795  00214C  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4796  00214E  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4797  002150  342F               	rlcf	___ftadd@f1+1,w,c
  4798  002152  3634               	rlcf	??___ftadd& (0+255),f,c
  4799  002154  E301               	bnc	u1601
  4800  002156  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4801  002158                     u1601:
  4802  002158  5034               	movf	??___ftadd,w,c
  4803  00215A  6E39               	movwf	___ftadd@exp1,c
  4804  00215C  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4805  002160  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4806  002162  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4807  002164  3432               	rlcf	___ftadd@f2+1,w,c
  4808  002166  3634               	rlcf	??___ftadd& (0+255),f,c
  4809  002168  E301               	bnc	u1611
  4810  00216A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4811  00216C                     u1611:
  4812  00216C  5034               	movf	??___ftadd,w,c
  4813  00216E  6E38               	movwf	___ftadd@exp2,c
  4814  002170  5039               	movf	___ftadd@exp1,w,c
  4815  002172  B4D8               	btfsc	status,2,c
  4816  002174  D00B               	goto	u1640
  4817  002176  5038               	movf	___ftadd@exp2,w,c
  4818  002178  5C39               	subwf	___ftadd@exp1,w,c
  4819  00217A  B0D8               	btfsc	status,0,c
  4820  00217C  D00E               	goto	l735
  4821  00217E  5039               	movf	___ftadd@exp1,w,c
  4822  002180  0800               	sublw	0
  4823  002182  2438               	addwf	___ftadd@exp2,w,c
  4824  002184  6E34               	movwf	??___ftadd& (0+255),c
  4825  002186  0E18               	movlw	24
  4826  002188  6434               	cpfsgt	??___ftadd,c
  4827  00218A  D007               	goto	l735
  4828  00218C                     u1640:
  4829  00218C  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4830  002190  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4831  002194  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4832  002198  0012               	return	
  4833  00219A                     l735:
  4834  00219A  5038               	movf	___ftadd@exp2,w,c
  4835  00219C  B4D8               	btfsc	status,2,c
  4836  00219E  D00B               	goto	u1670
  4837  0021A0  5039               	movf	___ftadd@exp1,w,c
  4838  0021A2  5C38               	subwf	___ftadd@exp2,w,c
  4839  0021A4  B0D8               	btfsc	status,0,c
  4840  0021A6  D00E               	goto	l739
  4841  0021A8  5038               	movf	___ftadd@exp2,w,c
  4842  0021AA  0800               	sublw	0
  4843  0021AC  2439               	addwf	___ftadd@exp1,w,c
  4844  0021AE  6E34               	movwf	??___ftadd& (0+255),c
  4845  0021B0  0E18               	movlw	24
  4846  0021B2  6434               	cpfsgt	??___ftadd,c
  4847  0021B4  D007               	goto	l739
  4848  0021B6                     u1670:
  4849  0021B6  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4850  0021BA  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4851  0021BE  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4852  0021C2  0012               	return	
  4853  0021C4                     l739:
  4854  0021C4  0E06               	movlw	6
  4855  0021C6  6E37               	movwf	___ftadd@sign,c
  4856  0021C8  BE30               	btfsc	___ftadd@f1+2,7,c
  4857  0021CA  8E37               	bsf	___ftadd@sign,7,c
  4858  0021CC  BE33               	btfsc	___ftadd@f2+2,7,c
  4859  0021CE  8C37               	bsf	___ftadd@sign,6,c
  4860  0021D0  8E2F               	bsf	___ftadd@f1+1,7,c
  4861  0021D2  0EFF               	movlw	255
  4862  0021D4  162E               	andwf	___ftadd@f1,f,c
  4863  0021D6  0EFF               	movlw	255
  4864  0021D8  162F               	andwf	___ftadd@f1+1,f,c
  4865  0021DA  0E00               	movlw	0
  4866  0021DC  1630               	andwf	___ftadd@f1+2,f,c
  4867  0021DE  8E32               	bsf	___ftadd@f2+1,7,c
  4868  0021E0  0EFF               	movlw	255
  4869  0021E2  1631               	andwf	___ftadd@f2,f,c
  4870  0021E4  0EFF               	movlw	255
  4871  0021E6  1632               	andwf	___ftadd@f2+1,f,c
  4872  0021E8  0E00               	movlw	0
  4873  0021EA  1633               	andwf	___ftadd@f2+2,f,c
  4874  0021EC  5038               	movf	___ftadd@exp2,w,c
  4875  0021EE  5C39               	subwf	___ftadd@exp1,w,c
  4876  0021F0  B0D8               	btfsc	status,0,c
  4877  0021F2  D01B               	goto	l744
  4878  0021F4                     u1700:
  4879  0021F4  90D8               	bcf	status,0,c
  4880  0021F6  3631               	rlcf	___ftadd@f2,f,c
  4881  0021F8  3632               	rlcf	___ftadd@f2+1,f,c
  4882  0021FA  3633               	rlcf	___ftadd@f2+2,f,c
  4883  0021FC  0638               	decf	___ftadd@exp2,f,c
  4884  0021FE  5039               	movf	___ftadd@exp1,w,c
  4885  002200  1838               	xorwf	___ftadd@exp2,w,c
  4886  002202  B4D8               	btfsc	status,2,c
  4887  002204  D00D               	goto	l749
  4888  002206  0637               	decf	___ftadd@sign,f,c
  4889  002208  C037  F034         	movff	___ftadd@sign,??___ftadd
  4890  00220C  0E07               	movlw	7
  4891  00220E  1634               	andwf	??___ftadd,f,c
  4892  002210  B4D8               	btfsc	status,2,c
  4893  002212  D006               	goto	l749
  4894  002214  D7EF               	goto	u1700
  4895  002216  90D8               	bcf	status,0,c
  4896  002218  3230               	rrcf	___ftadd@f1+2,f,c
  4897  00221A  322F               	rrcf	___ftadd@f1+1,f,c
  4898  00221C  322E               	rrcf	___ftadd@f1,f,c
  4899  00221E  2A39               	incf	___ftadd@exp1,f,c
  4900  002220                     l749:
  4901  002220  5038               	movf	___ftadd@exp2,w,c
  4902  002222  1839               	xorwf	___ftadd@exp1,w,c
  4903  002224  B4D8               	btfsc	status,2,c
  4904  002226  D01F               	goto	u1770
  4905  002228  D7F6               	goto	l750
  4906  00222A                     l744:
  4907  00222A  5039               	movf	___ftadd@exp1,w,c
  4908  00222C  5C38               	subwf	___ftadd@exp2,w,c
  4909  00222E  B0D8               	btfsc	status,0,c
  4910  002230  D01A               	goto	u1770
  4911  002232                     u1740:
  4912  002232  90D8               	bcf	status,0,c
  4913  002234  362E               	rlcf	___ftadd@f1,f,c
  4914  002236  362F               	rlcf	___ftadd@f1+1,f,c
  4915  002238  3630               	rlcf	___ftadd@f1+2,f,c
  4916  00223A  0639               	decf	___ftadd@exp1,f,c
  4917  00223C  5039               	movf	___ftadd@exp1,w,c
  4918  00223E  1838               	xorwf	___ftadd@exp2,w,c
  4919  002240  B4D8               	btfsc	status,2,c
  4920  002242  D00D               	goto	l758
  4921  002244  0637               	decf	___ftadd@sign,f,c
  4922  002246  C037  F034         	movff	___ftadd@sign,??___ftadd
  4923  00224A  0E07               	movlw	7
  4924  00224C  1634               	andwf	??___ftadd,f,c
  4925  00224E  B4D8               	btfsc	status,2,c
  4926  002250  D006               	goto	l758
  4927  002252  D7EF               	goto	u1740
  4928  002254  90D8               	bcf	status,0,c
  4929  002256  3233               	rrcf	___ftadd@f2+2,f,c
  4930  002258  3232               	rrcf	___ftadd@f2+1,f,c
  4931  00225A  3231               	rrcf	___ftadd@f2,f,c
  4932  00225C  2A38               	incf	___ftadd@exp2,f,c
  4933  00225E                     l758:
  4934  00225E  5038               	movf	___ftadd@exp2,w,c
  4935  002260  1839               	xorwf	___ftadd@exp1,w,c
  4936  002262  A4D8               	btfss	status,2,c
  4937  002264  D7F7               	goto	l759
  4938  002266                     u1770:
  4939  002266  AE37               	btfss	___ftadd@sign,7,c
  4940  002268  D00C               	goto	l761
  4941  00226A  0EFF               	movlw	255
  4942  00226C  1A2E               	xorwf	___ftadd@f1,f,c
  4943  00226E  0EFF               	movlw	255
  4944  002270  1A2F               	xorwf	___ftadd@f1+1,f,c
  4945  002272  0EFF               	movlw	255
  4946  002274  1A30               	xorwf	___ftadd@f1+2,f,c
  4947  002276  0E01               	movlw	1
  4948  002278  262E               	addwf	___ftadd@f1,f,c
  4949  00227A  0E00               	movlw	0
  4950  00227C  222F               	addwfc	___ftadd@f1+1,f,c
  4951  00227E  0E00               	movlw	0
  4952  002280  2230               	addwfc	___ftadd@f1+2,f,c
  4953  002282                     l761:
  4954  002282  AC37               	btfss	___ftadd@sign,6,c
  4955  002284  D00C               	goto	l762
  4956  002286  0EFF               	movlw	255
  4957  002288  1A31               	xorwf	___ftadd@f2,f,c
  4958  00228A  0EFF               	movlw	255
  4959  00228C  1A32               	xorwf	___ftadd@f2+1,f,c
  4960  00228E  0EFF               	movlw	255
  4961  002290  1A33               	xorwf	___ftadd@f2+2,f,c
  4962  002292  0E01               	movlw	1
  4963  002294  2631               	addwf	___ftadd@f2,f,c
  4964  002296  0E00               	movlw	0
  4965  002298  2232               	addwfc	___ftadd@f2+1,f,c
  4966  00229A  0E00               	movlw	0
  4967  00229C  2233               	addwfc	___ftadd@f2+2,f,c
  4968  00229E                     l762:
  4969  00229E  0E00               	movlw	0
  4970  0022A0  6E37               	movwf	___ftadd@sign,c
  4971  0022A2  502E               	movf	___ftadd@f1,w,c
  4972  0022A4  2631               	addwf	___ftadd@f2,f,c
  4973  0022A6  502F               	movf	___ftadd@f1+1,w,c
  4974  0022A8  2232               	addwfc	___ftadd@f2+1,f,c
  4975  0022AA  5030               	movf	___ftadd@f1+2,w,c
  4976  0022AC  2233               	addwfc	___ftadd@f2+2,f,c
  4977  0022AE  AE33               	btfss	___ftadd@f2+2,7,c
  4978  0022B0  D00E               	goto	l763
  4979  0022B2  0EFF               	movlw	255
  4980  0022B4  1A31               	xorwf	___ftadd@f2,f,c
  4981  0022B6  0EFF               	movlw	255
  4982  0022B8  1A32               	xorwf	___ftadd@f2+1,f,c
  4983  0022BA  0EFF               	movlw	255
  4984  0022BC  1A33               	xorwf	___ftadd@f2+2,f,c
  4985  0022BE  0E01               	movlw	1
  4986  0022C0  2631               	addwf	___ftadd@f2,f,c
  4987  0022C2  0E00               	movlw	0
  4988  0022C4  2232               	addwfc	___ftadd@f2+1,f,c
  4989  0022C6  0E00               	movlw	0
  4990  0022C8  2233               	addwfc	___ftadd@f2+2,f,c
  4991  0022CA  0E01               	movlw	1
  4992  0022CC  6E37               	movwf	___ftadd@sign,c
  4993  0022CE                     l763:
  4994  0022CE  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4995  0022D2  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4996  0022D6  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4997  0022DA  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4998  0022DE  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4999  0022E2  ECC2  F014         	call	___ftpack	;wreg free
  5000  0022E6  C001  F02E         	movff	?___ftpack,?___ftadd
  5001  0022EA  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5002  0022EE  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5003  0022F2  0012               	return	
  5004  0022F4                     __end_of___ftadd:
  5005                           	opt stack 0
  5006                           tblptru	equ	0xFF8
  5007                           tblptrh	equ	0xFF7
  5008                           tblptrl	equ	0xFF6
  5009                           tablat	equ	0xFF5
  5010                           prodh	equ	0xFF4
  5011                           prodl	equ	0xFF3
  5012                           postinc0	equ	0xFEE
  5013                           wreg	equ	0xFE8
  5014                           indf2	equ	0xFDF
  5015                           postinc2	equ	0xFDE
  5016                           postdec2	equ	0xFDD
  5017                           fsr2h	equ	0xFDA
  5018                           fsr2l	equ	0xFD9
  5019                           status	equ	0xFD8
  5020                           
  5021 ;; *************** function ___ftneg *****************
  5022 ;; Defined at:
  5023 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;  f1              3    0[COMRAM] float 
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;		None
  5028 ;; Return value:  Size  Location     Type
  5029 ;;                  3    0[COMRAM] float 
  5030 ;; Registers used:
  5031 ;;		wreg, status,2, status,0
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5037 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;Total ram usage:        3 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		_sprintf
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text14
  5051  003186                     __ptext14:
  5052                           	opt stack 0
  5053  003186                     ___ftneg:
  5054                           	opt stack 29
  5055                           
  5056                           ;incstack = 0
  5057  003186  5001               	movf	___ftneg@f1,w,c
  5058  003188  1002               	iorwf	___ftneg@f1+1,w,c
  5059  00318A  1003               	iorwf	___ftneg@f1+2,w,c
  5060  00318C  B4D8               	btfsc	status,2,c
  5061  00318E  D006               	goto	l811
  5062  003190  0E00               	movlw	0
  5063  003192  1A01               	xorwf	___ftneg@f1,f,c
  5064  003194  0E00               	movlw	0
  5065  003196  1A02               	xorwf	___ftneg@f1+1,f,c
  5066  003198  0E80               	movlw	128
  5067  00319A  1A03               	xorwf	___ftneg@f1+2,f,c
  5068  00319C                     l811:
  5069  00319C  C001  F001         	movff	___ftneg@f1,?___ftneg
  5070  0031A0  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5071  0031A4  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5072  0031A8  0012               	return		;funcret
  5073  0031AA                     __end_of___ftneg:
  5074                           	opt stack 0
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           postinc0	equ	0xFEE
  5082                           wreg	equ	0xFE8
  5083                           indf2	equ	0xFDF
  5084                           postinc2	equ	0xFDE
  5085                           postdec2	equ	0xFDD
  5086                           fsr2h	equ	0xFDA
  5087                           fsr2l	equ	0xFD9
  5088                           status	equ	0xFD8
  5089                           
  5090 ;; *************** function ___ftge *****************
  5091 ;; Defined at:
  5092 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;  ff1             3    0[COMRAM] float 
  5095 ;;  ff2             3    3[COMRAM] float 
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;		None
  5098 ;; Return value:  Size  Location     Type
  5099 ;;		None               void
  5100 ;; Registers used:
  5101 ;;		wreg, status,2, status,0
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5107 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;Total ram usage:        9 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; This function calls:
  5114 ;;		Nothing
  5115 ;; This function is called by:
  5116 ;;		_main
  5117 ;;		_sprintf
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text15
  5122  002A32                     __ptext15:
  5123                           	opt stack 0
  5124  002A32                     ___ftge:
  5125                           	opt stack 29
  5126                           
  5127                           ;incstack = 0
  5128  002A32  AE03               	btfss	___ftge@ff1+2,7,c
  5129  002A34  D016               	goto	l793
  5130  002A36  C001  F007         	movff	___ftge@ff1,??___ftge
  5131  002A3A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5132  002A3E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5133  002A42  1E07               	comf	??___ftge,f,c
  5134  002A44  1E08               	comf	??___ftge+1,f,c
  5135  002A46  1E09               	comf	??___ftge+2,f,c
  5136  002A48  2A07               	incf	??___ftge,f,c
  5137  002A4A  0E00               	movlw	0
  5138  002A4C  2208               	addwfc	??___ftge+1,f,c
  5139  002A4E  2209               	addwfc	??___ftge+2,f,c
  5140  002A50  0E00               	movlw	0
  5141  002A52  2407               	addwf	??___ftge,w,c
  5142  002A54  6E01               	movwf	___ftge@ff1,c
  5143  002A56  0E00               	movlw	0
  5144  002A58  2008               	addwfc	??___ftge+1,w,c
  5145  002A5A  6E02               	movwf	___ftge@ff1+1,c
  5146  002A5C  0E80               	movlw	128
  5147  002A5E  2009               	addwfc	??___ftge+2,w,c
  5148  002A60  6E03               	movwf	___ftge@ff1+2,c
  5149  002A62                     l793:
  5150  002A62  AE06               	btfss	___ftge@ff2+2,7,c
  5151  002A64  D016               	goto	l794
  5152  002A66  C004  F007         	movff	___ftge@ff2,??___ftge
  5153  002A6A  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5154  002A6E  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5155  002A72  1E07               	comf	??___ftge,f,c
  5156  002A74  1E08               	comf	??___ftge+1,f,c
  5157  002A76  1E09               	comf	??___ftge+2,f,c
  5158  002A78  2A07               	incf	??___ftge,f,c
  5159  002A7A  0E00               	movlw	0
  5160  002A7C  2208               	addwfc	??___ftge+1,f,c
  5161  002A7E  2209               	addwfc	??___ftge+2,f,c
  5162  002A80  0E00               	movlw	0
  5163  002A82  2407               	addwf	??___ftge,w,c
  5164  002A84  6E04               	movwf	___ftge@ff2,c
  5165  002A86  0E00               	movlw	0
  5166  002A88  2008               	addwfc	??___ftge+1,w,c
  5167  002A8A  6E05               	movwf	___ftge@ff2+1,c
  5168  002A8C  0E80               	movlw	128
  5169  002A8E  2009               	addwfc	??___ftge+2,w,c
  5170  002A90  6E06               	movwf	___ftge@ff2+2,c
  5171  002A92                     l794:
  5172  002A92  0E00               	movlw	0
  5173  002A94  1A01               	xorwf	___ftge@ff1,f,c
  5174  002A96  0E00               	movlw	0
  5175  002A98  1A02               	xorwf	___ftge@ff1+1,f,c
  5176  002A9A  0E80               	movlw	128
  5177  002A9C  1A03               	xorwf	___ftge@ff1+2,f,c
  5178  002A9E  0E00               	movlw	0
  5179  002AA0  1A04               	xorwf	___ftge@ff2,f,c
  5180  002AA2  0E00               	movlw	0
  5181  002AA4  1A05               	xorwf	___ftge@ff2+1,f,c
  5182  002AA6  0E80               	movlw	128
  5183  002AA8  1A06               	xorwf	___ftge@ff2+2,f,c
  5184  002AAA  5004               	movf	___ftge@ff2,w,c
  5185  002AAC  5C01               	subwf	___ftge@ff1,w,c
  5186  002AAE  5005               	movf	___ftge@ff2+1,w,c
  5187  002AB0  5802               	subwfb	___ftge@ff1+1,w,c
  5188  002AB2  5006               	movf	___ftge@ff2+2,w,c
  5189  002AB4  5803               	subwfb	___ftge@ff1+2,w,c
  5190  002AB6  B0D8               	btfsc	status,0,c
  5191  002AB8  D002               	goto	l2405
  5192  002ABA  90D8               	bcf	status,0,c
  5193  002ABC  0012               	return	
  5194  002ABE                     l2405:
  5195  002ABE  80D8               	bsf	status,0,c
  5196  002AC0  0012               	return	
  5197  002AC2                     __end_of___ftge:
  5198                           	opt stack 0
  5199                           tblptru	equ	0xFF8
  5200                           tblptrh	equ	0xFF7
  5201                           tblptrl	equ	0xFF6
  5202                           tablat	equ	0xFF5
  5203                           prodh	equ	0xFF4
  5204                           prodl	equ	0xFF3
  5205                           postinc0	equ	0xFEE
  5206                           wreg	equ	0xFE8
  5207                           indf2	equ	0xFDF
  5208                           postinc2	equ	0xFDE
  5209                           postdec2	equ	0xFDD
  5210                           fsr2h	equ	0xFDA
  5211                           fsr2l	equ	0xFD9
  5212                           status	equ	0xFD8
  5213                           
  5214 ;; *************** function _read_Uout *****************
  5215 ;; Defined at:
  5216 ;;		line 28 in file "MPPT.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;		None
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;		None
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      void 
  5223 ;; Registers used:
  5224 ;;		wreg, status,2, status,0, cstack
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5232 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5233 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5234 ;;Total ram usage:        2 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    2
  5237 ;; This function calls:
  5238 ;;		___awtoft
  5239 ;;		___ftdiv
  5240 ;;		___ftmul
  5241 ;;		___fttol
  5242 ;; This function is called by:
  5243 ;;		_main
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           	psect	text16
  5248  00281C                     __ptext16:
  5249                           	opt stack 0
  5250  00281C                     _read_Uout:
  5251                           	opt stack 28
  5252                           
  5253                           ;MPPT.c: 30: ADCON0=0b00000111;
  5254                           
  5255                           ;incstack = 0
  5256  00281C  0E07               	movlw	7
  5257  00281E  6EC2               	movwf	4034,c	;volatile
  5258                           
  5259                           ;MPPT.c: 31: _delay((unsigned long)((10)*(64000000/4000.0)));
  5260  002820  0ED0               	movlw	208
  5261  002822  6E3A               	movwf	??_read_Uout& (0+255),c
  5262  002824  0ECA               	movlw	202
  5263  002826                     u3067:
  5264  002826  2EE8               	decfsz	wreg,f,c
  5265  002828  D7FE               	bra	u3067
  5266  00282A  2E3A               	decfsz	??_read_Uout& (0+255),f,c
  5267  00282C  D7FC               	bra	u3067
  5268                           
  5269                           ;MPPT.c: 32: ADCON0bits.GO=1;
  5270  00282E  82C2               	bsf	4034,1,c	;volatile
  5271                           
  5272                           ;MPPT.c: 33: _delay((unsigned long)((100)*(64000000/4000.0)));
  5273  002830  0E09               	movlw	9
  5274  002832  6E3B               	movwf	(??_read_Uout+1)& (0+255),c
  5275  002834  0E1E               	movlw	30
  5276  002836  6E3A               	movwf	??_read_Uout& (0+255),c
  5277  002838  0EE4               	movlw	228
  5278  00283A                     u3077:
  5279  00283A  2EE8               	decfsz	wreg,f,c
  5280  00283C  D7FE               	bra	u3077
  5281  00283E  2E3A               	decfsz	??_read_Uout& (0+255),f,c
  5282  002840  D7FC               	bra	u3077
  5283  002842  2E3B               	decfsz	(??_read_Uout+1)& (0+255),f,c
  5284  002844  D7FA               	bra	u3077
  5285  002846  D000               	nop2	
  5286                           
  5287                           ;MPPT.c: 34: rez_adc_U=ADRESH;
  5288  002848  CFC4 F051          	movff	4036,_rez_adc_U	;volatile
  5289  00284C  6A52               	clrf	_rez_adc_U+1,c
  5290                           
  5291                           ;MPPT.c: 35: tens=rez_adc_U*0.01953125;
  5292  00284E  0E00               	movlw	0
  5293  002850  6E18               	movwf	___ftmul@f2,c
  5294  002852  0EA0               	movlw	160
  5295  002854  6E19               	movwf	___ftmul@f2+1,c
  5296  002856  0E3C               	movlw	60
  5297  002858  6E1A               	movwf	___ftmul@f2+2,c
  5298  00285A  C051  F009         	movff	_rez_adc_U,___awtoft@c
  5299  00285E  C052  F00A         	movff	_rez_adc_U+1,___awtoft@c+1
  5300  002862  EC80  F018         	call	___awtoft	;wreg free
  5301  002866  C009  F015         	movff	?___awtoft,___ftmul@f1
  5302  00286A  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  5303  00286E  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  5304  002872  EC21  F013         	call	___ftmul	;wreg free
  5305  002876  C015  F02B         	movff	?___ftmul,___fttol@f1
  5306  00287A  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  5307  00287E  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  5308  002882  ECA7  F012         	call	___fttol	;wreg free
  5309  002886  C02B  F04F         	movff	?___fttol,_tens
  5310  00288A  C02C  F050         	movff	?___fttol+1,_tens+1
  5311                           
  5312                           ;MPPT.c: 36: Uout=tens/0.25;
  5313  00288E  0E00               	movlw	0
  5314  002890  6E10               	movwf	___ftdiv@f2,c
  5315  002892  0E80               	movlw	128
  5316  002894  6E11               	movwf	___ftdiv@f2+1,c
  5317  002896  0E3E               	movlw	62
  5318  002898  6E12               	movwf	___ftdiv@f2+2,c
  5319  00289A  C04F  F009         	movff	_tens,___awtoft@c
  5320  00289E  C050  F00A         	movff	_tens+1,___awtoft@c+1
  5321  0028A2  EC80  F018         	call	___awtoft	;wreg free
  5322  0028A6  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  5323  0028AA  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  5324  0028AE  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  5325  0028B2  EC9B  F013         	call	___ftdiv	;wreg free
  5326  0028B6  C00D  F02B         	movff	?___ftdiv,___fttol@f1
  5327  0028BA  C00E  F02C         	movff	?___ftdiv+1,___fttol@f1+1
  5328  0028BE  C00F  F02D         	movff	?___ftdiv+2,___fttol@f1+2
  5329  0028C2  ECA7  F012         	call	___fttol	;wreg free
  5330  0028C6  C02B  F0BC         	movff	?___fttol,_Uout
  5331  0028CA  C02C  F0BD         	movff	?___fttol+1,_Uout+1
  5332  0028CE  0012               	return		;funcret
  5333  0028D0                     __end_of_read_Uout:
  5334                           	opt stack 0
  5335                           tblptru	equ	0xFF8
  5336                           tblptrh	equ	0xFF7
  5337                           tblptrl	equ	0xFF6
  5338                           tablat	equ	0xFF5
  5339                           prodh	equ	0xFF4
  5340                           prodl	equ	0xFF3
  5341                           postinc0	equ	0xFEE
  5342                           wreg	equ	0xFE8
  5343                           indf2	equ	0xFDF
  5344                           postinc2	equ	0xFDE
  5345                           postdec2	equ	0xFDD
  5346                           fsr2h	equ	0xFDA
  5347                           fsr2l	equ	0xFD9
  5348                           status	equ	0xFD8
  5349                           
  5350 ;; *************** function _read_Uin *****************
  5351 ;; Defined at:
  5352 ;;		line 39 in file "MPPT.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;		None
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;		None
  5357 ;; Return value:  Size  Location     Type
  5358 ;;                  1    wreg      void 
  5359 ;; Registers used:
  5360 ;;		wreg, status,2, status,0, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;Total ram usage:        2 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:    2
  5373 ;; This function calls:
  5374 ;;		___awtoft
  5375 ;;		___ftdiv
  5376 ;;		___ftmul
  5377 ;;		___fttol
  5378 ;; This function is called by:
  5379 ;;		_main
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text17
  5384  0028D0                     __ptext17:
  5385                           	opt stack 0
  5386  0028D0                     _read_Uin:
  5387                           	opt stack 28
  5388                           
  5389                           ;MPPT.c: 41: ADCON0=0b00001111;
  5390                           
  5391                           ;incstack = 0
  5392  0028D0  0E0F               	movlw	15
  5393  0028D2  6EC2               	movwf	4034,c	;volatile
  5394                           
  5395                           ;MPPT.c: 42: _delay((unsigned long)((10)*(64000000/4000.0)));
  5396  0028D4  0ED0               	movlw	208
  5397  0028D6  6E3A               	movwf	??_read_Uin& (0+255),c
  5398  0028D8  0ECA               	movlw	202
  5399  0028DA                     u3087:
  5400  0028DA  2EE8               	decfsz	wreg,f,c
  5401  0028DC  D7FE               	bra	u3087
  5402  0028DE  2E3A               	decfsz	??_read_Uin& (0+255),f,c
  5403  0028E0  D7FC               	bra	u3087
  5404                           
  5405                           ;MPPT.c: 43: ADCON0bits.GO=1;
  5406  0028E2  82C2               	bsf	4034,1,c	;volatile
  5407                           
  5408                           ;MPPT.c: 44: _delay((unsigned long)((100)*(64000000/4000.0)));
  5409  0028E4  0E09               	movlw	9
  5410  0028E6  6E3B               	movwf	(??_read_Uin+1)& (0+255),c
  5411  0028E8  0E1E               	movlw	30
  5412  0028EA  6E3A               	movwf	??_read_Uin& (0+255),c
  5413  0028EC  0EE4               	movlw	228
  5414  0028EE                     u3097:
  5415  0028EE  2EE8               	decfsz	wreg,f,c
  5416  0028F0  D7FE               	bra	u3097
  5417  0028F2  2E3A               	decfsz	??_read_Uin& (0+255),f,c
  5418  0028F4  D7FC               	bra	u3097
  5419  0028F6  2E3B               	decfsz	(??_read_Uin+1)& (0+255),f,c
  5420  0028F8  D7FA               	bra	u3097
  5421  0028FA  D000               	nop2	
  5422                           
  5423                           ;MPPT.c: 45: rez_adc_U=ADRESH;
  5424  0028FC  CFC4 F051          	movff	4036,_rez_adc_U	;volatile
  5425  002900  6A52               	clrf	_rez_adc_U+1,c
  5426                           
  5427                           ;MPPT.c: 46: tens=rez_adc_U*0.01953125;
  5428  002902  0E00               	movlw	0
  5429  002904  6E18               	movwf	___ftmul@f2,c
  5430  002906  0EA0               	movlw	160
  5431  002908  6E19               	movwf	___ftmul@f2+1,c
  5432  00290A  0E3C               	movlw	60
  5433  00290C  6E1A               	movwf	___ftmul@f2+2,c
  5434  00290E  C051  F009         	movff	_rez_adc_U,___awtoft@c
  5435  002912  C052  F00A         	movff	_rez_adc_U+1,___awtoft@c+1
  5436  002916  EC80  F018         	call	___awtoft	;wreg free
  5437  00291A  C009  F015         	movff	?___awtoft,___ftmul@f1
  5438  00291E  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  5439  002922  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  5440  002926  EC21  F013         	call	___ftmul	;wreg free
  5441  00292A  C015  F02B         	movff	?___ftmul,___fttol@f1
  5442  00292E  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  5443  002932  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  5444  002936  ECA7  F012         	call	___fttol	;wreg free
  5445  00293A  C02B  F04F         	movff	?___fttol,_tens
  5446  00293E  C02C  F050         	movff	?___fttol+1,_tens+1
  5447                           
  5448                           ;MPPT.c: 47: Uin=tens/0.2;
  5449  002942  0ECD               	movlw	205
  5450  002944  6E10               	movwf	___ftdiv@f2,c
  5451  002946  0E4C               	movlw	76
  5452  002948  6E11               	movwf	___ftdiv@f2+1,c
  5453  00294A  0E3E               	movlw	62
  5454  00294C  6E12               	movwf	___ftdiv@f2+2,c
  5455  00294E  C04F  F009         	movff	_tens,___awtoft@c
  5456  002952  C050  F00A         	movff	_tens+1,___awtoft@c+1
  5457  002956  EC80  F018         	call	___awtoft	;wreg free
  5458  00295A  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  5459  00295E  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  5460  002962  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  5461  002966  EC9B  F013         	call	___ftdiv	;wreg free
  5462  00296A  C00D  F02B         	movff	?___ftdiv,___fttol@f1
  5463  00296E  C00E  F02C         	movff	?___ftdiv+1,___fttol@f1+1
  5464  002972  C00F  F02D         	movff	?___ftdiv+2,___fttol@f1+2
  5465  002976  ECA7  F012         	call	___fttol	;wreg free
  5466  00297A  C02B  F0BA         	movff	?___fttol,_Uin
  5467  00297E  C02C  F0BB         	movff	?___fttol+1,_Uin+1
  5468  002982  0012               	return		;funcret
  5469  002984                     __end_of_read_Uin:
  5470                           	opt stack 0
  5471                           tblptru	equ	0xFF8
  5472                           tblptrh	equ	0xFF7
  5473                           tblptrl	equ	0xFF6
  5474                           tablat	equ	0xFF5
  5475                           prodh	equ	0xFF4
  5476                           prodl	equ	0xFF3
  5477                           postinc0	equ	0xFEE
  5478                           wreg	equ	0xFE8
  5479                           indf2	equ	0xFDF
  5480                           postinc2	equ	0xFDE
  5481                           postdec2	equ	0xFDD
  5482                           fsr2h	equ	0xFDA
  5483                           fsr2l	equ	0xFD9
  5484                           status	equ	0xFD8
  5485                           
  5486 ;; *************** function ___ftdiv *****************
  5487 ;; Defined at:
  5488 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  f1              3   12[COMRAM] float 
  5491 ;;  f2              3   15[COMRAM] float 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;  f3              3   22[COMRAM] float 
  5494 ;;  sign            1   26[COMRAM] unsigned char 
  5495 ;;  exp             1   25[COMRAM] unsigned char 
  5496 ;;  cntr            1   21[COMRAM] unsigned char 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  3   12[COMRAM] float 
  5499 ;; Registers used:
  5500 ;;		wreg, status,2, status,0, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5506 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;Total ram usage:       15 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    1
  5513 ;; This function calls:
  5514 ;;		___ftpack
  5515 ;; This function is called by:
  5516 ;;		_main
  5517 ;;		_read_Uout
  5518 ;;		_read_Uin
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           	psect	text18
  5523  002736                     __ptext18:
  5524                           	opt stack 0
  5525  002736                     ___ftdiv:
  5526                           	opt stack 28
  5527                           
  5528                           ;incstack = 0
  5529  002736  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  5530  00273A  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5531  00273C  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5532  00273E  340E               	rlcf	___ftdiv@f1+1,w,c
  5533  002740  3613               	rlcf	??___ftdiv& (0+255),f,c
  5534  002742  E301               	bnc	u2331
  5535  002744  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5536  002746                     u2331:
  5537  002746  5013               	movf	??___ftdiv,w,c
  5538  002748  6E1A               	movwf	___ftdiv@exp,c
  5539  00274A  501A               	movf	___ftdiv@exp,w,c
  5540  00274C  A4D8               	btfss	status,2,c
  5541  00274E  D007               	goto	l768
  5542  002750  0E00               	movlw	0
  5543  002752  6E0D               	movwf	?___ftdiv,c
  5544  002754  0E00               	movlw	0
  5545  002756  6E0E               	movwf	?___ftdiv+1,c
  5546  002758  0E00               	movlw	0
  5547  00275A  6E0F               	movwf	?___ftdiv+2,c
  5548  00275C  0012               	return	
  5549  00275E                     l768:
  5550  00275E  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  5551  002762  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5552  002764  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5553  002766  3411               	rlcf	___ftdiv@f2+1,w,c
  5554  002768  3613               	rlcf	??___ftdiv& (0+255),f,c
  5555  00276A  E301               	bnc	u2351
  5556  00276C  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5557  00276E                     u2351:
  5558  00276E  5013               	movf	??___ftdiv,w,c
  5559  002770  6E1B               	movwf	___ftdiv@sign,c
  5560  002772  501B               	movf	___ftdiv@sign,w,c
  5561  002774  A4D8               	btfss	status,2,c
  5562  002776  D007               	goto	l770
  5563  002778  0E00               	movlw	0
  5564  00277A  6E0D               	movwf	?___ftdiv,c
  5565  00277C  0E00               	movlw	0
  5566  00277E  6E0E               	movwf	?___ftdiv+1,c
  5567  002780  0E00               	movlw	0
  5568  002782  6E0F               	movwf	?___ftdiv+2,c
  5569  002784  0012               	return	
  5570  002786                     l770:
  5571  002786  0E00               	movlw	0
  5572  002788  6E17               	movwf	___ftdiv@f3,c
  5573  00278A  0E00               	movlw	0
  5574  00278C  6E18               	movwf	___ftdiv@f3+1,c
  5575  00278E  0E00               	movlw	0
  5576  002790  6E19               	movwf	___ftdiv@f3+2,c
  5577  002792  501B               	movf	___ftdiv@sign,w,c
  5578  002794  0F89               	addlw	137
  5579  002796  5E1A               	subwf	___ftdiv@exp,f,c
  5580  002798  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5581  00279C  5012               	movf	___ftdiv@f2+2,w,c
  5582  00279E  1A1B               	xorwf	___ftdiv@sign,f,c
  5583  0027A0  0E80               	movlw	128
  5584  0027A2  161B               	andwf	___ftdiv@sign,f,c
  5585  0027A4  8E0E               	bsf	___ftdiv@f1+1,7,c
  5586  0027A6  0EFF               	movlw	255
  5587  0027A8  160D               	andwf	___ftdiv@f1,f,c
  5588  0027AA  0EFF               	movlw	255
  5589  0027AC  160E               	andwf	___ftdiv@f1+1,f,c
  5590  0027AE  0E00               	movlw	0
  5591  0027B0  160F               	andwf	___ftdiv@f1+2,f,c
  5592  0027B2  8E11               	bsf	___ftdiv@f2+1,7,c
  5593  0027B4  0EFF               	movlw	255
  5594  0027B6  1610               	andwf	___ftdiv@f2,f,c
  5595  0027B8  0EFF               	movlw	255
  5596  0027BA  1611               	andwf	___ftdiv@f2+1,f,c
  5597  0027BC  0E00               	movlw	0
  5598  0027BE  1612               	andwf	___ftdiv@f2+2,f,c
  5599  0027C0  0E18               	movlw	24
  5600  0027C2  6E16               	movwf	___ftdiv@cntr,c
  5601  0027C4  90D8               	bcf	status,0,c
  5602  0027C6  3617               	rlcf	___ftdiv@f3,f,c
  5603  0027C8  3618               	rlcf	___ftdiv@f3+1,f,c
  5604  0027CA  3619               	rlcf	___ftdiv@f3+2,f,c
  5605  0027CC  5010               	movf	___ftdiv@f2,w,c
  5606  0027CE  5C0D               	subwf	___ftdiv@f1,w,c
  5607  0027D0  5011               	movf	___ftdiv@f2+1,w,c
  5608  0027D2  580E               	subwfb	___ftdiv@f1+1,w,c
  5609  0027D4  5012               	movf	___ftdiv@f2+2,w,c
  5610  0027D6  580F               	subwfb	___ftdiv@f1+2,w,c
  5611  0027D8  A0D8               	btfss	status,0,c
  5612  0027DA  D007               	goto	l772
  5613  0027DC  5010               	movf	___ftdiv@f2,w,c
  5614  0027DE  5E0D               	subwf	___ftdiv@f1,f,c
  5615  0027E0  5011               	movf	___ftdiv@f2+1,w,c
  5616  0027E2  5A0E               	subwfb	___ftdiv@f1+1,f,c
  5617  0027E4  5012               	movf	___ftdiv@f2+2,w,c
  5618  0027E6  5A0F               	subwfb	___ftdiv@f1+2,f,c
  5619  0027E8  8017               	bsf	___ftdiv@f3,0,c
  5620  0027EA                     l772:
  5621  0027EA  90D8               	bcf	status,0,c
  5622  0027EC  360D               	rlcf	___ftdiv@f1,f,c
  5623  0027EE  360E               	rlcf	___ftdiv@f1+1,f,c
  5624  0027F0  360F               	rlcf	___ftdiv@f1+2,f,c
  5625  0027F2  2E16               	decfsz	___ftdiv@cntr,f,c
  5626  0027F4  D7E7               	goto	l771
  5627  0027F6  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  5628  0027FA  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5629  0027FE  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5630  002802  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  5631  002806  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  5632  00280A  ECC2  F014         	call	___ftpack	;wreg free
  5633  00280E  C001  F00D         	movff	?___ftpack,?___ftdiv
  5634  002812  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  5635  002816  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  5636  00281A  0012               	return	
  5637  00281C                     __end_of___ftdiv:
  5638                           	opt stack 0
  5639                           tblptru	equ	0xFF8
  5640                           tblptrh	equ	0xFF7
  5641                           tblptrl	equ	0xFF6
  5642                           tablat	equ	0xFF5
  5643                           prodh	equ	0xFF4
  5644                           prodl	equ	0xFF3
  5645                           postinc0	equ	0xFEE
  5646                           wreg	equ	0xFE8
  5647                           indf2	equ	0xFDF
  5648                           postinc2	equ	0xFDE
  5649                           postdec2	equ	0xFDD
  5650                           fsr2h	equ	0xFDA
  5651                           fsr2l	equ	0xFD9
  5652                           status	equ	0xFD8
  5653                           
  5654 ;; *************** function _read_Iout *****************
  5655 ;; Defined at:
  5656 ;;		line 15 in file "MPPT.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;		None
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;		None
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  1    wreg      void 
  5663 ;; Registers used:
  5664 ;;		wreg, status,2, status,0, cstack
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;Total ram usage:        2 bytes
  5675 ;; Hardware stack levels used:    1
  5676 ;; Hardware stack levels required when called:    2
  5677 ;; This function calls:
  5678 ;;		___awtoft
  5679 ;;		___ftmul
  5680 ;;		___fttol
  5681 ;; This function is called by:
  5682 ;;		_main
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text19
  5687  002BC8                     __ptext19:
  5688                           	opt stack 0
  5689  002BC8                     _read_Iout:
  5690                           	opt stack 28
  5691                           
  5692                           ;MPPT.c: 17: ADCON0=0b00001011;
  5693                           
  5694                           ;incstack = 0
  5695  002BC8  0E0B               	movlw	11
  5696  002BCA  6EC2               	movwf	4034,c	;volatile
  5697                           
  5698                           ;MPPT.c: 18: _delay((unsigned long)((10)*(64000000/4000.0)));
  5699  002BCC  0ED0               	movlw	208
  5700  002BCE  6E3A               	movwf	??_read_Iout& (0+255),c
  5701  002BD0  0ECA               	movlw	202
  5702  002BD2                     u3107:
  5703  002BD2  2EE8               	decfsz	wreg,f,c
  5704  002BD4  D7FE               	bra	u3107
  5705  002BD6  2E3A               	decfsz	??_read_Iout& (0+255),f,c
  5706  002BD8  D7FC               	bra	u3107
  5707                           
  5708                           ;MPPT.c: 19: ADCON0bits.GO=1;
  5709  002BDA  82C2               	bsf	4034,1,c	;volatile
  5710                           
  5711                           ;MPPT.c: 20: _delay((unsigned long)((100)*(64000000/4000.0)));
  5712  002BDC  0E09               	movlw	9
  5713  002BDE  6E3B               	movwf	(??_read_Iout+1)& (0+255),c
  5714  002BE0  0E1E               	movlw	30
  5715  002BE2  6E3A               	movwf	??_read_Iout& (0+255),c
  5716  002BE4  0EE4               	movlw	228
  5717  002BE6                     u3117:
  5718  002BE6  2EE8               	decfsz	wreg,f,c
  5719  002BE8  D7FE               	bra	u3117
  5720  002BEA  2E3A               	decfsz	??_read_Iout& (0+255),f,c
  5721  002BEC  D7FC               	bra	u3117
  5722  002BEE  2E3B               	decfsz	(??_read_Iout+1)& (0+255),f,c
  5723  002BF0  D7FA               	bra	u3117
  5724  002BF2  D000               	nop2	
  5725                           
  5726                           ;MPPT.c: 21: rez_adc_A=ADRESH;
  5727  002BF4  CFC4 F055          	movff	4036,_rez_adc_A	;volatile
  5728  002BF8  6A56               	clrf	_rez_adc_A+1,c
  5729                           
  5730                           ;MPPT.c: 22: tens_A=rez_adc_A*0.0181372549019608;
  5731  002BFA  0E95               	movlw	149
  5732  002BFC  6E18               	movwf	___ftmul@f2,c
  5733  002BFE  0E94               	movlw	148
  5734  002C00  6E19               	movwf	___ftmul@f2+1,c
  5735  002C02  0E3C               	movlw	60
  5736  002C04  6E1A               	movwf	___ftmul@f2+2,c
  5737  002C06  C055  F009         	movff	_rez_adc_A,___awtoft@c
  5738  002C0A  C056  F00A         	movff	_rez_adc_A+1,___awtoft@c+1
  5739  002C0E  EC80  F018         	call	___awtoft	;wreg free
  5740  002C12  C009  F015         	movff	?___awtoft,___ftmul@f1
  5741  002C16  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  5742  002C1A  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  5743  002C1E  EC21  F013         	call	___ftmul	;wreg free
  5744  002C22  C015  F02B         	movff	?___ftmul,___fttol@f1
  5745  002C26  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  5746  002C2A  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  5747  002C2E  ECA7  F012         	call	___fttol	;wreg free
  5748  002C32  C02B  F053         	movff	?___fttol,_tens_A
  5749  002C36  C02C  F054         	movff	?___fttol+1,_tens_A+1
  5750                           
  5751                           ;MPPT.c: 23: Iout=tens_A;
  5752  002C3A  C053  F0BE         	movff	_tens_A,_Iout
  5753  002C3E  C054  F0BF         	movff	_tens_A+1,_Iout+1
  5754  002C42  0012               	return		;funcret
  5755  002C44                     __end_of_read_Iout:
  5756                           	opt stack 0
  5757                           tblptru	equ	0xFF8
  5758                           tblptrh	equ	0xFF7
  5759                           tblptrl	equ	0xFF6
  5760                           tablat	equ	0xFF5
  5761                           prodh	equ	0xFF4
  5762                           prodl	equ	0xFF3
  5763                           postinc0	equ	0xFEE
  5764                           wreg	equ	0xFE8
  5765                           indf2	equ	0xFDF
  5766                           postinc2	equ	0xFDE
  5767                           postdec2	equ	0xFDD
  5768                           fsr2h	equ	0xFDA
  5769                           fsr2l	equ	0xFD9
  5770                           status	equ	0xFD8
  5771                           
  5772 ;; *************** function ___fttol *****************
  5773 ;; Defined at:
  5774 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;  f1              3   42[COMRAM] float 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  lval            4   52[COMRAM] unsigned long 
  5779 ;;  exp1            1   56[COMRAM] unsigned char 
  5780 ;;  sign1           1   51[COMRAM] unsigned char 
  5781 ;; Return value:  Size  Location     Type
  5782 ;;                  4   42[COMRAM] long 
  5783 ;; Registers used:
  5784 ;;		wreg, status,2, status,0
  5785 ;; Tracked objects:
  5786 ;;		On entry : 0/0
  5787 ;;		On exit  : 0/0
  5788 ;;		Unchanged: 0/0
  5789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5790 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;Total ram usage:       15 bytes
  5795 ;; Hardware stack levels used:    1
  5796 ;; This function calls:
  5797 ;;		Nothing
  5798 ;; This function is called by:
  5799 ;;		_read_Iout
  5800 ;;		_read_Uout
  5801 ;;		_read_Uin
  5802 ;;		_sprintf
  5803 ;;		_buck_boost
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text20
  5808  00254E                     __ptext20:
  5809                           	opt stack 0
  5810  00254E                     ___fttol:
  5811                           	opt stack 29
  5812                           
  5813                           ;incstack = 0
  5814  00254E  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5815  002552  6A30               	clrf	(??___fttol+1)& (0+255),c
  5816  002554  6A31               	clrf	(??___fttol+2)& (0+255),c
  5817  002556  342C               	rlcf	___fttol@f1+1,w,c
  5818  002558  362F               	rlcf	??___fttol& (0+255),f,c
  5819  00255A  E301               	bnc	u2441
  5820  00255C  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5821  00255E                     u2441:
  5822  00255E  502F               	movf	??___fttol,w,c
  5823  002560  6E39               	movwf	___fttol@exp1,c
  5824  002562  5039               	movf	___fttol@exp1,w,c
  5825  002564  A4D8               	btfss	status,2,c
  5826  002566  D009               	goto	l821
  5827  002568  0E00               	movlw	0
  5828  00256A  6E2B               	movwf	?___fttol,c
  5829  00256C  0E00               	movlw	0
  5830  00256E  6E2C               	movwf	?___fttol+1,c
  5831  002570  0E00               	movlw	0
  5832  002572  6E2D               	movwf	?___fttol+2,c
  5833  002574  0E00               	movlw	0
  5834  002576  6E2E               	movwf	?___fttol+3,c
  5835  002578  0012               	return	
  5836  00257A                     l821:
  5837  00257A  0E17               	movlw	23
  5838  00257C  6E2F               	movwf	??___fttol& (0+255),c
  5839  00257E  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5840  002582  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5841  002586  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5842  00258A  282F               	incf	??___fttol,w,c
  5843  00258C  6E33               	movwf	(??___fttol+4)& (0+255),c
  5844  00258E  D004               	goto	u2460
  5845  002590                     u2465:
  5846  002590  90D8               	bcf	status,0,c
  5847  002592  3232               	rrcf	??___fttol+3,f,c
  5848  002594  3231               	rrcf	??___fttol+2,f,c
  5849  002596  3230               	rrcf	??___fttol+1,f,c
  5850  002598                     u2460:
  5851  002598  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5852  00259A  D7FA               	goto	u2465
  5853  00259C  5030               	movf	??___fttol+1,w,c
  5854  00259E  6E34               	movwf	___fttol@sign1,c
  5855  0025A0  8E2C               	bsf	___fttol@f1+1,7,c
  5856  0025A2  0EFF               	movlw	255
  5857  0025A4  162B               	andwf	___fttol@f1,f,c
  5858  0025A6  0EFF               	movlw	255
  5859  0025A8  162C               	andwf	___fttol@f1+1,f,c
  5860  0025AA  0E00               	movlw	0
  5861  0025AC  162D               	andwf	___fttol@f1+2,f,c
  5862  0025AE  502B               	movf	___fttol@f1,w,c
  5863  0025B0  6E35               	movwf	___fttol@lval,c
  5864  0025B2  502C               	movf	___fttol@f1+1,w,c
  5865  0025B4  6E36               	movwf	___fttol@lval+1,c
  5866  0025B6  502D               	movf	___fttol@f1+2,w,c
  5867  0025B8  6E37               	movwf	___fttol@lval+2,c
  5868  0025BA  6A38               	clrf	___fttol@lval+3,c
  5869  0025BC  0E8E               	movlw	142
  5870  0025BE  5E39               	subwf	___fttol@exp1,f,c
  5871  0025C0  AE39               	btfss	___fttol@exp1,7,c
  5872  0025C2  D016               	goto	l823
  5873  0025C4  5039               	movf	___fttol@exp1,w,c
  5874  0025C6  0A80               	xorlw	128
  5875  0025C8  0F8F               	addlw	143
  5876  0025CA  B0D8               	btfsc	status,0,c
  5877  0025CC  D009               	goto	l824
  5878  0025CE  0E00               	movlw	0
  5879  0025D0  6E2B               	movwf	?___fttol,c
  5880  0025D2  0E00               	movlw	0
  5881  0025D4  6E2C               	movwf	?___fttol+1,c
  5882  0025D6  0E00               	movlw	0
  5883  0025D8  6E2D               	movwf	?___fttol+2,c
  5884  0025DA  0E00               	movlw	0
  5885  0025DC  6E2E               	movwf	?___fttol+3,c
  5886  0025DE  0012               	return	
  5887  0025E0                     l824:
  5888  0025E0  90D8               	bcf	status,0,c
  5889  0025E2  3238               	rrcf	___fttol@lval+3,f,c
  5890  0025E4  3237               	rrcf	___fttol@lval+2,f,c
  5891  0025E6  3236               	rrcf	___fttol@lval+1,f,c
  5892  0025E8  3235               	rrcf	___fttol@lval,f,c
  5893  0025EA  3E39               	incfsz	___fttol@exp1,f,c
  5894  0025EC  D7F9               	goto	l824
  5895  0025EE  D015               	goto	u2500
  5896  0025F0                     l823:
  5897  0025F0  0E17               	movlw	23
  5898  0025F2  6439               	cpfsgt	___fttol@exp1,c
  5899  0025F4  D00F               	goto	l829
  5900  0025F6  0E00               	movlw	0
  5901  0025F8  6E2B               	movwf	?___fttol,c
  5902  0025FA  0E00               	movlw	0
  5903  0025FC  6E2C               	movwf	?___fttol+1,c
  5904  0025FE  0E00               	movlw	0
  5905  002600  6E2D               	movwf	?___fttol+2,c
  5906  002602  0E00               	movlw	0
  5907  002604  6E2E               	movwf	?___fttol+3,c
  5908  002606  0012               	return	
  5909  002608  90D8               	bcf	status,0,c
  5910  00260A  3635               	rlcf	___fttol@lval,f,c
  5911  00260C  3636               	rlcf	___fttol@lval+1,f,c
  5912  00260E  3637               	rlcf	___fttol@lval+2,f,c
  5913  002610  3638               	rlcf	___fttol@lval+3,f,c
  5914  002612  0639               	decf	___fttol@exp1,f,c
  5915  002614                     l829:
  5916  002614  5039               	movf	___fttol@exp1,w,c
  5917  002616  A4D8               	btfss	status,2,c
  5918  002618  D7F7               	goto	l830
  5919  00261A                     u2500:
  5920  00261A  5034               	movf	___fttol@sign1,w,c
  5921  00261C  B4D8               	btfsc	status,2,c
  5922  00261E  D008               	goto	l832
  5923  002620  1E38               	comf	___fttol@lval+3,f,c
  5924  002622  1E37               	comf	___fttol@lval+2,f,c
  5925  002624  1E36               	comf	___fttol@lval+1,f,c
  5926  002626  6C35               	negf	___fttol@lval,c
  5927  002628  0E00               	movlw	0
  5928  00262A  2236               	addwfc	___fttol@lval+1,f,c
  5929  00262C  2237               	addwfc	___fttol@lval+2,f,c
  5930  00262E  2238               	addwfc	___fttol@lval+3,f,c
  5931  002630                     l832:
  5932  002630  C035  F02B         	movff	___fttol@lval,?___fttol
  5933  002634  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5934  002638  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5935  00263C  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5936  002640  0012               	return	
  5937  002642                     __end_of___fttol:
  5938                           	opt stack 0
  5939                           tblptru	equ	0xFF8
  5940                           tblptrh	equ	0xFF7
  5941                           tblptrl	equ	0xFF6
  5942                           tablat	equ	0xFF5
  5943                           prodh	equ	0xFF4
  5944                           prodl	equ	0xFF3
  5945                           postinc0	equ	0xFEE
  5946                           wreg	equ	0xFE8
  5947                           indf2	equ	0xFDF
  5948                           postinc2	equ	0xFDE
  5949                           postdec2	equ	0xFDD
  5950                           fsr2h	equ	0xFDA
  5951                           fsr2l	equ	0xFD9
  5952                           status	equ	0xFD8
  5953                           
  5954 ;; *************** function ___ftmul *****************
  5955 ;; Defined at:
  5956 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;  f1              3   20[COMRAM] float 
  5959 ;;  f2              3   23[COMRAM] float 
  5960 ;; Auto vars:     Size  Location     Type
  5961 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  5962 ;;  sign            1   34[COMRAM] unsigned char 
  5963 ;;  cntr            1   33[COMRAM] unsigned char 
  5964 ;;  exp             1   29[COMRAM] unsigned char 
  5965 ;; Return value:  Size  Location     Type
  5966 ;;                  3   20[COMRAM] float 
  5967 ;; Registers used:
  5968 ;;		wreg, status,2, status,0, cstack
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5974 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5975 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5976 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;Total ram usage:       15 bytes
  5979 ;; Hardware stack levels used:    1
  5980 ;; Hardware stack levels required when called:    1
  5981 ;; This function calls:
  5982 ;;		___ftpack
  5983 ;; This function is called by:
  5984 ;;		_main
  5985 ;;		_read_Iout
  5986 ;;		_read_Uout
  5987 ;;		_read_Uin
  5988 ;;		_fround
  5989 ;;		_scale
  5990 ;;		_sprintf
  5991 ;;		_buck_boost
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           	psect	text21
  5996  002642                     __ptext21:
  5997                           	opt stack 0
  5998  002642                     ___ftmul:
  5999                           	opt stack 27
  6000                           
  6001                           ;incstack = 0
  6002  002642  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  6003  002646  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  6004  002648  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  6005  00264A  3416               	rlcf	___ftmul@f1+1,w,c
  6006  00264C  361B               	rlcf	??___ftmul& (0+255),f,c
  6007  00264E  E301               	bnc	u1811
  6008  002650  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  6009  002652                     u1811:
  6010  002652  501B               	movf	??___ftmul,w,c
  6011  002654  6E1E               	movwf	___ftmul@exp,c
  6012  002656  501E               	movf	___ftmul@exp,w,c
  6013  002658  A4D8               	btfss	status,2,c
  6014  00265A  D007               	goto	l800
  6015  00265C  0E00               	movlw	0
  6016  00265E  6E15               	movwf	?___ftmul,c
  6017  002660  0E00               	movlw	0
  6018  002662  6E16               	movwf	?___ftmul+1,c
  6019  002664  0E00               	movlw	0
  6020  002666  6E17               	movwf	?___ftmul+2,c
  6021  002668  0012               	return	
  6022  00266A                     l800:
  6023  00266A  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  6024  00266E  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  6025  002670  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  6026  002672  3419               	rlcf	___ftmul@f2+1,w,c
  6027  002674  361B               	rlcf	??___ftmul& (0+255),f,c
  6028  002676  E301               	bnc	u1831
  6029  002678  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  6030  00267A                     u1831:
  6031  00267A  501B               	movf	??___ftmul,w,c
  6032  00267C  6E23               	movwf	___ftmul@sign,c
  6033  00267E  5023               	movf	___ftmul@sign,w,c
  6034  002680  A4D8               	btfss	status,2,c
  6035  002682  D007               	goto	l802
  6036  002684  0E00               	movlw	0
  6037  002686  6E15               	movwf	?___ftmul,c
  6038  002688  0E00               	movlw	0
  6039  00268A  6E16               	movwf	?___ftmul+1,c
  6040  00268C  0E00               	movlw	0
  6041  00268E  6E17               	movwf	?___ftmul+2,c
  6042  002690  0012               	return	
  6043  002692                     l802:
  6044  002692  5023               	movf	___ftmul@sign,w,c
  6045  002694  0F7B               	addlw	123
  6046  002696  261E               	addwf	___ftmul@exp,f,c
  6047  002698  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  6048  00269C  501A               	movf	___ftmul@f2+2,w,c
  6049  00269E  1A23               	xorwf	___ftmul@sign,f,c
  6050  0026A0  0E80               	movlw	128
  6051  0026A2  1623               	andwf	___ftmul@sign,f,c
  6052  0026A4  8E16               	bsf	___ftmul@f1+1,7,c
  6053  0026A6  8E19               	bsf	___ftmul@f2+1,7,c
  6054  0026A8  0EFF               	movlw	255
  6055  0026AA  1618               	andwf	___ftmul@f2,f,c
  6056  0026AC  0EFF               	movlw	255
  6057  0026AE  1619               	andwf	___ftmul@f2+1,f,c
  6058  0026B0  0E00               	movlw	0
  6059  0026B2  161A               	andwf	___ftmul@f2+2,f,c
  6060  0026B4  0E00               	movlw	0
  6061  0026B6  6E1F               	movwf	___ftmul@f3_as_product,c
  6062  0026B8  0E00               	movlw	0
  6063  0026BA  6E20               	movwf	___ftmul@f3_as_product+1,c
  6064  0026BC  0E00               	movlw	0
  6065  0026BE  6E21               	movwf	___ftmul@f3_as_product+2,c
  6066  0026C0  0E07               	movlw	7
  6067  0026C2  6E22               	movwf	___ftmul@cntr,c
  6068  0026C4  A015               	btfss	___ftmul@f1,0,c
  6069  0026C6  D006               	goto	l804
  6070  0026C8  5018               	movf	___ftmul@f2,w,c
  6071  0026CA  261F               	addwf	___ftmul@f3_as_product,f,c
  6072  0026CC  5019               	movf	___ftmul@f2+1,w,c
  6073  0026CE  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  6074  0026D0  501A               	movf	___ftmul@f2+2,w,c
  6075  0026D2  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  6076  0026D4                     l804:
  6077  0026D4  90D8               	bcf	status,0,c
  6078  0026D6  3217               	rrcf	___ftmul@f1+2,f,c
  6079  0026D8  3216               	rrcf	___ftmul@f1+1,f,c
  6080  0026DA  3215               	rrcf	___ftmul@f1,f,c
  6081  0026DC  90D8               	bcf	status,0,c
  6082  0026DE  3618               	rlcf	___ftmul@f2,f,c
  6083  0026E0  3619               	rlcf	___ftmul@f2+1,f,c
  6084  0026E2  361A               	rlcf	___ftmul@f2+2,f,c
  6085  0026E4  2E22               	decfsz	___ftmul@cntr,f,c
  6086  0026E6  D7EE               	goto	l803
  6087  0026E8  0E09               	movlw	9
  6088  0026EA  6E22               	movwf	___ftmul@cntr,c
  6089  0026EC  A015               	btfss	___ftmul@f1,0,c
  6090  0026EE  D006               	goto	l807
  6091  0026F0  5018               	movf	___ftmul@f2,w,c
  6092  0026F2  261F               	addwf	___ftmul@f3_as_product,f,c
  6093  0026F4  5019               	movf	___ftmul@f2+1,w,c
  6094  0026F6  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  6095  0026F8  501A               	movf	___ftmul@f2+2,w,c
  6096  0026FA  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  6097  0026FC                     l807:
  6098  0026FC  90D8               	bcf	status,0,c
  6099  0026FE  3217               	rrcf	___ftmul@f1+2,f,c
  6100  002700  3216               	rrcf	___ftmul@f1+1,f,c
  6101  002702  3215               	rrcf	___ftmul@f1,f,c
  6102  002704  90D8               	bcf	status,0,c
  6103  002706  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  6104  002708  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  6105  00270A  321F               	rrcf	___ftmul@f3_as_product,f,c
  6106  00270C  2E22               	decfsz	___ftmul@cntr,f,c
  6107  00270E  D7EE               	goto	l806
  6108  002710  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6109  002714  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6110  002718  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6111  00271C  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  6112  002720  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  6113  002724  ECC2  F014         	call	___ftpack	;wreg free
  6114  002728  C001  F015         	movff	?___ftpack,?___ftmul
  6115  00272C  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  6116  002730  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  6117  002734  0012               	return	
  6118  002736                     __end_of___ftmul:
  6119                           	opt stack 0
  6120                           tblptru	equ	0xFF8
  6121                           tblptrh	equ	0xFF7
  6122                           tblptrl	equ	0xFF6
  6123                           tablat	equ	0xFF5
  6124                           prodh	equ	0xFF4
  6125                           prodl	equ	0xFF3
  6126                           postinc0	equ	0xFEE
  6127                           wreg	equ	0xFE8
  6128                           indf2	equ	0xFDF
  6129                           postinc2	equ	0xFDE
  6130                           postdec2	equ	0xFDD
  6131                           fsr2h	equ	0xFDA
  6132                           fsr2l	equ	0xFD9
  6133                           status	equ	0xFD8
  6134                           
  6135 ;; *************** function ___awtoft *****************
  6136 ;; Defined at:
  6137 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;  c               2    8[COMRAM] int 
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;  sign            1   11[COMRAM] unsigned char 
  6142 ;; Return value:  Size  Location     Type
  6143 ;;                  3    8[COMRAM] float 
  6144 ;; Registers used:
  6145 ;;		wreg, status,2, status,0, cstack
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6151 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;Total ram usage:        4 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:    1
  6158 ;; This function calls:
  6159 ;;		___ftpack
  6160 ;; This function is called by:
  6161 ;;		_main
  6162 ;;		_read_Iout
  6163 ;;		_read_Uout
  6164 ;;		_read_Uin
  6165 ;;		_buck_boost
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           	psect	text22
  6170  003100                     __ptext22:
  6171                           	opt stack 0
  6172  003100                     ___awtoft:
  6173                           	opt stack 28
  6174                           
  6175                           ;incstack = 0
  6176  003100  0E00               	movlw	0
  6177  003102  6E0C               	movwf	___awtoft@sign,c
  6178  003104  AE0A               	btfss	___awtoft@c+1,7,c
  6179  003106  D006               	goto	l668
  6180  003108  6C09               	negf	___awtoft@c,c
  6181  00310A  1E0A               	comf	___awtoft@c+1,f,c
  6182  00310C  B0D8               	btfsc	status,0,c
  6183  00310E  2A0A               	incf	___awtoft@c+1,f,c
  6184  003110  0E01               	movlw	1
  6185  003112  6E0C               	movwf	___awtoft@sign,c
  6186  003114                     l668:
  6187  003114  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6188  003118  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6189  00311C  6A03               	clrf	___ftpack@arg+2,c
  6190  00311E  0E8E               	movlw	142
  6191  003120  6E04               	movwf	___ftpack@exp,c
  6192  003122  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6193  003126  ECC2  F014         	call	___ftpack	;wreg free
  6194  00312A  C001  F009         	movff	?___ftpack,?___awtoft
  6195  00312E  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6196  003132  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6197  003136  0012               	return	
  6198  003138                     __end_of___awtoft:
  6199                           	opt stack 0
  6200                           tblptru	equ	0xFF8
  6201                           tblptrh	equ	0xFF7
  6202                           tblptrl	equ	0xFF6
  6203                           tablat	equ	0xFF5
  6204                           prodh	equ	0xFF4
  6205                           prodl	equ	0xFF3
  6206                           postinc0	equ	0xFEE
  6207                           wreg	equ	0xFE8
  6208                           indf2	equ	0xFDF
  6209                           postinc2	equ	0xFDE
  6210                           postdec2	equ	0xFDD
  6211                           fsr2h	equ	0xFDA
  6212                           fsr2l	equ	0xFD9
  6213                           status	equ	0xFD8
  6214                           
  6215 ;; *************** function ___ftpack *****************
  6216 ;; Defined at:
  6217 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  6218 ;; Parameters:    Size  Location     Type
  6219 ;;  arg             3    0[COMRAM] unsigned um
  6220 ;;  exp             1    3[COMRAM] unsigned char 
  6221 ;;  sign            1    4[COMRAM] unsigned char 
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;		None
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  3    0[COMRAM] float 
  6226 ;; Registers used:
  6227 ;;		wreg, status,2, status,0
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6233 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;Total ram usage:        8 bytes
  6238 ;; Hardware stack levels used:    1
  6239 ;; This function calls:
  6240 ;;		Nothing
  6241 ;; This function is called by:
  6242 ;;		___awtoft
  6243 ;;		___ftadd
  6244 ;;		___ftdiv
  6245 ;;		___ftmul
  6246 ;;		___lltoft
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           	psect	text23
  6251  002984                     __ptext23:
  6252                           	opt stack 0
  6253  002984                     ___ftpack:
  6254                           	opt stack 27
  6255                           
  6256                           ;incstack = 0
  6257  002984  5004               	movf	___ftpack@exp,w,c
  6258  002986  B4D8               	btfsc	status,2,c
  6259  002988  D005               	goto	u1530
  6260  00298A  5001               	movf	___ftpack@arg,w,c
  6261  00298C  1002               	iorwf	___ftpack@arg+1,w,c
  6262  00298E  1003               	iorwf	___ftpack@arg+2,w,c
  6263  002990  A4D8               	btfss	status,2,c
  6264  002992  D00C               	goto	l704
  6265  002994                     u1530:
  6266  002994  0E00               	movlw	0
  6267  002996  6E01               	movwf	?___ftpack,c
  6268  002998  0E00               	movlw	0
  6269  00299A  6E02               	movwf	?___ftpack+1,c
  6270  00299C  0E00               	movlw	0
  6271  00299E  6E03               	movwf	?___ftpack+2,c
  6272  0029A0  0012               	return	
  6273  0029A2  2A04               	incf	___ftpack@exp,f,c
  6274  0029A4  90D8               	bcf	status,0,c
  6275  0029A6  3203               	rrcf	___ftpack@arg+2,f,c
  6276  0029A8  3202               	rrcf	___ftpack@arg+1,f,c
  6277  0029AA  3201               	rrcf	___ftpack@arg,f,c
  6278  0029AC                     l704:
  6279  0029AC  0E00               	movlw	0
  6280  0029AE  1401               	andwf	___ftpack@arg,w,c
  6281  0029B0  6E06               	movwf	??___ftpack& (0+255),c
  6282  0029B2  0E00               	movlw	0
  6283  0029B4  1402               	andwf	___ftpack@arg+1,w,c
  6284  0029B6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6285  0029B8  0EFE               	movlw	254
  6286  0029BA  1403               	andwf	___ftpack@arg+2,w,c
  6287  0029BC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6288  0029BE  5006               	movf	??___ftpack,w,c
  6289  0029C0  1007               	iorwf	??___ftpack+1,w,c
  6290  0029C2  1008               	iorwf	??___ftpack+2,w,c
  6291  0029C4  B4D8               	btfsc	status,2,c
  6292  0029C6  D00C               	goto	l707
  6293  0029C8  D7EC               	goto	l705
  6294  0029CA  2A04               	incf	___ftpack@exp,f,c
  6295  0029CC  0E01               	movlw	1
  6296  0029CE  2601               	addwf	___ftpack@arg,f,c
  6297  0029D0  0E00               	movlw	0
  6298  0029D2  2202               	addwfc	___ftpack@arg+1,f,c
  6299  0029D4  0E00               	movlw	0
  6300  0029D6  2203               	addwfc	___ftpack@arg+2,f,c
  6301  0029D8  90D8               	bcf	status,0,c
  6302  0029DA  3203               	rrcf	___ftpack@arg+2,f,c
  6303  0029DC  3202               	rrcf	___ftpack@arg+1,f,c
  6304  0029DE  3201               	rrcf	___ftpack@arg,f,c
  6305  0029E0                     l707:
  6306  0029E0  0E00               	movlw	0
  6307  0029E2  1401               	andwf	___ftpack@arg,w,c
  6308  0029E4  6E06               	movwf	??___ftpack& (0+255),c
  6309  0029E6  0E00               	movlw	0
  6310  0029E8  1402               	andwf	___ftpack@arg+1,w,c
  6311  0029EA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6312  0029EC  0EFF               	movlw	255
  6313  0029EE  1403               	andwf	___ftpack@arg+2,w,c
  6314  0029F0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6315  0029F2  5006               	movf	??___ftpack,w,c
  6316  0029F4  1007               	iorwf	??___ftpack+1,w,c
  6317  0029F6  1008               	iorwf	??___ftpack+2,w,c
  6318  0029F8  B4D8               	btfsc	status,2,c
  6319  0029FA  D006               	goto	l710
  6320  0029FC  D7E6               	goto	l708
  6321  0029FE  0604               	decf	___ftpack@exp,f,c
  6322  002A00  90D8               	bcf	status,0,c
  6323  002A02  3601               	rlcf	___ftpack@arg,f,c
  6324  002A04  3602               	rlcf	___ftpack@arg+1,f,c
  6325  002A06  3603               	rlcf	___ftpack@arg+2,f,c
  6326  002A08                     l710:
  6327  002A08  BE02               	btfsc	___ftpack@arg+1,7,c
  6328  002A0A  D003               	goto	u1570
  6329  002A0C  0E02               	movlw	2
  6330  002A0E  6004               	cpfslt	___ftpack@exp,c
  6331  002A10  D7F6               	goto	l711
  6332  002A12                     u1570:
  6333  002A12  A004               	btfss	___ftpack@exp,0,c
  6334  002A14  9E02               	bcf	___ftpack@arg+1,7,c
  6335  002A16  90D8               	bcf	status,0,c
  6336  002A18  3204               	rrcf	___ftpack@exp,f,c
  6337  002A1A  5004               	movf	___ftpack@exp,w,c
  6338  002A1C  1203               	iorwf	___ftpack@arg+2,f,c
  6339  002A1E  5005               	movf	___ftpack@sign,w,c
  6340  002A20  A4D8               	btfss	status,2,c
  6341  002A22  8E03               	bsf	___ftpack@arg+2,7,c
  6342  002A24  C001  F001         	movff	___ftpack@arg,?___ftpack
  6343  002A28  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6344  002A2C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6345  002A30  0012               	return	
  6346  002A32                     __end_of___ftpack:
  6347                           	opt stack 0
  6348                           tblptru	equ	0xFF8
  6349                           tblptrh	equ	0xFF7
  6350                           tblptrl	equ	0xFF6
  6351                           tablat	equ	0xFF5
  6352                           prodh	equ	0xFF4
  6353                           prodl	equ	0xFF3
  6354                           postinc0	equ	0xFEE
  6355                           wreg	equ	0xFE8
  6356                           indf2	equ	0xFDF
  6357                           postinc2	equ	0xFDE
  6358                           postdec2	equ	0xFDD
  6359                           fsr2h	equ	0xFDA
  6360                           fsr2l	equ	0xFD9
  6361                           status	equ	0xFD8
  6362                           
  6363 ;; *************** function _pwm_config *****************
  6364 ;; Defined at:
  6365 ;;		line 46 in file "config.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;		None
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;		None
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  1    wreg      void 
  6372 ;; Registers used:
  6373 ;;		wreg, status,2
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;Total ram usage:        0 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; This function calls:
  6386 ;;		Nothing
  6387 ;; This function is called by:
  6388 ;;		_main
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text24
  6393  003138                     __ptext24:
  6394                           	opt stack 0
  6395  003138                     _pwm_config:
  6396                           	opt stack 30
  6397                           
  6398                           ;config.c: 48: CCPTMRS0=0b00000000;
  6399                           
  6400                           ;incstack = 0
  6401  003138  0E00               	movlw	0
  6402  00313A  010F               	movlb	15	; () banked
  6403  00313C  6F49               	movwf	73,b	;volatile
  6404                           
  6405                           ;config.c: 49: CCP2CON=0b00001100;
  6406  00313E  0E0C               	movlw	12
  6407  003140  6E66               	movwf	3942,c	;volatile
  6408                           
  6409                           ;config.c: 50: CCP1CON=0b00001100;
  6410  003142  0E0C               	movlw	12
  6411  003144  6EBD               	movwf	4029,c	;volatile
  6412                           
  6413                           ;config.c: 51: T2CON=0b01111101;
  6414  003146  0E7D               	movlw	125
  6415  003148  6EBA               	movwf	4026,c	;volatile
  6416                           
  6417                           ;config.c: 52: PR2=160;
  6418  00314A  0EA0               	movlw	160
  6419  00314C  6EBB               	movwf	4027,c	;volatile
  6420                           
  6421                           ;config.c: 54: CCPR2L=128;
  6422  00314E  0E80               	movlw	128
  6423  003150  6E67               	movwf	3943,c	;volatile
  6424                           
  6425                           ;config.c: 55: CCPR1L=64;
  6426  003152  0E40               	movlw	64
  6427  003154  6EBE               	movwf	4030,c	;volatile
  6428                           
  6429                           ;config.c: 56: CCP3CON=0b00001100;
  6430  003156  0E0C               	movlw	12
  6431  003158  6F5D               	movwf	93,b	;volatile
  6432                           
  6433                           ;config.c: 57: CCPR3L=128;
  6434  00315A  0E80               	movlw	128
  6435  00315C  6F5E               	movwf	94,b	;volatile
  6436                           
  6437                           ; BSR set to: 15
  6438  00315E  0012               	return		;funcret
  6439  003160                     __end_of_pwm_config:
  6440                           	opt stack 0
  6441                           tblptru	equ	0xFF8
  6442                           tblptrh	equ	0xFF7
  6443                           tblptrl	equ	0xFF6
  6444                           tablat	equ	0xFF5
  6445                           prodh	equ	0xFF4
  6446                           prodl	equ	0xFF3
  6447                           postinc0	equ	0xFEE
  6448                           wreg	equ	0xFE8
  6449                           indf2	equ	0xFDF
  6450                           postinc2	equ	0xFDE
  6451                           postdec2	equ	0xFDD
  6452                           fsr2h	equ	0xFDA
  6453                           fsr2l	equ	0xFD9
  6454                           status	equ	0xFD8
  6455                           
  6456 ;; *************** function _init_io_display *****************
  6457 ;; Defined at:
  6458 ;;		line 88 in file "config.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;		None
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;		None
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  1    wreg      void 
  6465 ;; Registers used:
  6466 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6475 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;Total ram usage:        2 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    5
  6479 ;; This function calls:
  6480 ;;		_Cursor_Off
  6481 ;;		_I2C_Master_Init
  6482 ;;		_Lcd_Clear
  6483 ;;		_Lcd_Init
  6484 ;;		_Lcd_Set_Cursor
  6485 ;;		_Lcd_Write_String
  6486 ;; This function is called by:
  6487 ;;		_main
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           	psect	text25
  6492  002DA6                     __ptext25:
  6493                           	opt stack 0
  6494  002DA6                     _init_io_display:
  6495                           	opt stack 25
  6496                           
  6497                           ;config.c: 90: TRISCbits.TRISC3=1;
  6498                           
  6499                           ; BSR set to: 15
  6500                           ;incstack = 0
  6501  002DA6  8694               	bsf	3988,3,c	;volatile
  6502                           
  6503                           ;config.c: 91: TRISCbits.TRISC4=1;
  6504  002DA8  8894               	bsf	3988,4,c	;volatile
  6505                           
  6506                           ;config.c: 92: I2C_Master_Init(100000);
  6507  002DAA  0EA0               	movlw	160
  6508  002DAC  6E0E               	movwf	I2C_Master_Init@c,c
  6509  002DAE  0E86               	movlw	134
  6510  002DB0  6E0F               	movwf	I2C_Master_Init@c+1,c
  6511  002DB2  0E01               	movlw	1
  6512  002DB4  6E10               	movwf	I2C_Master_Init@c+2,c
  6513  002DB6  0E00               	movlw	0
  6514  002DB8  6E11               	movwf	I2C_Master_Init@c+3,c
  6515  002DBA  EC6A  F017         	call	_I2C_Master_Init	;wreg free
  6516                           
  6517                           ;config.c: 93: _delay((unsigned long)((100)*(64000000/4000.0)));
  6518  002DBE  0E09               	movlw	9
  6519  002DC0  6E17               	movwf	(??_init_io_display+1)& (0+255),c
  6520  002DC2  0E1E               	movlw	30
  6521  002DC4  6E16               	movwf	??_init_io_display& (0+255),c
  6522  002DC6  0EE4               	movlw	228
  6523  002DC8                     u3127:
  6524  002DC8  2EE8               	decfsz	wreg,f,c
  6525  002DCA  D7FE               	bra	u3127
  6526  002DCC  2E16               	decfsz	??_init_io_display& (0+255),f,c
  6527  002DCE  D7FC               	bra	u3127
  6528  002DD0  2E17               	decfsz	(??_init_io_display+1)& (0+255),f,c
  6529  002DD2  D7FA               	bra	u3127
  6530  002DD4  D000               	nop2	
  6531                           
  6532                           ;config.c: 94: Lcd_Init();
  6533  002DD6  EC22  F016         	call	_Lcd_Init	;wreg free
  6534                           
  6535                           ;config.c: 95: Lcd_Clear();
  6536  002DDA  EC0B  F019         	call	_Lcd_Clear	;wreg free
  6537                           
  6538                           ;config.c: 96: Cursor_Off();
  6539  002DDE  EC12  F019         	call	_Cursor_Off	;wreg free
  6540                           
  6541                           ;config.c: 97: Lcd_Set_Cursor(1,1);
  6542  002DE2  0E01               	movlw	1
  6543  002DE4  6E0B               	movwf	Lcd_Set_Cursor@b,c
  6544  002DE6  0E01               	movlw	1
  6545  002DE8  ECED  F017         	call	_Lcd_Set_Cursor
  6546                           
  6547                           ;config.c: 98: Lcd_Write_String("Test");
  6548  002DEC  0E77               	movlw	low STR_9
  6549  002DEE  6E08               	movwf	Lcd_Write_String@a,c
  6550  002DF0  0E10               	movlw	high STR_9
  6551  002DF2  6E09               	movwf	Lcd_Write_String@a+1,c
  6552  002DF4  EC60  F016         	call	_Lcd_Write_String	;wreg free
  6553                           
  6554                           ;config.c: 99: _delay((unsigned long)((100)*(64000000/4000.0)));
  6555  002DF8  0E09               	movlw	9
  6556  002DFA  6E17               	movwf	(??_init_io_display+1)& (0+255),c
  6557  002DFC  0E1E               	movlw	30
  6558  002DFE  6E16               	movwf	??_init_io_display& (0+255),c
  6559  002E00  0EE4               	movlw	228
  6560  002E02                     u3137:
  6561  002E02  2EE8               	decfsz	wreg,f,c
  6562  002E04  D7FE               	bra	u3137
  6563  002E06  2E16               	decfsz	??_init_io_display& (0+255),f,c
  6564  002E08  D7FC               	bra	u3137
  6565  002E0A  2E17               	decfsz	(??_init_io_display+1)& (0+255),f,c
  6566  002E0C  D7FA               	bra	u3137
  6567  002E0E  D000               	nop2	
  6568  002E10  0012               	return		;funcret
  6569  002E12                     __end_of_init_io_display:
  6570                           	opt stack 0
  6571                           tblptru	equ	0xFF8
  6572                           tblptrh	equ	0xFF7
  6573                           tblptrl	equ	0xFF6
  6574                           tablat	equ	0xFF5
  6575                           prodh	equ	0xFF4
  6576                           prodl	equ	0xFF3
  6577                           postinc0	equ	0xFEE
  6578                           wreg	equ	0xFE8
  6579                           indf2	equ	0xFDF
  6580                           postinc2	equ	0xFDE
  6581                           postdec2	equ	0xFDD
  6582                           fsr2h	equ	0xFDA
  6583                           fsr2l	equ	0xFD9
  6584                           status	equ	0xFD8
  6585                           
  6586 ;; *************** function _Lcd_Write_String *****************
  6587 ;; Defined at:
  6588 ;;		line 115 in file "i2c_display.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;  a               2    7[COMRAM] PTR unsigned char 
  6591 ;;		 -> STR_9(5), STR_8(3), STR_6(4), STR_5(3), 
  6592 ;;		 -> main@str_A(8), STR_3(3), main@str_V(8), STR_1(3), 
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;  i               2   11[COMRAM] int 
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  1    wreg      void 
  6597 ;; Registers used:
  6598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;Total ram usage:        6 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    4
  6611 ;; This function calls:
  6612 ;;		_Lcd_Write_Char
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;;		_init_io_display
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text26
  6620  002CC0                     __ptext26:
  6621                           	opt stack 0
  6622  002CC0                     _Lcd_Write_String:
  6623                           	opt stack 25
  6624                           
  6625                           ;i2c_display.c: 117: int i;
  6626                           ;i2c_display.c: 118: for(i=0;a[i]!='\0';i++)
  6627                           
  6628                           ;incstack = 0
  6629  002CC0  0E00               	movlw	0
  6630  002CC2  6E0D               	movwf	Lcd_Write_String@i+1,c
  6631  002CC4  0E00               	movlw	0
  6632  002CC6  6E0C               	movwf	Lcd_Write_String@i,c
  6633  002CC8  D01B               	goto	l300
  6634  002CCA                     
  6635                           ;i2c_display.c: 119: Lcd_Write_Char(a[i]);
  6636  002CCA  500C               	movf	Lcd_Write_String@i,w,c
  6637  002CCC  2408               	addwf	Lcd_Write_String@a,w,c
  6638  002CCE  6E0A               	movwf	??_Lcd_Write_String& (0+255),c
  6639  002CD0  500D               	movf	Lcd_Write_String@i+1,w,c
  6640  002CD2  2009               	addwfc	Lcd_Write_String@a+1,w,c
  6641  002CD4  6E0B               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  6642  002CD6  C00A  FFF6         	movff	??_Lcd_Write_String,tblptrl
  6643  002CDA  C00B  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  6644  002CDE  0E00               	movlw	low (__smallconst shr (0+16))
  6645  002CE0  6EF8               	movwf	tblptru,c
  6646  002CE2  0E0F               	movlw	(high __ramtop+-1)
  6647  002CE4  64F7               	cpfsgt	tblptrh,c
  6648  002CE6  D003               	bra	u2047
  6649  002CE8  0008               	tblrd		*
  6650  002CEA  50F5               	movf	tablat,w,c
  6651  002CEC  D005               	bra	u2040
  6652  002CEE                     u2047:
  6653  002CEE  CFF6 FFE9          	movff	tblptrl,fsr0l
  6654  002CF2  CFF7 FFEA          	movff	tblptrh,fsr0h
  6655  002CF6  50EF               	movf	indf0,w,c
  6656  002CF8                     u2040:
  6657  002CF8  EC97  F017         	call	_Lcd_Write_Char
  6658  002CFC  4A0C               	infsnz	Lcd_Write_String@i,f,c
  6659  002CFE  2A0D               	incf	Lcd_Write_String@i+1,f,c
  6660  002D00                     l300:
  6661  002D00  500C               	movf	Lcd_Write_String@i,w,c
  6662  002D02  2408               	addwf	Lcd_Write_String@a,w,c
  6663  002D04  6E0A               	movwf	??_Lcd_Write_String& (0+255),c
  6664  002D06  500D               	movf	Lcd_Write_String@i+1,w,c
  6665  002D08  2009               	addwfc	Lcd_Write_String@a+1,w,c
  6666  002D0A  6E0B               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  6667  002D0C  C00A  FFF6         	movff	??_Lcd_Write_String,tblptrl
  6668  002D10  C00B  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  6669  002D14  0E00               	movlw	low (__smallconst shr (0+16))
  6670  002D16  6EF8               	movwf	tblptru,c
  6671  002D18  0E0F               	movlw	(high __ramtop+-1)
  6672  002D1A  64F7               	cpfsgt	tblptrh,c
  6673  002D1C  D003               	bra	u2057
  6674  002D1E  0008               	tblrd		*
  6675  002D20  50F5               	movf	tablat,w,c
  6676  002D22  D005               	bra	u2050
  6677  002D24                     u2057:
  6678  002D24  CFF6 FFE9          	movff	tblptrl,fsr0l
  6679  002D28  CFF7 FFEA          	movff	tblptrh,fsr0h
  6680  002D2C  50EF               	movf	indf0,w,c
  6681  002D2E                     u2050:
  6682  002D2E  0900               	iorlw	0
  6683  002D30  B4D8               	btfsc	status,2,c
  6684  002D32  0012               	return	
  6685  002D34  D7CA               	goto	l301
  6686  002D36                     __end_of_Lcd_Write_String:
  6687                           	opt stack 0
  6688                           tblptru	equ	0xFF8
  6689                           tblptrh	equ	0xFF7
  6690                           tblptrl	equ	0xFF6
  6691                           tablat	equ	0xFF5
  6692                           prodh	equ	0xFF4
  6693                           prodl	equ	0xFF3
  6694                           indf0	equ	0xFEF
  6695                           postinc0	equ	0xFEE
  6696                           fsr0h	equ	0xFEA
  6697                           fsr0l	equ	0xFE9
  6698                           wreg	equ	0xFE8
  6699                           indf2	equ	0xFDF
  6700                           postinc2	equ	0xFDE
  6701                           postdec2	equ	0xFDD
  6702                           fsr2h	equ	0xFDA
  6703                           fsr2l	equ	0xFD9
  6704                           status	equ	0xFD8
  6705                           
  6706 ;; *************** function _Lcd_Write_Char *****************
  6707 ;; Defined at:
  6708 ;;		line 91 in file "i2c_display.c"
  6709 ;; Parameters:    Size  Location     Type
  6710 ;;  a               1    wreg     unsigned char 
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;  a               1    4[COMRAM] unsigned char 
  6713 ;;  temp            1    6[COMRAM] unsigned char 
  6714 ;;  y               1    5[COMRAM] unsigned char 
  6715 ;; Return value:  Size  Location     Type
  6716 ;;                  1    wreg      void 
  6717 ;; Registers used:
  6718 ;;		wreg, status,2, status,0, cstack
  6719 ;; Tracked objects:
  6720 ;;		On entry : 0/0
  6721 ;;		On exit  : 0/0
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;Total ram usage:        3 bytes
  6729 ;; Hardware stack levels used:    1
  6730 ;; Hardware stack levels required when called:    3
  6731 ;; This function calls:
  6732 ;;		_Lcd_Port
  6733 ;; This function is called by:
  6734 ;;		_Lcd_Write_String
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           	psect	text27
  6739  002F2E                     __ptext27:
  6740                           	opt stack 0
  6741  002F2E                     _Lcd_Write_Char:
  6742                           	opt stack 25
  6743                           
  6744                           ;incstack = 0
  6745                           ;Lcd_Write_Char@a stored from wreg
  6746  002F2E  6E05               	movwf	Lcd_Write_Char@a,c
  6747                           
  6748                           ;i2c_display.c: 93: char temp,y;
  6749                           ;i2c_display.c: 94: temp = a&0x0F;
  6750  002F30  5005               	movf	Lcd_Write_Char@a,w,c
  6751  002F32  0B0F               	andlw	15
  6752  002F34  6E07               	movwf	Lcd_Write_Char@temp,c
  6753                           
  6754                           ;i2c_display.c: 95: temp=temp<<4;
  6755  002F36  3807               	swapf	Lcd_Write_Char@temp,w,c
  6756  002F38  0BF0               	andlw	240
  6757  002F3A  6E07               	movwf	Lcd_Write_Char@temp,c
  6758                           
  6759                           ;i2c_display.c: 96: y = a&0xF0;
  6760  002F3C  5005               	movf	Lcd_Write_Char@a,w,c
  6761  002F3E  0BF0               	andlw	240
  6762  002F40  6E06               	movwf	Lcd_Write_Char@y,c
  6763                           
  6764                           ;i2c_display.c: 99: Lcd_Port(0x00 | 0x01 | 0x00 | 0x00);
  6765  002F42  0E01               	movlw	1
  6766  002F44  ECD5  F018         	call	_Lcd_Port
  6767                           
  6768                           ;i2c_display.c: 100: Lcd_Port(y);
  6769  002F48  5006               	movf	Lcd_Write_Char@y,w,c
  6770  002F4A  ECD5  F018         	call	_Lcd_Port
  6771                           
  6772                           ;i2c_display.c: 102: Lcd_Port(y | 0x01 | 0x04 | 0x00);
  6773  002F4E  5006               	movf	Lcd_Write_Char@y,w,c
  6774  002F50  0905               	iorlw	5
  6775  002F52  ECD5  F018         	call	_Lcd_Port
  6776                           
  6777                           ;i2c_display.c: 103: _delay((unsigned long)((40)*(64000000/4000000.0)));
  6778  002F56  0ED5               	movlw	213
  6779  002F58                     u3147:
  6780  002F58  2EE8               	decfsz	wreg,f,c
  6781  002F5A  D7FE               	bra	u3147
  6782  002F5C  F000               	nop	
  6783                           
  6784                           ;i2c_display.c: 105: Lcd_Port(y | 0x01 | 0x00 | 0x00);
  6785  002F5E  5006               	movf	Lcd_Write_Char@y,w,c
  6786  002F60  0901               	iorlw	1
  6787  002F62  ECD5  F018         	call	_Lcd_Port
  6788                           
  6789                           ;i2c_display.c: 106: Lcd_Port(temp);
  6790  002F66  5007               	movf	Lcd_Write_Char@temp,w,c
  6791  002F68  ECD5  F018         	call	_Lcd_Port
  6792                           
  6793                           ;i2c_display.c: 109: Lcd_Port(temp | 0x01 | 0x04 | 0x00);
  6794  002F6C  5007               	movf	Lcd_Write_Char@temp,w,c
  6795  002F6E  0905               	iorlw	5
  6796  002F70  ECD5  F018         	call	_Lcd_Port
  6797                           
  6798                           ;i2c_display.c: 110: _delay((unsigned long)((40)*(64000000/4000000.0)));
  6799  002F74  0ED5               	movlw	213
  6800  002F76                     u3157:
  6801  002F76  2EE8               	decfsz	wreg,f,c
  6802  002F78  D7FE               	bra	u3157
  6803  002F7A  F000               	nop	
  6804                           
  6805                           ;i2c_display.c: 112: Lcd_Port(temp | 0x01 | 0x00 | 0x00);
  6806  002F7C  5007               	movf	Lcd_Write_Char@temp,w,c
  6807  002F7E  0901               	iorlw	1
  6808  002F80  ECD5  F018         	call	_Lcd_Port
  6809  002F84  0012               	return		;funcret
  6810  002F86                     __end_of_Lcd_Write_Char:
  6811                           	opt stack 0
  6812                           tblptru	equ	0xFF8
  6813                           tblptrh	equ	0xFF7
  6814                           tblptrl	equ	0xFF6
  6815                           tablat	equ	0xFF5
  6816                           prodh	equ	0xFF4
  6817                           prodl	equ	0xFF3
  6818                           indf0	equ	0xFEF
  6819                           postinc0	equ	0xFEE
  6820                           fsr0h	equ	0xFEA
  6821                           fsr0l	equ	0xFE9
  6822                           wreg	equ	0xFE8
  6823                           indf2	equ	0xFDF
  6824                           postinc2	equ	0xFDE
  6825                           postdec2	equ	0xFDD
  6826                           fsr2h	equ	0xFDA
  6827                           fsr2l	equ	0xFD9
  6828                           status	equ	0xFD8
  6829                           
  6830 ;; *************** function _Lcd_Set_Cursor *****************
  6831 ;; Defined at:
  6832 ;;		line 51 in file "i2c_display.c"
  6833 ;; Parameters:    Size  Location     Type
  6834 ;;  a               1    wreg     unsigned char 
  6835 ;;  b               1   10[COMRAM] unsigned char 
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;  a               1   11[COMRAM] unsigned char 
  6838 ;;  temp            1   14[COMRAM] unsigned char 
  6839 ;;  y               1   13[COMRAM] unsigned char 
  6840 ;;  z               1   12[COMRAM] unsigned char 
  6841 ;; Return value:  Size  Location     Type
  6842 ;;                  1    wreg      void 
  6843 ;; Registers used:
  6844 ;;		wreg, status,2, status,0, cstack
  6845 ;; Tracked objects:
  6846 ;;		On entry : 0/0
  6847 ;;		On exit  : 0/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6850 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;Total ram usage:        5 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; Hardware stack levels required when called:    4
  6857 ;; This function calls:
  6858 ;;		_Lcd_Cmd
  6859 ;; This function is called by:
  6860 ;;		_main
  6861 ;;		_init_io_display
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           	psect	text28
  6866  002FDA                     __ptext28:
  6867                           	opt stack 0
  6868  002FDA                     _Lcd_Set_Cursor:
  6869                           	opt stack 25
  6870                           
  6871                           ;incstack = 0
  6872                           ;Lcd_Set_Cursor@a stored from wreg
  6873  002FDA  6E0C               	movwf	Lcd_Set_Cursor@a,c
  6874                           
  6875                           ;i2c_display.c: 53: char temp,z,y;
  6876                           ;i2c_display.c: 54: if(a == 1)
  6877  002FDC  040C               	decf	Lcd_Set_Cursor@a,w,c
  6878  002FDE  A4D8               	btfss	status,2,c
  6879  002FE0  D010               	goto	l288
  6880                           
  6881                           ;i2c_display.c: 55: {
  6882                           ;i2c_display.c: 56: temp = 0x80 + b - 1;
  6883  002FE2  500B               	movf	Lcd_Set_Cursor@b,w,c
  6884  002FE4  0F7F               	addlw	127
  6885  002FE6  6E0F               	movwf	Lcd_Set_Cursor@temp,c
  6886                           
  6887                           ;i2c_display.c: 57: z = temp>>4;
  6888  002FE8  380F               	swapf	Lcd_Set_Cursor@temp,w,c
  6889  002FEA  0B0F               	andlw	15
  6890  002FEC  6E0D               	movwf	Lcd_Set_Cursor@z,c
  6891                           
  6892                           ;i2c_display.c: 58: y = temp & 0x0F;
  6893  002FEE  500F               	movf	Lcd_Set_Cursor@temp,w,c
  6894  002FF0  0B0F               	andlw	15
  6895  002FF2  6E0E               	movwf	Lcd_Set_Cursor@y,c
  6896                           
  6897                           ;i2c_display.c: 59: Lcd_Cmd(z);
  6898  002FF4  500D               	movf	Lcd_Set_Cursor@z,w,c
  6899  002FF6  EC15  F018         	call	_Lcd_Cmd
  6900                           
  6901                           ;i2c_display.c: 60: Lcd_Cmd(y);
  6902  002FFA  500E               	movf	Lcd_Set_Cursor@y,w,c
  6903  002FFC  EC15  F018         	call	_Lcd_Cmd
  6904                           
  6905                           ;i2c_display.c: 61: }
  6906  003000  0012               	return	
  6907  003002                     l288:
  6908                           
  6909                           ;i2c_display.c: 62: else if(a == 2)
  6910  003002  0E02               	movlw	2
  6911  003004  180C               	xorwf	Lcd_Set_Cursor@a,w,c
  6912  003006  A4D8               	btfss	status,2,c
  6913  003008  0012               	return	
  6914                           
  6915                           ;i2c_display.c: 63: {
  6916                           ;i2c_display.c: 64: temp = 0xC0 + b - 1;
  6917  00300A  500B               	movf	Lcd_Set_Cursor@b,w,c
  6918  00300C  0FBF               	addlw	191
  6919  00300E  6E0F               	movwf	Lcd_Set_Cursor@temp,c
  6920                           
  6921                           ;i2c_display.c: 65: z = temp>>4;
  6922  003010  380F               	swapf	Lcd_Set_Cursor@temp,w,c
  6923  003012  0B0F               	andlw	15
  6924  003014  6E0D               	movwf	Lcd_Set_Cursor@z,c
  6925                           
  6926                           ;i2c_display.c: 66: y = temp & 0x0F;
  6927  003016  500F               	movf	Lcd_Set_Cursor@temp,w,c
  6928  003018  0B0F               	andlw	15
  6929  00301A  6E0E               	movwf	Lcd_Set_Cursor@y,c
  6930                           
  6931                           ;i2c_display.c: 67: Lcd_Cmd(z);
  6932  00301C  500D               	movf	Lcd_Set_Cursor@z,w,c
  6933  00301E  EC15  F018         	call	_Lcd_Cmd
  6934                           
  6935                           ;i2c_display.c: 68: Lcd_Cmd(y);
  6936  003022  500E               	movf	Lcd_Set_Cursor@y,w,c
  6937  003024  EC15  F018         	call	_Lcd_Cmd
  6938  003028  0012               	return	
  6939  00302A                     __end_of_Lcd_Set_Cursor:
  6940                           	opt stack 0
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           prodh	equ	0xFF4
  6946                           prodl	equ	0xFF3
  6947                           indf0	equ	0xFEF
  6948                           postinc0	equ	0xFEE
  6949                           fsr0h	equ	0xFEA
  6950                           fsr0l	equ	0xFE9
  6951                           wreg	equ	0xFE8
  6952                           indf2	equ	0xFDF
  6953                           postinc2	equ	0xFDE
  6954                           postdec2	equ	0xFDD
  6955                           fsr2h	equ	0xFDA
  6956                           fsr2l	equ	0xFD9
  6957                           status	equ	0xFD8
  6958                           
  6959 ;; *************** function _Lcd_Init *****************
  6960 ;; Defined at:
  6961 ;;		line 72 in file "i2c_display.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;		None
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;		None
  6966 ;; Return value:  Size  Location     Type
  6967 ;;                  1    wreg      void 
  6968 ;; Registers used:
  6969 ;;		wreg, status,2, status,0, cstack
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;Total ram usage:        2 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; Hardware stack levels required when called:    4
  6982 ;; This function calls:
  6983 ;;		_Lcd_Cmd
  6984 ;;		_Lcd_Port
  6985 ;; This function is called by:
  6986 ;;		_init_io_display
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           	psect	text29
  6991  002C44                     __ptext29:
  6992                           	opt stack 0
  6993  002C44                     _Lcd_Init:
  6994                           	opt stack 25
  6995                           
  6996                           ;i2c_display.c: 74: Lcd_Port(0x00);
  6997                           
  6998                           ;incstack = 0
  6999  002C44  0E00               	movlw	0
  7000  002C46  ECD5  F018         	call	_Lcd_Port
  7001                           
  7002                           ;i2c_display.c: 75: _delay((unsigned long)((20)*(64000000/4000.0)));
  7003  002C4A  0E02               	movlw	2
  7004  002C4C  6E0C               	movwf	(??_Lcd_Init+1)& (0+255),c
  7005  002C4E  0EA0               	movlw	160
  7006  002C50  6E0B               	movwf	??_Lcd_Init& (0+255),c
  7007  002C52  0E92               	movlw	146
  7008  002C54                     u3167:
  7009  002C54  2EE8               	decfsz	wreg,f,c
  7010  002C56  D7FE               	bra	u3167
  7011  002C58  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  7012  002C5A  D7FC               	bra	u3167
  7013  002C5C  2E0C               	decfsz	(??_Lcd_Init+1)& (0+255),f,c
  7014  002C5E  D7FA               	bra	u3167
  7015  002C60  D000               	nop2	
  7016                           
  7017                           ;i2c_display.c: 76: Lcd_Cmd(0x03);
  7018  002C62  0E03               	movlw	3
  7019  002C64  EC15  F018         	call	_Lcd_Cmd
  7020                           
  7021                           ;i2c_display.c: 77: _delay((unsigned long)((5)*(64000000/4000.0)));
  7022  002C68  0E68               	movlw	104
  7023  002C6A  6E0B               	movwf	??_Lcd_Init& (0+255),c
  7024  002C6C  0EE4               	movlw	228
  7025  002C6E                     u3177:
  7026  002C6E  2EE8               	decfsz	wreg,f,c
  7027  002C70  D7FE               	bra	u3177
  7028  002C72  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  7029  002C74  D7FC               	bra	u3177
  7030  002C76  D000               	nop2	
  7031                           
  7032                           ;i2c_display.c: 78: Lcd_Cmd(0x03);
  7033  002C78  0E03               	movlw	3
  7034  002C7A  EC15  F018         	call	_Lcd_Cmd
  7035                           
  7036                           ;i2c_display.c: 79: _delay((unsigned long)((11)*(64000000/4000.0)));
  7037  002C7E  0EE5               	movlw	229
  7038  002C80  6E0B               	movwf	??_Lcd_Init& (0+255),c
  7039  002C82  0E91               	movlw	145
  7040  002C84                     u3187:
  7041  002C84  2EE8               	decfsz	wreg,f,c
  7042  002C86  D7FE               	bra	u3187
  7043  002C88  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  7044  002C8A  D7FC               	bra	u3187
  7045  002C8C  F000               	nop	
  7046                           
  7047                           ;i2c_display.c: 80: Lcd_Cmd(0x03);
  7048  002C8E  0E03               	movlw	3
  7049  002C90  EC15  F018         	call	_Lcd_Cmd
  7050                           
  7051                           ;i2c_display.c: 82: Lcd_Cmd(0x02);
  7052  002C94  0E02               	movlw	2
  7053  002C96  EC15  F018         	call	_Lcd_Cmd
  7054                           
  7055                           ;i2c_display.c: 83: Lcd_Cmd(0x02);
  7056  002C9A  0E02               	movlw	2
  7057  002C9C  EC15  F018         	call	_Lcd_Cmd
  7058                           
  7059                           ;i2c_display.c: 84: Lcd_Cmd(0x08);
  7060  002CA0  0E08               	movlw	8
  7061  002CA2  EC15  F018         	call	_Lcd_Cmd
  7062                           
  7063                           ;i2c_display.c: 85: Lcd_Cmd(0x00);
  7064  002CA6  0E00               	movlw	0
  7065  002CA8  EC15  F018         	call	_Lcd_Cmd
  7066                           
  7067                           ;i2c_display.c: 86: Lcd_Cmd(0x0C);
  7068  002CAC  0E0C               	movlw	12
  7069  002CAE  EC15  F018         	call	_Lcd_Cmd
  7070                           
  7071                           ;i2c_display.c: 87: Lcd_Cmd(0x00);
  7072  002CB2  0E00               	movlw	0
  7073  002CB4  EC15  F018         	call	_Lcd_Cmd
  7074                           
  7075                           ;i2c_display.c: 88: Lcd_Cmd(0x06);
  7076  002CB8  0E06               	movlw	6
  7077  002CBA  EC15  F018         	call	_Lcd_Cmd
  7078  002CBE  0012               	return		;funcret
  7079  002CC0                     __end_of_Lcd_Init:
  7080                           	opt stack 0
  7081                           tblptru	equ	0xFF8
  7082                           tblptrh	equ	0xFF7
  7083                           tblptrl	equ	0xFF6
  7084                           tablat	equ	0xFF5
  7085                           prodh	equ	0xFF4
  7086                           prodl	equ	0xFF3
  7087                           indf0	equ	0xFEF
  7088                           postinc0	equ	0xFEE
  7089                           fsr0h	equ	0xFEA
  7090                           fsr0l	equ	0xFE9
  7091                           wreg	equ	0xFE8
  7092                           indf2	equ	0xFDF
  7093                           postinc2	equ	0xFDE
  7094                           postdec2	equ	0xFDD
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function _Lcd_Clear *****************
  7100 ;; Defined at:
  7101 ;;		line 45 in file "i2c_display.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;		None
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;		None
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  1    wreg      void 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0, cstack
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;Total ram usage:        0 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    4
  7122 ;; This function calls:
  7123 ;;		_Lcd_Cmd
  7124 ;; This function is called by:
  7125 ;;		_main
  7126 ;;		_init_io_display
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           	psect	text30
  7131  003216                     __ptext30:
  7132                           	opt stack 0
  7133  003216                     _Lcd_Clear:
  7134                           	opt stack 25
  7135                           
  7136                           ;i2c_display.c: 47: Lcd_Cmd(0);
  7137                           
  7138                           ;incstack = 0
  7139  003216  0E00               	movlw	0
  7140  003218  EC15  F018         	call	_Lcd_Cmd
  7141                           
  7142                           ;i2c_display.c: 48: Lcd_Cmd(1);
  7143  00321C  0E01               	movlw	1
  7144  00321E  EC15  F018         	call	_Lcd_Cmd
  7145  003222  0012               	return		;funcret
  7146  003224                     __end_of_Lcd_Clear:
  7147                           	opt stack 0
  7148                           tblptru	equ	0xFF8
  7149                           tblptrh	equ	0xFF7
  7150                           tblptrl	equ	0xFF6
  7151                           tablat	equ	0xFF5
  7152                           prodh	equ	0xFF4
  7153                           prodl	equ	0xFF3
  7154                           indf0	equ	0xFEF
  7155                           postinc0	equ	0xFEE
  7156                           fsr0h	equ	0xFEA
  7157                           fsr0l	equ	0xFE9
  7158                           wreg	equ	0xFE8
  7159                           indf2	equ	0xFDF
  7160                           postinc2	equ	0xFDE
  7161                           postdec2	equ	0xFDD
  7162                           fsr2h	equ	0xFDA
  7163                           fsr2l	equ	0xFD9
  7164                           status	equ	0xFD8
  7165                           
  7166 ;; *************** function _I2C_Master_Init *****************
  7167 ;; Defined at:
  7168 ;;		line 165 in file "i2c_display.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;  c               4   13[COMRAM] const unsigned long 
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;		None
  7173 ;; Return value:  Size  Location     Type
  7174 ;;                  1    wreg      void 
  7175 ;; Registers used:
  7176 ;;		wreg, status,2, status,0, cstack
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7182 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7184 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7185 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7186 ;;Total ram usage:        8 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; Hardware stack levels required when called:    1
  7189 ;; This function calls:
  7190 ;;		___lldiv
  7191 ;; This function is called by:
  7192 ;;		_init_io_display
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text31
  7197  002ED4                     __ptext31:
  7198                           	opt stack 0
  7199  002ED4                     _I2C_Master_Init:
  7200                           	opt stack 28
  7201                           
  7202                           ;i2c_display.c: 167: SSP1CON1 = 0b00101000;
  7203                           
  7204                           ;incstack = 0
  7205  002ED4  0E28               	movlw	40
  7206  002ED6  6EC6               	movwf	4038,c	;volatile
  7207                           
  7208                           ;i2c_display.c: 168: SSP1CON2 = 0x00;
  7209  002ED8  0E00               	movlw	0
  7210  002EDA  6EC5               	movwf	4037,c	;volatile
  7211                           
  7212                           ;i2c_display.c: 169: SSP1ADD = (64000000/(4*c))-1;
  7213  002EDC  0E00               	movlw	0
  7214  002EDE  6E01               	movwf	___lldiv@dividend,c
  7215  002EE0  0E90               	movlw	144
  7216  002EE2  6E02               	movwf	___lldiv@dividend+1,c
  7217  002EE4  0ED0               	movlw	208
  7218  002EE6  6E03               	movwf	___lldiv@dividend+2,c
  7219  002EE8  0E03               	movlw	3
  7220  002EEA  6E04               	movwf	___lldiv@dividend+3,c
  7221  002EEC  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7222  002EF0  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7223  002EF4  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7224  002EF8  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7225  002EFC  0E02               	movlw	2
  7226  002EFE                     u2075:
  7227  002EFE  90D8               	bcf	status,0,c
  7228  002F00  3612               	rlcf	??_I2C_Master_Init,f,c
  7229  002F02  3613               	rlcf	??_I2C_Master_Init+1,f,c
  7230  002F04  3614               	rlcf	??_I2C_Master_Init+2,f,c
  7231  002F06  3615               	rlcf	??_I2C_Master_Init+3,f,c
  7232  002F08  2EE8               	decfsz	wreg,f,c
  7233  002F0A  D7F9               	goto	u2075
  7234  002F0C  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  7235  002F10  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7236  002F14  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7237  002F18  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7238  002F1C  ECA3  F015         	call	___lldiv	;wreg free
  7239  002F20  0401               	decf	?___lldiv,w,c
  7240  002F22  6EC8               	movwf	4040,c	;volatile
  7241                           
  7242                           ;i2c_display.c: 170: SSP1STAT = 0x00;
  7243  002F24  0E00               	movlw	0
  7244  002F26  6EC7               	movwf	4039,c	;volatile
  7245                           
  7246                           ;i2c_display.c: 171: TRISCbits.TRISC3=1;
  7247  002F28  8694               	bsf	3988,3,c	;volatile
  7248                           
  7249                           ;i2c_display.c: 172: TRISCbits.TRISC4=1;
  7250  002F2A  8894               	bsf	3988,4,c	;volatile
  7251  002F2C  0012               	return		;funcret
  7252  002F2E                     __end_of_I2C_Master_Init:
  7253                           	opt stack 0
  7254                           tblptru	equ	0xFF8
  7255                           tblptrh	equ	0xFF7
  7256                           tblptrl	equ	0xFF6
  7257                           tablat	equ	0xFF5
  7258                           prodh	equ	0xFF4
  7259                           prodl	equ	0xFF3
  7260                           indf0	equ	0xFEF
  7261                           postinc0	equ	0xFEE
  7262                           fsr0h	equ	0xFEA
  7263                           fsr0l	equ	0xFE9
  7264                           wreg	equ	0xFE8
  7265                           indf2	equ	0xFDF
  7266                           postinc2	equ	0xFDE
  7267                           postdec2	equ	0xFDD
  7268                           fsr2h	equ	0xFDA
  7269                           fsr2l	equ	0xFD9
  7270                           status	equ	0xFD8
  7271                           
  7272 ;; *************** function ___lldiv *****************
  7273 ;; Defined at:
  7274 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  dividend        4    0[COMRAM] unsigned long 
  7277 ;;  divisor         4    4[COMRAM] unsigned long 
  7278 ;; Auto vars:     Size  Location     Type
  7279 ;;  quotient        4    8[COMRAM] unsigned long 
  7280 ;;  counter         1   12[COMRAM] unsigned char 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  4    0[COMRAM] unsigned long 
  7283 ;; Registers used:
  7284 ;;		wreg, status,2, status,0
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7290 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;Total ram usage:       13 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; This function calls:
  7297 ;;		Nothing
  7298 ;; This function is called by:
  7299 ;;		_I2C_Master_Init
  7300 ;;		_sprintf
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           	psect	text32
  7305  002B46                     __ptext32:
  7306                           	opt stack 0
  7307  002B46                     ___lldiv:
  7308                           	opt stack 29
  7309                           
  7310                           ;incstack = 0
  7311  002B46  0E00               	movlw	0
  7312  002B48  6E09               	movwf	___lldiv@quotient,c
  7313  002B4A  0E00               	movlw	0
  7314  002B4C  6E0A               	movwf	___lldiv@quotient+1,c
  7315  002B4E  0E00               	movlw	0
  7316  002B50  6E0B               	movwf	___lldiv@quotient+2,c
  7317  002B52  0E00               	movlw	0
  7318  002B54  6E0C               	movwf	___lldiv@quotient+3,c
  7319  002B56  5005               	movf	___lldiv@divisor,w,c
  7320  002B58  1006               	iorwf	___lldiv@divisor+1,w,c
  7321  002B5A  1007               	iorwf	___lldiv@divisor+2,w,c
  7322  002B5C  1008               	iorwf	___lldiv@divisor+3,w,c
  7323  002B5E  B4D8               	btfsc	status,2,c
  7324  002B60  D02A               	goto	l867
  7325  002B62  0E01               	movlw	1
  7326  002B64  6E0D               	movwf	___lldiv@counter,c
  7327  002B66  D006               	goto	l862
  7328  002B68  90D8               	bcf	status,0,c
  7329  002B6A  3605               	rlcf	___lldiv@divisor,f,c
  7330  002B6C  3606               	rlcf	___lldiv@divisor+1,f,c
  7331  002B6E  3607               	rlcf	___lldiv@divisor+2,f,c
  7332  002B70  3608               	rlcf	___lldiv@divisor+3,f,c
  7333  002B72  2A0D               	incf	___lldiv@counter,f,c
  7334  002B74                     l862:
  7335  002B74  AE08               	btfss	___lldiv@divisor+3,7,c
  7336  002B76  D7F8               	goto	l863
  7337  002B78                     u2000:
  7338  002B78  90D8               	bcf	status,0,c
  7339  002B7A  3609               	rlcf	___lldiv@quotient,f,c
  7340  002B7C  360A               	rlcf	___lldiv@quotient+1,f,c
  7341  002B7E  360B               	rlcf	___lldiv@quotient+2,f,c
  7342  002B80  360C               	rlcf	___lldiv@quotient+3,f,c
  7343  002B82  5005               	movf	___lldiv@divisor,w,c
  7344  002B84  5C01               	subwf	___lldiv@dividend,w,c
  7345  002B86  5006               	movf	___lldiv@divisor+1,w,c
  7346  002B88  5802               	subwfb	___lldiv@dividend+1,w,c
  7347  002B8A  5007               	movf	___lldiv@divisor+2,w,c
  7348  002B8C  5803               	subwfb	___lldiv@dividend+2,w,c
  7349  002B8E  5008               	movf	___lldiv@divisor+3,w,c
  7350  002B90  5804               	subwfb	___lldiv@dividend+3,w,c
  7351  002B92  A0D8               	btfss	status,0,c
  7352  002B94  D009               	goto	l866
  7353  002B96  5005               	movf	___lldiv@divisor,w,c
  7354  002B98  5E01               	subwf	___lldiv@dividend,f,c
  7355  002B9A  5006               	movf	___lldiv@divisor+1,w,c
  7356  002B9C  5A02               	subwfb	___lldiv@dividend+1,f,c
  7357  002B9E  5007               	movf	___lldiv@divisor+2,w,c
  7358  002BA0  5A03               	subwfb	___lldiv@dividend+2,f,c
  7359  002BA2  5008               	movf	___lldiv@divisor+3,w,c
  7360  002BA4  5A04               	subwfb	___lldiv@dividend+3,f,c
  7361  002BA6  8009               	bsf	___lldiv@quotient,0,c
  7362  002BA8                     l866:
  7363  002BA8  90D8               	bcf	status,0,c
  7364  002BAA  3208               	rrcf	___lldiv@divisor+3,f,c
  7365  002BAC  3207               	rrcf	___lldiv@divisor+2,f,c
  7366  002BAE  3206               	rrcf	___lldiv@divisor+1,f,c
  7367  002BB0  3205               	rrcf	___lldiv@divisor,f,c
  7368  002BB2  2E0D               	decfsz	___lldiv@counter,f,c
  7369  002BB4  D7E1               	goto	u2000
  7370  002BB6                     l867:
  7371  002BB6  C009  F001         	movff	___lldiv@quotient,?___lldiv
  7372  002BBA  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  7373  002BBE  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  7374  002BC2  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  7375  002BC6  0012               	return		;funcret
  7376  002BC8                     __end_of___lldiv:
  7377                           	opt stack 0
  7378                           tblptru	equ	0xFF8
  7379                           tblptrh	equ	0xFF7
  7380                           tblptrl	equ	0xFF6
  7381                           tablat	equ	0xFF5
  7382                           prodh	equ	0xFF4
  7383                           prodl	equ	0xFF3
  7384                           indf0	equ	0xFEF
  7385                           postinc0	equ	0xFEE
  7386                           fsr0h	equ	0xFEA
  7387                           fsr0l	equ	0xFE9
  7388                           wreg	equ	0xFE8
  7389                           indf2	equ	0xFDF
  7390                           postinc2	equ	0xFDE
  7391                           postdec2	equ	0xFDD
  7392                           fsr2h	equ	0xFDA
  7393                           fsr2l	equ	0xFD9
  7394                           status	equ	0xFD8
  7395                           
  7396 ;; *************** function _Cursor_Off *****************
  7397 ;; Defined at:
  7398 ;;		line 140 in file "i2c_display.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;		None
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;		None
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      void 
  7405 ;; Registers used:
  7406 ;;		wreg, status,2, status,0, cstack
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7416 ;;Total ram usage:        0 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:    4
  7419 ;; This function calls:
  7420 ;;		_Lcd_Cmd
  7421 ;; This function is called by:
  7422 ;;		_init_io_display
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           	psect	text33
  7427  003224                     __ptext33:
  7428                           	opt stack 0
  7429  003224                     _Cursor_Off:
  7430                           	opt stack 25
  7431                           
  7432                           ;i2c_display.c: 142: Lcd_Cmd(0x00);
  7433                           
  7434                           ;incstack = 0
  7435  003224  0E00               	movlw	0
  7436  003226  EC15  F018         	call	_Lcd_Cmd
  7437                           
  7438                           ;i2c_display.c: 143: Lcd_Cmd(0x0C);
  7439  00322A  0E0C               	movlw	12
  7440  00322C  EC15  F018         	call	_Lcd_Cmd
  7441  003230  0012               	return		;funcret
  7442  003232                     __end_of_Cursor_Off:
  7443                           	opt stack 0
  7444                           tblptru	equ	0xFF8
  7445                           tblptrh	equ	0xFF7
  7446                           tblptrl	equ	0xFF6
  7447                           tablat	equ	0xFF5
  7448                           prodh	equ	0xFF4
  7449                           prodl	equ	0xFF3
  7450                           indf0	equ	0xFEF
  7451                           postinc0	equ	0xFEE
  7452                           fsr0h	equ	0xFEA
  7453                           fsr0l	equ	0xFE9
  7454                           wreg	equ	0xFE8
  7455                           indf2	equ	0xFDF
  7456                           postinc2	equ	0xFDE
  7457                           postdec2	equ	0xFDD
  7458                           fsr2h	equ	0xFDA
  7459                           fsr2l	equ	0xFD9
  7460                           status	equ	0xFD8
  7461                           
  7462 ;; *************** function _Lcd_Cmd *****************
  7463 ;; Defined at:
  7464 ;;		line 26 in file "i2c_display.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  a               1    wreg     unsigned char 
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;  a               1    9[COMRAM] unsigned char 
  7469 ;;  buff            2    7[COMRAM] int 
  7470 ;; Return value:  Size  Location     Type
  7471 ;;                  1    wreg      void 
  7472 ;; Registers used:
  7473 ;;		wreg, status,2, status,0, cstack
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;Total ram usage:        6 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    3
  7486 ;; This function calls:
  7487 ;;		_Lcd_Port
  7488 ;; This function is called by:
  7489 ;;		_Lcd_Clear
  7490 ;;		_Lcd_Set_Cursor
  7491 ;;		_Lcd_Init
  7492 ;;		_Cursor_Off
  7493 ;;		_Lcd_Shift_Right
  7494 ;;		_Lcd_Shift_Left
  7495 ;;		_Cursor_On
  7496 ;;		_Cursor_Left
  7497 ;;		_Cursor_Right
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           	psect	text34
  7502  00302A                     __ptext34:
  7503                           	opt stack 0
  7504  00302A                     _Lcd_Cmd:
  7505                           	opt stack 25
  7506                           
  7507                           ;incstack = 0
  7508                           ;Lcd_Cmd@a stored from wreg
  7509  00302A  6E0A               	movwf	Lcd_Cmd@a,c
  7510                           
  7511                           ;i2c_display.c: 28: int buff;
  7512                           ;i2c_display.c: 29: a=a<<4;
  7513  00302C  380A               	swapf	Lcd_Cmd@a,w,c
  7514  00302E  0BF0               	andlw	240
  7515  003030  6E0A               	movwf	Lcd_Cmd@a,c
  7516                           
  7517                           ;i2c_display.c: 32: Lcd_Port(0x00 || 0x00 || 0x00 || 0x00);
  7518  003032  0E01               	movlw	1
  7519  003034  6E07               	movwf	_Lcd_Cmd$813,c
  7520  003036  0E00               	movlw	0
  7521  003038  6E07               	movwf	_Lcd_Cmd$813,c
  7522  00303A  5007               	movf	_Lcd_Cmd$813,w,c
  7523  00303C  ECD5  F018         	call	_Lcd_Port
  7524                           
  7525                           ;i2c_display.c: 34: Lcd_Port(a);
  7526  003040  500A               	movf	Lcd_Cmd@a,w,c
  7527  003042  ECD5  F018         	call	_Lcd_Port
  7528                           
  7529                           ;i2c_display.c: 37: buff=a | 0x00 | 0x04 | 0x00;
  7530  003046  0E04               	movlw	4
  7531  003048  C00A  F005         	movff	Lcd_Cmd@a,??_Lcd_Cmd
  7532  00304C  6A06               	clrf	(??_Lcd_Cmd+1)& (0+255),c
  7533  00304E  1005               	iorwf	??_Lcd_Cmd,w,c
  7534  003050  6E08               	movwf	Lcd_Cmd@buff,c
  7535  003052  5006               	movf	??_Lcd_Cmd+1,w,c
  7536  003054  6E09               	movwf	Lcd_Cmd@buff+1,c
  7537                           
  7538                           ;i2c_display.c: 38: Lcd_Port(buff);
  7539  003056  5008               	movf	Lcd_Cmd@buff,w,c
  7540  003058  ECD5  F018         	call	_Lcd_Port
  7541                           
  7542                           ;i2c_display.c: 39: _delay((unsigned long)((4)*(64000000/4000.0)));
  7543  00305C  0E54               	movlw	84
  7544  00305E  6E05               	movwf	??_Lcd_Cmd& (0+255),c
  7545  003060  0E1C               	movlw	28
  7546  003062                     u3197:
  7547  003062  2EE8               	decfsz	wreg,f,c
  7548  003064  D7FE               	bra	u3197
  7549  003066  2E05               	decfsz	??_Lcd_Cmd& (0+255),f,c
  7550  003068  D7FC               	bra	u3197
  7551  00306A  D000               	nop2	
  7552                           
  7553                           ;i2c_display.c: 41: buff=a | 0x00 | 0x00 | 0x00;
  7554  00306C  C00A  F008         	movff	Lcd_Cmd@a,Lcd_Cmd@buff
  7555  003070  6A09               	clrf	Lcd_Cmd@buff+1,c
  7556                           
  7557                           ;i2c_display.c: 42: Lcd_Port(buff);
  7558  003072  5008               	movf	Lcd_Cmd@buff,w,c
  7559  003074  ECD5  F018         	call	_Lcd_Port
  7560  003078  0012               	return		;funcret
  7561  00307A                     __end_of_Lcd_Cmd:
  7562                           	opt stack 0
  7563                           tblptru	equ	0xFF8
  7564                           tblptrh	equ	0xFF7
  7565                           tblptrl	equ	0xFF6
  7566                           tablat	equ	0xFF5
  7567                           prodh	equ	0xFF4
  7568                           prodl	equ	0xFF3
  7569                           indf0	equ	0xFEF
  7570                           postinc0	equ	0xFEE
  7571                           fsr0h	equ	0xFEA
  7572                           fsr0l	equ	0xFE9
  7573                           wreg	equ	0xFE8
  7574                           indf2	equ	0xFDF
  7575                           postinc2	equ	0xFDE
  7576                           postdec2	equ	0xFDD
  7577                           fsr2h	equ	0xFDA
  7578                           fsr2l	equ	0xFD9
  7579                           status	equ	0xFD8
  7580                           
  7581 ;; *************** function _Lcd_Port *****************
  7582 ;; Defined at:
  7583 ;;		line 20 in file "i2c_display.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;  data            1    wreg     unsigned char 
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;  data            1    3[COMRAM] unsigned char 
  7588 ;; Return value:  Size  Location     Type
  7589 ;;                  1    wreg      void 
  7590 ;; Registers used:
  7591 ;;		wreg, status,2, status,0, cstack
  7592 ;; Tracked objects:
  7593 ;;		On entry : 0/0
  7594 ;;		On exit  : 0/0
  7595 ;;		Unchanged: 0/0
  7596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7601 ;;Total ram usage:        1 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; Hardware stack levels required when called:    2
  7604 ;; This function calls:
  7605 ;;		_I2C_Master_Start
  7606 ;;		_I2C_Master_Stop
  7607 ;;		_I2C_Write_Display
  7608 ;; This function is called by:
  7609 ;;		_Lcd_Cmd
  7610 ;;		_Lcd_Init
  7611 ;;		_Lcd_Write_Char
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           	psect	text35
  7616  0031AA                     __ptext35:
  7617                           	opt stack 0
  7618  0031AA                     _Lcd_Port:
  7619                           	opt stack 25
  7620                           
  7621                           ;incstack = 0
  7622                           ;Lcd_Port@data stored from wreg
  7623  0031AA  6E04               	movwf	Lcd_Port@data,c
  7624  0031AC  EC22  F019         	call	_I2C_Master_Start	;wreg free
  7625                           
  7626                           ;i2c_display.c: 22: I2C_Write_Display(0x70);
  7627  0031B0  0E00               	movlw	0
  7628  0031B2  6E03               	movwf	I2C_Write_Display@d+1,c
  7629  0031B4  0E70               	movlw	112
  7630  0031B6  6E02               	movwf	I2C_Write_Display@d,c
  7631  0031B8  EC19  F019         	call	_I2C_Write_Display	;wreg free
  7632                           
  7633                           ;i2c_display.c: 23: I2C_Write_Display(data);
  7634  0031BC  C004  F002         	movff	Lcd_Port@data,I2C_Write_Display@d
  7635  0031C0  6A03               	clrf	I2C_Write_Display@d+1,c
  7636  0031C2  EC19  F019         	call	_I2C_Write_Display	;wreg free
  7637                           
  7638                           ;i2c_display.c: 24: I2C_Master_Stop();
  7639  0031C6  EC1E  F019         	call	_I2C_Master_Stop	;wreg free
  7640  0031CA  0012               	return		;funcret
  7641  0031CC                     __end_of_Lcd_Port:
  7642                           	opt stack 0
  7643                           tblptru	equ	0xFF8
  7644                           tblptrh	equ	0xFF7
  7645                           tblptrl	equ	0xFF6
  7646                           tablat	equ	0xFF5
  7647                           prodh	equ	0xFF4
  7648                           prodl	equ	0xFF3
  7649                           indf0	equ	0xFEF
  7650                           postinc0	equ	0xFEE
  7651                           fsr0h	equ	0xFEA
  7652                           fsr0l	equ	0xFE9
  7653                           wreg	equ	0xFE8
  7654                           indf2	equ	0xFDF
  7655                           postinc2	equ	0xFDE
  7656                           postdec2	equ	0xFDD
  7657                           fsr2h	equ	0xFDA
  7658                           fsr2l	equ	0xFD9
  7659                           status	equ	0xFD8
  7660                           
  7661 ;; *************** function _I2C_Write_Display *****************
  7662 ;; Defined at:
  7663 ;;		line 206 in file "i2c_display.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;  d               2    1[COMRAM] unsigned int 
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;		None
  7668 ;; Return value:  Size  Location     Type
  7669 ;;                  1    wreg      void 
  7670 ;; Registers used:
  7671 ;;		wreg, status,2, status,0, cstack
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7677 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7680 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;Total ram usage:        2 bytes
  7682 ;; Hardware stack levels used:    1
  7683 ;; Hardware stack levels required when called:    1
  7684 ;; This function calls:
  7685 ;;		_I2C_Master_Wait
  7686 ;; This function is called by:
  7687 ;;		_Lcd_Port
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           	psect	text36
  7692  003232                     __ptext36:
  7693                           	opt stack 0
  7694  003232                     _I2C_Write_Display:
  7695                           	opt stack 25
  7696                           
  7697                           ;i2c_display.c: 208: I2C_Master_Wait();
  7698                           
  7699                           ;incstack = 0
  7700  003232  EC02  F019         	call	_I2C_Master_Wait	;wreg free
  7701                           
  7702                           ;i2c_display.c: 209: SSP1BUF = d;
  7703  003236  C002  FFC9         	movff	I2C_Write_Display@d,4041	;volatile
  7704  00323A  0012               	return		;funcret
  7705  00323C                     __end_of_I2C_Write_Display:
  7706                           	opt stack 0
  7707                           tblptru	equ	0xFF8
  7708                           tblptrh	equ	0xFF7
  7709                           tblptrl	equ	0xFF6
  7710                           tablat	equ	0xFF5
  7711                           prodh	equ	0xFF4
  7712                           prodl	equ	0xFF3
  7713                           indf0	equ	0xFEF
  7714                           postinc0	equ	0xFEE
  7715                           fsr0h	equ	0xFEA
  7716                           fsr0l	equ	0xFE9
  7717                           wreg	equ	0xFE8
  7718                           indf2	equ	0xFDF
  7719                           postinc2	equ	0xFDE
  7720                           postdec2	equ	0xFDD
  7721                           fsr2h	equ	0xFDA
  7722                           fsr2l	equ	0xFD9
  7723                           status	equ	0xFD8
  7724                           
  7725 ;; *************** function _I2C_Master_Stop *****************
  7726 ;; Defined at:
  7727 ;;		line 194 in file "i2c_display.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;		None
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;		None
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  1    wreg      void 
  7734 ;; Registers used:
  7735 ;;		wreg, status,2, status,0, cstack
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;Total ram usage:        0 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; Hardware stack levels required when called:    1
  7748 ;; This function calls:
  7749 ;;		_I2C_Master_Wait
  7750 ;; This function is called by:
  7751 ;;		_Lcd_Port
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           	psect	text37
  7756  00323C                     __ptext37:
  7757                           	opt stack 0
  7758  00323C                     _I2C_Master_Stop:
  7759                           	opt stack 25
  7760                           
  7761                           ;i2c_display.c: 196: I2C_Master_Wait();
  7762                           
  7763                           ;incstack = 0
  7764  00323C  EC02  F019         	call	_I2C_Master_Wait	;wreg free
  7765                           
  7766                           ;i2c_display.c: 197: SSP1CON2bits.PEN = 1;
  7767  003240  84C5               	bsf	4037,2,c	;volatile
  7768  003242  0012               	return		;funcret
  7769  003244                     __end_of_I2C_Master_Stop:
  7770                           	opt stack 0
  7771                           tblptru	equ	0xFF8
  7772                           tblptrh	equ	0xFF7
  7773                           tblptrl	equ	0xFF6
  7774                           tablat	equ	0xFF5
  7775                           prodh	equ	0xFF4
  7776                           prodl	equ	0xFF3
  7777                           indf0	equ	0xFEF
  7778                           postinc0	equ	0xFEE
  7779                           fsr0h	equ	0xFEA
  7780                           fsr0l	equ	0xFE9
  7781                           wreg	equ	0xFE8
  7782                           indf2	equ	0xFDF
  7783                           postinc2	equ	0xFDE
  7784                           postdec2	equ	0xFDD
  7785                           fsr2h	equ	0xFDA
  7786                           fsr2l	equ	0xFD9
  7787                           status	equ	0xFD8
  7788                           
  7789 ;; *************** function _I2C_Master_Start *****************
  7790 ;; Defined at:
  7791 ;;		line 182 in file "i2c_display.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;		None
  7794 ;; Auto vars:     Size  Location     Type
  7795 ;;		None
  7796 ;; Return value:  Size  Location     Type
  7797 ;;                  1    wreg      void 
  7798 ;; Registers used:
  7799 ;;		wreg, status,2, status,0, cstack
  7800 ;; Tracked objects:
  7801 ;;		On entry : 0/0
  7802 ;;		On exit  : 0/0
  7803 ;;		Unchanged: 0/0
  7804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7809 ;;Total ram usage:        0 bytes
  7810 ;; Hardware stack levels used:    1
  7811 ;; Hardware stack levels required when called:    1
  7812 ;; This function calls:
  7813 ;;		_I2C_Master_Wait
  7814 ;; This function is called by:
  7815 ;;		_Lcd_Port
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           	psect	text38
  7820  003244                     __ptext38:
  7821                           	opt stack 0
  7822  003244                     _I2C_Master_Start:
  7823                           	opt stack 25
  7824                           
  7825                           ;i2c_display.c: 184: I2C_Master_Wait();
  7826                           
  7827                           ;incstack = 0
  7828  003244  EC02  F019         	call	_I2C_Master_Wait	;wreg free
  7829                           
  7830                           ;i2c_display.c: 185: SSP1CON2bits.SEN = 1;
  7831  003248  80C5               	bsf	4037,0,c	;volatile
  7832  00324A  0012               	return		;funcret
  7833  00324C                     __end_of_I2C_Master_Start:
  7834                           	opt stack 0
  7835                           tblptru	equ	0xFF8
  7836                           tblptrh	equ	0xFF7
  7837                           tblptrl	equ	0xFF6
  7838                           tablat	equ	0xFF5
  7839                           prodh	equ	0xFF4
  7840                           prodl	equ	0xFF3
  7841                           indf0	equ	0xFEF
  7842                           postinc0	equ	0xFEE
  7843                           fsr0h	equ	0xFEA
  7844                           fsr0l	equ	0xFE9
  7845                           wreg	equ	0xFE8
  7846                           indf2	equ	0xFDF
  7847                           postinc2	equ	0xFDE
  7848                           postdec2	equ	0xFDD
  7849                           fsr2h	equ	0xFDA
  7850                           fsr2l	equ	0xFD9
  7851                           status	equ	0xFD8
  7852                           
  7853 ;; *************** function _I2C_Master_Wait *****************
  7854 ;; Defined at:
  7855 ;;		line 175 in file "i2c_display.c"
  7856 ;; Parameters:    Size  Location     Type
  7857 ;;		None
  7858 ;; Auto vars:     Size  Location     Type
  7859 ;;		None
  7860 ;; Return value:  Size  Location     Type
  7861 ;;                  1    wreg      void 
  7862 ;; Registers used:
  7863 ;;		wreg, status,2, status,0
  7864 ;; Tracked objects:
  7865 ;;		On entry : 0/0
  7866 ;;		On exit  : 0/0
  7867 ;;		Unchanged: 0/0
  7868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7872 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;Total ram usage:        1 bytes
  7874 ;; Hardware stack levels used:    1
  7875 ;; This function calls:
  7876 ;;		Nothing
  7877 ;; This function is called by:
  7878 ;;		_I2C_Master_Start
  7879 ;;		_I2C_Master_Stop
  7880 ;;		_I2C_Write_Display
  7881 ;;		_I2C_Master_RepeatedStart
  7882 ;;		_I2C_Master_Write
  7883 ;;		_I2C_Master_Read
  7884 ;; This function uses a non-reentrant model
  7885 ;;
  7886                           
  7887                           	psect	text39
  7888  003204                     __ptext39:
  7889                           	opt stack 0
  7890  003204                     _I2C_Master_Wait:
  7891                           	opt stack 25
  7892                           
  7893                           ;i2c_display.c: 177: while ((SSP1STAT & 0x04) || (SSP1CON2 & 0x1F));
  7894                           
  7895                           ;incstack = 0
  7896  003204  B4C7               	btfsc	4039,2,c	;volatile
  7897  003206  D7FE               	goto	_I2C_Master_Wait
  7898  003208  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  7899  00320C  0E1F               	movlw	31
  7900  00320E  1601               	andwf	??_I2C_Master_Wait,f,c
  7901  003210  B4D8               	btfsc	status,2,c
  7902  003212  0012               	return	
  7903  003214  D7F7               	goto	_I2C_Master_Wait
  7904  003216                     __end_of_I2C_Master_Wait:
  7905                           	opt stack 0
  7906                           tblptru	equ	0xFF8
  7907                           tblptrh	equ	0xFF7
  7908                           tblptrl	equ	0xFF6
  7909                           tablat	equ	0xFF5
  7910                           prodh	equ	0xFF4
  7911                           prodl	equ	0xFF3
  7912                           indf0	equ	0xFEF
  7913                           postinc0	equ	0xFEE
  7914                           fsr0h	equ	0xFEA
  7915                           fsr0l	equ	0xFE9
  7916                           wreg	equ	0xFE8
  7917                           indf2	equ	0xFDF
  7918                           postinc2	equ	0xFDE
  7919                           postdec2	equ	0xFDD
  7920                           fsr2h	equ	0xFDA
  7921                           fsr2l	equ	0xFD9
  7922                           status	equ	0xFD8
  7923                           
  7924 ;; *************** function _config *****************
  7925 ;; Defined at:
  7926 ;;		line 7 in file "config.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;		None
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;		None
  7931 ;; Return value:  Size  Location     Type
  7932 ;;                  1    wreg      void 
  7933 ;; Registers used:
  7934 ;;		wreg, status,2
  7935 ;; Tracked objects:
  7936 ;;		On entry : 0/0
  7937 ;;		On exit  : 0/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;Total ram usage:        0 bytes
  7945 ;; Hardware stack levels used:    1
  7946 ;; This function calls:
  7947 ;;		Nothing
  7948 ;; This function is called by:
  7949 ;;		_main
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953                           	psect	text40
  7954  002F86                     __ptext40:
  7955                           	opt stack 0
  7956  002F86                     _config:
  7957                           	opt stack 30
  7958                           
  7959                           ;config.c: 9: TRISA=0Xff;
  7960                           
  7961                           ;incstack = 0
  7962  002F86  6892               	setf	3986,c	;volatile
  7963                           
  7964                           ;config.c: 10: TRISB=0X00;
  7965  002F88  0E00               	movlw	0
  7966  002F8A  6E93               	movwf	3987,c	;volatile
  7967                           
  7968                           ;config.c: 11: TRISC=0X00;
  7969  002F8C  0E00               	movlw	0
  7970  002F8E  6E94               	movwf	3988,c	;volatile
  7971                           
  7972                           ;config.c: 12: TRISD=0X00;
  7973  002F90  0E00               	movlw	0
  7974  002F92  6E95               	movwf	3989,c	;volatile
  7975                           
  7976                           ;config.c: 13: TRISE=0Xff;
  7977  002F94  6896               	setf	3990,c	;volatile
  7978                           
  7979                           ;config.c: 15: PORTA=0X00;
  7980  002F96  0E00               	movlw	0
  7981  002F98  6E80               	movwf	3968,c	;volatile
  7982                           
  7983                           ;config.c: 16: PORTB=0X00;
  7984  002F9A  0E00               	movlw	0
  7985  002F9C  6E81               	movwf	3969,c	;volatile
  7986                           
  7987                           ;config.c: 17: PORTC=0X00;
  7988  002F9E  0E00               	movlw	0
  7989  002FA0  6E82               	movwf	3970,c	;volatile
  7990                           
  7991                           ;config.c: 18: PORTD=0X00;
  7992  002FA2  0E00               	movlw	0
  7993  002FA4  6E83               	movwf	3971,c	;volatile
  7994                           
  7995                           ;config.c: 19: PORTE=0X00;
  7996  002FA6  0E00               	movlw	0
  7997  002FA8  6E84               	movwf	3972,c	;volatile
  7998                           
  7999                           ;config.c: 21: LATA=0X00;
  8000  002FAA  0E00               	movlw	0
  8001  002FAC  6E89               	movwf	3977,c	;volatile
  8002                           
  8003                           ;config.c: 22: LATB=0X00;
  8004  002FAE  0E00               	movlw	0
  8005  002FB0  6E8A               	movwf	3978,c	;volatile
  8006                           
  8007                           ;config.c: 23: LATC=0X00;
  8008  002FB2  0E00               	movlw	0
  8009  002FB4  6E8B               	movwf	3979,c	;volatile
  8010                           
  8011                           ;config.c: 24: LATD=0X00;
  8012  002FB6  0E00               	movlw	0
  8013  002FB8  6E8C               	movwf	3980,c	;volatile
  8014                           
  8015                           ;config.c: 25: LATE=0X00;
  8016  002FBA  0E00               	movlw	0
  8017  002FBC  6E8D               	movwf	3981,c	;volatile
  8018                           
  8019                           ;config.c: 27: ANSELA=0Xff;
  8020  002FBE  010F               	movlb	15	; () banked
  8021  002FC0  6938               	setf	56,b	;volatile
  8022                           
  8023                           ;config.c: 28: ANSELB=0X00;
  8024  002FC2  0E00               	movlw	0
  8025  002FC4  6F39               	movwf	57,b	;volatile
  8026                           
  8027                           ;config.c: 29: ANSELC=0X00;
  8028  002FC6  0E00               	movlw	0
  8029  002FC8  6F3A               	movwf	58,b	;volatile
  8030                           
  8031                           ;config.c: 30: ANSELD=0X00;
  8032  002FCA  0E00               	movlw	0
  8033  002FCC  6F3B               	movwf	59,b	;volatile
  8034                           
  8035                           ;config.c: 31: ANSELE=0X00;
  8036  002FCE  0E00               	movlw	0
  8037  002FD0  6F3C               	movwf	60,b	;volatile
  8038                           
  8039                           ;config.c: 33: OSCCON=0b01110100;
  8040  002FD2  0E74               	movlw	116
  8041  002FD4  6ED3               	movwf	4051,c	;volatile
  8042                           
  8043                           ; BSR set to: 15
  8044                           ;config.c: 34: OSCTUNEbits.PLLEN=1;
  8045  002FD6  8C9B               	bsf	3995,6,c	;volatile
  8046                           
  8047                           ; BSR set to: 15
  8048  002FD8  0012               	return		;funcret
  8049  002FDA                     __end_of_config:
  8050                           	opt stack 0
  8051                           tblptru	equ	0xFF8
  8052                           tblptrh	equ	0xFF7
  8053                           tblptrl	equ	0xFF6
  8054                           tablat	equ	0xFF5
  8055                           prodh	equ	0xFF4
  8056                           prodl	equ	0xFF3
  8057                           indf0	equ	0xFEF
  8058                           postinc0	equ	0xFEE
  8059                           fsr0h	equ	0xFEA
  8060                           fsr0l	equ	0xFE9
  8061                           wreg	equ	0xFE8
  8062                           indf2	equ	0xFDF
  8063                           postinc2	equ	0xFDE
  8064                           postdec2	equ	0xFDD
  8065                           fsr2h	equ	0xFDA
  8066                           fsr2l	equ	0xFD9
  8067                           status	equ	0xFD8
  8068                           
  8069 ;; *************** function _adc_config *****************
  8070 ;; Defined at:
  8071 ;;		line 62 in file "config.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;		None
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;		None
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  1    wreg      void 
  8078 ;; Registers used:
  8079 ;;		wreg, status,2
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8089 ;;Total ram usage:        0 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; This function calls:
  8092 ;;		Nothing
  8093 ;; This function is called by:
  8094 ;;		_main
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text41
  8099  0031EA                     __ptext41:
  8100                           	opt stack 0
  8101  0031EA                     _adc_config:
  8102                           	opt stack 30
  8103                           
  8104                           ; BSR set to: 15
  8105                           ;incstack = 0
  8106  0031EA  8092               	bsf	3986,0,c	;volatile
  8107                           
  8108                           ;config.c: 64: ANSELAbits.ANSA0=1;
  8109  0031EC  010F               	movlb	15	; () banked
  8110  0031EE  8138               	bsf	56,0,b	;volatile
  8111                           
  8112                           ;config.c: 65: TRISAbits.RA1=1;
  8113  0031F0  8292               	bsf	3986,1,c	;volatile
  8114                           
  8115                           ;config.c: 66: ANSELAbits.ANSA1=1;
  8116  0031F2  8338               	bsf	56,1,b	;volatile
  8117                           
  8118                           ; BSR set to: 15
  8119                           ;config.c: 69: ADCON0=0b00000011;
  8120  0031F4  0E03               	movlw	3
  8121  0031F6  6EC2               	movwf	4034,c	;volatile
  8122                           
  8123                           ;config.c: 70: ADCON1=0b10000000;
  8124  0031F8  0E80               	movlw	128
  8125  0031FA  6EC1               	movwf	4033,c	;volatile
  8126                           
  8127                           ;config.c: 71: ADCON2=0b00111110;
  8128  0031FC  0E3E               	movlw	62
  8129  0031FE  6EC0               	movwf	4032,c	;volatile
  8130                           
  8131                           ; BSR set to: 15
  8132                           ;config.c: 72: ADCON2bits.ADFM=0;
  8133  003200  9EC0               	bcf	4032,7,c	;volatile
  8134                           
  8135                           ; BSR set to: 15
  8136  003202  0012               	return		;funcret
  8137  003204                     __end_of_adc_config:
  8138                           	opt stack 0
  8139                           tblptru	equ	0xFF8
  8140                           tblptrh	equ	0xFF7
  8141                           tblptrl	equ	0xFF6
  8142                           tablat	equ	0xFF5
  8143                           prodh	equ	0xFF4
  8144                           prodl	equ	0xFF3
  8145                           indf0	equ	0xFEF
  8146                           postinc0	equ	0xFEE
  8147                           fsr0h	equ	0xFEA
  8148                           fsr0l	equ	0xFE9
  8149                           wreg	equ	0xFE8
  8150                           indf2	equ	0xFDF
  8151                           postinc2	equ	0xFDE
  8152                           postdec2	equ	0xFDD
  8153                           fsr2h	equ	0xFDA
  8154                           fsr2l	equ	0xFD9
  8155                           status	equ	0xFD8
  8156                           tblptru	equ	0xFF8
  8157                           tblptrh	equ	0xFF7
  8158                           tblptrl	equ	0xFF6
  8159                           tablat	equ	0xFF5
  8160                           prodh	equ	0xFF4
  8161                           prodl	equ	0xFF3
  8162                           indf0	equ	0xFEF
  8163                           postinc0	equ	0xFEE
  8164                           fsr0h	equ	0xFEA
  8165                           fsr0l	equ	0xFE9
  8166                           wreg	equ	0xFE8
  8167                           indf2	equ	0xFDF
  8168                           postinc2	equ	0xFDE
  8169                           postdec2	equ	0xFDD
  8170                           fsr2h	equ	0xFDA
  8171                           fsr2l	equ	0xFD9
  8172                           status	equ	0xFD8
  8173                           
  8174                           	psect	rparam
  8175  0000                     tblptru	equ	0xFF8
  8176                           tblptrh	equ	0xFF7
  8177                           tblptrl	equ	0xFF6
  8178                           tablat	equ	0xFF5
  8179                           prodh	equ	0xFF4
  8180                           prodl	equ	0xFF3
  8181                           indf0	equ	0xFEF
  8182                           postinc0	equ	0xFEE
  8183                           fsr0h	equ	0xFEA
  8184                           fsr0l	equ	0xFE9
  8185                           wreg	equ	0xFE8
  8186                           indf2	equ	0xFDF
  8187                           postinc2	equ	0xFDE
  8188                           postdec2	equ	0xFDD
  8189                           fsr2h	equ	0xFDA
  8190                           fsr2l	equ	0xFD9
  8191                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    118
    Data        2
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      94
    BANK0           160     70     136
    BANK1           256      0      64
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_7(CODE[5]), STR_4(CODE[5]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> main@str_A(BANK0[8]), main@str_V(BANK0[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 8
		 -> STR_9(CODE[5]), STR_8(CODE[3]), STR_6(CODE[4]), STR_5(CODE[3]), 
		 -> main@str_A(BANK0[8]), STR_3(CODE[3]), main@str_V(BANK0[8]), STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->_fround
    _read_Uout->___fttol
    _read_Uin->___fttol
    ___ftdiv->___awtoft
    _read_Iout->___fttol
    ___fttol->_scale
    ___ftmul->___wmul
    ___awtoft->___ftpack
    _init_io_display->_I2C_Master_Init
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _Cursor_Off->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _Lcd_Port->_I2C_Write_Display
    _I2C_Write_Display->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                84    84      0  113415
                                             76 COMRAM     2     2      0
                                             23 BANK0     47    47      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                         _adc_config
                             _config
                    _init_io_display
                         _pwm_config
                          _read_Iout
                           _read_Uin
                          _read_Uout
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   53729
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12971
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   12773
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _read_Uout                                            2     2      0   13960
                                             57 COMRAM     2     2      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _read_Uin                                             2     2      0   13960
                                             57 COMRAM     2     2      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3367
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_Iout                                            2     2      0   10593
                                             57 COMRAM     2     2      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1012
                                             42 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6301
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3280
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _pwm_config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_io_display                                      2     2      0    4305
                                             21 COMRAM     2     2      0
                         _Cursor_Off
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2    1171
                                              7 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     397
                                              4 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1    1157
                                             10 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     551
                                             10 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     355
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     716
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _Cursor_Off                                           0     0      0     355
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              6     6      0     355
                                              4 COMRAM     6     6      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     196
                                              3 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                  _I2C_Write_Display
 ---------------------------------------------------------------------------------
 (5) _I2C_Write_Display                                    2     0      2     174
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftge
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _adc_config
   _config
   _init_io_display
     _Cursor_Off
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _I2C_Master_Init
       ___lldiv
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
   _pwm_config
   _read_Iout
     ___awtoft
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _read_Uin
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _read_Uout
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      40       7       25.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     46      88       5       85.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4E      5E       1       98.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     126      12        0.0%
DATA                 0      0     126       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Mar 12 13:01:28 2019

                         _b 00D2                           _c 0057                           _d 00D0  
                        l67 1BDE                ___awdiv@sign 000C                          _nt 00D4  
       ___wmul@multiplicand 0011                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                ___ftadd@exp1 0039  
              ___ftadd@exp2 0038                ___ftadd@sign 0037                         l300 2D00  
                       l301 2CCA          I2C_Write_Display@d 0002                         l401 2108  
                       l411 1B7E                         l404 19A2                         l405 18CE  
                       l430 11B8                         l422 113E                         l415 109E  
                       l408 197E                         l440 1386                         l432 124A  
                       l416 10B4                         l409 1ACE                         l433 12B0  
                       l425 113A                         l417 112C                         l426 1162  
                       l418 1116                         l451 1534                         l435 12D6  
                       l419 10DE                         l428 16FC                         l460 16D0  
                       l452 14A0                         l436 1316                         l461 15EE  
                       l437 13DE                         l429 1176                         l710 2A08  
                       l470 1774                         l454 1554                         l446 1444  
                       l711 29FE                         l463 16F2                         l455 153E  
                       l288 3002                         l704 29AC                         l800 266A  
                       l640 2AD6                         l464 16DC                         l705 29A2  
                       l641 2AE6                         l457 1578                         l802 2692  
                       l466 1714                         l458 157C                         l707 29E0  
                       l803 26C4                         l811 319C                         l643 2B04  
                       l467 1730                         l459 159E                         l708 29CA  
                       l804 26D4                         l644 2AFC                         l660 2D84  
                       l821 257A                         l661 2D8E                         l653 2D4A  
                       l469 1750                         l806 26EC                         l830 2608  
                       l750 2216                         l662 2D9C                         l654 2D56  
                       l398 203C                         l807 26FC                         l823 25F0  
                       l735 219A                         l647 2B24                         l832 2630  
                       l824 25E0                         l744 222A                         l672 2444  
                       l648 2B2E                         l656 2D6C                         l761 2282  
                       l817 30D6                         l649 2B3C                         l657 2D64  
                       l770 2786                         l762 229E                         l674 2462  
                       l771 27C4                         l763 22CE                         l739 21C4  
                       l675 24A4                         l668 3114                         l772 27EA  
                       l684 2536                         l676 24D4                         l780 23AE  
                       l836 31E2                         l829 2614                         l749 2220  
                       l685 252A                         l862 2B74                         l758 225E  
                       l678 2512                         l782 23EA                         l863 2B68  
                       l759 2254                         l679 2502                         l783 23DA  
                       l768 275E                         l872 2E30                         l776 2320  
                       l793 2A62                         l873 2E24                         l866 2BA8  
                       l794 2A92                         l778 234C                         l867 2BB6  
                       l883 2E8A                         l779 2386                         l876 2E58  
                       l884 2E7E                         l788 240E                         l877 2E66  
                       l789 2402                __CFG_CPB$OFF 000000                         _PR2 000FBB  
              __CFG_CPD$OFF 000000                         _Uin 00BA                         _dir 00E2  
                       _cnt 005D                         _dty 00C8                         _str 00A6  
              ___awmod@sign 0006                         wreg 000FE8                __CFG_LVP$OFF 000000  
              ___ftdiv@cntr 0016                ___ftdiv@sign 001B                        l2405 2ABE  
                      l3309 153E                        l3261 1360                        l3253 1316  
                      l3281 1448                        l3371 1770                        STR_1 1088  
                      STR_2 107C                        STR_3 1085                        STR_4 107C  
                      STR_5 108B                        STR_6 1081                        STR_7 107C  
                      STR_8 108E                        STR_9 1077                        u2000 2B78  
                      u2040 2CF8                        u2050 2D2E                        _LATA 000F89  
                      _LATB 000F8A                        u2047 2CEE                        u3007 1D76  
                      _LATC 000F8B                        u2320 253C                        _LATD 000F8C  
                      u2057 2D24                        u1601 2158                        u3017 1D92  
                      _LATE 000F8D                        u1530 2994                        u2250 2414  
                      u2075 2EFE                        u3107 2BD2                        u2331 2746  
                      u1611 216C                        u2171 2304                        u3027 1DFA  
                      u2500 261A                        u1700 21F4                        u3117 2BE6  
                      u3037 1E0E                        u3127 2DC8                        u2351 276E  
                      u2191 2330                        u3047 1E6E                        u1640 218C  
                      u3137 2E02                        u2441 255E                        u3057 1E82  
                      u1570 2A12                        u2530 2E34                        u3147 2F58  
                      u1811 2652                        u3067 2826                        u2460 2598  
                      u1740 2232                        u1900 2B08                        u3157 2F76  
                      u3077 283A                        u1670 21B6                        u2710 1360  
                      u2630 11F0                        u3167 2C54                        u1831 267A  
                      u3087 28DA                        u3177 2C6E                        u2465 2590  
                      u3097 28EE                        u1770 2266                        u3187 2C84  
                      u2635 11E6                        u3197 3062                        u2750 1480  
                      u2670 12E8                        u1960 2D70                        u2680 1328  
                      u2780 1562                        u2790 1572                        u2880 178C  
                      u2967 1C42                        u2977 1C5E                        u2987 1CDC  
                      u2997 1CF8                        _Iout 00BE                        _Uout 00BC  
                      _adcn 00CC                        _adcp 00CE                        _data 00C0  
         ?_Lcd_Write_String 0008                        _buck 00C6                        _main 1BA2  
              ___ftpack@arg 0001                        _pasi 00E4                ___ftpack@exp 0004  
                      _tens 004F                        fsr0h 000FEA                        indf0 000FEF  
                      fsr2h 000FDA                        fsr0l 000FE9                        indf2 000FDF  
                      fsr2l 000FD9               __CFG_BORV$190 000000                        _type 00CA  
                      prodh 000FF4                        prodl 000FF3                        start 0000  
        ??_Lcd_Write_String 000A               __CFG_IESO$OFF 000000                _sprintf$1570 0060  
           __end_of_Lcd_Cmd 307A                ___ftmul@cntr 0022                ___param_bank 000000  
              ___ftmul@sign 0023                ___fttol@exp1 0039                ___fttol@lval 0035  
          ?_I2C_Master_Init 000E            ?_I2C_Master_Wait 0001            ?_I2C_Master_Stop 0001  
                     ?_main 0001             __end_of___awdiv 2B46             __end_of___ftadd 22F4  
           __end_of___awmod 2DA6             __end_of___ftdiv 281C             __end_of___ftneg 31AA  
           __end_of___lldiv 2BC8             __end_of___ftmul 2736             ___awdiv@divisor 0009  
           __end_of___llmod 2E78             __end_of___ftsub 3100             __end_of___fttol 2642  
                     _T2CON 000FBA             ___awdiv@counter 000B                       _PORTA 000F80  
                     _PORTB 000F81                       _PORTC 000F82                       _PORTD 000F83  
                     _PORTE 000F84     __size_of_Lcd_Set_Cursor 0050                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96                       _UQEnd 005B               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
              ___lltoft@exp 0011              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
            __CFG_EBTRB$OFF 000000               ___awtoft@sign 000C             __end_of_dpowers 1029  
                     _boost 00C4                       _scale 179A             __end_of_isdigit 31EA  
        __CFG_MCLRE$EXTMCLR 000000               ___ftpack@sign 0005                       _start 00DA  
                     main@c 009F              __CFG_BOREN$OFF 000000                       tablat 000FF5  
                     status 000FD8             __end_of_sprintf 179A              __CFG_HFOFST$ON 000000  
            __CFG_PBADEN$ON 000000            __end_of_Lcd_Init 2CC0            __end_of_Lcd_Port 31CC  
               _Lcd_Cmd$813 0007             __initialization 307A                __end_of_main 1EF6  
                _Cursor_Off 3224                      ??_main 004D               ___fttol@sign1 0034  
        __size_of_Lcd_Clear 000E               __activetblptr 000002              __CFG_PLLCFG$ON 000000  
      __size_of__tdiv_to_l_ 0132           ?_I2C_Master_Start 0001          ??_I2C_Master_Start 0002  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADCON2 000FC0  
          ___llmod@dividend 0001                      ?_scale 0024                      _ADRESH 000FC4  
                    _CCPR1L 000FBE                      _CCPR2L 000F67                      _CCPR3L 000F5E  
          ___awdiv@dividend 0007            __end_of___awtoft 3138                      _ANSELA 000F38  
                    _ANSELB 000F39                      _ANSELC 000F3A                      _ANSELD 000F3B  
                    _ANSELE 000F3C            __end_of___ftpack 2A32            __end_of___lltoft 2ED4  
            __CFG_WDTEN$OFF 000000                      _OSCCON 000FD3                   ??_Lcd_Cmd 0005  
   __size_of_Lcd_Write_Char 0058                      _SSPBUF 000FC9                      _URBuff 0100  
            __CFG_XINST$OFF 000000            __end_of__powers_ 1050                      ___ftge 2A32  
                    ___wmul 3160                   ??___awdiv 000B                   ??___ftadd 0034  
                 ??___awmod 0005                   ??___ftdiv 0013                   ??___ftneg 0004  
                 ??___lldiv 0009                   ??___ftmul 001B                   ??___llmod 0009  
                 ??___ftsub 0040                   ??___fttol 002F                      _config 2F86  
          __end_of_read_Uin 2984                      _fround 1EF6               main@rez_adc_A 009B  
             main@rez_adc_U 009D                      clear_0 3098                      clear_1 30A4  
                    clear_2 30B0            ___awdiv@quotient 000D             ___awmod@divisor 0003  
                    _tens_A 0053             ___awmod@counter 0005             _init_io_display 2DA6  
     ___ftmul@f3_as_product 001F                __pdataCOMRAM 005D                   ??_isdigit 0001  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_sprintf 0047             Lcd_Set_Cursor@a 000C  
           Lcd_Set_Cursor@b 000B             Lcd_Set_Cursor@y 000E             Lcd_Set_Cursor@z 000D  
                __accesstop 0060     __end_of__initialization 30B6                  ___ftadd@f1 002E  
                ___ftadd@f2 0031                  ___ftge@ff1 0001                  ___ftge@ff2 0004  
         __end_of_Lcd_Clear 3224               ___rparam_used 000001                  ___ftdiv@f1 000D  
                ___ftdiv@f2 0010                  ___ftdiv@f3 0017                  ___ftneg@f1 0001  
                ___awtoft@c 0009                  ___ftmul@f1 0015                  ___ftmul@f2 0018  
                ___ftsub@f1 003A                  ___ftsub@f2 003D                  ___fttol@f1 002B  
            __pcstackCOMRAM 0001                  _adc_config 31EA                  ___lltoft@c 0009  
             __end_of_scale 1BA2                 ?_Cursor_Off 0001              _Lcd_Set_Cursor 2FDA  
                __div_to_l_ 2426                   ?_Lcd_Init 0001                   ?_Lcd_Port 0001  
           __div_to_l_@exp1 000C             __div_to_l_@cntr 000B                     ??_scale 0027  
           __div_to_l_@quot 0007                  __pbssBANK0 00A6                  __pbssBANK1 0100  
        __size_of_read_Iout 007C               __div_to_l_@f1 0001               __div_to_l_@f2 0004  
        __size_of_read_Uout 00B4          __CFG_CCP2MX$PORTC1 000000     __end_of_init_io_display 2E12  
                   ?___ftge 0001                     ?___wmul 000F          __CFG_CCP3MX$PORTB5 000000  
                   ?_config 0001                     _CCP1CON 000FBD           _I2C_Write_Display 3232  
                   _CCP2CON 000F66                     _CCP3CON 000F5D                     ?_fround 0024  
 __size_of_Lcd_Write_String 0076                   ?___awtoft 0009                   ?___ftpack 0001  
    __end_of_Lcd_Set_Cursor 302A                   ?___lltoft 0009          ?_I2C_Write_Display 0002  
                _directie_2 00DE           __CFG_PRICLKEN$OFF 000000         ??_I2C_Write_Display 0004  
                ??_Lcd_Init 000B                     _SSP1ADD 000FC8                     _SSP1BUF 000FC9  
                ??_Lcd_Port 0004                     _UQFront 005C              _Lcd_Write_Char 2F2E  
                   _Lcd_Cmd 302A         __size_of_Cursor_Off 000E                   ?_read_Uin 0001  
                _go_stepper 00DC             __CFG_PWRTEN$OFF 000000           __end_of__npowers_ 1077  
                   __Hparam 0000                  _scale$1569 0027                     __Lparam 0000  
 __end_of_I2C_Write_Display 323C                 ?_adc_config 0001             __size_of___ftge 0090  
                   ___awdiv 2AC2                     ___ftadd 2148                     ___awmod 2D36  
                   ___ftdiv 2736                     ___ftneg 3186                     ___lldiv 2B46  
           __size_of___wmul 0026                     ___ftmul 2642                     ___llmod 2E12  
                   ___ftsub 30C0                     ___fttol 254E                __psmallconst 1000  
           __size_of_config 0054             __CFG_STVREN$OFF 000000                     __pcinit 307A  
                ??___awtoft 000C                  ??___ftpack 0006             __size_of_fround 0252  
                   __ramtop 1000             ?_Lcd_Set_Cursor 000B                  ??___lltoft 000D  
                   __ptext0 1BA2                     __ptext1 1092                     __ptext2 179A  
                   __ptext3 31CC                     __ptext4 1EF6                     __ptext5 3160  
                   __ptext6 2D36                     __ptext7 2AC2                     __ptext8 22F4  
                   __ptext9 2426                 ?__div_to_l_ 0001                     _dpowers 1001  
         __end_of_read_Iout 2C44                     _dty_car 00C2                     _isdigit 31CC  
         __end_of_read_Uout 28D0                  _duty_boost 0059            ___awmod@dividend 0001  
                   _nr_pasi 00E0    __size_of_I2C_Master_Init 005A    __size_of_I2C_Master_Wait 0012  
  __size_of_I2C_Master_Stop 0008                     main@Uin 008F                     _sprintf 1092  
                   main@dty 007A      __end_of_Lcd_Write_Char 2F86        end_of_initialization 30B6  
                ??_read_Uin 003A               __Lmediumconst 0000   __size_of_I2C_Master_Start 0008  
           ___lldiv@divisor 0005             ___lldiv@counter 000D            I2C_Master_Init@c 000E  
          ?_init_io_display 0001                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE              __tdiv_to_l_@f1 0001              __tdiv_to_l_@f2 0004  
             ??__tdiv_to_l_ 0007                   _TRISAbits 000F92                   _TRISCbits 000F94  
                 _TRISDbits 000F95                  _pwm_config 3138             ?_Lcd_Write_Char 0001  
       __size_of_adc_config 001A           Lcd_Write_String@a 0008           Lcd_Write_String@i 000C  
               ___ftdiv@exp 001A                  main@curent 008C                  main@tens_A 0092  
       __size_of__div_to_l_ 0128                 ___ftmul@exp 001E                   _Lcd_Clear 3216  
__size_of_I2C_Write_Display 000A              __end_of___ftge 2AC2                ??_Cursor_Off 000B  
            __end_of___wmul 3186            _Lcd_Write_String 2CC0               __pidataCOMRAM 324C  
            __end_of_config 2FDA              __end_of_fround 2148         start_initialization 307A  
       __end_of__tdiv_to_l_ 2426           __size_of_Lcd_Init 007C           __size_of_Lcd_Port 0022  
         ??_I2C_Master_Init 0012           ??_I2C_Master_Wait 0001           ??_I2C_Master_Stop 0002  
        __end_of_Cursor_Off 3232             ___llmod@divisor 0005             ___llmod@counter 0009  
                ?_Lcd_Clear 0001                    ??___ftge 0007                    ??___wmul 0013  
                  ??_config 0001             Lcd_Write_Char@a 0005             Lcd_Write_Char@y 0006  
                  ??_fround 0027               sprintf@tmpval 006D                  fround@prec 002D  
         __size_of___awtoft 0038           __size_of___ftpack 00AE           __size_of___lltoft 005C  
               __pbssCOMRAM 004F               __pcstackBANK0 0060                 ?_pwm_config 0001  
              _isdigit$1193 0002                    ?_Lcd_Cmd 0001                 sprintf@flag 0065  
               sprintf@fval 0073                 sprintf@prec 0071            _I2C_Master_Start 3244  
         __size_of_read_Uin 00B4            ??_Lcd_Set_Cursor 000C                ??_adc_config 0001  
                  ?___awdiv 0007                    ?___ftadd 002E                    ?___awmod 0001  
                  ?___ftdiv 000D                    ?___ftneg 0001                    ?___lldiv 0001  
                  ?___ftmul 0015                    ?___llmod 0001                    ?___ftsub 003A  
                 __npowers_ 1050                    ?___fttol 002B                 __tdiv_to_l_ 22F4  
              ??__div_to_l_ 0007                 __smallconst 1000                    ?_isdigit 0001  
                  _CCPTMRS0 000F49                   _read_Iout 2BC8                   _read_Uout 281C  
                  ?_sprintf 0040              __size_of_scale 0408          __end_of_adc_config 3204  
                 _duty_buck 00E6              ___wmul@product 0013                    _LATDbits 000F8C  
                  _PIE1bits 000F9D                   _rez_adc_A 0055                   _rez_adc_U 0051  
                  Lcd_Cmd@a 000A          __end_of__div_to_l_ 254E                 ??_Lcd_Clear 000B  
          __CFG_WDTPS$32768 000000         __size_of_pwm_config 0028                    _SSP1CON1 000FC6  
                  _SSP1CON2 000FC5                    _SSP1STAT 000FC7                  _ADCON0bits 000FC2  
                _ADCON2bits 000FC0           ___wmul@multiplier 000F                   main@Power 0077  
          ??_Lcd_Write_Char 0005                   main@str_A 007C                   main@str_V 0084  
                  _Lcd_Init 2C44                    _Lcd_Port 31AA                  ?_read_Iout 0001  
                ?_read_Uout 0001    __end_of_Lcd_Write_String 2D36            __size_of_Lcd_Cmd 0050  
              Lcd_Port@data 0004                    __Hrparam 0000                    __Lrparam 0000  
         __CFG_P2BMX$PORTD2 000000            __size_of___awdiv 0084            __size_of___ftadd 01AC  
          __size_of___awmod 0070            __size_of___ftdiv 00E6            __size_of___ftneg 0024  
          __size_of___lldiv 0082            __size_of___ftmul 00F4            __size_of___llmod 0066  
          __size_of___ftsub 0040            __size_of___fttol 00F4                    ___awtoft 3100  
                  ___ftpack 2984                 _fround$1567 002A                 _fround$1568 0027  
                  ___lltoft 2E78                  _ANSELAbits 000F38    __size_of_init_io_display 006C  
                sprintf@exp 006B                  sprintf@val 0067             _I2C_Master_Init 2ED4  
           _I2C_Master_Wait 3204             _I2C_Master_Stop 323C            __size_of_isdigit 001E  
                  __ptext10 2E78                    __ptext11 2E12                    __ptext20 254E  
                  __ptext12 30C0                    __ptext21 2642                    __ptext13 2148  
                  __ptext30 3216                    __ptext22 3100                    __ptext14 3186  
                  __ptext31 2ED4                    __ptext23 2984                    __ptext15 2A32  
                  __ptext40 2F86                    __ptext32 2B46                    __ptext24 3138  
                  __ptext16 281C                    __ptext41 31EA                    __ptext33 3224  
                  __ptext25 2DA6                    __ptext17 28D0                    __ptext34 302A  
                  __ptext26 2CC0                    __ptext18 2736                    __ptext35 31AA  
                  __ptext27 2F2E                    __ptext19 2BC8                    __ptext36 3232  
                  __ptext28 2FDA                    __ptext37 323C                    __ptext29 2C44  
                  __ptext38 3244                    __ptext39 3204                _SSP1CON2bits 000FC5  
                  __powers_ 1029            __size_of_sprintf 0708                 Lcd_Cmd@buff 0008  
                  _read_Uin 28D0               __size_of_main 0354                    _pasi_int 00D8  
                  _sel_pasi 00D6                    main@Iout 0095                    main@Uout 0098  
                  main@tens 00A1                    main@port 00A4    __end_of_I2C_Master_Start 324C  
               _OSCTUNEbits 000F9B                  _INTCONbits 000FF2                ??_pwm_config 0001  
                  isdigit@c 0003                 ??_read_Iout 003A                    scale@scl 002A  
               ??_read_Uout 003A          Lcd_Write_Char@temp 0007                   sprintf@ap 0063  
          __tdiv_to_l_@exp1 000F                   sprintf@sp 0040            __tdiv_to_l_@cntr 000E  
          __tdiv_to_l_@quot 000A            ___lldiv@dividend 0001          __end_of_pwm_config 3160  
   __end_of_I2C_Master_Init 2F2E     __end_of_I2C_Master_Wait 3216     __end_of_I2C_Master_Stop 3244  
        Lcd_Set_Cursor@temp 000F                ?__tdiv_to_l_ 0001                    sprintf@c 0076  
                  sprintf@f 0042            ___lldiv@quotient 0009           __CFG_T3CMX$PORTC0 000000  
         ??_init_io_display 0016           __CFG_FOSC$INTIO67 000000  
