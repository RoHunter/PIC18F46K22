

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Mar 12 12:32:07 2019

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56  0000                     
    57                           ; Version 1.44
    58                           ; Generated 14/09/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F46K22 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  0031D6                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _cnt
    97  0031D6  0001               	dw	1
    98                           
    99                           	psect	smallconst
   100  001000                     __psmallconst:
   101                           	opt stack 0
   102  001000  00                 	db	0
   103  001001                     _dpowers:
   104                           	opt stack 0
   105  001001  0001               	dw	1
   106  001003  0000               	dw	0
   107  001005  000A               	dw	10
   108  001007  0000               	dw	0
   109  001009  0064               	dw	100
   110  00100B  0000               	dw	0
   111  00100D  03E8               	dw	1000
   112  00100F  0000               	dw	0
   113  001011  2710               	dw	10000
   114  001013  0000               	dw	0
   115  001015  86A0               	dw	34464
   116  001017  0001               	dw	1
   117  001019  4240               	dw	16960
   118  00101B  000F               	dw	15
   119  00101D  9680               	dw	38528
   120  00101F  0098               	dw	152
   121  001021  E100               	dw	57600
   122  001023  05F5               	dw	1525
   123  001025  CA00               	dw	51712
   124  001027  3B9A               	dw	15258
   125  001029                     __end_of_dpowers:
   126                           	opt stack 0
   127  001029                     __powers_:
   128                           	opt stack 0
   129  001029  00                 	db	0
   130  00102A  80                 	db	128
   131  00102B  3F                 	db	63
   132  00102C  00                 	db	0
   133  00102D  20                 	db	32
   134  00102E  41                 	db	65
   135  00102F  00                 	db	0
   136  001030  C8                 	db	200
   137  001031  42                 	db	66
   138  001032  00                 	db	0
   139  001033  7A                 	db	122
   140  001034  44                 	db	68
   141  001035  40                 	db	64
   142  001036  1C                 	db	28
   143  001037  46                 	db	70
   144  001038  50                 	db	80
   145  001039  C3                 	db	195
   146  00103A  47                 	db	71
   147  00103B  24                 	db	36
   148  00103C  74                 	db	116
   149  00103D  49                 	db	73
   150  00103E  97                 	db	151
   151  00103F  18                 	db	24
   152  001040  4B                 	db	75
   153  001041  BC                 	db	188
   154  001042  BE                 	db	190
   155  001043  4C                 	db	76
   156  001044  6B                 	db	107
   157  001045  6E                 	db	110
   158  001046  4E                 	db	78
   159  001047  03                 	db	3
   160  001048  15                 	db	21
   161  001049  50                 	db	80
   162  00104A  79                 	db	121
   163  00104B  AD                 	db	173
   164  00104C  60                 	db	96
   165  00104D  F3                 	db	243
   166  00104E  49                 	db	73
   167  00104F  71                 	db	113
   168  001050                     __end_of__powers_:
   169                           	opt stack 0
   170  001050                     __npowers_:
   171                           	opt stack 0
   172  001050  00                 	db	0
   173  001051  80                 	db	128
   174  001052  3F                 	db	63
   175  001053  CD                 	db	205
   176  001054  CC                 	db	204
   177  001055  3D                 	db	61
   178  001056  D7                 	db	215
   179  001057  23                 	db	35
   180  001058  3C                 	db	60
   181  001059  12                 	db	18
   182  00105A  83                 	db	131
   183  00105B  3A                 	db	58
   184  00105C  B7                 	db	183
   185  00105D  D1                 	db	209
   186  00105E  38                 	db	56
   187  00105F  C6                 	db	198
   188  001060  27                 	db	39
   189  001061  37                 	db	55
   190  001062  38                 	db	56
   191  001063  86                 	db	134
   192  001064  35                 	db	53
   193  001065  C0                 	db	192
   194  001066  D6                 	db	214
   195  001067  33                 	db	51
   196  001068  CC                 	db	204
   197  001069  2B                 	db	43
   198  00106A  32                 	db	50
   199  00106B  70                 	db	112
   200  00106C  89                 	db	137
   201  00106D  30                 	db	48
   202  00106E  E7                 	db	231
   203  00106F  DB                 	db	219
   204  001070  2E                 	db	46
   205  001071  E5                 	db	229
   206  001072  3C                 	db	60
   207  001073  1E                 	db	30
   208  001074  42                 	db	66
   209  001075  A2                 	db	162
   210  001076  0D                 	db	13
   211  001077                     __end_of__npowers_:
   212                           	opt stack 0
   213  0000                     _ANSELAbits	set	3896
   214  0000                     _CCPR3L	set	3934
   215  0000                     _CCP3CON	set	3933
   216  0000                     _CCPTMRS0	set	3913
   217  0000                     _ANSELE	set	3900
   218  0000                     _ANSELD	set	3899
   219  0000                     _ANSELC	set	3898
   220  0000                     _ANSELB	set	3897
   221  0000                     _ANSELA	set	3896
   222  0000                     _SSPBUF	set	4041
   223  0000                     _SSP1BUF	set	4041
   224  0000                     _SSP1CON2bits	set	4037
   225  0000                     _SSP1STAT	set	4039
   226  0000                     _SSP1ADD	set	4040
   227  0000                     _SSP1CON2	set	4037
   228  0000                     _SSP1CON1	set	4038
   229  0000                     _PIE1bits	set	3997
   230  0000                     _INTCONbits	set	4082
   231  0000                     _TRISCbits	set	3988
   232  0000                     _ADCON2bits	set	4032
   233  0000                     _ADCON2	set	4032
   234  0000                     _ADCON1	set	4033
   235  0000                     _TRISAbits	set	3986
   236  0000                     _CCPR1L	set	4030
   237  0000                     _CCPR2L	set	3943
   238  0000                     _PR2	set	4027
   239  0000                     _T2CON	set	4026
   240  0000                     _CCP1CON	set	4029
   241  0000                     _CCP2CON	set	3942
   242  0000                     _OSCTUNEbits	set	3995
   243  0000                     _OSCCON	set	4051
   244  0000                     _LATE	set	3981
   245  0000                     _LATD	set	3980
   246  0000                     _LATC	set	3979
   247  0000                     _LATB	set	3978
   248  0000                     _LATA	set	3977
   249  0000                     _PORTE	set	3972
   250  0000                     _PORTD	set	3971
   251  0000                     _PORTC	set	3970
   252  0000                     _PORTB	set	3969
   253  0000                     _PORTA	set	3968
   254  0000                     _TRISE	set	3990
   255  0000                     _TRISD	set	3989
   256  0000                     _TRISC	set	3988
   257  0000                     _TRISB	set	3987
   258  0000                     _TRISA	set	3986
   259  0000                     _ADRESH	set	4036
   260  0000                     _ADCON0bits	set	4034
   261  0000                     _ADCON0	set	4034
   262  0000                     _LATDbits	set	3980
   263  0000                     _TRISDbits	set	3989
   264  001077                     STR_9:
   265  001077  54                 	db	84	;'T'
   266  001078  65                 	db	101	;'e'
   267  001079  73                 	db	115	;'s'
   268  00107A  74                 	db	116	;'t'
   269  00107B  00                 	db	0
   270  00107C                     STR_2:
   271  00107C  25                 	db	37
   272  00107D  2E                 	db	46
   273  00107E  32                 	db	50	;'2'
   274  00107F  66                 	db	102	;'f'
   275  001080  00                 	db	0
   276  001081                     STR_6:
   277  001081  55                 	db	85	;'U'
   278  001082  69                 	db	105	;'i'
   279  001083  3D                 	db	61	;'='
   280  001084  00                 	db	0
   281  001085                     STR_3:
   282  001085  49                 	db	73	;'I'
   283  001086  3D                 	db	61	;'='
   284  001087  00                 	db	0
   285  001088                     STR_1:
   286  001088  55                 	db	85	;'U'
   287  001089  3D                 	db	61	;'='
   288  00108A  00                 	db	0
   289  00108B                     STR_5:
   290  00108B  20                 	db	32
   291  00108C  41                 	db	65	;'A'
   292  00108D  00                 	db	0
   293  00108E                     STR_8:
   294  00108E  20                 	db	32
   295  00108F  56                 	db	86	;'V'
   296  001090  00                 	db	0
   297  0000                     
   298                           ; #config settings
   299  001091  00                 	db	0	; dummy byte at the end
   300  0000                     
   301                           	psect	cinit
   302  003004                     __pcinit:
   303                           	opt stack 0
   304  003004                     start_initialization:
   305                           	opt stack 0
   306  003004                     __initialization:
   307                           	opt stack 0
   308                           
   309                           ; Initialize objects allocated to COMRAM (2 bytes)
   310                           ; load TBLPTR registers with __pidataCOMRAM
   311  003004  0ED6               	movlw	low __pidataCOMRAM
   312  003006  6EF6               	movwf	tblptrl,c
   313  003008  0E31               	movlw	high __pidataCOMRAM
   314  00300A  6EF7               	movwf	tblptrh,c
   315  00300C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   316  00300E  6EF8               	movwf	tblptru,c
   317  003010  0009               	tblrd		*+	;fetch initializer
   318  003012  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   319  003016  0009               	tblrd		*+	;fetch initializer
   320  003018  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
   321                           
   322                           ; Clear objects allocated to BANK1 (64 bytes)
   323  00301C  EE01  F000         	lfsr	0,__pbssBANK1
   324  003020  0E40               	movlw	64
   325  003022                     clear_0:
   326  003022  6AEE               	clrf	postinc0,c
   327  003024  06E8               	decf	wreg,f,c
   328  003026  E1FD               	bnz	clear_0
   329                           
   330                           ; Clear objects allocated to BANK0 (54 bytes)
   331  003028  EE00  F0A1         	lfsr	0,__pbssBANK0
   332  00302C  0E36               	movlw	54
   333  00302E                     clear_1:
   334  00302E  6AEE               	clrf	postinc0,c
   335  003030  06E8               	decf	wreg,f,c
   336  003032  E1FD               	bnz	clear_1
   337                           
   338                           ; Clear objects allocated to COMRAM (14 bytes)
   339  003034  EE00  F04F         	lfsr	0,__pbssCOMRAM
   340  003038  0E0E               	movlw	14
   341  00303A                     clear_2:
   342  00303A  6AEE               	clrf	postinc0,c
   343  00303C  06E8               	decf	wreg,f,c
   344  00303E  E1FD               	bnz	clear_2
   345  003040                     end_of_initialization:
   346                           	opt stack 0
   347  003040                     __end_of__initialization:
   348                           	opt stack 0
   349  003040  0E00               	movlw	low (__Lmediumconst shr (0+16))
   350  003042  6EF8               	movwf	tblptru,c
   351  003044  0100               	movlb	0
   352  003046  EFD1  F00D         	goto	_main	;jump to C main() function
   353                           tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           
   360                           	psect	bssCOMRAM
   361  00004F                     __pbssCOMRAM:
   362                           	opt stack 0
   363  00004F                     _c:
   364                           	opt stack 0
   365  00004F                     	ds	2
   366  000051                     _directie_2:
   367                           	opt stack 0
   368  000051                     	ds	2
   369  000053                     _pasi:
   370                           	opt stack 0
   371  000053                     	ds	2
   372  000055                     _duty_buck:
   373                           	opt stack 0
   374  000055                     	ds	2
   375  000057                     _duty_boost:
   376                           	opt stack 0
   377  000057                     	ds	2
   378  000059                     _fac:
   379                           	opt stack 0
   380  000059                     	ds	2
   381  00005B                     _UQEnd:
   382                           	opt stack 0
   383  00005B                     	ds	1
   384  00005C                     _UQFront:
   385                           	opt stack 0
   386  00005C                     	ds	1
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           
   394                           	psect	dataCOMRAM
   395  00005D                     __pdataCOMRAM:
   396                           	opt stack 0
   397  00005D                     _cnt:
   398                           	opt stack 0
   399  00005D                     	ds	2
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           
   407                           	psect	bssBANK0
   408  0000A1                     __pbssBANK0:
   409                           	opt stack 0
   410  0000A1                     _str:
   411                           	opt stack 0
   412  0000A1                     	ds	20
   413  0000B5                     _data:
   414                           	opt stack 0
   415  0000B5                     	ds	2
   416  0000B7                     _dty_car:
   417                           	opt stack 0
   418  0000B7                     	ds	2
   419  0000B9                     _boost:
   420                           	opt stack 0
   421  0000B9                     	ds	2
   422  0000BB                     _buck:
   423                           	opt stack 0
   424  0000BB                     	ds	2
   425  0000BD                     _dty:
   426                           	opt stack 0
   427  0000BD                     	ds	2
   428  0000BF                     _type:
   429                           	opt stack 0
   430  0000BF                     	ds	2
   431  0000C1                     _adcn:
   432                           	opt stack 0
   433  0000C1                     	ds	2
   434  0000C3                     _adcp:
   435                           	opt stack 0
   436  0000C3                     	ds	2
   437  0000C5                     _d:
   438                           	opt stack 0
   439  0000C5                     	ds	2
   440  0000C7                     _b:
   441                           	opt stack 0
   442  0000C7                     	ds	2
   443  0000C9                     _nt:
   444                           	opt stack 0
   445  0000C9                     	ds	2
   446  0000CB                     _sel_pasi:
   447                           	opt stack 0
   448  0000CB                     	ds	2
   449  0000CD                     _pasi_int:
   450                           	opt stack 0
   451  0000CD                     	ds	2
   452  0000CF                     _start:
   453                           	opt stack 0
   454  0000CF                     	ds	2
   455  0000D1                     _go_stepper:
   456                           	opt stack 0
   457  0000D1                     	ds	2
   458  0000D3                     _nr_pasi:
   459                           	opt stack 0
   460  0000D3                     	ds	2
   461  0000D5                     _dir:
   462                           	opt stack 0
   463  0000D5                     	ds	2
   464                           tblptru	equ	0xFF8
   465                           tblptrh	equ	0xFF7
   466                           tblptrl	equ	0xFF6
   467                           tablat	equ	0xFF5
   468                           postinc0	equ	0xFEE
   469                           wreg	equ	0xFE8
   470                           
   471                           	psect	bssBANK1
   472  000100                     __pbssBANK1:
   473                           	opt stack 0
   474  000100                     _URBuff:
   475                           	opt stack 0
   476  000100                     	ds	64
   477                           tblptru	equ	0xFF8
   478                           tblptrh	equ	0xFF7
   479                           tblptrl	equ	0xFF6
   480                           tablat	equ	0xFF5
   481                           postinc0	equ	0xFEE
   482                           wreg	equ	0xFE8
   483                           
   484                           	psect	cstackBANK0
   485  000060                     __pcstackBANK0:
   486                           	opt stack 0
   487  000060                     _sprintf$1504:
   488                           	opt stack 0
   489                           
   490                           ; 3 bytes @ 0x0
   491  000060                     	ds	3
   492  000063                     sprintf@ap:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x3
   496  000063                     	ds	2
   497  000065                     sprintf@flag:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x5
   501  000065                     	ds	2
   502  000067                     sprintf@val:
   503                           	opt stack 0
   504                           
   505                           ; 4 bytes @ 0x7
   506  000067                     	ds	4
   507  00006B                     sprintf@exp:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0xB
   511  00006B                     	ds	2
   512  00006D                     sprintf@tmpval:
   513                           	opt stack 0
   514                           
   515                           ; 4 bytes @ 0xD
   516  00006D                     	ds	4
   517  000071                     sprintf@prec:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x11
   521  000071                     	ds	2
   522  000073                     sprintf@fval:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0x13
   526  000073                     	ds	3
   527  000076                     sprintf@c:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x16
   531  000076                     	ds	1
   532  000077                     main@Power:
   533                           	opt stack 0
   534                           
   535                           ; 3 bytes @ 0x17
   536  000077                     	ds	3
   537  00007A                     main@dty:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x1A
   541  00007A                     	ds	2
   542  00007C                     main@str_A:
   543                           	opt stack 0
   544                           
   545                           ; 8 bytes @ 0x1C
   546  00007C                     	ds	8
   547  000084                     main@str_V:
   548                           	opt stack 0
   549                           
   550                           ; 8 bytes @ 0x24
   551  000084                     	ds	8
   552  00008C                     main@curent:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x2C
   556  00008C                     	ds	3
   557  00008F                     main@tens_A:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x2F
   561  00008F                     	ds	3
   562  000092                     main@Iout:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x32
   566  000092                     	ds	3
   567  000095                     main@Uout:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x35
   571  000095                     	ds	3
   572  000098                     main@rez_adc_A:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x38
   576  000098                     	ds	2
   577  00009A                     main@rez_adc_U:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x3A
   581  00009A                     	ds	2
   582  00009C                     main@port:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x3C
   586  00009C                     	ds	2
   587  00009E                     main@tens:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x3E
   591  00009E                     	ds	3
   592                           tblptru	equ	0xFF8
   593                           tblptrh	equ	0xFF7
   594                           tblptrl	equ	0xFF6
   595                           tablat	equ	0xFF5
   596                           postinc0	equ	0xFEE
   597                           wreg	equ	0xFE8
   598                           
   599                           	psect	cstackCOMRAM
   600  000001                     __pcstackCOMRAM:
   601                           	opt stack 0
   602  000001                     ??_isdigit:
   603  000001                     ??_I2C_Master_Wait:
   604  000001                     ?___awmod:
   605                           	opt stack 0
   606  000001                     ?___ftpack:
   607                           	opt stack 0
   608  000001                     ?___ftneg:
   609                           	opt stack 0
   610  000001                     ?__tdiv_to_l_:
   611                           	opt stack 0
   612  000001                     ?__div_to_l_:
   613                           	opt stack 0
   614  000001                     ?___lldiv:
   615                           	opt stack 0
   616  000001                     ?___llmod:
   617                           	opt stack 0
   618  000001                     ___awmod@dividend:
   619                           	opt stack 0
   620  000001                     __div_to_l_@f1:
   621                           	opt stack 0
   622  000001                     ___ftpack@arg:
   623                           	opt stack 0
   624  000001                     __tdiv_to_l_@f1:
   625                           	opt stack 0
   626  000001                     ___ftge@ff1:
   627                           	opt stack 0
   628  000001                     ___ftneg@f1:
   629                           	opt stack 0
   630  000001                     ___lldiv@dividend:
   631                           	opt stack 0
   632  000001                     ___llmod@dividend:
   633                           	opt stack 0
   634                           
   635                           ; 4 bytes @ 0x0
   636  000001                     	ds	1
   637  000002                     _isdigit$1130:
   638                           	opt stack 0
   639  000002                     I2C_Write_Display@d:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x1
   643  000002                     	ds	1
   644  000003                     isdigit@c:
   645                           	opt stack 0
   646  000003                     ___awmod@divisor:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x2
   650  000003                     	ds	1
   651  000004                     Lcd_Port@data:
   652                           	opt stack 0
   653  000004                     ___ftpack@exp:
   654                           	opt stack 0
   655  000004                     __div_to_l_@f2:
   656                           	opt stack 0
   657  000004                     __tdiv_to_l_@f2:
   658                           	opt stack 0
   659  000004                     ___ftge@ff2:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x3
   663  000004                     	ds	1
   664  000005                     ??_Lcd_Cmd:
   665  000005                     Lcd_Write_Char@a:
   666                           	opt stack 0
   667  000005                     ___awmod@counter:
   668                           	opt stack 0
   669  000005                     ___ftpack@sign:
   670                           	opt stack 0
   671  000005                     ___lldiv@divisor:
   672                           	opt stack 0
   673  000005                     ___llmod@divisor:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x4
   677  000005                     	ds	1
   678  000006                     ??___ftpack:
   679  000006                     Lcd_Write_Char@y:
   680                           	opt stack 0
   681  000006                     ___awmod@sign:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x5
   685  000006                     	ds	1
   686  000007                     ??__tdiv_to_l_:
   687  000007                     ??___ftge:
   688  000007                     ?___awdiv:
   689                           	opt stack 0
   690  000007                     _Lcd_Cmd$804:
   691                           	opt stack 0
   692  000007                     Lcd_Write_Char@temp:
   693                           	opt stack 0
   694  000007                     ___awdiv@dividend:
   695                           	opt stack 0
   696  000007                     __div_to_l_@quot:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x6
   700  000007                     	ds	1
   701  000008                     Lcd_Cmd@buff:
   702                           	opt stack 0
   703  000008                     Lcd_Write_String@a:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x7
   707  000008                     	ds	1
   708  000009                     ?___ftdiv:
   709                           	opt stack 0
   710  000009                     ?___awtoft:
   711                           	opt stack 0
   712  000009                     ?___lltoft:
   713                           	opt stack 0
   714  000009                     ___llmod@counter:
   715                           	opt stack 0
   716  000009                     ___awdiv@divisor:
   717                           	opt stack 0
   718  000009                     ___awtoft@c:
   719                           	opt stack 0
   720  000009                     ___ftdiv@f1:
   721                           	opt stack 0
   722  000009                     ___lldiv@quotient:
   723                           	opt stack 0
   724  000009                     ___lltoft@c:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x8
   728  000009                     	ds	1
   729  00000A                     ??_Lcd_Write_String:
   730  00000A                     Lcd_Cmd@a:
   731                           	opt stack 0
   732  00000A                     __tdiv_to_l_@quot:
   733                           	opt stack 0
   734                           
   735                           ; 4 bytes @ 0x9
   736  00000A                     	ds	1
   737  00000B                     ??_Lcd_Init:
   738  00000B                     Lcd_Set_Cursor@b:
   739                           	opt stack 0
   740  00000B                     ___awdiv@counter:
   741                           	opt stack 0
   742  00000B                     __div_to_l_@cntr:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0xA
   746  00000B                     	ds	1
   747  00000C                     Lcd_Set_Cursor@a:
   748                           	opt stack 0
   749  00000C                     ___awdiv@sign:
   750                           	opt stack 0
   751  00000C                     ___awtoft@sign:
   752                           	opt stack 0
   753  00000C                     __div_to_l_@exp1:
   754                           	opt stack 0
   755  00000C                     Lcd_Write_String@i:
   756                           	opt stack 0
   757  00000C                     ___ftdiv@f2:
   758                           	opt stack 0
   759                           
   760                           ; 3 bytes @ 0xB
   761  00000C                     	ds	1
   762  00000D                     ??___lltoft:
   763  00000D                     Lcd_Set_Cursor@z:
   764                           	opt stack 0
   765  00000D                     ___lldiv@counter:
   766                           	opt stack 0
   767  00000D                     ___awdiv@quotient:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0xC
   771  00000D                     	ds	1
   772  00000E                     Lcd_Set_Cursor@y:
   773                           	opt stack 0
   774  00000E                     __tdiv_to_l_@cntr:
   775                           	opt stack 0
   776  00000E                     I2C_Master_Init@c:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0xD
   780  00000E                     	ds	1
   781  00000F                     ??___ftdiv:
   782  00000F                     ?___wmul:
   783                           	opt stack 0
   784  00000F                     Lcd_Set_Cursor@temp:
   785                           	opt stack 0
   786  00000F                     __tdiv_to_l_@exp1:
   787                           	opt stack 0
   788  00000F                     ___wmul@multiplier:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0xE
   792  00000F                     	ds	2
   793  000011                     ___lltoft@exp:
   794                           	opt stack 0
   795  000011                     ___wmul@multiplicand:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x10
   799  000011                     	ds	1
   800  000012                     ??_I2C_Master_Init:
   801  000012                     ___ftdiv@cntr:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x11
   805  000012                     	ds	1
   806  000013                     ___wmul@product:
   807                           	opt stack 0
   808  000013                     ___ftdiv@f3:
   809                           	opt stack 0
   810                           
   811                           ; 3 bytes @ 0x12
   812  000013                     	ds	2
   813  000015                     ?___ftmul:
   814                           	opt stack 0
   815  000015                     ___ftmul@f1:
   816                           	opt stack 0
   817                           
   818                           ; 3 bytes @ 0x14
   819  000015                     	ds	1
   820  000016                     ??_init_io_display:
   821  000016                     ___ftdiv@exp:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x15
   825  000016                     	ds	1
   826  000017                     ___ftdiv@sign:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x16
   830  000017                     	ds	1
   831  000018                     ___ftmul@f2:
   832                           	opt stack 0
   833                           
   834                           ; 3 bytes @ 0x17
   835  000018                     	ds	3
   836  00001B                     ??___ftmul:
   837                           
   838                           ; 1 bytes @ 0x1A
   839  00001B                     	ds	3
   840  00001E                     ___ftmul@exp:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x1D
   844  00001E                     	ds	1
   845  00001F                     ___ftmul@f3_as_product:
   846                           	opt stack 0
   847                           
   848                           ; 3 bytes @ 0x1E
   849  00001F                     	ds	3
   850  000022                     ___ftmul@cntr:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x21
   854  000022                     	ds	1
   855  000023                     ___ftmul@sign:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x22
   859  000023                     	ds	1
   860  000024                     ?_fround:
   861                           	opt stack 0
   862  000024                     ?_scale:
   863                           	opt stack 0
   864                           
   865                           ; 3 bytes @ 0x23
   866  000024                     	ds	3
   867  000027                     _fround$1502:
   868                           	opt stack 0
   869  000027                     _scale$1503:
   870                           	opt stack 0
   871                           
   872                           ; 3 bytes @ 0x26
   873  000027                     	ds	3
   874  00002A                     scale@scl:
   875                           	opt stack 0
   876  00002A                     _fround$1501:
   877                           	opt stack 0
   878                           
   879                           ; 3 bytes @ 0x29
   880  00002A                     	ds	1
   881  00002B                     ?___fttol:
   882                           	opt stack 0
   883  00002B                     ___fttol@f1:
   884                           	opt stack 0
   885                           
   886                           ; 3 bytes @ 0x2A
   887  00002B                     	ds	2
   888  00002D                     fround@prec:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x2C
   892  00002D                     	ds	1
   893  00002E                     ?___ftadd:
   894                           	opt stack 0
   895  00002E                     ___ftadd@f1:
   896                           	opt stack 0
   897                           
   898                           ; 3 bytes @ 0x2D
   899  00002E                     	ds	1
   900  00002F                     ??___fttol:
   901                           
   902                           ; 1 bytes @ 0x2E
   903  00002F                     	ds	2
   904  000031                     ___ftadd@f2:
   905                           	opt stack 0
   906                           
   907                           ; 3 bytes @ 0x30
   908  000031                     	ds	3
   909  000034                     ??___ftadd:
   910  000034                     ___fttol@sign1:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x33
   914  000034                     	ds	1
   915  000035                     ___fttol@lval:
   916                           	opt stack 0
   917                           
   918                           ; 4 bytes @ 0x34
   919  000035                     	ds	2
   920  000037                     ___ftadd@sign:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x36
   924  000037                     	ds	1
   925  000038                     ___ftadd@exp2:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x37
   929  000038                     	ds	1
   930  000039                     ___ftadd@exp1:
   931                           	opt stack 0
   932  000039                     ___fttol@exp1:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x38
   936  000039                     	ds	1
   937  00003A                     ?___ftsub:
   938                           	opt stack 0
   939  00003A                     buck_boost@type:
   940                           	opt stack 0
   941  00003A                     ___ftsub@f1:
   942                           	opt stack 0
   943                           
   944                           ; 3 bytes @ 0x39
   945  00003A                     	ds	2
   946  00003C                     buck_boost@dty:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x3B
   950  00003C                     	ds	1
   951  00003D                     ___ftsub@f2:
   952                           	opt stack 0
   953                           
   954                           ; 3 bytes @ 0x3C
   955  00003D                     	ds	1
   956  00003E                     
   957                           ; 1 bytes @ 0x3D
   958  00003E                     	ds	2
   959  000040                     ?_sprintf:
   960                           	opt stack 0
   961  000040                     sprintf@sp:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x3F
   965  000040                     	ds	2
   966  000042                     sprintf@f:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x41
   970  000042                     	ds	5
   971  000047                     ??_sprintf:
   972                           
   973                           ; 1 bytes @ 0x46
   974  000047                     	ds	6
   975  00004D                     ??_main:
   976                           
   977                           ; 1 bytes @ 0x4C
   978  00004D                     	ds	2
   979                           tblptru	equ	0xFF8
   980                           tblptrh	equ	0xFF7
   981                           tblptrl	equ	0xFF6
   982                           tablat	equ	0xFF5
   983                           postinc0	equ	0xFEE
   984                           wreg	equ	0xFE8
   985                           
   986 ;;
   987 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   988 ;;
   989 ;; *************** function _main *****************
   990 ;; Defined at:
   991 ;;		line 24 in file "main.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;		None
   994 ;; Auto vars:     Size  Location     Type
   995 ;;  pwm_buffer     20    0        unsigned char [20]
   996 ;;  str_V           8   36[BANK0 ] unsigned char [8]
   997 ;;  str_A           8   28[BANK0 ] unsigned char [8]
   998 ;;  str_P           8    0        unsigned char [8]
   999 ;;  tens            3   62[BANK0 ] float 
  1000 ;;  Uout            3   53[BANK0 ] float 
  1001 ;;  Iout            3   50[BANK0 ] float 
  1002 ;;  tens_A          3   47[BANK0 ] float 
  1003 ;;  curent          3   44[BANK0 ] float 
  1004 ;;  Power           3   23[BANK0 ] float 
  1005 ;;  numar           3    0        float 
  1006 ;;  port            2   60[BANK0 ] int 
  1007 ;;  rez_adc_U       2   58[BANK0 ] int 
  1008 ;;  rez_adc_A       2   56[BANK0 ] int 
  1009 ;;  dty             2   26[BANK0 ] int 
  1010 ;;  tip             2    0        int 
  1011 ;;  rez_adc         2    0        int 
  1012 ;; Return value:  Size  Location     Type
  1013 ;;                  1    wreg      void 
  1014 ;; Registers used:
  1015 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1016 ;; Tracked objects:
  1017 ;;		On entry : 0/0
  1018 ;;		On exit  : 0/0
  1019 ;;		Unchanged: 0/0
  1020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1022 ;;      Locals:         0      42       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1023 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1024 ;;      Totals:         2      42       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1025 ;;Total ram usage:       44 bytes
  1026 ;; Hardware stack levels required when called:    6
  1027 ;; This function calls:
  1028 ;;		_Lcd_Clear
  1029 ;;		_Lcd_Set_Cursor
  1030 ;;		_Lcd_Write_String
  1031 ;;		___awtoft
  1032 ;;		___ftdiv
  1033 ;;		___ftmul
  1034 ;;		_adc_config
  1035 ;;		_buck_boost
  1036 ;;		_config
  1037 ;;		_init_io_display
  1038 ;;		_pwm_config
  1039 ;;		_sprintf
  1040 ;; This function is called by:
  1041 ;;		Startup code after reset
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text0
  1046  001BA2                     __ptext0:
  1047                           	opt stack 0
  1048  001BA2                     _main:
  1049                           	opt stack 25
  1050                           
  1051                           ;main.c: 26: dir=0;
  1052                           
  1053                           ;incstack = 0
  1054  001BA2  0E00               	movlw	0
  1055  001BA4  0100               	movlb	0	; () banked
  1056  001BA6  6FD6               	movwf	(_dir+1)& (0+255),b
  1057  001BA8  0E00               	movlw	0
  1058  001BAA  6FD5               	movwf	_dir& (0+255),b
  1059                           
  1060                           ;main.c: 27: nt=0;
  1061  001BAC  0E00               	movlw	0
  1062  001BAE  6FCA               	movwf	(_nt+1)& (0+255),b
  1063  001BB0  0E00               	movlw	0
  1064  001BB2  6FC9               	movwf	_nt& (0+255),b
  1065                           
  1066                           ;main.c: 28: nr_pasi=0;
  1067  001BB4  0E00               	movlw	0
  1068  001BB6  6FD4               	movwf	(_nr_pasi+1)& (0+255),b
  1069  001BB8  0E00               	movlw	0
  1070  001BBA  6FD3               	movwf	_nr_pasi& (0+255),b
  1071                           
  1072                           ;main.c: 29: go_stepper=0;
  1073  001BBC  0E00               	movlw	0
  1074  001BBE  6FD2               	movwf	(_go_stepper+1)& (0+255),b
  1075  001BC0  0E00               	movlw	0
  1076  001BC2  6FD1               	movwf	_go_stepper& (0+255),b
  1077                           
  1078                           ;main.c: 30: start=0;
  1079  001BC4  0E00               	movlw	0
  1080  001BC6  6FD0               	movwf	(_start+1)& (0+255),b
  1081  001BC8  0E00               	movlw	0
  1082  001BCA  6FCF               	movwf	_start& (0+255),b
  1083                           
  1084                           ;main.c: 31: sel_pasi=0;
  1085  001BCC  0E00               	movlw	0
  1086  001BCE  6FCC               	movwf	(_sel_pasi+1)& (0+255),b
  1087  001BD0  0E00               	movlw	0
  1088  001BD2  6FCB               	movwf	_sel_pasi& (0+255),b
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;main.c: 32: char pwm_buffer[20];
  1092                           ;main.c: 33: config();
  1093  001BD4  EC88  F017         	call	_config	;wreg free
  1094                           
  1095                           ;main.c: 34: pwm_config();
  1096  001BD8  EC61  F018         	call	_pwm_config	;wreg free
  1097                           
  1098                           ;main.c: 35: adc_config();
  1099  001BDC  ECBA  F018         	call	_adc_config	;wreg free
  1100                           
  1101                           ;main.c: 36: init_io_display();
  1102  001BE0  EC98  F016         	call	_init_io_display	;wreg free
  1103                           
  1104                           ;main.c: 37: char str_V[8],str_A[8],str_P[8];
  1105                           ;main.c: 38: float tens,tens_A,curent,Power,Iout,Uout;
  1106                           ;main.c: 39: int rez_adc_A,rez_adc_U;
  1107                           ;main.c: 40: int dty,rez_adc,tip,port;
  1108                           ;main.c: 41: float numar;
  1109                           ;main.c: 42: dty=0;
  1110  001BE4  0E00               	movlw	0
  1111  001BE6  0100               	movlb	0	; () banked
  1112  001BE8  6F7B               	movwf	(main@dty+1)& (0+255),b
  1113  001BEA  0E00               	movlw	0
  1114  001BEC  6F7A               	movwf	main@dty& (0+255),b
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;main.c: 43: port=0;
  1118  001BEE  0E00               	movlw	0
  1119  001BF0  6F9D               	movwf	(main@port+1)& (0+255),b
  1120  001BF2  0E00               	movlw	0
  1121  001BF4  6F9C               	movwf	main@port& (0+255),b
  1122                           
  1123                           ; BSR set to: 0
  1124                           ;main.c: 44: TRISDbits.RD4=0;
  1125  001BF6  9895               	bcf	3989,4,c	;volatile
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;main.c: 45: LATDbits.LD6=0;
  1129  001BF8  9C8C               	bcf	3980,6,c	;volatile
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;main.c: 46: LATDbits.LD7=0;
  1133  001BFA  9E8C               	bcf	3980,7,c	;volatile
  1134                           
  1135                           ; BSR set to: 0
  1136                           ;main.c: 47: LATDbits.LD5=0;
  1137  001BFC  9A8C               	bcf	3980,5,c	;volatile
  1138                           
  1139                           ; BSR set to: 0
  1140                           ;main.c: 48: LATDbits.LD4=0;
  1141  001BFE  988C               	bcf	3980,4,c	;volatile
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;main.c: 51: ADCON0=0b00010011;
  1145  001C00  0E13               	movlw	19
  1146  001C02  6EC2               	movwf	4034,c	;volatile
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;main.c: 53: Lcd_Clear();
  1150  001C04  ECD0  F018         	call	_Lcd_Clear	;wreg free
  1151  001C08                     
  1152                           ;main.c: 59: {
  1153                           ;main.c: 62: buck_boost (2,50 );
  1154  001C08  0E00               	movlw	0
  1155  001C0A  6E3B               	movwf	buck_boost@type+1,c
  1156  001C0C  0E02               	movlw	2
  1157  001C0E  6E3A               	movwf	buck_boost@type,c
  1158  001C10  0E00               	movlw	0
  1159  001C12  6E3D               	movwf	buck_boost@dty+1,c
  1160  001C14  0E32               	movlw	50
  1161  001C16  6E3C               	movwf	buck_boost@dty,c
  1162  001C18  EC5B  F014         	call	_buck_boost	;wreg free
  1163                           
  1164                           ;main.c: 64: {
  1165                           ;main.c: 65: ADCON0=0b00000111;
  1166  001C1C  0E07               	movlw	7
  1167  001C1E  6EC2               	movwf	4034,c	;volatile
  1168                           
  1169                           ;main.c: 66: _delay((unsigned long)((10)*(64000000/4000.0)));
  1170  001C20  0ED0               	movlw	208
  1171  001C22  6E4D               	movwf	??_main& (0+255),c
  1172  001C24  0ECA               	movlw	202
  1173  001C26                     u2947:
  1174  001C26  2EE8               	decfsz	wreg,f,c
  1175  001C28  D7FE               	bra	u2947
  1176  001C2A  2E4D               	decfsz	??_main& (0+255),f,c
  1177  001C2C  D7FC               	bra	u2947
  1178                           
  1179                           ;main.c: 67: ADCON0bits.GO=1;
  1180  001C2E  82C2               	bsf	4034,1,c	;volatile
  1181                           
  1182                           ;main.c: 68: _delay((unsigned long)((100)*(64000000/4000.0)));
  1183  001C30  0E09               	movlw	9
  1184  001C32  6E4E               	movwf	(??_main+1)& (0+255),c
  1185  001C34  0E1E               	movlw	30
  1186  001C36  6E4D               	movwf	??_main& (0+255),c
  1187  001C38  0EE4               	movlw	228
  1188  001C3A                     u2957:
  1189  001C3A  2EE8               	decfsz	wreg,f,c
  1190  001C3C  D7FE               	bra	u2957
  1191  001C3E  2E4D               	decfsz	??_main& (0+255),f,c
  1192  001C40  D7FC               	bra	u2957
  1193  001C42  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1194  001C44  D7FA               	bra	u2957
  1195  001C46  D000               	nop2	
  1196                           
  1197                           ;main.c: 69: rez_adc_U=ADRESH;
  1198  001C48  CFC4 F09A          	movff	4036,main@rez_adc_U	;volatile
  1199  001C4C  0100               	movlb	0	; () banked
  1200  001C4E  6B9B               	clrf	(main@rez_adc_U+1)& (0+255),b
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;main.c: 70: tens=rez_adc_U*0.01953125;
  1204  001C50  C09A  F009         	movff	main@rez_adc_U,___awtoft@c
  1205  001C54  C09B  F00A         	movff	main@rez_adc_U+1,___awtoft@c+1
  1206  001C58  EC45  F018         	call	___awtoft	;wreg free
  1207  001C5C  C009  F015         	movff	?___awtoft,___ftmul@f1
  1208  001C60  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  1209  001C64  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  1210  001C68  0E00               	movlw	0
  1211  001C6A  6E18               	movwf	___ftmul@f2,c
  1212  001C6C  0EA0               	movlw	160
  1213  001C6E  6E19               	movwf	___ftmul@f2+1,c
  1214  001C70  0E3C               	movlw	60
  1215  001C72  6E1A               	movwf	___ftmul@f2+2,c
  1216  001C74  EC6E  F013         	call	___ftmul	;wreg free
  1217  001C78  C015  F09E         	movff	?___ftmul,main@tens
  1218  001C7C  C016  F09F         	movff	?___ftmul+1,main@tens+1
  1219  001C80  C017  F0A0         	movff	?___ftmul+2,main@tens+2
  1220                           
  1221                           ;main.c: 71: Uout=tens/0.25;
  1222  001C84  C09E  F009         	movff	main@tens,___ftdiv@f1
  1223  001C88  C09F  F00A         	movff	main@tens+1,___ftdiv@f1+1
  1224  001C8C  C0A0  F00B         	movff	main@tens+2,___ftdiv@f1+2
  1225  001C90  0E00               	movlw	0
  1226  001C92  6E0C               	movwf	___ftdiv@f2,c
  1227  001C94  0E80               	movlw	128
  1228  001C96  6E0D               	movwf	___ftdiv@f2+1,c
  1229  001C98  0E3E               	movlw	62
  1230  001C9A  6E0E               	movwf	___ftdiv@f2+2,c
  1231  001C9C  ECE8  F013         	call	___ftdiv	;wreg free
  1232  001CA0  C009  F095         	movff	?___ftdiv,main@Uout
  1233  001CA4  C00A  F096         	movff	?___ftdiv+1,main@Uout+1
  1234  001CA8  C00B  F097         	movff	?___ftdiv+2,main@Uout+2
  1235                           
  1236                           ;main.c: 72: Lcd_Set_Cursor(1,1);
  1237  001CAC  0E01               	movlw	1
  1238  001CAE  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1239  001CB0  0E01               	movlw	1
  1240  001CB2  ECB2  F017         	call	_Lcd_Set_Cursor
  1241                           
  1242                           ;main.c: 73: Lcd_Write_String("U=");
  1243  001CB6  0E88               	movlw	low STR_1
  1244  001CB8  6E08               	movwf	Lcd_Write_String@a,c
  1245  001CBA  0E10               	movlw	high STR_1
  1246  001CBC  6E09               	movwf	Lcd_Write_String@a+1,c
  1247  001CBE  EC25  F016         	call	_Lcd_Write_String	;wreg free
  1248                           
  1249                           ;main.c: 74: sprintf(str_V, "%.2f", tens);
  1250  001CC2  0E84               	movlw	low main@str_V
  1251  001CC4  6E40               	movwf	sprintf@sp,c
  1252  001CC6  0E00               	movlw	high main@str_V
  1253  001CC8  6E41               	movwf	sprintf@sp+1,c
  1254  001CCA  0E7C               	movlw	low STR_2
  1255  001CCC  6E42               	movwf	sprintf@f,c
  1256  001CCE  0E10               	movlw	high STR_2
  1257  001CD0  6E43               	movwf	sprintf@f+1,c
  1258  001CD2  C09E  F044         	movff	main@tens,?_sprintf+4
  1259  001CD6  C09F  F045         	movff	main@tens+1,?_sprintf+5
  1260  001CDA  C0A0  F046         	movff	main@tens+2,?_sprintf+6
  1261  001CDE  EC49  F008         	call	_sprintf	;wreg free
  1262                           
  1263                           ;main.c: 75: Lcd_Set_Cursor(1,3);
  1264  001CE2  0E03               	movlw	3
  1265  001CE4  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1266  001CE6  0E01               	movlw	1
  1267  001CE8  ECB2  F017         	call	_Lcd_Set_Cursor
  1268                           
  1269                           ;main.c: 76: Lcd_Write_String(str_V);
  1270  001CEC  0E84               	movlw	low main@str_V
  1271  001CEE  6E08               	movwf	Lcd_Write_String@a,c
  1272  001CF0  0E00               	movlw	high main@str_V
  1273  001CF2  6E09               	movwf	Lcd_Write_String@a+1,c
  1274  001CF4  EC25  F016         	call	_Lcd_Write_String	;wreg free
  1275                           
  1276                           ;main.c: 77: port=1;
  1277  001CF8  0E00               	movlw	0
  1278  001CFA  0100               	movlb	0	; () banked
  1279  001CFC  6F9D               	movwf	(main@port+1)& (0+255),b
  1280  001CFE  0E01               	movlw	1
  1281  001D00  6F9C               	movwf	main@port& (0+255),b
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;main.c: 78: _delay((unsigned long)((100)*(64000000/4000.0)));
  1285  001D02  0E09               	movlw	9
  1286  001D04  6E4E               	movwf	(??_main+1)& (0+255),c
  1287  001D06  0E1E               	movlw	30
  1288  001D08  6E4D               	movwf	??_main& (0+255),c
  1289  001D0A  0EE4               	movlw	228
  1290  001D0C                     u2967:
  1291  001D0C  2EE8               	decfsz	wreg,f,c
  1292  001D0E  D7FE               	bra	u2967
  1293  001D10  2E4D               	decfsz	??_main& (0+255),f,c
  1294  001D12  D7FC               	bra	u2967
  1295  001D14  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1296  001D16  D7FA               	bra	u2967
  1297  001D18  D000               	nop2	
  1298                           
  1299                           ;main.c: 79: ADRESH=0X00;
  1300  001D1A  0E00               	movlw	0
  1301  001D1C  6EC4               	movwf	4036,c	;volatile
  1302                           
  1303                           ;main.c: 80: _delay((unsigned long)((100)*(64000000/4000.0)));
  1304  001D1E  0E09               	movlw	9
  1305  001D20  6E4E               	movwf	(??_main+1)& (0+255),c
  1306  001D22  0E1E               	movlw	30
  1307  001D24  6E4D               	movwf	??_main& (0+255),c
  1308  001D26  0EE4               	movlw	228
  1309  001D28                     u2977:
  1310  001D28  2EE8               	decfsz	wreg,f,c
  1311  001D2A  D7FE               	bra	u2977
  1312  001D2C  2E4D               	decfsz	??_main& (0+255),f,c
  1313  001D2E  D7FC               	bra	u2977
  1314  001D30  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1315  001D32  D7FA               	bra	u2977
  1316  001D34  D000               	nop2	
  1317                           
  1318                           ;main.c: 84: {
  1319                           ;main.c: 85: ADCON0=0b00001011;
  1320  001D36  0E0B               	movlw	11
  1321  001D38  6EC2               	movwf	4034,c	;volatile
  1322                           
  1323                           ;main.c: 86: _delay((unsigned long)((10)*(64000000/4000.0)));
  1324  001D3A  0ED0               	movlw	208
  1325  001D3C  6E4D               	movwf	??_main& (0+255),c
  1326  001D3E  0ECA               	movlw	202
  1327  001D40                     u2987:
  1328  001D40  2EE8               	decfsz	wreg,f,c
  1329  001D42  D7FE               	bra	u2987
  1330  001D44  2E4D               	decfsz	??_main& (0+255),f,c
  1331  001D46  D7FC               	bra	u2987
  1332                           
  1333                           ;main.c: 87: ADCON0bits.GO=1;
  1334  001D48  82C2               	bsf	4034,1,c	;volatile
  1335                           
  1336                           ;main.c: 88: _delay((unsigned long)((100)*(64000000/4000.0)));
  1337  001D4A  0E09               	movlw	9
  1338  001D4C  6E4E               	movwf	(??_main+1)& (0+255),c
  1339  001D4E  0E1E               	movlw	30
  1340  001D50  6E4D               	movwf	??_main& (0+255),c
  1341  001D52  0EE4               	movlw	228
  1342  001D54                     u2997:
  1343  001D54  2EE8               	decfsz	wreg,f,c
  1344  001D56  D7FE               	bra	u2997
  1345  001D58  2E4D               	decfsz	??_main& (0+255),f,c
  1346  001D5A  D7FC               	bra	u2997
  1347  001D5C  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1348  001D5E  D7FA               	bra	u2997
  1349  001D60  D000               	nop2	
  1350                           
  1351                           ;main.c: 89: rez_adc_A=ADRESH;
  1352  001D62  CFC4 F098          	movff	4036,main@rez_adc_A	;volatile
  1353  001D66  0100               	movlb	0	; () banked
  1354  001D68  6B99               	clrf	(main@rez_adc_A+1)& (0+255),b
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;main.c: 90: tens_A=rez_adc_A*0.0181372549019608;
  1358  001D6A  C098  F009         	movff	main@rez_adc_A,___awtoft@c
  1359  001D6E  C099  F00A         	movff	main@rez_adc_A+1,___awtoft@c+1
  1360  001D72  EC45  F018         	call	___awtoft	;wreg free
  1361  001D76  C009  F015         	movff	?___awtoft,___ftmul@f1
  1362  001D7A  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  1363  001D7E  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  1364  001D82  0E95               	movlw	149
  1365  001D84  6E18               	movwf	___ftmul@f2,c
  1366  001D86  0E94               	movlw	148
  1367  001D88  6E19               	movwf	___ftmul@f2+1,c
  1368  001D8A  0E3C               	movlw	60
  1369  001D8C  6E1A               	movwf	___ftmul@f2+2,c
  1370  001D8E  EC6E  F013         	call	___ftmul	;wreg free
  1371  001D92  C015  F08F         	movff	?___ftmul,main@tens_A
  1372  001D96  C016  F090         	movff	?___ftmul+1,main@tens_A+1
  1373  001D9A  C017  F091         	movff	?___ftmul+2,main@tens_A+2
  1374                           
  1375                           ;main.c: 91: Iout=tens_A;
  1376  001D9E  C08F  F092         	movff	main@tens_A,main@Iout
  1377  001DA2  C090  F093         	movff	main@tens_A+1,main@Iout+1
  1378  001DA6  C091  F094         	movff	main@tens_A+2,main@Iout+2
  1379                           
  1380                           ;main.c: 93: Lcd_Set_Cursor(2,1);
  1381  001DAA  0E01               	movlw	1
  1382  001DAC  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1383  001DAE  0E02               	movlw	2
  1384  001DB0  ECB2  F017         	call	_Lcd_Set_Cursor
  1385                           
  1386                           ;main.c: 94: Lcd_Write_String("I=");
  1387  001DB4  0E85               	movlw	low STR_3
  1388  001DB6  6E08               	movwf	Lcd_Write_String@a,c
  1389  001DB8  0E10               	movlw	high STR_3
  1390  001DBA  6E09               	movwf	Lcd_Write_String@a+1,c
  1391  001DBC  EC25  F016         	call	_Lcd_Write_String	;wreg free
  1392                           
  1393                           ;main.c: 95: sprintf(str_A, "%.2f", curent);
  1394  001DC0  0E7C               	movlw	low main@str_A
  1395  001DC2  6E40               	movwf	sprintf@sp,c
  1396  001DC4  0E00               	movlw	high main@str_A
  1397  001DC6  6E41               	movwf	sprintf@sp+1,c
  1398  001DC8  0E7C               	movlw	low STR_2
  1399  001DCA  6E42               	movwf	sprintf@f,c
  1400  001DCC  0E10               	movlw	high STR_2
  1401  001DCE  6E43               	movwf	sprintf@f+1,c
  1402  001DD0  C08C  F044         	movff	main@curent,?_sprintf+4
  1403  001DD4  C08D  F045         	movff	main@curent+1,?_sprintf+5
  1404  001DD8  C08E  F046         	movff	main@curent+2,?_sprintf+6
  1405  001DDC  EC49  F008         	call	_sprintf	;wreg free
  1406                           
  1407                           ;main.c: 96: Lcd_Set_Cursor(2,3);
  1408  001DE0  0E03               	movlw	3
  1409  001DE2  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1410  001DE4  0E02               	movlw	2
  1411  001DE6  ECB2  F017         	call	_Lcd_Set_Cursor
  1412                           
  1413                           ;main.c: 97: Lcd_Write_String(str_A);
  1414  001DEA  0E7C               	movlw	low main@str_A
  1415  001DEC  6E08               	movwf	Lcd_Write_String@a,c
  1416  001DEE  0E00               	movlw	high main@str_A
  1417  001DF0  6E09               	movwf	Lcd_Write_String@a+1,c
  1418  001DF2  EC25  F016         	call	_Lcd_Write_String	;wreg free
  1419                           
  1420                           ;main.c: 98: Lcd_Write_String(" A");
  1421  001DF6  0E8B               	movlw	low STR_5
  1422  001DF8  6E08               	movwf	Lcd_Write_String@a,c
  1423  001DFA  0E10               	movlw	high STR_5
  1424  001DFC  6E09               	movwf	Lcd_Write_String@a+1,c
  1425  001DFE  EC25  F016         	call	_Lcd_Write_String	;wreg free
  1426                           
  1427                           ;main.c: 99: port=2;
  1428  001E02  0E00               	movlw	0
  1429  001E04  0100               	movlb	0	; () banked
  1430  001E06  6F9D               	movwf	(main@port+1)& (0+255),b
  1431  001E08  0E02               	movlw	2
  1432  001E0A  6F9C               	movwf	main@port& (0+255),b
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;main.c: 100: _delay((unsigned long)((100)*(64000000/4000.0)));
  1436  001E0C  0E09               	movlw	9
  1437  001E0E  6E4E               	movwf	(??_main+1)& (0+255),c
  1438  001E10  0E1E               	movlw	30
  1439  001E12  6E4D               	movwf	??_main& (0+255),c
  1440  001E14  0EE4               	movlw	228
  1441  001E16                     u3007:
  1442  001E16  2EE8               	decfsz	wreg,f,c
  1443  001E18  D7FE               	bra	u3007
  1444  001E1A  2E4D               	decfsz	??_main& (0+255),f,c
  1445  001E1C  D7FC               	bra	u3007
  1446  001E1E  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1447  001E20  D7FA               	bra	u3007
  1448  001E22  D000               	nop2	
  1449                           
  1450                           ;main.c: 101: ADRESH=0X00;
  1451  001E24  0E00               	movlw	0
  1452  001E26  6EC4               	movwf	4036,c	;volatile
  1453                           
  1454                           ;main.c: 102: _delay((unsigned long)((100)*(64000000/4000.0)));
  1455  001E28  0E09               	movlw	9
  1456  001E2A  6E4E               	movwf	(??_main+1)& (0+255),c
  1457  001E2C  0E1E               	movlw	30
  1458  001E2E  6E4D               	movwf	??_main& (0+255),c
  1459  001E30  0EE4               	movlw	228
  1460  001E32                     u3017:
  1461  001E32  2EE8               	decfsz	wreg,f,c
  1462  001E34  D7FE               	bra	u3017
  1463  001E36  2E4D               	decfsz	??_main& (0+255),f,c
  1464  001E38  D7FC               	bra	u3017
  1465  001E3A  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1466  001E3C  D7FA               	bra	u3017
  1467  001E3E  D000               	nop2	
  1468                           
  1469                           ;main.c: 105: {
  1470                           ;main.c: 106: ADCON0=0b00001111;
  1471  001E40  0E0F               	movlw	15
  1472  001E42  6EC2               	movwf	4034,c	;volatile
  1473                           
  1474                           ;main.c: 107: _delay((unsigned long)((10)*(64000000/4000.0)));
  1475  001E44  0ED0               	movlw	208
  1476  001E46  6E4D               	movwf	??_main& (0+255),c
  1477  001E48  0ECA               	movlw	202
  1478  001E4A                     u3027:
  1479  001E4A  2EE8               	decfsz	wreg,f,c
  1480  001E4C  D7FE               	bra	u3027
  1481  001E4E  2E4D               	decfsz	??_main& (0+255),f,c
  1482  001E50  D7FC               	bra	u3027
  1483                           
  1484                           ;main.c: 108: ADCON0bits.GO=1;
  1485  001E52  82C2               	bsf	4034,1,c	;volatile
  1486                           
  1487                           ;main.c: 109: _delay((unsigned long)((100)*(64000000/4000.0)));
  1488  001E54  0E09               	movlw	9
  1489  001E56  6E4E               	movwf	(??_main+1)& (0+255),c
  1490  001E58  0E1E               	movlw	30
  1491  001E5A  6E4D               	movwf	??_main& (0+255),c
  1492  001E5C  0EE4               	movlw	228
  1493  001E5E                     u3037:
  1494  001E5E  2EE8               	decfsz	wreg,f,c
  1495  001E60  D7FE               	bra	u3037
  1496  001E62  2E4D               	decfsz	??_main& (0+255),f,c
  1497  001E64  D7FC               	bra	u3037
  1498  001E66  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1499  001E68  D7FA               	bra	u3037
  1500  001E6A  D000               	nop2	
  1501                           
  1502                           ;main.c: 110: rez_adc_U=ADRESH;
  1503  001E6C  CFC4 F09A          	movff	4036,main@rez_adc_U	;volatile
  1504  001E70  0100               	movlb	0	; () banked
  1505  001E72  6B9B               	clrf	(main@rez_adc_U+1)& (0+255),b
  1506                           
  1507                           ; BSR set to: 0
  1508                           ;main.c: 111: tens=rez_adc_U*0.01953125;
  1509  001E74  C09A  F009         	movff	main@rez_adc_U,___awtoft@c
  1510  001E78  C09B  F00A         	movff	main@rez_adc_U+1,___awtoft@c+1
  1511  001E7C  EC45  F018         	call	___awtoft	;wreg free
  1512  001E80  C009  F015         	movff	?___awtoft,___ftmul@f1
  1513  001E84  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  1514  001E88  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  1515  001E8C  0E00               	movlw	0
  1516  001E8E  6E18               	movwf	___ftmul@f2,c
  1517  001E90  0EA0               	movlw	160
  1518  001E92  6E19               	movwf	___ftmul@f2+1,c
  1519  001E94  0E3C               	movlw	60
  1520  001E96  6E1A               	movwf	___ftmul@f2+2,c
  1521  001E98  EC6E  F013         	call	___ftmul	;wreg free
  1522  001E9C  C015  F09E         	movff	?___ftmul,main@tens
  1523  001EA0  C016  F09F         	movff	?___ftmul+1,main@tens+1
  1524  001EA4  C017  F0A0         	movff	?___ftmul+2,main@tens+2
  1525                           
  1526                           ;main.c: 112: tens=tens/0.2;
  1527  001EA8  C09E  F009         	movff	main@tens,___ftdiv@f1
  1528  001EAC  C09F  F00A         	movff	main@tens+1,___ftdiv@f1+1
  1529  001EB0  C0A0  F00B         	movff	main@tens+2,___ftdiv@f1+2
  1530  001EB4  0ECD               	movlw	205
  1531  001EB6  6E0C               	movwf	___ftdiv@f2,c
  1532  001EB8  0E4C               	movlw	76
  1533  001EBA  6E0D               	movwf	___ftdiv@f2+1,c
  1534  001EBC  0E3E               	movlw	62
  1535  001EBE  6E0E               	movwf	___ftdiv@f2+2,c
  1536  001EC0  ECE8  F013         	call	___ftdiv	;wreg free
  1537  001EC4  C009  F09E         	movff	?___ftdiv,main@tens
  1538  001EC8  C00A  F09F         	movff	?___ftdiv+1,main@tens+1
  1539  001ECC  C00B  F0A0         	movff	?___ftdiv+2,main@tens+2
  1540                           
  1541                           ;main.c: 113: Lcd_Set_Cursor(1,9);
  1542  001ED0  0E09               	movlw	9
  1543  001ED2  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1544  001ED4  0E01               	movlw	1
  1545  001ED6  ECB2  F017         	call	_Lcd_Set_Cursor
  1546                           
  1547                           ;main.c: 114: Lcd_Write_String("Ui=");
  1548  001EDA  0E81               	movlw	low STR_6
  1549  001EDC  6E08               	movwf	Lcd_Write_String@a,c
  1550  001EDE  0E10               	movlw	high STR_6
  1551  001EE0  6E09               	movwf	Lcd_Write_String@a+1,c
  1552  001EE2  EC25  F016         	call	_Lcd_Write_String	;wreg free
  1553                           
  1554                           ;main.c: 115: sprintf(str_V, "%.2f", tens);
  1555  001EE6  0E84               	movlw	low main@str_V
  1556  001EE8  6E40               	movwf	sprintf@sp,c
  1557  001EEA  0E00               	movlw	high main@str_V
  1558  001EEC  6E41               	movwf	sprintf@sp+1,c
  1559  001EEE  0E7C               	movlw	low STR_2
  1560  001EF0  6E42               	movwf	sprintf@f,c
  1561  001EF2  0E10               	movlw	high STR_2
  1562  001EF4  6E43               	movwf	sprintf@f+1,c
  1563  001EF6  C09E  F044         	movff	main@tens,?_sprintf+4
  1564  001EFA  C09F  F045         	movff	main@tens+1,?_sprintf+5
  1565  001EFE  C0A0  F046         	movff	main@tens+2,?_sprintf+6
  1566  001F02  EC49  F008         	call	_sprintf	;wreg free
  1567                           
  1568                           ;main.c: 116: Lcd_Set_Cursor(1,12);
  1569  001F06  0E0C               	movlw	12
  1570  001F08  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1571  001F0A  0E01               	movlw	1
  1572  001F0C  ECB2  F017         	call	_Lcd_Set_Cursor
  1573                           
  1574                           ;main.c: 117: Lcd_Write_String(str_V);
  1575  001F10  0E84               	movlw	low main@str_V
  1576  001F12  6E08               	movwf	Lcd_Write_String@a,c
  1577  001F14  0E00               	movlw	high main@str_V
  1578  001F16  6E09               	movwf	Lcd_Write_String@a+1,c
  1579  001F18  EC25  F016         	call	_Lcd_Write_String	;wreg free
  1580                           
  1581                           ;main.c: 118: Lcd_Write_String(" V");
  1582  001F1C  0E8E               	movlw	low STR_8
  1583  001F1E  6E08               	movwf	Lcd_Write_String@a,c
  1584  001F20  0E10               	movlw	high STR_8
  1585  001F22  6E09               	movwf	Lcd_Write_String@a+1,c
  1586  001F24  EC25  F016         	call	_Lcd_Write_String	;wreg free
  1587                           
  1588                           ;main.c: 119: port=0;
  1589  001F28  0E00               	movlw	0
  1590  001F2A  0100               	movlb	0	; () banked
  1591  001F2C  6F9D               	movwf	(main@port+1)& (0+255),b
  1592  001F2E  0E00               	movlw	0
  1593  001F30  6F9C               	movwf	main@port& (0+255),b
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;main.c: 120: _delay((unsigned long)((100)*(64000000/4000.0)));
  1597  001F32  0E09               	movlw	9
  1598  001F34  6E4E               	movwf	(??_main+1)& (0+255),c
  1599  001F36  0E1E               	movlw	30
  1600  001F38  6E4D               	movwf	??_main& (0+255),c
  1601  001F3A  0EE4               	movlw	228
  1602  001F3C                     u3047:
  1603  001F3C  2EE8               	decfsz	wreg,f,c
  1604  001F3E  D7FE               	bra	u3047
  1605  001F40  2E4D               	decfsz	??_main& (0+255),f,c
  1606  001F42  D7FC               	bra	u3047
  1607  001F44  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1608  001F46  D7FA               	bra	u3047
  1609  001F48  D000               	nop2	
  1610                           
  1611                           ;main.c: 121: ADRESH=0X00;
  1612  001F4A  0E00               	movlw	0
  1613  001F4C  6EC4               	movwf	4036,c	;volatile
  1614                           
  1615                           ;main.c: 122: _delay((unsigned long)((100)*(64000000/4000.0)));
  1616  001F4E  0E09               	movlw	9
  1617  001F50  6E4E               	movwf	(??_main+1)& (0+255),c
  1618  001F52  0E1E               	movlw	30
  1619  001F54  6E4D               	movwf	??_main& (0+255),c
  1620  001F56  0EE4               	movlw	228
  1621  001F58                     u3057:
  1622  001F58  2EE8               	decfsz	wreg,f,c
  1623  001F5A  D7FE               	bra	u3057
  1624  001F5C  2E4D               	decfsz	??_main& (0+255),f,c
  1625  001F5E  D7FC               	bra	u3057
  1626  001F60  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1627  001F62  D7FA               	bra	u3057
  1628  001F64  D000               	nop2	
  1629                           
  1630                           ;main.c: 123: }
  1631                           ;main.c: 125: Power=Uout*Iout;
  1632  001F66  C095  F015         	movff	main@Uout,___ftmul@f1
  1633  001F6A  C096  F016         	movff	main@Uout+1,___ftmul@f1+1
  1634  001F6E  C097  F017         	movff	main@Uout+2,___ftmul@f1+2
  1635  001F72  C092  F018         	movff	main@Iout,___ftmul@f2
  1636  001F76  C093  F019         	movff	main@Iout+1,___ftmul@f2+1
  1637  001F7A  C094  F01A         	movff	main@Iout+2,___ftmul@f2+2
  1638  001F7E  EC6E  F013         	call	___ftmul	;wreg free
  1639  001F82  C015  F077         	movff	?___ftmul,main@Power
  1640  001F86  C016  F078         	movff	?___ftmul+1,main@Power+1
  1641  001F8A  C017  F079         	movff	?___ftmul+2,main@Power+2
  1642  001F8E  D63C               	goto	l61
  1643  001F90                     __end_of_main:
  1644                           	opt stack 0
  1645                           tblptru	equ	0xFF8
  1646                           tblptrh	equ	0xFF7
  1647                           tblptrl	equ	0xFF6
  1648                           tablat	equ	0xFF5
  1649                           postinc0	equ	0xFEE
  1650                           wreg	equ	0xFE8
  1651                           
  1652 ;; *************** function _sprintf *****************
  1653 ;; Defined at:
  1654 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1657 ;;		 -> main@str_A(8), main@str_V(8), 
  1658 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1659 ;;		 -> STR_7(5), STR_4(5), STR_2(5), 
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;  tmpval          4   13[BANK0 ] struct .
  1662 ;;  val             4    7[BANK0 ] unsigned long 
  1663 ;;  fval            3   19[BANK0 ] unsigned long 
  1664 ;;  cp              3    0        PTR const unsigned char 
  1665 ;;  prec            2   17[BANK0 ] int 
  1666 ;;  exp             2   11[BANK0 ] int 
  1667 ;;  flag            2    5[BANK0 ] unsigned short 
  1668 ;;  ap              2    3[BANK0 ] PTR void [1]
  1669 ;;		 -> ?_sprintf(2), 
  1670 ;;  len             2    0        unsigned int 
  1671 ;;  width           2    0        int 
  1672 ;;  c               1   22[BANK0 ] char 
  1673 ;;  d               1    0        unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  2   63[COMRAM] int 
  1676 ;; Registers used:
  1677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1683 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;      Totals:        13      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;Total ram usage:       36 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    3
  1690 ;; This function calls:
  1691 ;;		___awdiv
  1692 ;;		___ftadd
  1693 ;;		___ftge
  1694 ;;		___ftmul
  1695 ;;		___ftneg
  1696 ;;		___ftsub
  1697 ;;		___fttol
  1698 ;;		___lldiv
  1699 ;;		___llmod
  1700 ;;		___lltoft
  1701 ;;		___wmul
  1702 ;;		__div_to_l_
  1703 ;;		__tdiv_to_l_
  1704 ;;		_fround
  1705 ;;		_isdigit
  1706 ;;		_scale
  1707 ;; This function is called by:
  1708 ;;		_main
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text1
  1713  001092                     __ptext1:
  1714                           	opt stack 0
  1715  001092                     _sprintf:
  1716                           	opt stack 27
  1717                           
  1718                           ;doprnt.c: 494: va_list ap;
  1719                           ;doprnt.c: 499: signed char c;
  1720                           ;doprnt.c: 501: int width;
  1721                           ;doprnt.c: 504: int prec;
  1722                           ;doprnt.c: 508: unsigned short flag;
  1723                           ;doprnt.c: 515: char d;
  1724                           ;doprnt.c: 516: double fval;
  1725                           ;doprnt.c: 517: int exp;
  1726                           ;doprnt.c: 523: union {
  1727                           ;doprnt.c: 524: unsigned long vd;
  1728                           ;doprnt.c: 525: double integ;
  1729                           ;doprnt.c: 526: } tmpval;
  1730                           ;doprnt.c: 528: unsigned long val;
  1731                           ;doprnt.c: 529: unsigned len;
  1732                           ;doprnt.c: 530: const char * cp;
  1733                           ;doprnt.c: 533: *ap = __va_start();
  1734                           
  1735                           ;incstack = 0
  1736  001092  0E44               	movlw	low (?_sprintf+4)
  1737  001094  0100               	movlb	0	; () banked
  1738  001096  6F63               	movwf	sprintf@ap& (0+255),b
  1739  001098  0E00               	movlw	high (?_sprintf+4)
  1740  00109A  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  1741                           
  1742                           ;doprnt.c: 536: while(c = *f++) {
  1743  00109C  D36B               	goto	l432
  1744  00109E                     
  1745                           ; BSR set to: 0
  1746                           ;doprnt.c: 538: if(c != '%')
  1747                           
  1748                           ; BSR set to: 0
  1749  00109E  0E25               	movlw	37
  1750  0010A0  1976               	xorwf	sprintf@c& (0+255),w,b
  1751  0010A2  B4D8               	btfsc	status,2,c
  1752  0010A4  D007               	goto	l378
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;doprnt.c: 540: {
  1756                           ;doprnt.c: 541: ((*sp++ = (c)));
  1757  0010A6  C040  FFD9         	movff	sprintf@sp,fsr2l
  1758  0010AA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1759  0010AE  C076  FFDF         	movff	sprintf@c,indf2
  1760  0010B2  D35E               	goto	l3271
  1761  0010B4                     l378:
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;doprnt.c: 543: }
  1765                           ;doprnt.c: 548: flag = 0;
  1766                           
  1767                           ; BSR set to: 0
  1768  0010B4  0E00               	movlw	0
  1769  0010B6  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  1770  0010B8  0E00               	movlw	0
  1771  0010BA  6F65               	movwf	sprintf@flag& (0+255),b
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;doprnt.c: 611: if(*f == '.') {
  1775  0010BC  C042  FFF6         	movff	sprintf@f,tblptrl
  1776  0010C0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1777  0010C4                     	if	0	;tblptru may be non-zero
  1778  0010C4                     	endif
  1779  0010C4                     	if	0	;tblptru may be non-zero
  1780  0010C4                     	endif
  1781  0010C4  0008               	tblrd		*
  1782  0010C6  50F5               	movf	tablat,w,c
  1783  0010C8  0A2E               	xorlw	46
  1784  0010CA  A4D8               	btfss	status,2,c
  1785  0010CC  D02F               	goto	l379
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;doprnt.c: 612: flag |= 0x4000;
  1789  0010CE  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  1790                           
  1791                           ;doprnt.c: 613: f++;
  1792  0010D0  4A42               	infsnz	sprintf@f,f,c
  1793  0010D2  2A43               	incf	sprintf@f+1,f,c
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;doprnt.c: 620: {
  1797                           ;doprnt.c: 621: prec = 0;
  1798  0010D4  0E00               	movlw	0
  1799  0010D6  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1800  0010D8  0E00               	movlw	0
  1801  0010DA  6F71               	movwf	sprintf@prec& (0+255),b
  1802                           
  1803                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1804  0010DC  D01C               	goto	l380
  1805  0010DE                     
  1806                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1807                           
  1808                           ; BSR set to: 0
  1809  0010DE  C071  F00F         	movff	sprintf@prec,___wmul@multiplier
  1810  0010E2  C072  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1811  0010E6  0E00               	movlw	0
  1812  0010E8  6E12               	movwf	___wmul@multiplicand+1,c
  1813  0010EA  0E0A               	movlw	10
  1814  0010EC  6E11               	movwf	___wmul@multiplicand,c
  1815  0010EE  EC75  F018         	call	___wmul	;wreg free
  1816  0010F2  C042  FFF6         	movff	sprintf@f,tblptrl
  1817  0010F6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1818  0010FA                     	if	0	;tblptru may be non-zero
  1819  0010FA                     	endif
  1820  0010FA                     	if	0	;tblptru may be non-zero
  1821  0010FA                     	endif
  1822  0010FA  0008               	tblrd		*
  1823  0010FC  50F5               	movf	tablat,w,c
  1824  0010FE  260F               	addwf	?___wmul,f,c
  1825  001100  0E00               	movlw	0
  1826  001102  2210               	addwfc	?___wmul+1,f,c
  1827  001104  0ED0               	movlw	208
  1828  001106  240F               	addwf	?___wmul,w,c
  1829  001108  0100               	movlb	0	; () banked
  1830  00110A  6F71               	movwf	sprintf@prec& (0+255),b
  1831  00110C  0EFF               	movlw	255
  1832  00110E  2010               	addwfc	?___wmul+1,w,c
  1833  001110  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1834                           
  1835                           ; BSR set to: 0
  1836  001112  4A42               	infsnz	sprintf@f,f,c
  1837  001114  2A43               	incf	sprintf@f+1,f,c
  1838  001116                     l380:
  1839                           
  1840                           ; BSR set to: 0
  1841                           
  1842                           ; BSR set to: 0
  1843  001116  C042  FFF6         	movff	sprintf@f,tblptrl
  1844  00111A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1845  00111E                     	if	0	;tblptru may be non-zero
  1846  00111E                     	endif
  1847  00111E                     	if	0	;tblptru may be non-zero
  1848  00111E                     	endif
  1849  00111E  0008               	tblrd		*
  1850  001120  50F5               	movf	tablat,w,c
  1851  001122  ECAB  F018         	call	_isdigit
  1852  001126  A0D8               	btfss	status,0,c
  1853  001128  D00A               	goto	l384
  1854  00112A  D7D9               	goto	l381
  1855  00112C                     l379:
  1856                           
  1857                           ;doprnt.c: 626: prec = 0;
  1858  00112C  0E00               	movlw	0
  1859  00112E  0100               	movlb	0	; () banked
  1860  001130  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1861  001132  0E00               	movlw	0
  1862  001134  6F71               	movwf	sprintf@prec& (0+255),b
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;doprnt.c: 628: flag |= 0x1000;
  1866  001136  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;doprnt.c: 630: }
  1870                           ;doprnt.c: 635: switch(c = *f++) {
  1871  001138  D002               	goto	l384
  1872  00113A                     
  1873                           ; BSR set to: 0
  1874                           ;doprnt.c: 663: flag |= 0x400;
  1875                           
  1876                           ; BSR set to: 0
  1877  00113A  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  1878                           
  1879                           ;doprnt.c: 664: break;
  1880  00113C  D012               	goto	l388
  1881  00113E                     l384:
  1882                           
  1883                           ; BSR set to: 0
  1884  00113E  C042  FFF6         	movff	sprintf@f,tblptrl
  1885  001142  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1886  001146  4A42               	infsnz	sprintf@f,f,c
  1887  001148  2A43               	incf	sprintf@f+1,f,c
  1888  00114A                     	if	0	;tblptru may be non-zero
  1889  00114A                     	endif
  1890  00114A                     	if	0	;tblptru may be non-zero
  1891  00114A                     	endif
  1892  00114A  0008               	tblrd		*
  1893  00114C  CFF5 F076          	movff	tablat,sprintf@c
  1894  001150  0100               	movlb	0	; () banked
  1895  001152  5176               	movf	sprintf@c& (0+255),w,b
  1896                           
  1897                           ; Switch size 1, requested type "space"
  1898                           ; Number of cases is 2, Range of values is 0 to 102
  1899                           ; switch strategies available:
  1900                           ; Name         Instructions Cycles
  1901                           ; simple_byte            7     4 (average)
  1902                           ;	Chosen strategy is simple_byte
  1903  001154  0A00               	xorlw	0	; case 0
  1904  001156  B4D8               	btfsc	status,2,c
  1905  001158  D319               	goto	u2860
  1906  00115A  0A66               	xorlw	102	; case 102
  1907  00115C  B4D8               	btfsc	status,2,c
  1908  00115E  D7ED               	goto	l387
  1909  001160  D309               	goto	l432
  1910  001162                     l388:
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;doprnt.c: 825: if(flag & (0x700)) {
  1914                           
  1915                           ; BSR set to: 0
  1916  001162  0E07               	movlw	7
  1917  001164  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1918  001166  B4D8               	btfsc	status,2,c
  1919  001168  D2C9               	goto	l390
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;doprnt.c: 827: if(flag & 0x1000)
  1923  00116A  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  1924  00116C  D004               	goto	l391
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;doprnt.c: 829: prec = 6;
  1928  00116E  0E00               	movlw	0
  1929  001170  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1930  001172  0E06               	movlw	6
  1931  001174  6F71               	movwf	sprintf@prec& (0+255),b
  1932  001176                     l391:
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1936                           
  1937                           ; BSR set to: 0
  1938  001176  C063  FFD9         	movff	sprintf@ap,fsr2l
  1939  00117A  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1940  00117E  CFDE F073          	movff	postinc2,sprintf@fval
  1941  001182  CFDE F074          	movff	postinc2,sprintf@fval+1
  1942  001186  CFDD F075          	movff	postdec2,sprintf@fval+2
  1943                           
  1944                           ; BSR set to: 0
  1945  00118A  0E03               	movlw	3
  1946  00118C  2763               	addwf	sprintf@ap& (0+255),f,b
  1947  00118E  0E00               	movlw	0
  1948  001190  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;doprnt.c: 831: if(fval < 0.0) {
  1952  001192  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1953  001194  D011               	goto	l392
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;doprnt.c: 832: fval = -fval;
  1957  001196  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1958  00119A  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1959  00119E  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1960  0011A2  EC88  F018         	call	___ftneg	;wreg free
  1961  0011A6  C001  F073         	movff	?___ftneg,sprintf@fval
  1962  0011AA  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1963  0011AE  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1964                           
  1965                           ;doprnt.c: 833: flag |= 0x03;
  1966  0011B2  0E03               	movlw	3
  1967  0011B4  0100               	movlb	0	; () banked
  1968  0011B6  1365               	iorwf	sprintf@flag& (0+255),f,b
  1969  0011B8                     l392:
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;doprnt.c: 834: }
  1973                           ;doprnt.c: 835: exp = 0;
  1974                           
  1975                           ; BSR set to: 0
  1976  0011B8  0E00               	movlw	0
  1977  0011BA  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1978  0011BC  0E00               	movlw	0
  1979  0011BE  6F6B               	movwf	sprintf@exp& (0+255),b
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;doprnt.c: 836: if( fval!=0) {
  1983  0011C0  5173               	movf	sprintf@fval& (0+255),w,b
  1984  0011C2  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1985  0011C4  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1986  0011C6  B4D8               	btfsc	status,2,c
  1987  0011C8  D086               	goto	l397
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1991  0011CA  0E82               	movlw	130
  1992  0011CC  6E47               	movwf	??_sprintf& (0+255),c
  1993  0011CE  0EFF               	movlw	255
  1994  0011D0  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1995  0011D2  C073  F049         	movff	sprintf@fval,??_sprintf+2
  1996  0011D6  C074  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1997  0011DA  C075  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1998  0011DE  C076  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1999  0011E2  0E10               	movlw	16
  2000  0011E4  D005               	goto	u2610
  2001  0011E6                     u2615:
  2002  0011E6  90D8               	bcf	status,0,c
  2003  0011E8  324C               	rrcf	??_sprintf+5,f,c
  2004  0011EA  324B               	rrcf	??_sprintf+4,f,c
  2005  0011EC  324A               	rrcf	??_sprintf+3,f,c
  2006  0011EE  3249               	rrcf	??_sprintf+2,f,c
  2007  0011F0                     u2610:
  2008  0011F0  2EE8               	decfsz	wreg,f,c
  2009  0011F2  D7F9               	goto	u2615
  2010  0011F4  5049               	movf	??_sprintf+2,w,c
  2011  0011F6  2447               	addwf	??_sprintf,w,c
  2012  0011F8  6F6B               	movwf	sprintf@exp& (0+255),b
  2013  0011FA  0E00               	movlw	0
  2014  0011FC  2048               	addwfc	??_sprintf+1,w,c
  2015  0011FE  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;doprnt.c: 838: exp--;
  2019  001200  076B               	decf	sprintf@exp& (0+255),f,b
  2020  001202  A0D8               	btfss	status,0,c
  2021  001204  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;doprnt.c: 839: exp *= 3;
  2025  001206  C06B  F00F         	movff	sprintf@exp,___wmul@multiplier
  2026  00120A  C06C  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  2027  00120E  0E00               	movlw	0
  2028  001210  6E12               	movwf	___wmul@multiplicand+1,c
  2029  001212  0E03               	movlw	3
  2030  001214  6E11               	movwf	___wmul@multiplicand,c
  2031  001216  EC75  F018         	call	___wmul	;wreg free
  2032  00121A  C00F  F06B         	movff	?___wmul,sprintf@exp
  2033  00121E  C010  F06C         	movff	?___wmul+1,sprintf@exp+1
  2034                           
  2035                           ;doprnt.c: 840: exp /= 10;
  2036  001222  C06B  F007         	movff	sprintf@exp,___awdiv@dividend
  2037  001226  C06C  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2038  00122A  0E00               	movlw	0
  2039  00122C  6E0A               	movwf	___awdiv@divisor+1,c
  2040  00122E  0E0A               	movlw	10
  2041  001230  6E09               	movwf	___awdiv@divisor,c
  2042  001232  EC64  F015         	call	___awdiv	;wreg free
  2043  001236  C007  F06B         	movff	?___awdiv,sprintf@exp
  2044  00123A  C008  F06C         	movff	?___awdiv+1,sprintf@exp+1
  2045                           
  2046                           ;doprnt.c: 841: if(exp < 0)
  2047  00123E  0100               	movlb	0	; () banked
  2048  001240  AF6C               	btfss	(sprintf@exp+1)& (0+255),7,b
  2049  001242  D003               	goto	l394
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;doprnt.c: 842: exp--;
  2053  001244  076B               	decf	sprintf@exp& (0+255),f,b
  2054  001246  A0D8               	btfss	status,0,c
  2055  001248  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  2056  00124A                     l394:
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2060                           
  2061                           ; BSR set to: 0
  2062  00124A  516B               	movf	sprintf@exp& (0+255),w,b
  2063  00124C  0800               	sublw	0
  2064  00124E  ECCD  F00B         	call	_scale
  2065  001252  C024  F06D         	movff	?_scale,sprintf@tmpval
  2066  001256  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  2067  00125A  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  2068                           
  2069                           ;doprnt.c: 847: tmpval.integ *= fval;
  2070  00125E  C06D  F015         	movff	sprintf@tmpval,___ftmul@f1
  2071  001262  C06E  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2072  001266  C06F  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2073  00126A  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2074  00126E  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2075  001272  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2076  001276  EC6E  F013         	call	___ftmul	;wreg free
  2077  00127A  C015  F06D         	movff	?___ftmul,sprintf@tmpval
  2078  00127E  C016  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  2079  001282  C017  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  2080                           
  2081                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2082  001286  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  2083  00128A  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2084  00128E  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2085  001292  0E00               	movlw	0
  2086  001294  6E04               	movwf	___ftge@ff2,c
  2087  001296  0E80               	movlw	128
  2088  001298  6E05               	movwf	___ftge@ff2+1,c
  2089  00129A  0E3F               	movlw	63
  2090  00129C  6E06               	movwf	___ftge@ff2+2,c
  2091  00129E  EC1C  F015         	call	___ftge	;wreg free
  2092  0012A2  B0D8               	btfsc	status,0,c
  2093  0012A4  D005               	goto	l395
  2094                           
  2095                           ;doprnt.c: 849: exp--;
  2096  0012A6  0100               	movlb	0	; () banked
  2097  0012A8  076B               	decf	sprintf@exp& (0+255),f,b
  2098  0012AA  A0D8               	btfss	status,0,c
  2099  0012AC  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  2100  0012AE  D013               	goto	l397
  2101  0012B0                     l395:
  2102                           
  2103                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2104                           
  2105                           ; BSR set to: 0
  2106  0012B0  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  2107  0012B4  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2108  0012B8  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2109  0012BC  0E00               	movlw	0
  2110  0012BE  6E04               	movwf	___ftge@ff2,c
  2111  0012C0  0E20               	movlw	32
  2112  0012C2  6E05               	movwf	___ftge@ff2+1,c
  2113  0012C4  0E41               	movlw	65
  2114  0012C6  6E06               	movwf	___ftge@ff2+2,c
  2115  0012C8  EC1C  F015         	call	___ftge	;wreg free
  2116  0012CC  A0D8               	btfss	status,0,c
  2117  0012CE  D003               	goto	l397
  2118                           
  2119                           ;doprnt.c: 851: exp++;
  2120  0012D0  0100               	movlb	0	; () banked
  2121  0012D2  4B6B               	infsnz	sprintf@exp& (0+255),f,b
  2122  0012D4  2B6C               	incf	(sprintf@exp+1)& (0+255),f,b
  2123  0012D6                     l397:
  2124                           
  2125                           ;doprnt.c: 852: }
  2126                           ;doprnt.c: 1112: if(prec <= 12)
  2127                           
  2128                           ; BSR set to: 0
  2129                           
  2130                           ; BSR set to: 0
  2131                           
  2132                           ; BSR set to: 0
  2133  0012D6  0100               	movlb	0	; () banked
  2134  0012D8  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2135  0012DA  D006               	goto	u2650
  2136  0012DC  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2137  0012DE  E11B               	bnz	l3153
  2138  0012E0  0E0D               	movlw	13
  2139  0012E2  5D71               	subwf	sprintf@prec& (0+255),w,b
  2140  0012E4  B0D8               	btfsc	status,0,c
  2141  0012E6  D017               	goto	l398
  2142  0012E8                     u2650:
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;doprnt.c: 1113: fval += fround(prec);
  2146  0012E8  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  2147  0012EC  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  2148  0012F0  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  2149  0012F4  5171               	movf	sprintf@prec& (0+255),w,b
  2150  0012F6  ECC8  F00F         	call	_fround
  2151  0012FA  C024  F031         	movff	?_fround,___ftadd@f2
  2152  0012FE  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2153  001302  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2154  001306  ECF1  F010         	call	___ftadd	;wreg free
  2155  00130A  C02E  F073         	movff	?___ftadd,sprintf@fval
  2156  00130E  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  2157  001312  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  2158  001316                     l398:
  2159  001316                     l3153:
  2160                           
  2161                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2162  001316  0100               	movlb	0	; () banked
  2163  001318  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2164  00131A  D006               	goto	u2660
  2165  00131C  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  2166  00131E  E120               	bnz	l3161
  2167  001320  0E0A               	movlw	10
  2168  001322  5D6B               	subwf	sprintf@exp& (0+255),w,b
  2169  001324  B0D8               	btfsc	status,0,c
  2170  001326  D01C               	goto	u2690
  2171  001328                     u2660:
  2172                           
  2173                           ; BSR set to: 0
  2174  001328  5173               	movf	sprintf@fval& (0+255),w,b
  2175  00132A  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2176  00132C  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2177  00132E  B4D8               	btfsc	status,2,c
  2178  001330  D056               	goto	l399
  2179                           
  2180                           ; BSR set to: 0
  2181  001332  C073  F02B         	movff	sprintf@fval,___fttol@f1
  2182  001336  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2183  00133A  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2184  00133E  ECF4  F012         	call	___fttol	;wreg free
  2185  001342  502B               	movf	?___fttol,w,c
  2186  001344  102C               	iorwf	?___fttol+1,w,c
  2187  001346  102D               	iorwf	?___fttol+2,w,c
  2188  001348  102E               	iorwf	?___fttol+3,w,c
  2189  00134A  A4D8               	btfss	status,2,c
  2190  00134C  D048               	goto	l399
  2191  00134E  0100               	movlb	0	; () banked
  2192  001350  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2193  001352  D045               	goto	l399
  2194  001354  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  2195  001356  E104               	bnz	l3161
  2196  001358  0E02               	movlw	2
  2197  00135A  5D6B               	subwf	sprintf@exp& (0+255),w,b
  2198  00135C  A0D8               	btfss	status,0,c
  2199  00135E  D03F               	goto	l399
  2200  001360                     u2690:
  2201  001360                     l3161:
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2205  001360  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  2206  001364  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2207  001368  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2208  00136C  0E70               	movlw	112
  2209  00136E  6E04               	movwf	___ftge@ff2,c
  2210  001370  0E89               	movlw	137
  2211  001372  6E05               	movwf	___ftge@ff2+1,c
  2212  001374  0E40               	movlw	64
  2213  001376  6E06               	movwf	___ftge@ff2+2,c
  2214  001378  EC1C  F015         	call	___ftge	;wreg free
  2215  00137C  B0D8               	btfsc	status,0,c
  2216  00137E  D003               	goto	l402
  2217                           
  2218                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2219  001380  0100               	movlb	0	; () banked
  2220  001382  0EF7               	movlw	247
  2221  001384  D002               	goto	L1
  2222  001386                     l402:
  2223                           
  2224                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2225                           
  2226                           ; BSR set to: 0
  2227  001386  0100               	movlb	0	; () banked
  2228  001388  0EF8               	movlw	248
  2229  00138A                     L1:
  2230  00138A  276B               	addwf	sprintf@exp& (0+255),f,b
  2231  00138C  0EFF               	movlw	255
  2232  00138E  236C               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;doprnt.c: 1124: }
  2236                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2237                           
  2238                           ; BSR set to: 0
  2239  001390  516B               	movf	sprintf@exp& (0+255),w,b
  2240  001392  ECCD  F00B         	call	_scale
  2241  001396  C024  F06D         	movff	?_scale,sprintf@tmpval
  2242  00139A  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  2243  00139E  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  2244                           
  2245                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2246  0013A2  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2247  0013A6  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2248  0013AA  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2249  0013AE  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2250  0013B2  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2251  0013B6  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2252  0013BA  ECC7  F011         	call	__tdiv_to_l_	;wreg free
  2253  0013BE  C001  F067         	movff	?__tdiv_to_l_,sprintf@val
  2254  0013C2  C002  F068         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2255  0013C6  C003  F069         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2256  0013CA  C004  F06A         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2257                           
  2258                           ;doprnt.c: 1129: fval = 0.0;
  2259  0013CE  0E00               	movlw	0
  2260  0013D0  0100               	movlb	0	; () banked
  2261  0013D2  6F73               	movwf	sprintf@fval& (0+255),b
  2262  0013D4  0E00               	movlw	0
  2263  0013D6  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  2264  0013D8  0E00               	movlw	0
  2265  0013DA  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  2266                           
  2267                           ;doprnt.c: 1130: } else {
  2268  0013DC  D033               	goto	l408
  2269  0013DE                     l399:
  2270                           
  2271                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2272                           
  2273                           ; BSR set to: 0
  2274  0013DE  C073  F02B         	movff	sprintf@fval,___fttol@f1
  2275  0013E2  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2276  0013E6  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2277  0013EA  ECF4  F012         	call	___fttol	;wreg free
  2278  0013EE  C02B  F067         	movff	?___fttol,sprintf@val
  2279  0013F2  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  2280  0013F6  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  2281  0013FA  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  2282                           
  2283                           ;doprnt.c: 1132: fval -= (double)val;
  2284  0013FE  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  2285  001402  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2286  001406  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2287  00140A  C067  F009         	movff	sprintf@val,___lltoft@c
  2288  00140E  C068  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2289  001412  C069  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2290  001416  C06A  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2291  00141A  EC01  F017         	call	___lltoft	;wreg free
  2292  00141E  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2293  001422  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2294  001426  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2295  00142A  EC25  F018         	call	___ftsub	;wreg free
  2296  00142E  C03A  F073         	movff	?___ftsub,sprintf@fval
  2297  001432  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  2298  001436  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  2299                           
  2300                           ;doprnt.c: 1133: exp = 0;
  2301  00143A  0E00               	movlw	0
  2302  00143C  0100               	movlb	0	; () banked
  2303  00143E  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  2304  001440  0E00               	movlw	0
  2305  001442  6F6B               	movwf	sprintf@exp& (0+255),b
  2306  001444                     l408:
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;doprnt.c: 1134: }
  2310                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2311                           
  2312                           ; BSR set to: 0
  2313  001444  0E01               	movlw	1
  2314  001446  6F76               	movwf	sprintf@c& (0+255),b
  2315  001448                     l3181:
  2316                           
  2317                           ; BSR set to: 0
  2318  001448  0E0A               	movlw	10
  2319  00144A  1976               	xorwf	sprintf@c& (0+255),w,b
  2320  00144C  B4D8               	btfsc	status,2,c
  2321  00144E  D018               	goto	u2730
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;doprnt.c: 1137: if(val < dpowers[c])
  2325                           
  2326                           ; BSR set to: 0
  2327                           
  2328                           ; BSR set to: 0
  2329  001450  5176               	movf	sprintf@c& (0+255),w,b
  2330  001452  0D04               	mullw	4
  2331  001454  0E01               	movlw	low _dpowers
  2332  001456  24F3               	addwf	prodl,w,c
  2333  001458  6EF6               	movwf	tblptrl,c
  2334  00145A  0E10               	movlw	high _dpowers
  2335  00145C  20F4               	addwfc	prodh,w,c
  2336  00145E  6EF7               	movwf	tblptrh,c
  2337  001460                     	if	0	;There are less than 3 active tblptr bytes
  2338  001460                     	endif
  2339  001460  0009               	tblrd		*+
  2340  001462  50F5               	movf	tablat,w,c
  2341  001464  5D67               	subwf	sprintf@val& (0+255),w,b
  2342  001466  0009               	tblrd		*+
  2343  001468  50F5               	movf	tablat,w,c
  2344  00146A  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  2345  00146C  0009               	tblrd		*+
  2346  00146E  50F5               	movf	tablat,w,c
  2347  001470  5969               	subwfb	(sprintf@val+2)& (0+255),w,b
  2348  001472  0009               	tblrd		*+
  2349  001474  50F5               	movf	tablat,w,c
  2350  001476  596A               	subwfb	(sprintf@val+3)& (0+255),w,b
  2351  001478  A0D8               	btfss	status,0,c
  2352  00147A  D002               	goto	u2730
  2353                           
  2354                           ; BSR set to: 0
  2355                           
  2356                           ; BSR set to: 0
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;doprnt.c: 1138: break;
  2360  00147C  2B76               	incf	sprintf@c& (0+255),f,b
  2361  00147E  D7E4               	goto	l3181
  2362  001480                     u2730:
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;doprnt.c: 1175: {
  2366                           ;doprnt.c: 1188: if(flag & 0x03)
  2367                           
  2368                           ; BSR set to: 0
  2369  001480  0E03               	movlw	3
  2370  001482  1565               	andwf	sprintf@flag& (0+255),w,b
  2371  001484  6E47               	movwf	??_sprintf& (0+255),c
  2372  001486  0E00               	movlw	0
  2373  001488  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2374  00148A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2375  00148C  5047               	movf	??_sprintf,w,c
  2376  00148E  1048               	iorwf	??_sprintf+1,w,c
  2377  001490  B4D8               	btfsc	status,2,c
  2378  001492  D050               	goto	l413
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2382  001494  C040  FFD9         	movff	sprintf@sp,fsr2l
  2383  001498  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2384  00149C  0E2D               	movlw	45
  2385  00149E  D047               	goto	L2
  2386  0014A0                     
  2387                           ; BSR set to: 0
  2388                           ;doprnt.c: 1200: {
  2389                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2390                           
  2391                           ; BSR set to: 0
  2392  0014A0  C067  F001         	movff	sprintf@val,___lldiv@dividend
  2393  0014A4  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2394  0014A8  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2395  0014AC  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2396  0014B0  5176               	movf	sprintf@c& (0+255),w,b
  2397  0014B2  0D04               	mullw	4
  2398  0014B4  0E01               	movlw	low _dpowers
  2399  0014B6  24F3               	addwf	prodl,w,c
  2400  0014B8  6EF6               	movwf	tblptrl,c
  2401  0014BA  0E10               	movlw	high _dpowers
  2402  0014BC  20F4               	addwfc	prodh,w,c
  2403  0014BE  6EF7               	movwf	tblptrh,c
  2404  0014C0                     	if	0	;There are less than 3 active tblptr bytes
  2405  0014C0                     	endif
  2406  0014C0  0009               	tblrd		*+
  2407  0014C2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2408  0014C6  0009               	tblrd		*+
  2409  0014C8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2410  0014CC  0009               	tblrd		*+
  2411  0014CE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2412  0014D2  000A               	tblrd		*-
  2413  0014D4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2414  0014D8  ECA6  F015         	call	___lldiv	;wreg free
  2415  0014DC  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2416  0014E0  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2417  0014E4  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2418  0014E8  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2419                           
  2420                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2421  0014EC  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2422  0014F0  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2423  0014F4  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2424  0014F8  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2425  0014FC  0E0A               	movlw	10
  2426  0014FE  6E05               	movwf	___llmod@divisor,c
  2427  001500  0E00               	movlw	0
  2428  001502  6E06               	movwf	___llmod@divisor+1,c
  2429  001504  0E00               	movlw	0
  2430  001506  6E07               	movwf	___llmod@divisor+2,c
  2431  001508  0E00               	movlw	0
  2432  00150A  6E08               	movwf	___llmod@divisor+3,c
  2433  00150C  ECCE  F016         	call	___llmod	;wreg free
  2434  001510  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2435  001514  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2436  001518  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2437  00151C  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2438                           
  2439                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2440  001520  0100               	movlb	0	; () banked
  2441  001522  516D               	movf	sprintf@tmpval& (0+255),w,b
  2442  001524  0F30               	addlw	48
  2443  001526  C040  FFD9         	movff	sprintf@sp,fsr2l
  2444  00152A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2445  00152E                     L2:
  2446  00152E  6EDF               	movwf	indf2,c
  2447                           
  2448                           ; BSR set to: 0
  2449  001530  4A40               	infsnz	sprintf@sp,f,c
  2450  001532  2A41               	incf	sprintf@sp+1,f,c
  2451  001534                     l413:
  2452                           
  2453                           ; BSR set to: 0
  2454                           
  2455                           ; BSR set to: 0
  2456  001534  0776               	decf	sprintf@c& (0+255),f,b
  2457  001536  2976               	incf	sprintf@c& (0+255),w,b
  2458  001538  B4D8               	btfsc	status,2,c
  2459  00153A  D00C               	goto	l416
  2460  00153C  D7B1               	goto	l414
  2461  00153E                     l3209:
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2465  00153E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2466  001542  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2467  001546  0E30               	movlw	48
  2468  001548  6EDF               	movwf	indf2,c
  2469                           
  2470                           ; BSR set to: 0
  2471  00154A  4A40               	infsnz	sprintf@sp,f,c
  2472  00154C  2A41               	incf	sprintf@sp+1,f,c
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;doprnt.c: 1209: exp--;
  2476  00154E  076B               	decf	sprintf@exp& (0+255),f,b
  2477  001550  A0D8               	btfss	status,0,c
  2478  001552  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  2479  001554                     l416:
  2480                           
  2481                           ; BSR set to: 0
  2482                           
  2483                           ; BSR set to: 0
  2484  001554  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2485  001556  D005               	goto	u2760
  2486  001558  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  2487  00155A  E1F1               	bnz	l3209
  2488  00155C  056B               	decf	sprintf@exp& (0+255),w,b
  2489  00155E  B0D8               	btfsc	status,0,c
  2490  001560  D7EE               	goto	l417
  2491  001562                     u2760:
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;doprnt.c: 1210: }
  2495                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2496                           
  2497                           ; BSR set to: 0
  2498  001562  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2499  001564  D009               	goto	l419
  2500  001566  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2501  001568  E104               	bnz	u2770
  2502  00156A  0E09               	movlw	9
  2503  00156C  5D71               	subwf	sprintf@prec& (0+255),w,b
  2504  00156E  A0D8               	btfss	status,0,c
  2505  001570  D003               	goto	l419
  2506  001572                     u2770:
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2510  001572  0E08               	movlw	8
  2511  001574  6F76               	movwf	sprintf@c& (0+255),b
  2512  001576  D002               	goto	l420
  2513  001578                     l419:
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;doprnt.c: 1213: else
  2517                           ;doprnt.c: 1214: c = prec;
  2518  001578  C071  F076         	movff	sprintf@prec,sprintf@c
  2519  00157C                     l420:
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;doprnt.c: 1215: prec -= c;
  2523                           
  2524                           ; BSR set to: 0
  2525  00157C  5176               	movf	sprintf@c& (0+255),w,b
  2526  00157E  5F71               	subwf	sprintf@prec& (0+255),f,b
  2527  001580  0E00               	movlw	0
  2528  001582  BF76               	btfsc	sprintf@c& (0+255),7,b
  2529  001584  0EFF               	movlw	255
  2530  001586  5B72               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;doprnt.c: 1219: if(c)
  2534  001588  5176               	movf	sprintf@c& (0+255),w,b
  2535  00158A  B4D8               	btfsc	status,2,c
  2536  00158C  D008               	goto	l421
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2540  00158E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2541  001592  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2542  001596  0E2E               	movlw	46
  2543  001598  6EDF               	movwf	indf2,c
  2544                           
  2545                           ; BSR set to: 0
  2546  00159A  4A40               	infsnz	sprintf@sp,f,c
  2547  00159C  2A41               	incf	sprintf@sp+1,f,c
  2548  00159E                     l421:
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2552                           
  2553                           ; BSR set to: 0
  2554  00159E  5176               	movf	sprintf@c& (0+255),w,b
  2555  0015A0  ECCD  F00B         	call	_scale
  2556  0015A4  C024  F060         	movff	?_scale,_sprintf$1504
  2557  0015A8  C025  F061         	movff	?_scale+1,_sprintf$1504+1
  2558  0015AC  C026  F062         	movff	?_scale+2,_sprintf$1504+2
  2559                           
  2560                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2561  0015B0  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2562  0015B4  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2563  0015B8  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2564  0015BC  C060  F015         	movff	_sprintf$1504,___ftmul@f1
  2565  0015C0  C061  F016         	movff	_sprintf$1504+1,___ftmul@f1+1
  2566  0015C4  C062  F017         	movff	_sprintf$1504+2,___ftmul@f1+2
  2567  0015C8  EC6E  F013         	call	___ftmul	;wreg free
  2568  0015CC  C015  F02B         	movff	?___ftmul,___fttol@f1
  2569  0015D0  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2570  0015D4  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2571  0015D8  ECF4  F012         	call	___fttol	;wreg free
  2572  0015DC  C02B  F067         	movff	?___fttol,sprintf@val
  2573  0015E0  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  2574  0015E4  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  2575  0015E8  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  2576                           
  2577                           ;doprnt.c: 1228: while(c--) {
  2578  0015EC  D071               	goto	l422
  2579  0015EE                     
  2580                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2581  0015EE  C067  F001         	movff	sprintf@val,___lldiv@dividend
  2582  0015F2  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2583  0015F6  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2584  0015FA  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2585  0015FE  0100               	movlb	0	; () banked
  2586  001600  5176               	movf	sprintf@c& (0+255),w,b
  2587  001602  0D04               	mullw	4
  2588  001604  0E01               	movlw	low _dpowers
  2589  001606  24F3               	addwf	prodl,w,c
  2590  001608  6EF6               	movwf	tblptrl,c
  2591  00160A  0E10               	movlw	high _dpowers
  2592  00160C  20F4               	addwfc	prodh,w,c
  2593  00160E  6EF7               	movwf	tblptrh,c
  2594  001610                     	if	0	;There are less than 3 active tblptr bytes
  2595  001610                     	endif
  2596  001610  0009               	tblrd		*+
  2597  001612  CFF5 F005          	movff	tablat,___lldiv@divisor
  2598  001616  0009               	tblrd		*+
  2599  001618  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2600  00161C  0009               	tblrd		*+
  2601  00161E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2602  001622  000A               	tblrd		*-
  2603  001624  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2604  001628  ECA6  F015         	call	___lldiv	;wreg free
  2605  00162C  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2606  001630  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2607  001634  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2608  001638  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2609                           
  2610                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2611  00163C  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2612  001640  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2613  001644  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2614  001648  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2615  00164C  0E0A               	movlw	10
  2616  00164E  6E05               	movwf	___llmod@divisor,c
  2617  001650  0E00               	movlw	0
  2618  001652  6E06               	movwf	___llmod@divisor+1,c
  2619  001654  0E00               	movlw	0
  2620  001656  6E07               	movwf	___llmod@divisor+2,c
  2621  001658  0E00               	movlw	0
  2622  00165A  6E08               	movwf	___llmod@divisor+3,c
  2623  00165C  ECCE  F016         	call	___llmod	;wreg free
  2624  001660  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2625  001664  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2626  001668  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2627  00166C  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2628                           
  2629                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2630  001670  0100               	movlb	0	; () banked
  2631  001672  516D               	movf	sprintf@tmpval& (0+255),w,b
  2632  001674  0F30               	addlw	48
  2633  001676  C040  FFD9         	movff	sprintf@sp,fsr2l
  2634  00167A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2635  00167E  6EDF               	movwf	indf2,c
  2636                           
  2637                           ; BSR set to: 0
  2638  001680  4A40               	infsnz	sprintf@sp,f,c
  2639  001682  2A41               	incf	sprintf@sp+1,f,c
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;doprnt.c: 1232: val %= dpowers[c];
  2643  001684  C067  F001         	movff	sprintf@val,___llmod@dividend
  2644  001688  C068  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2645  00168C  C069  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2646  001690  C06A  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2647  001694  5176               	movf	sprintf@c& (0+255),w,b
  2648  001696  0D04               	mullw	4
  2649  001698  0E01               	movlw	low _dpowers
  2650  00169A  24F3               	addwf	prodl,w,c
  2651  00169C  6EF6               	movwf	tblptrl,c
  2652  00169E  0E10               	movlw	high _dpowers
  2653  0016A0  20F4               	addwfc	prodh,w,c
  2654  0016A2  6EF7               	movwf	tblptrh,c
  2655  0016A4                     	if	0	;There are less than 3 active tblptr bytes
  2656  0016A4                     	endif
  2657  0016A4  0009               	tblrd		*+
  2658  0016A6  CFF5 F005          	movff	tablat,___llmod@divisor
  2659  0016AA  0009               	tblrd		*+
  2660  0016AC  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2661  0016B0  0009               	tblrd		*+
  2662  0016B2  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2663  0016B6  000A               	tblrd		*-
  2664  0016B8  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2665  0016BC  ECCE  F016         	call	___llmod	;wreg free
  2666  0016C0  C001  F067         	movff	?___llmod,sprintf@val
  2667  0016C4  C002  F068         	movff	?___llmod+1,sprintf@val+1
  2668  0016C8  C003  F069         	movff	?___llmod+2,sprintf@val+2
  2669  0016CC  C004  F06A         	movff	?___llmod+3,sprintf@val+3
  2670  0016D0                     l422:
  2671  0016D0  0100               	movlb	0	; () banked
  2672  0016D2  0776               	decf	sprintf@c& (0+255),f,b
  2673  0016D4  2976               	incf	sprintf@c& (0+255),w,b
  2674  0016D6  B4D8               	btfsc	status,2,c
  2675  0016D8  D00C               	goto	l425
  2676  0016DA  D789               	goto	l423
  2677  0016DC                     
  2678                           ; BSR set to: 0
  2679                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2680                           
  2681                           ; BSR set to: 0
  2682  0016DC  C040  FFD9         	movff	sprintf@sp,fsr2l
  2683  0016E0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2684  0016E4  0E30               	movlw	48
  2685  0016E6  6EDF               	movwf	indf2,c
  2686                           
  2687                           ; BSR set to: 0
  2688  0016E8  4A40               	infsnz	sprintf@sp,f,c
  2689  0016EA  2A41               	incf	sprintf@sp+1,f,c
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;doprnt.c: 1237: prec--;
  2693  0016EC  0771               	decf	sprintf@prec& (0+255),f,b
  2694  0016EE  A0D8               	btfss	status,0,c
  2695  0016F0  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2696  0016F2                     l425:
  2697                           
  2698                           ; BSR set to: 0
  2699                           
  2700                           ; BSR set to: 0
  2701  0016F2  5171               	movf	sprintf@prec& (0+255),w,b
  2702  0016F4  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2703  0016F6  B4D8               	btfsc	status,2,c
  2704  0016F8  D03D               	goto	l432
  2705  0016FA  D7F0               	goto	l426
  2706  0016FC                     l390:
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;doprnt.c: 1246: }
  2710                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2711                           
  2712                           ; BSR set to: 0
  2713  0016FC  5171               	movf	sprintf@prec& (0+255),w,b
  2714  0016FE  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2715  001700  A4D8               	btfss	status,2,c
  2716  001702  D008               	goto	l428
  2717                           
  2718                           ; BSR set to: 0
  2719  001704  5167               	movf	sprintf@val& (0+255),w,b
  2720  001706  1168               	iorwf	(sprintf@val+1)& (0+255),w,b
  2721  001708  1169               	iorwf	(sprintf@val+2)& (0+255),w,b
  2722  00170A  116A               	iorwf	(sprintf@val+3)& (0+255),w,b
  2723  00170C  A4D8               	btfss	status,2,c
  2724  00170E  D002               	goto	l428
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;doprnt.c: 1291: prec++;
  2728  001710  4B71               	infsnz	sprintf@prec& (0+255),f,b
  2729  001712  2B72               	incf	(sprintf@prec+1)& (0+255),f,b
  2730  001714                     l428:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;doprnt.c: 1339: if(c < prec)
  2734                           
  2735                           ; BSR set to: 0
  2736  001714  0E80               	movlw	128
  2737  001716  BF76               	btfsc	sprintf@c& (0+255),7,b
  2738  001718  0E7F               	movlw	127
  2739  00171A  6E47               	movwf	??_sprintf& (0+255),c
  2740  00171C  5171               	movf	sprintf@prec& (0+255),w,b
  2741  00171E  5D76               	subwf	sprintf@c& (0+255),w,b
  2742  001720  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2743  001722  0A80               	xorlw	128
  2744  001724  5847               	subwfb	??_sprintf& (0+255),w,c
  2745  001726  B0D8               	btfsc	status,0,c
  2746  001728  D003               	goto	l429
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;doprnt.c: 1340: c = prec;
  2750  00172A  C071  F076         	movff	sprintf@prec,sprintf@c
  2751  00172E  D010               	goto	l431
  2752  001730                     l429:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;doprnt.c: 1341: else if(prec < c)
  2756                           
  2757                           ; BSR set to: 0
  2758  001730  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2759  001732  0A80               	xorlw	128
  2760  001734  6E47               	movwf	??_sprintf& (0+255),c
  2761  001736  5176               	movf	sprintf@c& (0+255),w,b
  2762  001738  5D71               	subwf	sprintf@prec& (0+255),w,b
  2763  00173A  0E80               	movlw	128
  2764  00173C  BF76               	btfsc	sprintf@c& (0+255),7,b
  2765  00173E  0E7F               	movlw	127
  2766  001740  5847               	subwfb	??_sprintf& (0+255),w,c
  2767  001742  B0D8               	btfsc	status,0,c
  2768  001744  D005               	goto	l431
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;doprnt.c: 1342: prec = c;
  2772  001746  5176               	movf	sprintf@c& (0+255),w,b
  2773  001748  6F71               	movwf	sprintf@prec& (0+255),b
  2774  00174A  6B72               	clrf	(sprintf@prec+1)& (0+255),b
  2775  00174C  BF71               	btfsc	sprintf@prec& (0+255),7,b
  2776  00174E  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2777  001750                     l431:
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;doprnt.c: 1422: {
  2781                           ;doprnt.c: 1438: if(flag & 0x03)
  2782                           
  2783                           ; BSR set to: 0
  2784                           
  2785                           ; BSR set to: 0
  2786  001750  0E03               	movlw	3
  2787  001752  1565               	andwf	sprintf@flag& (0+255),w,b
  2788  001754  6E47               	movwf	??_sprintf& (0+255),c
  2789  001756  0E00               	movlw	0
  2790  001758  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2791  00175A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2792  00175C  5047               	movf	??_sprintf,w,c
  2793  00175E  1048               	iorwf	??_sprintf+1,w,c
  2794  001760  B4D8               	btfsc	status,2,c
  2795  001762  D008               	goto	l432
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2799  001764  C040  FFD9         	movff	sprintf@sp,fsr2l
  2800  001768  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2801  00176C  0E2D               	movlw	45
  2802  00176E  6EDF               	movwf	indf2,c
  2803  001770                     l3271:
  2804                           
  2805                           ; BSR set to: 0
  2806  001770  4A40               	infsnz	sprintf@sp,f,c
  2807  001772  2A41               	incf	sprintf@sp+1,f,c
  2808  001774                     l432:
  2809                           
  2810                           ; BSR set to: 0
  2811                           
  2812                           ; BSR set to: 0
  2813                           
  2814                           ; BSR set to: 0
  2815  001774  C042  FFF6         	movff	sprintf@f,tblptrl
  2816  001778  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2817  00177C  4A42               	infsnz	sprintf@f,f,c
  2818  00177E  2A43               	incf	sprintf@f+1,f,c
  2819  001780                     	if	0	;tblptru may be non-zero
  2820  001780                     	endif
  2821  001780                     	if	0	;tblptru may be non-zero
  2822  001780                     	endif
  2823  001780  0008               	tblrd		*
  2824  001782  CFF5 F076          	movff	tablat,sprintf@c
  2825  001786  5176               	movf	sprintf@c& (0+255),w,b
  2826  001788  A4D8               	btfss	status,2,c
  2827  00178A  D489               	goto	l377
  2828  00178C                     u2860:
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;doprnt.c: 1538: *sp = 0;
  2832                           
  2833                           ; BSR set to: 0
  2834                           
  2835                           ;doprnt.c: 1469: }
  2836                           ;doprnt.c: 1533: }
  2837                           ;doprnt.c: 1535: alldone:
  2838                           
  2839                           ; BSR set to: 0
  2840  00178C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2841  001790  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2842  001794  0E00               	movlw	0
  2843  001796  6EDF               	movwf	indf2,c
  2844  001798  0012               	return	
  2845  00179A                     __end_of_sprintf:
  2846                           	opt stack 0
  2847                           tblptru	equ	0xFF8
  2848                           tblptrh	equ	0xFF7
  2849                           tblptrl	equ	0xFF6
  2850                           tablat	equ	0xFF5
  2851                           prodh	equ	0xFF4
  2852                           prodl	equ	0xFF3
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           indf2	equ	0xFDF
  2856                           postinc2	equ	0xFDE
  2857                           postdec2	equ	0xFDD
  2858                           fsr2h	equ	0xFDA
  2859                           fsr2l	equ	0xFD9
  2860                           status	equ	0xFD8
  2861                           
  2862 ;; *************** function _scale *****************
  2863 ;; Defined at:
  2864 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  scl             1    wreg     char 
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;  scl             1   41[COMRAM] char 
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  3   35[COMRAM] char 
  2871 ;; Registers used:
  2872 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2878 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;Total ram usage:        7 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; Hardware stack levels required when called:    2
  2885 ;; This function calls:
  2886 ;;		___awdiv
  2887 ;;		___awmod
  2888 ;;		___ftmul
  2889 ;;		___wmul
  2890 ;; This function is called by:
  2891 ;;		_sprintf
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text2
  2896  00179A                     __ptext2:
  2897                           	opt stack 0
  2898  00179A                     _scale:
  2899                           	opt stack 27
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;incstack = 0
  2903                           ;scale@scl stored from wreg
  2904  00179A  6E2A               	movwf	scale@scl,c
  2905                           
  2906                           ;doprnt.c: 428: if(scl < 0) {
  2907  00179C  AE2A               	btfss	scale@scl,7,c
  2908  00179E  D101               	goto	l366
  2909                           
  2910                           ;doprnt.c: 429: scl = -scl;
  2911  0017A0  6C2A               	negf	scale@scl,c
  2912                           
  2913                           ;doprnt.c: 430: if(scl>=110)
  2914  0017A2  502A               	movf	scale@scl,w,c
  2915  0017A4  0A80               	xorlw	128
  2916  0017A6  0F12               	addlw	-238
  2917  0017A8  A0D8               	btfss	status,0,c
  2918  0017AA  D091               	goto	l367
  2919                           
  2920                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2921  0017AC  0E00               	movlw	0
  2922  0017AE  6E12               	movwf	___wmul@multiplicand+1,c
  2923  0017B0  0E03               	movlw	3
  2924  0017B2  6E11               	movwf	___wmul@multiplicand,c
  2925  0017B4  0E00               	movlw	0
  2926  0017B6  6E0A               	movwf	___awdiv@divisor+1,c
  2927  0017B8  0E0A               	movlw	10
  2928  0017BA  6E09               	movwf	___awdiv@divisor,c
  2929  0017BC  0E00               	movlw	0
  2930  0017BE  6E04               	movwf	___awmod@divisor+1,c
  2931  0017C0  0E64               	movlw	100
  2932  0017C2  6E03               	movwf	___awmod@divisor,c
  2933  0017C4  502A               	movf	scale@scl,w,c
  2934  0017C6  6E01               	movwf	___awmod@dividend,c
  2935  0017C8  6A02               	clrf	___awmod@dividend+1,c
  2936  0017CA  BE01               	btfsc	___awmod@dividend,7,c
  2937  0017CC  0602               	decf	___awmod@dividend+1,f,c
  2938  0017CE  EC60  F016         	call	___awmod	;wreg free
  2939  0017D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2940  0017D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2941  0017DA  EC64  F015         	call	___awdiv	;wreg free
  2942  0017DE  0E09               	movlw	9
  2943  0017E0  2407               	addwf	?___awdiv,w,c
  2944  0017E2  6E0F               	movwf	___wmul@multiplier,c
  2945  0017E4  0E00               	movlw	0
  2946  0017E6  2008               	addwfc	?___awdiv+1,w,c
  2947  0017E8  6E10               	movwf	___wmul@multiplier+1,c
  2948  0017EA  EC75  F018         	call	___wmul	;wreg free
  2949  0017EE  0E50               	movlw	low __npowers_
  2950  0017F0  240F               	addwf	?___wmul,w,c
  2951  0017F2  6EF6               	movwf	tblptrl,c
  2952  0017F4  0E10               	movlw	high __npowers_
  2953  0017F6  2010               	addwfc	?___wmul+1,w,c
  2954  0017F8  6EF7               	movwf	tblptrh,c
  2955  0017FA                     	if	0	;There are less than 3 active tblptr bytes
  2956  0017FA                     	endif
  2957  0017FA  0009               	tblrd		*+
  2958  0017FC  CFF5 F018          	movff	tablat,___ftmul@f2
  2959  001800  0009               	tblrd		*+
  2960  001802  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2961  001806  000A               	tblrd		*-
  2962  001808  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2963  00180C  0E00               	movlw	0
  2964  00180E  6E0A               	movwf	___awdiv@divisor+1,c
  2965  001810  0E64               	movlw	100
  2966  001812  6E09               	movwf	___awdiv@divisor,c
  2967  001814  502A               	movf	scale@scl,w,c
  2968  001816  6E07               	movwf	___awdiv@dividend,c
  2969  001818  6A08               	clrf	___awdiv@dividend+1,c
  2970  00181A  BE07               	btfsc	___awdiv@dividend,7,c
  2971  00181C  0608               	decf	___awdiv@dividend+1,f,c
  2972  00181E  EC64  F015         	call	___awdiv	;wreg free
  2973  001822  0E12               	movlw	18
  2974  001824  2407               	addwf	?___awdiv,w,c
  2975  001826  6E0F               	movwf	___wmul@multiplier,c
  2976  001828  0E00               	movlw	0
  2977  00182A  2008               	addwfc	?___awdiv+1,w,c
  2978  00182C  6E10               	movwf	___wmul@multiplier+1,c
  2979  00182E  0E00               	movlw	0
  2980  001830  6E12               	movwf	___wmul@multiplicand+1,c
  2981  001832  0E03               	movlw	3
  2982  001834  6E11               	movwf	___wmul@multiplicand,c
  2983  001836  EC75  F018         	call	___wmul	;wreg free
  2984  00183A  0E50               	movlw	low __npowers_
  2985  00183C  240F               	addwf	?___wmul,w,c
  2986  00183E  6EF6               	movwf	tblptrl,c
  2987  001840  0E10               	movlw	high __npowers_
  2988  001842  2010               	addwfc	?___wmul+1,w,c
  2989  001844  6EF7               	movwf	tblptrh,c
  2990  001846                     	if	0	;There are less than 3 active tblptr bytes
  2991  001846                     	endif
  2992  001846  0009               	tblrd		*+
  2993  001848  CFF5 F015          	movff	tablat,___ftmul@f1
  2994  00184C  0009               	tblrd		*+
  2995  00184E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2996  001852  000A               	tblrd		*-
  2997  001854  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2998  001858  EC6E  F013         	call	___ftmul	;wreg free
  2999  00185C  C015  F027         	movff	?___ftmul,_scale$1503
  3000  001860  C016  F028         	movff	?___ftmul+1,_scale$1503+1
  3001  001864  C017  F029         	movff	?___ftmul+2,_scale$1503+2
  3002                           
  3003                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3004  001868  C027  F015         	movff	_scale$1503,___ftmul@f1
  3005  00186C  C028  F016         	movff	_scale$1503+1,___ftmul@f1+1
  3006  001870  C029  F017         	movff	_scale$1503+2,___ftmul@f1+2
  3007  001874  0E00               	movlw	0
  3008  001876  6E12               	movwf	___wmul@multiplicand+1,c
  3009  001878  0E03               	movlw	3
  3010  00187A  6E11               	movwf	___wmul@multiplicand,c
  3011  00187C  0E00               	movlw	0
  3012  00187E  6E04               	movwf	___awmod@divisor+1,c
  3013  001880  0E0A               	movlw	10
  3014  001882  6E03               	movwf	___awmod@divisor,c
  3015  001884  502A               	movf	scale@scl,w,c
  3016  001886  6E01               	movwf	___awmod@dividend,c
  3017  001888  6A02               	clrf	___awmod@dividend+1,c
  3018  00188A  BE01               	btfsc	___awmod@dividend,7,c
  3019  00188C  0602               	decf	___awmod@dividend+1,f,c
  3020  00188E  EC60  F016         	call	___awmod	;wreg free
  3021  001892  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3022  001896  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3023  00189A  EC75  F018         	call	___wmul	;wreg free
  3024  00189E  0E50               	movlw	low __npowers_
  3025  0018A0  240F               	addwf	?___wmul,w,c
  3026  0018A2  6EF6               	movwf	tblptrl,c
  3027  0018A4  0E10               	movlw	high __npowers_
  3028  0018A6  2010               	addwfc	?___wmul+1,w,c
  3029  0018A8  6EF7               	movwf	tblptrh,c
  3030  0018AA                     	if	0	;There are less than 3 active tblptr bytes
  3031  0018AA                     	endif
  3032  0018AA  0009               	tblrd		*+
  3033  0018AC  CFF5 F018          	movff	tablat,___ftmul@f2
  3034  0018B0  0009               	tblrd		*+
  3035  0018B2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3036  0018B6  000A               	tblrd		*-
  3037  0018B8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3038  0018BC  EC6E  F013         	call	___ftmul	;wreg free
  3039  0018C0  C015  F024         	movff	?___ftmul,?_scale
  3040  0018C4  C016  F025         	movff	?___ftmul+1,?_scale+1
  3041  0018C8  C017  F026         	movff	?___ftmul+2,?_scale+2
  3042  0018CC  0012               	return	
  3043  0018CE                     l367:
  3044                           
  3045                           ;doprnt.c: 432: else if(scl > 10)
  3046  0018CE  502A               	movf	scale@scl,w,c
  3047  0018D0  0A80               	xorlw	128
  3048  0018D2  0F75               	addlw	-139
  3049  0018D4  A0D8               	btfss	status,0,c
  3050  0018D6  D053               	goto	l370
  3051                           
  3052                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3053  0018D8  0E00               	movlw	0
  3054  0018DA  6E0A               	movwf	___awdiv@divisor+1,c
  3055  0018DC  0E0A               	movlw	10
  3056  0018DE  6E09               	movwf	___awdiv@divisor,c
  3057  0018E0  502A               	movf	scale@scl,w,c
  3058  0018E2  6E07               	movwf	___awdiv@dividend,c
  3059  0018E4  6A08               	clrf	___awdiv@dividend+1,c
  3060  0018E6  BE07               	btfsc	___awdiv@dividend,7,c
  3061  0018E8  0608               	decf	___awdiv@dividend+1,f,c
  3062  0018EA  EC64  F015         	call	___awdiv	;wreg free
  3063  0018EE  0E09               	movlw	9
  3064  0018F0  2407               	addwf	?___awdiv,w,c
  3065  0018F2  6E0F               	movwf	___wmul@multiplier,c
  3066  0018F4  0E00               	movlw	0
  3067  0018F6  2008               	addwfc	?___awdiv+1,w,c
  3068  0018F8  6E10               	movwf	___wmul@multiplier+1,c
  3069  0018FA  0E00               	movlw	0
  3070  0018FC  6E12               	movwf	___wmul@multiplicand+1,c
  3071  0018FE  0E03               	movlw	3
  3072  001900  6E11               	movwf	___wmul@multiplicand,c
  3073  001902  EC75  F018         	call	___wmul	;wreg free
  3074  001906  0E50               	movlw	low __npowers_
  3075  001908  240F               	addwf	?___wmul,w,c
  3076  00190A  6EF6               	movwf	tblptrl,c
  3077  00190C  0E10               	movlw	high __npowers_
  3078  00190E  2010               	addwfc	?___wmul+1,w,c
  3079  001910  6EF7               	movwf	tblptrh,c
  3080  001912                     	if	0	;There are less than 3 active tblptr bytes
  3081  001912                     	endif
  3082  001912  0009               	tblrd		*+
  3083  001914  CFF5 F015          	movff	tablat,___ftmul@f1
  3084  001918  0009               	tblrd		*+
  3085  00191A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3086  00191E  000A               	tblrd		*-
  3087  001920  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3088  001924  0E00               	movlw	0
  3089  001926  6E12               	movwf	___wmul@multiplicand+1,c
  3090  001928  0E03               	movlw	3
  3091  00192A  6E11               	movwf	___wmul@multiplicand,c
  3092  00192C  0E00               	movlw	0
  3093  00192E  6E04               	movwf	___awmod@divisor+1,c
  3094  001930  0E0A               	movlw	10
  3095  001932  6E03               	movwf	___awmod@divisor,c
  3096  001934  502A               	movf	scale@scl,w,c
  3097  001936  6E01               	movwf	___awmod@dividend,c
  3098  001938  6A02               	clrf	___awmod@dividend+1,c
  3099  00193A  BE01               	btfsc	___awmod@dividend,7,c
  3100  00193C  0602               	decf	___awmod@dividend+1,f,c
  3101  00193E  EC60  F016         	call	___awmod	;wreg free
  3102  001942  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3103  001946  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3104  00194A  EC75  F018         	call	___wmul	;wreg free
  3105  00194E  0E50               	movlw	low __npowers_
  3106  001950  240F               	addwf	?___wmul,w,c
  3107  001952  6EF6               	movwf	tblptrl,c
  3108  001954  0E10               	movlw	high __npowers_
  3109  001956  2010               	addwfc	?___wmul+1,w,c
  3110  001958  6EF7               	movwf	tblptrh,c
  3111  00195A                     	if	0	;There are less than 3 active tblptr bytes
  3112  00195A                     	endif
  3113  00195A  0009               	tblrd		*+
  3114  00195C  CFF5 F018          	movff	tablat,___ftmul@f2
  3115  001960  0009               	tblrd		*+
  3116  001962  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3117  001966  000A               	tblrd		*-
  3118  001968  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3119  00196C  EC6E  F013         	call	___ftmul	;wreg free
  3120  001970  C015  F024         	movff	?___ftmul,?_scale
  3121  001974  C016  F025         	movff	?___ftmul+1,?_scale+1
  3122  001978  C017  F026         	movff	?___ftmul+2,?_scale+2
  3123  00197C  0012               	return	
  3124  00197E                     l370:
  3125                           
  3126                           ;doprnt.c: 434: return _npowers_[scl];
  3127  00197E  502A               	movf	scale@scl,w,c
  3128  001980  0D03               	mullw	3
  3129  001982  0E50               	movlw	low __npowers_
  3130  001984  24F3               	addwf	prodl,w,c
  3131  001986  6EF6               	movwf	tblptrl,c
  3132  001988  0E10               	movlw	high __npowers_
  3133  00198A  20F4               	addwfc	prodh,w,c
  3134  00198C  6EF7               	movwf	tblptrh,c
  3135  00198E                     	if	0	;There are less than 3 active tblptr bytes
  3136  00198E                     	endif
  3137  00198E  0009               	tblrd		*+
  3138  001990  CFF5 F024          	movff	tablat,?_scale
  3139  001994  0009               	tblrd		*+
  3140  001996  CFF5 F025          	movff	tablat,?_scale+1
  3141  00199A  000A               	tblrd		*-
  3142  00199C  CFF5 F026          	movff	tablat,?_scale+2
  3143  0019A0  0012               	return	
  3144  0019A2                     l366:
  3145                           
  3146                           ;doprnt.c: 435: }
  3147                           ;doprnt.c: 436: if(scl>=110)
  3148  0019A2  502A               	movf	scale@scl,w,c
  3149  0019A4  0A80               	xorlw	128
  3150  0019A6  0F12               	addlw	-238
  3151  0019A8  A0D8               	btfss	status,0,c
  3152  0019AA  D091               	goto	l371
  3153                           
  3154                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3155  0019AC  0E00               	movlw	0
  3156  0019AE  6E12               	movwf	___wmul@multiplicand+1,c
  3157  0019B0  0E03               	movlw	3
  3158  0019B2  6E11               	movwf	___wmul@multiplicand,c
  3159  0019B4  0E00               	movlw	0
  3160  0019B6  6E0A               	movwf	___awdiv@divisor+1,c
  3161  0019B8  0E0A               	movlw	10
  3162  0019BA  6E09               	movwf	___awdiv@divisor,c
  3163  0019BC  0E00               	movlw	0
  3164  0019BE  6E04               	movwf	___awmod@divisor+1,c
  3165  0019C0  0E64               	movlw	100
  3166  0019C2  6E03               	movwf	___awmod@divisor,c
  3167  0019C4  502A               	movf	scale@scl,w,c
  3168  0019C6  6E01               	movwf	___awmod@dividend,c
  3169  0019C8  6A02               	clrf	___awmod@dividend+1,c
  3170  0019CA  BE01               	btfsc	___awmod@dividend,7,c
  3171  0019CC  0602               	decf	___awmod@dividend+1,f,c
  3172  0019CE  EC60  F016         	call	___awmod	;wreg free
  3173  0019D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  3174  0019D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3175  0019DA  EC64  F015         	call	___awdiv	;wreg free
  3176  0019DE  0E09               	movlw	9
  3177  0019E0  2407               	addwf	?___awdiv,w,c
  3178  0019E2  6E0F               	movwf	___wmul@multiplier,c
  3179  0019E4  0E00               	movlw	0
  3180  0019E6  2008               	addwfc	?___awdiv+1,w,c
  3181  0019E8  6E10               	movwf	___wmul@multiplier+1,c
  3182  0019EA  EC75  F018         	call	___wmul	;wreg free
  3183  0019EE  0E29               	movlw	low __powers_
  3184  0019F0  240F               	addwf	?___wmul,w,c
  3185  0019F2  6EF6               	movwf	tblptrl,c
  3186  0019F4  0E10               	movlw	high __powers_
  3187  0019F6  2010               	addwfc	?___wmul+1,w,c
  3188  0019F8  6EF7               	movwf	tblptrh,c
  3189  0019FA                     	if	0	;There are less than 3 active tblptr bytes
  3190  0019FA                     	endif
  3191  0019FA  0009               	tblrd		*+
  3192  0019FC  CFF5 F018          	movff	tablat,___ftmul@f2
  3193  001A00  0009               	tblrd		*+
  3194  001A02  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3195  001A06  000A               	tblrd		*-
  3196  001A08  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3197  001A0C  0E00               	movlw	0
  3198  001A0E  6E0A               	movwf	___awdiv@divisor+1,c
  3199  001A10  0E64               	movlw	100
  3200  001A12  6E09               	movwf	___awdiv@divisor,c
  3201  001A14  502A               	movf	scale@scl,w,c
  3202  001A16  6E07               	movwf	___awdiv@dividend,c
  3203  001A18  6A08               	clrf	___awdiv@dividend+1,c
  3204  001A1A  BE07               	btfsc	___awdiv@dividend,7,c
  3205  001A1C  0608               	decf	___awdiv@dividend+1,f,c
  3206  001A1E  EC64  F015         	call	___awdiv	;wreg free
  3207  001A22  0E12               	movlw	18
  3208  001A24  2407               	addwf	?___awdiv,w,c
  3209  001A26  6E0F               	movwf	___wmul@multiplier,c
  3210  001A28  0E00               	movlw	0
  3211  001A2A  2008               	addwfc	?___awdiv+1,w,c
  3212  001A2C  6E10               	movwf	___wmul@multiplier+1,c
  3213  001A2E  0E00               	movlw	0
  3214  001A30  6E12               	movwf	___wmul@multiplicand+1,c
  3215  001A32  0E03               	movlw	3
  3216  001A34  6E11               	movwf	___wmul@multiplicand,c
  3217  001A36  EC75  F018         	call	___wmul	;wreg free
  3218  001A3A  0E29               	movlw	low __powers_
  3219  001A3C  240F               	addwf	?___wmul,w,c
  3220  001A3E  6EF6               	movwf	tblptrl,c
  3221  001A40  0E10               	movlw	high __powers_
  3222  001A42  2010               	addwfc	?___wmul+1,w,c
  3223  001A44  6EF7               	movwf	tblptrh,c
  3224  001A46                     	if	0	;There are less than 3 active tblptr bytes
  3225  001A46                     	endif
  3226  001A46  0009               	tblrd		*+
  3227  001A48  CFF5 F015          	movff	tablat,___ftmul@f1
  3228  001A4C  0009               	tblrd		*+
  3229  001A4E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3230  001A52  000A               	tblrd		*-
  3231  001A54  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3232  001A58  EC6E  F013         	call	___ftmul	;wreg free
  3233  001A5C  C015  F027         	movff	?___ftmul,_scale$1503
  3234  001A60  C016  F028         	movff	?___ftmul+1,_scale$1503+1
  3235  001A64  C017  F029         	movff	?___ftmul+2,_scale$1503+2
  3236                           
  3237                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3238  001A68  C027  F015         	movff	_scale$1503,___ftmul@f1
  3239  001A6C  C028  F016         	movff	_scale$1503+1,___ftmul@f1+1
  3240  001A70  C029  F017         	movff	_scale$1503+2,___ftmul@f1+2
  3241  001A74  0E00               	movlw	0
  3242  001A76  6E12               	movwf	___wmul@multiplicand+1,c
  3243  001A78  0E03               	movlw	3
  3244  001A7A  6E11               	movwf	___wmul@multiplicand,c
  3245  001A7C  0E00               	movlw	0
  3246  001A7E  6E04               	movwf	___awmod@divisor+1,c
  3247  001A80  0E0A               	movlw	10
  3248  001A82  6E03               	movwf	___awmod@divisor,c
  3249  001A84  502A               	movf	scale@scl,w,c
  3250  001A86  6E01               	movwf	___awmod@dividend,c
  3251  001A88  6A02               	clrf	___awmod@dividend+1,c
  3252  001A8A  BE01               	btfsc	___awmod@dividend,7,c
  3253  001A8C  0602               	decf	___awmod@dividend+1,f,c
  3254  001A8E  EC60  F016         	call	___awmod	;wreg free
  3255  001A92  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3256  001A96  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3257  001A9A  EC75  F018         	call	___wmul	;wreg free
  3258  001A9E  0E29               	movlw	low __powers_
  3259  001AA0  240F               	addwf	?___wmul,w,c
  3260  001AA2  6EF6               	movwf	tblptrl,c
  3261  001AA4  0E10               	movlw	high __powers_
  3262  001AA6  2010               	addwfc	?___wmul+1,w,c
  3263  001AA8  6EF7               	movwf	tblptrh,c
  3264  001AAA                     	if	0	;There are less than 3 active tblptr bytes
  3265  001AAA                     	endif
  3266  001AAA  0009               	tblrd		*+
  3267  001AAC  CFF5 F018          	movff	tablat,___ftmul@f2
  3268  001AB0  0009               	tblrd		*+
  3269  001AB2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3270  001AB6  000A               	tblrd		*-
  3271  001AB8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3272  001ABC  EC6E  F013         	call	___ftmul	;wreg free
  3273  001AC0  C015  F024         	movff	?___ftmul,?_scale
  3274  001AC4  C016  F025         	movff	?___ftmul+1,?_scale+1
  3275  001AC8  C017  F026         	movff	?___ftmul+2,?_scale+2
  3276  001ACC  0012               	return	
  3277  001ACE                     l371:
  3278                           
  3279                           ;doprnt.c: 438: else if(scl > 10)
  3280  001ACE  502A               	movf	scale@scl,w,c
  3281  001AD0  0A80               	xorlw	128
  3282  001AD2  0F75               	addlw	-139
  3283  001AD4  A0D8               	btfss	status,0,c
  3284  001AD6  D053               	goto	l373
  3285                           
  3286                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3287  001AD8  0E00               	movlw	0
  3288  001ADA  6E0A               	movwf	___awdiv@divisor+1,c
  3289  001ADC  0E0A               	movlw	10
  3290  001ADE  6E09               	movwf	___awdiv@divisor,c
  3291  001AE0  502A               	movf	scale@scl,w,c
  3292  001AE2  6E07               	movwf	___awdiv@dividend,c
  3293  001AE4  6A08               	clrf	___awdiv@dividend+1,c
  3294  001AE6  BE07               	btfsc	___awdiv@dividend,7,c
  3295  001AE8  0608               	decf	___awdiv@dividend+1,f,c
  3296  001AEA  EC64  F015         	call	___awdiv	;wreg free
  3297  001AEE  0E09               	movlw	9
  3298  001AF0  2407               	addwf	?___awdiv,w,c
  3299  001AF2  6E0F               	movwf	___wmul@multiplier,c
  3300  001AF4  0E00               	movlw	0
  3301  001AF6  2008               	addwfc	?___awdiv+1,w,c
  3302  001AF8  6E10               	movwf	___wmul@multiplier+1,c
  3303  001AFA  0E00               	movlw	0
  3304  001AFC  6E12               	movwf	___wmul@multiplicand+1,c
  3305  001AFE  0E03               	movlw	3
  3306  001B00  6E11               	movwf	___wmul@multiplicand,c
  3307  001B02  EC75  F018         	call	___wmul	;wreg free
  3308  001B06  0E29               	movlw	low __powers_
  3309  001B08  240F               	addwf	?___wmul,w,c
  3310  001B0A  6EF6               	movwf	tblptrl,c
  3311  001B0C  0E10               	movlw	high __powers_
  3312  001B0E  2010               	addwfc	?___wmul+1,w,c
  3313  001B10  6EF7               	movwf	tblptrh,c
  3314  001B12                     	if	0	;There are less than 3 active tblptr bytes
  3315  001B12                     	endif
  3316  001B12  0009               	tblrd		*+
  3317  001B14  CFF5 F015          	movff	tablat,___ftmul@f1
  3318  001B18  0009               	tblrd		*+
  3319  001B1A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3320  001B1E  000A               	tblrd		*-
  3321  001B20  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3322  001B24  0E00               	movlw	0
  3323  001B26  6E12               	movwf	___wmul@multiplicand+1,c
  3324  001B28  0E03               	movlw	3
  3325  001B2A  6E11               	movwf	___wmul@multiplicand,c
  3326  001B2C  0E00               	movlw	0
  3327  001B2E  6E04               	movwf	___awmod@divisor+1,c
  3328  001B30  0E0A               	movlw	10
  3329  001B32  6E03               	movwf	___awmod@divisor,c
  3330  001B34  502A               	movf	scale@scl,w,c
  3331  001B36  6E01               	movwf	___awmod@dividend,c
  3332  001B38  6A02               	clrf	___awmod@dividend+1,c
  3333  001B3A  BE01               	btfsc	___awmod@dividend,7,c
  3334  001B3C  0602               	decf	___awmod@dividend+1,f,c
  3335  001B3E  EC60  F016         	call	___awmod	;wreg free
  3336  001B42  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3337  001B46  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3338  001B4A  EC75  F018         	call	___wmul	;wreg free
  3339  001B4E  0E29               	movlw	low __powers_
  3340  001B50  240F               	addwf	?___wmul,w,c
  3341  001B52  6EF6               	movwf	tblptrl,c
  3342  001B54  0E10               	movlw	high __powers_
  3343  001B56  2010               	addwfc	?___wmul+1,w,c
  3344  001B58  6EF7               	movwf	tblptrh,c
  3345  001B5A                     	if	0	;There are less than 3 active tblptr bytes
  3346  001B5A                     	endif
  3347  001B5A  0009               	tblrd		*+
  3348  001B5C  CFF5 F018          	movff	tablat,___ftmul@f2
  3349  001B60  0009               	tblrd		*+
  3350  001B62  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3351  001B66  000A               	tblrd		*-
  3352  001B68  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3353  001B6C  EC6E  F013         	call	___ftmul	;wreg free
  3354  001B70  C015  F024         	movff	?___ftmul,?_scale
  3355  001B74  C016  F025         	movff	?___ftmul+1,?_scale+1
  3356  001B78  C017  F026         	movff	?___ftmul+2,?_scale+2
  3357  001B7C  0012               	return	
  3358  001B7E                     l373:
  3359                           
  3360                           ;doprnt.c: 440: return _powers_[scl];
  3361  001B7E  502A               	movf	scale@scl,w,c
  3362  001B80  0D03               	mullw	3
  3363  001B82  0E29               	movlw	low __powers_
  3364  001B84  24F3               	addwf	prodl,w,c
  3365  001B86  6EF6               	movwf	tblptrl,c
  3366  001B88  0E10               	movlw	high __powers_
  3367  001B8A  20F4               	addwfc	prodh,w,c
  3368  001B8C  6EF7               	movwf	tblptrh,c
  3369  001B8E                     	if	0	;There are less than 3 active tblptr bytes
  3370  001B8E                     	endif
  3371  001B8E  0009               	tblrd		*+
  3372  001B90  CFF5 F024          	movff	tablat,?_scale
  3373  001B94  0009               	tblrd		*+
  3374  001B96  CFF5 F025          	movff	tablat,?_scale+1
  3375  001B9A  000A               	tblrd		*-
  3376  001B9C  CFF5 F026          	movff	tablat,?_scale+2
  3377  001BA0  0012               	return	
  3378  001BA2                     __end_of_scale:
  3379                           	opt stack 0
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           prodh	equ	0xFF4
  3385                           prodl	equ	0xFF3
  3386                           postinc0	equ	0xFEE
  3387                           wreg	equ	0xFE8
  3388                           indf2	equ	0xFDF
  3389                           postinc2	equ	0xFDE
  3390                           postdec2	equ	0xFDD
  3391                           fsr2h	equ	0xFDA
  3392                           fsr2l	equ	0xFD9
  3393                           status	equ	0xFD8
  3394                           
  3395 ;; *************** function _isdigit *****************
  3396 ;; Defined at:
  3397 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;  c               1    wreg     unsigned char 
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;  c               1    2[COMRAM] unsigned char 
  3402 ;; Return value:  Size  Location     Type
  3403 ;;		None               void
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;Total ram usage:        3 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; This function calls:
  3418 ;;		Nothing
  3419 ;; This function is called by:
  3420 ;;		_sprintf
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           	psect	text3
  3425  003156                     __ptext3:
  3426                           	opt stack 0
  3427  003156                     _isdigit:
  3428                           	opt stack 29
  3429                           
  3430                           ;incstack = 0
  3431                           ;isdigit@c stored from wreg
  3432  003156  6E03               	movwf	isdigit@c,c
  3433  003158  0E00               	movlw	0
  3434  00315A  6E02               	movwf	_isdigit$1130,c
  3435  00315C  0E3A               	movlw	58
  3436  00315E  6003               	cpfslt	isdigit@c,c
  3437  003160  D005               	goto	l798
  3438  003162  0E2F               	movlw	47
  3439  003164  6403               	cpfsgt	isdigit@c,c
  3440  003166  D002               	goto	l798
  3441  003168  0E01               	movlw	1
  3442  00316A  6E02               	movwf	_isdigit$1130,c
  3443  00316C                     l798:
  3444  00316C  C002  F001         	movff	_isdigit$1130,??_isdigit
  3445  003170  3001               	rrcf	??_isdigit,w,c
  3446  003172  0012               	return	
  3447  003174                     __end_of_isdigit:
  3448                           	opt stack 0
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           prodh	equ	0xFF4
  3454                           prodl	equ	0xFF3
  3455                           postinc0	equ	0xFEE
  3456                           wreg	equ	0xFE8
  3457                           indf2	equ	0xFDF
  3458                           postinc2	equ	0xFDE
  3459                           postdec2	equ	0xFDD
  3460                           fsr2h	equ	0xFDA
  3461                           fsr2l	equ	0xFD9
  3462                           status	equ	0xFD8
  3463                           
  3464 ;; *************** function _fround *****************
  3465 ;; Defined at:
  3466 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  prec            1    wreg     unsigned char 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  prec            1   44[COMRAM] unsigned char 
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  3   35[COMRAM] unsigned char 
  3473 ;; Registers used:
  3474 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3480 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;Total ram usage:       10 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:    2
  3487 ;; This function calls:
  3488 ;;		___awdiv
  3489 ;;		___awmod
  3490 ;;		___ftmul
  3491 ;;		___wmul
  3492 ;; This function is called by:
  3493 ;;		_sprintf
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text4
  3498  001F90                     __ptext4:
  3499                           	opt stack 0
  3500  001F90                     _fround:
  3501                           	opt stack 27
  3502                           
  3503                           ;incstack = 0
  3504                           ;fround@prec stored from wreg
  3505  001F90  6E2D               	movwf	fround@prec,c
  3506                           
  3507                           ;doprnt.c: 413: if(prec>=110)
  3508  001F92  0E6D               	movlw	109
  3509  001F94  642D               	cpfsgt	fround@prec,c
  3510  001F96  D09F               	goto	l360
  3511                           
  3512                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3513  001F98  0E00               	movlw	0
  3514  001F9A  6E12               	movwf	___wmul@multiplicand+1,c
  3515  001F9C  0E03               	movlw	3
  3516  001F9E  6E11               	movwf	___wmul@multiplicand,c
  3517  001FA0  0E00               	movlw	0
  3518  001FA2  6E0A               	movwf	___awdiv@divisor+1,c
  3519  001FA4  0E0A               	movlw	10
  3520  001FA6  6E09               	movwf	___awdiv@divisor,c
  3521  001FA8  0E00               	movlw	0
  3522  001FAA  6E04               	movwf	___awmod@divisor+1,c
  3523  001FAC  0E64               	movlw	100
  3524  001FAE  6E03               	movwf	___awmod@divisor,c
  3525  001FB0  C02D  F001         	movff	fround@prec,___awmod@dividend
  3526  001FB4  6A02               	clrf	___awmod@dividend+1,c
  3527  001FB6  EC60  F016         	call	___awmod	;wreg free
  3528  001FBA  C001  F007         	movff	?___awmod,___awdiv@dividend
  3529  001FBE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3530  001FC2  EC64  F015         	call	___awdiv	;wreg free
  3531  001FC6  0E09               	movlw	9
  3532  001FC8  2407               	addwf	?___awdiv,w,c
  3533  001FCA  6E0F               	movwf	___wmul@multiplier,c
  3534  001FCC  0E00               	movlw	0
  3535  001FCE  2008               	addwfc	?___awdiv+1,w,c
  3536  001FD0  6E10               	movwf	___wmul@multiplier+1,c
  3537  001FD2  EC75  F018         	call	___wmul	;wreg free
  3538  001FD6  0E50               	movlw	low __npowers_
  3539  001FD8  240F               	addwf	?___wmul,w,c
  3540  001FDA  6EF6               	movwf	tblptrl,c
  3541  001FDC  0E10               	movlw	high __npowers_
  3542  001FDE  2010               	addwfc	?___wmul+1,w,c
  3543  001FE0  6EF7               	movwf	tblptrh,c
  3544  001FE2                     	if	0	;There are less than 3 active tblptr bytes
  3545  001FE2                     	endif
  3546  001FE2  0009               	tblrd		*+
  3547  001FE4  CFF5 F018          	movff	tablat,___ftmul@f2
  3548  001FE8  0009               	tblrd		*+
  3549  001FEA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3550  001FEE  000A               	tblrd		*-
  3551  001FF0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3552  001FF4  0E00               	movlw	0
  3553  001FF6  6E0A               	movwf	___awdiv@divisor+1,c
  3554  001FF8  0E64               	movlw	100
  3555  001FFA  6E09               	movwf	___awdiv@divisor,c
  3556  001FFC  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3557  002000  6A08               	clrf	___awdiv@dividend+1,c
  3558  002002  EC64  F015         	call	___awdiv	;wreg free
  3559  002006  0E12               	movlw	18
  3560  002008  2407               	addwf	?___awdiv,w,c
  3561  00200A  6E0F               	movwf	___wmul@multiplier,c
  3562  00200C  0E00               	movlw	0
  3563  00200E  2008               	addwfc	?___awdiv+1,w,c
  3564  002010  6E10               	movwf	___wmul@multiplier+1,c
  3565  002012  0E00               	movlw	0
  3566  002014  6E12               	movwf	___wmul@multiplicand+1,c
  3567  002016  0E03               	movlw	3
  3568  002018  6E11               	movwf	___wmul@multiplicand,c
  3569  00201A  EC75  F018         	call	___wmul	;wreg free
  3570  00201E  0E50               	movlw	low __npowers_
  3571  002020  240F               	addwf	?___wmul,w,c
  3572  002022  6EF6               	movwf	tblptrl,c
  3573  002024  0E10               	movlw	high __npowers_
  3574  002026  2010               	addwfc	?___wmul+1,w,c
  3575  002028  6EF7               	movwf	tblptrh,c
  3576  00202A                     	if	0	;There are less than 3 active tblptr bytes
  3577  00202A                     	endif
  3578  00202A  0009               	tblrd		*+
  3579  00202C  CFF5 F015          	movff	tablat,___ftmul@f1
  3580  002030  0009               	tblrd		*+
  3581  002032  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3582  002036  000A               	tblrd		*-
  3583  002038  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3584  00203C  EC6E  F013         	call	___ftmul	;wreg free
  3585  002040  C015  F02A         	movff	?___ftmul,_fround$1501
  3586  002044  C016  F02B         	movff	?___ftmul+1,_fround$1501+1
  3587  002048  C017  F02C         	movff	?___ftmul+2,_fround$1501+2
  3588                           
  3589                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3590  00204C  0E00               	movlw	0
  3591  00204E  6E12               	movwf	___wmul@multiplicand+1,c
  3592  002050  0E03               	movlw	3
  3593  002052  6E11               	movwf	___wmul@multiplicand,c
  3594  002054  0E00               	movlw	0
  3595  002056  6E04               	movwf	___awmod@divisor+1,c
  3596  002058  0E0A               	movlw	10
  3597  00205A  6E03               	movwf	___awmod@divisor,c
  3598  00205C  C02D  F001         	movff	fround@prec,___awmod@dividend
  3599  002060  6A02               	clrf	___awmod@dividend+1,c
  3600  002062  EC60  F016         	call	___awmod	;wreg free
  3601  002066  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3602  00206A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3603  00206E  EC75  F018         	call	___wmul	;wreg free
  3604  002072  0E50               	movlw	low __npowers_
  3605  002074  240F               	addwf	?___wmul,w,c
  3606  002076  6EF6               	movwf	tblptrl,c
  3607  002078  0E10               	movlw	high __npowers_
  3608  00207A  2010               	addwfc	?___wmul+1,w,c
  3609  00207C  6EF7               	movwf	tblptrh,c
  3610  00207E                     	if	0	;There are less than 3 active tblptr bytes
  3611  00207E                     	endif
  3612  00207E  0009               	tblrd		*+
  3613  002080  CFF5 F018          	movff	tablat,___ftmul@f2
  3614  002084  0009               	tblrd		*+
  3615  002086  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3616  00208A  000A               	tblrd		*-
  3617  00208C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3618  002090  C02A  F015         	movff	_fround$1501,___ftmul@f1
  3619  002094  C02B  F016         	movff	_fround$1501+1,___ftmul@f1+1
  3620  002098  C02C  F017         	movff	_fround$1501+2,___ftmul@f1+2
  3621  00209C  EC6E  F013         	call	___ftmul	;wreg free
  3622  0020A0  C015  F027         	movff	?___ftmul,_fround$1502
  3623  0020A4  C016  F028         	movff	?___ftmul+1,_fround$1502+1
  3624  0020A8  C017  F029         	movff	?___ftmul+2,_fround$1502+2
  3625                           
  3626                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3627  0020AC  C027  F015         	movff	_fround$1502,___ftmul@f1
  3628  0020B0  C028  F016         	movff	_fround$1502+1,___ftmul@f1+1
  3629  0020B4  C029  F017         	movff	_fround$1502+2,___ftmul@f1+2
  3630  0020B8  0E00               	movlw	0
  3631  0020BA  6E18               	movwf	___ftmul@f2,c
  3632  0020BC  0E00               	movlw	0
  3633  0020BE  6E19               	movwf	___ftmul@f2+1,c
  3634  0020C0  0E3F               	movlw	63
  3635  0020C2  6E1A               	movwf	___ftmul@f2+2,c
  3636  0020C4  EC6E  F013         	call	___ftmul	;wreg free
  3637  0020C8  C015  F024         	movff	?___ftmul,?_fround
  3638  0020CC  C016  F025         	movff	?___ftmul+1,?_fround+1
  3639  0020D0  C017  F026         	movff	?___ftmul+2,?_fround+2
  3640  0020D4  0012               	return	
  3641  0020D6                     l360:
  3642                           
  3643                           ;doprnt.c: 415: else if(prec > 10)
  3644  0020D6  0E0A               	movlw	10
  3645  0020D8  642D               	cpfsgt	fround@prec,c
  3646  0020DA  D063               	goto	l363
  3647                           
  3648                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3649  0020DC  0E00               	movlw	0
  3650  0020DE  6E12               	movwf	___wmul@multiplicand+1,c
  3651  0020E0  0E03               	movlw	3
  3652  0020E2  6E11               	movwf	___wmul@multiplicand,c
  3653  0020E4  0E00               	movlw	0
  3654  0020E6  6E04               	movwf	___awmod@divisor+1,c
  3655  0020E8  0E0A               	movlw	10
  3656  0020EA  6E03               	movwf	___awmod@divisor,c
  3657  0020EC  C02D  F001         	movff	fround@prec,___awmod@dividend
  3658  0020F0  6A02               	clrf	___awmod@dividend+1,c
  3659  0020F2  EC60  F016         	call	___awmod	;wreg free
  3660  0020F6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3661  0020FA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3662  0020FE  EC75  F018         	call	___wmul	;wreg free
  3663  002102  0E50               	movlw	low __npowers_
  3664  002104  240F               	addwf	?___wmul,w,c
  3665  002106  6EF6               	movwf	tblptrl,c
  3666  002108  0E10               	movlw	high __npowers_
  3667  00210A  2010               	addwfc	?___wmul+1,w,c
  3668  00210C  6EF7               	movwf	tblptrh,c
  3669  00210E                     	if	0	;There are less than 3 active tblptr bytes
  3670  00210E                     	endif
  3671  00210E  0009               	tblrd		*+
  3672  002110  CFF5 F018          	movff	tablat,___ftmul@f2
  3673  002114  0009               	tblrd		*+
  3674  002116  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3675  00211A  000A               	tblrd		*-
  3676  00211C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3677  002120  0E00               	movlw	0
  3678  002122  6E0A               	movwf	___awdiv@divisor+1,c
  3679  002124  0E0A               	movlw	10
  3680  002126  6E09               	movwf	___awdiv@divisor,c
  3681  002128  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3682  00212C  6A08               	clrf	___awdiv@dividend+1,c
  3683  00212E  EC64  F015         	call	___awdiv	;wreg free
  3684  002132  0E09               	movlw	9
  3685  002134  2407               	addwf	?___awdiv,w,c
  3686  002136  6E0F               	movwf	___wmul@multiplier,c
  3687  002138  0E00               	movlw	0
  3688  00213A  2008               	addwfc	?___awdiv+1,w,c
  3689  00213C  6E10               	movwf	___wmul@multiplier+1,c
  3690  00213E  0E00               	movlw	0
  3691  002140  6E12               	movwf	___wmul@multiplicand+1,c
  3692  002142  0E03               	movlw	3
  3693  002144  6E11               	movwf	___wmul@multiplicand,c
  3694  002146  EC75  F018         	call	___wmul	;wreg free
  3695  00214A  0E50               	movlw	low __npowers_
  3696  00214C  240F               	addwf	?___wmul,w,c
  3697  00214E  6EF6               	movwf	tblptrl,c
  3698  002150  0E10               	movlw	high __npowers_
  3699  002152  2010               	addwfc	?___wmul+1,w,c
  3700  002154  6EF7               	movwf	tblptrh,c
  3701  002156                     	if	0	;There are less than 3 active tblptr bytes
  3702  002156                     	endif
  3703  002156  0009               	tblrd		*+
  3704  002158  CFF5 F015          	movff	tablat,___ftmul@f1
  3705  00215C  0009               	tblrd		*+
  3706  00215E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3707  002162  000A               	tblrd		*-
  3708  002164  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3709  002168  EC6E  F013         	call	___ftmul	;wreg free
  3710  00216C  C015  F02A         	movff	?___ftmul,_fround$1501
  3711  002170  C016  F02B         	movff	?___ftmul+1,_fround$1501+1
  3712  002174  C017  F02C         	movff	?___ftmul+2,_fround$1501+2
  3713                           
  3714                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3715  002178  C02A  F015         	movff	_fround$1501,___ftmul@f1
  3716  00217C  C02B  F016         	movff	_fround$1501+1,___ftmul@f1+1
  3717  002180  C02C  F017         	movff	_fround$1501+2,___ftmul@f1+2
  3718  002184  0E00               	movlw	0
  3719  002186  6E18               	movwf	___ftmul@f2,c
  3720  002188  0E00               	movlw	0
  3721  00218A  6E19               	movwf	___ftmul@f2+1,c
  3722  00218C  0E3F               	movlw	63
  3723  00218E  6E1A               	movwf	___ftmul@f2+2,c
  3724  002190  EC6E  F013         	call	___ftmul	;wreg free
  3725  002194  C015  F024         	movff	?___ftmul,?_fround
  3726  002198  C016  F025         	movff	?___ftmul+1,?_fround+1
  3727  00219C  C017  F026         	movff	?___ftmul+2,?_fround+2
  3728  0021A0  0012               	return	
  3729  0021A2                     l363:
  3730                           
  3731                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3732  0021A2  502D               	movf	fround@prec,w,c
  3733  0021A4  0D03               	mullw	3
  3734  0021A6  0E50               	movlw	low __npowers_
  3735  0021A8  24F3               	addwf	prodl,w,c
  3736  0021AA  6EF6               	movwf	tblptrl,c
  3737  0021AC  0E10               	movlw	high __npowers_
  3738  0021AE  20F4               	addwfc	prodh,w,c
  3739  0021B0  6EF7               	movwf	tblptrh,c
  3740  0021B2                     	if	0	;There are less than 3 active tblptr bytes
  3741  0021B2                     	endif
  3742  0021B2  0009               	tblrd		*+
  3743  0021B4  CFF5 F015          	movff	tablat,___ftmul@f1
  3744  0021B8  0009               	tblrd		*+
  3745  0021BA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3746  0021BE  000A               	tblrd		*-
  3747  0021C0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3748  0021C4  0E00               	movlw	0
  3749  0021C6  6E18               	movwf	___ftmul@f2,c
  3750  0021C8  0E00               	movlw	0
  3751  0021CA  6E19               	movwf	___ftmul@f2+1,c
  3752  0021CC  0E3F               	movlw	63
  3753  0021CE  6E1A               	movwf	___ftmul@f2+2,c
  3754  0021D0  EC6E  F013         	call	___ftmul	;wreg free
  3755  0021D4  C015  F024         	movff	?___ftmul,?_fround
  3756  0021D8  C016  F025         	movff	?___ftmul+1,?_fround+1
  3757  0021DC  C017  F026         	movff	?___ftmul+2,?_fround+2
  3758  0021E0  0012               	return	
  3759  0021E2                     __end_of_fround:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           postinc0	equ	0xFEE
  3768                           wreg	equ	0xFE8
  3769                           indf2	equ	0xFDF
  3770                           postinc2	equ	0xFDE
  3771                           postdec2	equ	0xFDD
  3772                           fsr2h	equ	0xFDA
  3773                           fsr2l	equ	0xFD9
  3774                           status	equ	0xFD8
  3775                           
  3776 ;; *************** function ___wmul *****************
  3777 ;; Defined at:
  3778 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;  multiplier      2   14[COMRAM] unsigned int 
  3781 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  product         2   18[COMRAM] unsigned int 
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  2   14[COMRAM] unsigned int 
  3786 ;; Registers used:
  3787 ;;		wreg, status,2, status,0, prodl, prodh
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3793 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;Total ram usage:        6 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_fround
  3803 ;;		_scale
  3804 ;;		_sprintf
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text5
  3809  0030EA                     __ptext5:
  3810                           	opt stack 0
  3811  0030EA                     ___wmul:
  3812                           	opt stack 28
  3813                           
  3814                           ;incstack = 0
  3815  0030EA  500F               	movf	___wmul@multiplier,w,c
  3816  0030EC  0211               	mulwf	___wmul@multiplicand,c
  3817  0030EE  CFF3 F013          	movff	prodl,___wmul@product
  3818  0030F2  CFF4 F014          	movff	prodh,___wmul@product+1
  3819  0030F6  500F               	movf	___wmul@multiplier,w,c
  3820  0030F8  0212               	mulwf	___wmul@multiplicand+1,c
  3821  0030FA  50F3               	movf	prodl,w,c
  3822  0030FC  2614               	addwf	___wmul@product+1,f,c
  3823  0030FE  5010               	movf	___wmul@multiplier+1,w,c
  3824  003100  0211               	mulwf	___wmul@multiplicand,c
  3825  003102  50F3               	movf	prodl,w,c
  3826  003104  2614               	addwf	___wmul@product+1,f,c
  3827  003106  C013  F00F         	movff	___wmul@product,?___wmul
  3828  00310A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3829  00310E  0012               	return	
  3830  003110                     __end_of___wmul:
  3831                           	opt stack 0
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           postinc0	equ	0xFEE
  3839                           wreg	equ	0xFE8
  3840                           indf2	equ	0xFDF
  3841                           postinc2	equ	0xFDE
  3842                           postdec2	equ	0xFDD
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function ___awmod *****************
  3848 ;; Defined at:
  3849 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  dividend        2    0[COMRAM] int 
  3852 ;;  divisor         2    2[COMRAM] int 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  sign            1    5[COMRAM] unsigned char 
  3855 ;;  counter         1    4[COMRAM] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  2    0[COMRAM] int 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3865 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;Total ram usage:        6 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; This function calls:
  3872 ;;		Nothing
  3873 ;; This function is called by:
  3874 ;;		_fround
  3875 ;;		_scale
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text6
  3880  002CC0                     __ptext6:
  3881                           	opt stack 0
  3882  002CC0                     ___awmod:
  3883                           	opt stack 28
  3884                           
  3885                           ;incstack = 0
  3886  002CC0  0E00               	movlw	0
  3887  002CC2  6E06               	movwf	___awmod@sign,c
  3888  002CC4  AE02               	btfss	___awmod@dividend+1,7,c
  3889  002CC6  D006               	goto	l615
  3890  002CC8  6C01               	negf	___awmod@dividend,c
  3891  002CCA  1E02               	comf	___awmod@dividend+1,f,c
  3892  002CCC  B0D8               	btfsc	status,0,c
  3893  002CCE  2A02               	incf	___awmod@dividend+1,f,c
  3894  002CD0  0E01               	movlw	1
  3895  002CD2  6E06               	movwf	___awmod@sign,c
  3896  002CD4                     l615:
  3897  002CD4  AE04               	btfss	___awmod@divisor+1,7,c
  3898  002CD6  D004               	goto	l616
  3899  002CD8  6C03               	negf	___awmod@divisor,c
  3900  002CDA  1E04               	comf	___awmod@divisor+1,f,c
  3901  002CDC  B0D8               	btfsc	status,0,c
  3902  002CDE  2A04               	incf	___awmod@divisor+1,f,c
  3903  002CE0                     l616:
  3904  002CE0  5003               	movf	___awmod@divisor,w,c
  3905  002CE2  1004               	iorwf	___awmod@divisor+1,w,c
  3906  002CE4  B4D8               	btfsc	status,2,c
  3907  002CE6  D018               	goto	l623
  3908  002CE8  0E01               	movlw	1
  3909  002CEA  6E05               	movwf	___awmod@counter,c
  3910  002CEC  D004               	goto	l618
  3911  002CEE  90D8               	bcf	status,0,c
  3912  002CF0  3603               	rlcf	___awmod@divisor,f,c
  3913  002CF2  3604               	rlcf	___awmod@divisor+1,f,c
  3914  002CF4  2A05               	incf	___awmod@counter,f,c
  3915  002CF6                     l618:
  3916  002CF6  AE04               	btfss	___awmod@divisor+1,7,c
  3917  002CF8  D7FA               	goto	l619
  3918  002CFA                     u1950:
  3919  002CFA  5003               	movf	___awmod@divisor,w,c
  3920  002CFC  5C01               	subwf	___awmod@dividend,w,c
  3921  002CFE  5004               	movf	___awmod@divisor+1,w,c
  3922  002D00  5802               	subwfb	___awmod@dividend+1,w,c
  3923  002D02  A0D8               	btfss	status,0,c
  3924  002D04  D004               	goto	l622
  3925  002D06  5003               	movf	___awmod@divisor,w,c
  3926  002D08  5E01               	subwf	___awmod@dividend,f,c
  3927  002D0A  5004               	movf	___awmod@divisor+1,w,c
  3928  002D0C  5A02               	subwfb	___awmod@dividend+1,f,c
  3929  002D0E                     l622:
  3930  002D0E  90D8               	bcf	status,0,c
  3931  002D10  3204               	rrcf	___awmod@divisor+1,f,c
  3932  002D12  3203               	rrcf	___awmod@divisor,f,c
  3933  002D14  2E05               	decfsz	___awmod@counter,f,c
  3934  002D16  D7F1               	goto	u1950
  3935  002D18                     l623:
  3936  002D18  5006               	movf	___awmod@sign,w,c
  3937  002D1A  B4D8               	btfsc	status,2,c
  3938  002D1C  D004               	goto	l624
  3939  002D1E  6C01               	negf	___awmod@dividend,c
  3940  002D20  1E02               	comf	___awmod@dividend+1,f,c
  3941  002D22  B0D8               	btfsc	status,0,c
  3942  002D24  2A02               	incf	___awmod@dividend+1,f,c
  3943  002D26                     l624:
  3944  002D26  C001  F001         	movff	___awmod@dividend,?___awmod
  3945  002D2A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3946  002D2E  0012               	return	
  3947  002D30                     __end_of___awmod:
  3948                           	opt stack 0
  3949                           tblptru	equ	0xFF8
  3950                           tblptrh	equ	0xFF7
  3951                           tblptrl	equ	0xFF6
  3952                           tablat	equ	0xFF5
  3953                           prodh	equ	0xFF4
  3954                           prodl	equ	0xFF3
  3955                           postinc0	equ	0xFEE
  3956                           wreg	equ	0xFE8
  3957                           indf2	equ	0xFDF
  3958                           postinc2	equ	0xFDE
  3959                           postdec2	equ	0xFDD
  3960                           fsr2h	equ	0xFDA
  3961                           fsr2l	equ	0xFD9
  3962                           status	equ	0xFD8
  3963                           
  3964 ;; *************** function ___awdiv *****************
  3965 ;; Defined at:
  3966 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  dividend        2    6[COMRAM] int 
  3969 ;;  divisor         2    8[COMRAM] int 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  quotient        2   12[COMRAM] int 
  3972 ;;  sign            1   11[COMRAM] unsigned char 
  3973 ;;  counter         1   10[COMRAM] unsigned char 
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  2    6[COMRAM] int 
  3976 ;; Registers used:
  3977 ;;		wreg, status,2, status,0
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3983 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;Total ram usage:        8 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; This function calls:
  3990 ;;		Nothing
  3991 ;; This function is called by:
  3992 ;;		_fround
  3993 ;;		_scale
  3994 ;;		_sprintf
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           	psect	text7
  3999  002AC8                     __ptext7:
  4000                           	opt stack 0
  4001  002AC8                     ___awdiv:
  4002                           	opt stack 28
  4003                           
  4004                           ;incstack = 0
  4005  002AC8  0E00               	movlw	0
  4006  002ACA  6E0C               	movwf	___awdiv@sign,c
  4007  002ACC  AE0A               	btfss	___awdiv@divisor+1,7,c
  4008  002ACE  D006               	goto	l602
  4009  002AD0  6C09               	negf	___awdiv@divisor,c
  4010  002AD2  1E0A               	comf	___awdiv@divisor+1,f,c
  4011  002AD4  B0D8               	btfsc	status,0,c
  4012  002AD6  2A0A               	incf	___awdiv@divisor+1,f,c
  4013  002AD8  0E01               	movlw	1
  4014  002ADA  6E0C               	movwf	___awdiv@sign,c
  4015  002ADC                     l602:
  4016  002ADC  AE08               	btfss	___awdiv@dividend+1,7,c
  4017  002ADE  D006               	goto	l603
  4018  002AE0  6C07               	negf	___awdiv@dividend,c
  4019  002AE2  1E08               	comf	___awdiv@dividend+1,f,c
  4020  002AE4  B0D8               	btfsc	status,0,c
  4021  002AE6  2A08               	incf	___awdiv@dividend+1,f,c
  4022  002AE8  0E01               	movlw	1
  4023  002AEA  1A0C               	xorwf	___awdiv@sign,f,c
  4024  002AEC                     l603:
  4025  002AEC  0E00               	movlw	0
  4026  002AEE  6E0E               	movwf	___awdiv@quotient+1,c
  4027  002AF0  0E00               	movlw	0
  4028  002AF2  6E0D               	movwf	___awdiv@quotient,c
  4029  002AF4  5009               	movf	___awdiv@divisor,w,c
  4030  002AF6  100A               	iorwf	___awdiv@divisor+1,w,c
  4031  002AF8  B4D8               	btfsc	status,2,c
  4032  002AFA  D01C               	goto	l610
  4033  002AFC  0E01               	movlw	1
  4034  002AFE  6E0B               	movwf	___awdiv@counter,c
  4035  002B00  D004               	goto	l605
  4036  002B02  90D8               	bcf	status,0,c
  4037  002B04  3609               	rlcf	___awdiv@divisor,f,c
  4038  002B06  360A               	rlcf	___awdiv@divisor+1,f,c
  4039  002B08  2A0B               	incf	___awdiv@counter,f,c
  4040  002B0A                     l605:
  4041  002B0A  AE0A               	btfss	___awdiv@divisor+1,7,c
  4042  002B0C  D7FA               	goto	l606
  4043  002B0E                     u1890:
  4044  002B0E  90D8               	bcf	status,0,c
  4045  002B10  360D               	rlcf	___awdiv@quotient,f,c
  4046  002B12  360E               	rlcf	___awdiv@quotient+1,f,c
  4047  002B14  5009               	movf	___awdiv@divisor,w,c
  4048  002B16  5C07               	subwf	___awdiv@dividend,w,c
  4049  002B18  500A               	movf	___awdiv@divisor+1,w,c
  4050  002B1A  5808               	subwfb	___awdiv@dividend+1,w,c
  4051  002B1C  A0D8               	btfss	status,0,c
  4052  002B1E  D005               	goto	l609
  4053  002B20  5009               	movf	___awdiv@divisor,w,c
  4054  002B22  5E07               	subwf	___awdiv@dividend,f,c
  4055  002B24  500A               	movf	___awdiv@divisor+1,w,c
  4056  002B26  5A08               	subwfb	___awdiv@dividend+1,f,c
  4057  002B28  800D               	bsf	___awdiv@quotient,0,c
  4058  002B2A                     l609:
  4059  002B2A  90D8               	bcf	status,0,c
  4060  002B2C  320A               	rrcf	___awdiv@divisor+1,f,c
  4061  002B2E  3209               	rrcf	___awdiv@divisor,f,c
  4062  002B30  2E0B               	decfsz	___awdiv@counter,f,c
  4063  002B32  D7ED               	goto	u1890
  4064  002B34                     l610:
  4065  002B34  500C               	movf	___awdiv@sign,w,c
  4066  002B36  B4D8               	btfsc	status,2,c
  4067  002B38  D004               	goto	l611
  4068  002B3A  6C0D               	negf	___awdiv@quotient,c
  4069  002B3C  1E0E               	comf	___awdiv@quotient+1,f,c
  4070  002B3E  B0D8               	btfsc	status,0,c
  4071  002B40  2A0E               	incf	___awdiv@quotient+1,f,c
  4072  002B42                     l611:
  4073  002B42  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4074  002B46  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4075  002B4A  0012               	return	
  4076  002B4C                     __end_of___awdiv:
  4077                           	opt stack 0
  4078                           tblptru	equ	0xFF8
  4079                           tblptrh	equ	0xFF7
  4080                           tblptrl	equ	0xFF6
  4081                           tablat	equ	0xFF5
  4082                           prodh	equ	0xFF4
  4083                           prodl	equ	0xFF3
  4084                           postinc0	equ	0xFEE
  4085                           wreg	equ	0xFE8
  4086                           indf2	equ	0xFDF
  4087                           postinc2	equ	0xFDE
  4088                           postdec2	equ	0xFDD
  4089                           fsr2h	equ	0xFDA
  4090                           fsr2l	equ	0xFD9
  4091                           status	equ	0xFD8
  4092                           
  4093 ;; *************** function __tdiv_to_l_ *****************
  4094 ;; Defined at:
  4095 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;  f1              3    0[COMRAM] float 
  4098 ;;  f2              3    3[COMRAM] float 
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;  quot            4    9[COMRAM] unsigned long 
  4101 ;;  exp1            1   14[COMRAM] unsigned char 
  4102 ;;  cntr            1   13[COMRAM] unsigned char 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  4    0[COMRAM] unsigned long 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4112 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;Total ram usage:       15 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; This function calls:
  4119 ;;		Nothing
  4120 ;; This function is called by:
  4121 ;;		_sprintf
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           	psect	text8
  4126  00238E                     __ptext8:
  4127                           	opt stack 0
  4128  00238E                     __tdiv_to_l_:
  4129                           	opt stack 29
  4130                           
  4131                           ;incstack = 0
  4132  00238E  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4133  002392  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4134  002394  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4135  002396  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4136  002398  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4137  00239A  E301               	bnc	u2161
  4138  00239C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4139  00239E                     u2161:
  4140  00239E  5007               	movf	??__tdiv_to_l_,w,c
  4141  0023A0  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4142  0023A2  500F               	movf	__tdiv_to_l_@exp1,w,c
  4143  0023A4  A4D8               	btfss	status,2,c
  4144  0023A6  D009               	goto	l738
  4145  0023A8  0E00               	movlw	0
  4146  0023AA  6E01               	movwf	?__tdiv_to_l_,c
  4147  0023AC  0E00               	movlw	0
  4148  0023AE  6E02               	movwf	?__tdiv_to_l_+1,c
  4149  0023B0  0E00               	movlw	0
  4150  0023B2  6E03               	movwf	?__tdiv_to_l_+2,c
  4151  0023B4  0E00               	movlw	0
  4152  0023B6  6E04               	movwf	?__tdiv_to_l_+3,c
  4153  0023B8  0012               	return	
  4154  0023BA                     l738:
  4155  0023BA  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4156  0023BE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4157  0023C0  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4158  0023C2  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4159  0023C4  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4160  0023C6  E301               	bnc	u2181
  4161  0023C8  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4162  0023CA                     u2181:
  4163  0023CA  5007               	movf	??__tdiv_to_l_,w,c
  4164  0023CC  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4165  0023CE  500E               	movf	__tdiv_to_l_@cntr,w,c
  4166  0023D0  A4D8               	btfss	status,2,c
  4167  0023D2  D009               	goto	l740
  4168  0023D4  0E00               	movlw	0
  4169  0023D6  6E01               	movwf	?__tdiv_to_l_,c
  4170  0023D8  0E00               	movlw	0
  4171  0023DA  6E02               	movwf	?__tdiv_to_l_+1,c
  4172  0023DC  0E00               	movlw	0
  4173  0023DE  6E03               	movwf	?__tdiv_to_l_+2,c
  4174  0023E0  0E00               	movlw	0
  4175  0023E2  6E04               	movwf	?__tdiv_to_l_+3,c
  4176  0023E4  0012               	return	
  4177  0023E6                     l740:
  4178  0023E6  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4179  0023E8  0EFF               	movlw	255
  4180  0023EA  1601               	andwf	__tdiv_to_l_@f1,f,c
  4181  0023EC  0EFF               	movlw	255
  4182  0023EE  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4183  0023F0  0E00               	movlw	0
  4184  0023F2  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4185  0023F4  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4186  0023F6  0EFF               	movlw	255
  4187  0023F8  1604               	andwf	__tdiv_to_l_@f2,f,c
  4188  0023FA  0EFF               	movlw	255
  4189  0023FC  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4190  0023FE  0E00               	movlw	0
  4191  002400  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4192  002402  0E00               	movlw	0
  4193  002404  6E0A               	movwf	__tdiv_to_l_@quot,c
  4194  002406  0E00               	movlw	0
  4195  002408  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4196  00240A  0E00               	movlw	0
  4197  00240C  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4198  00240E  0E00               	movlw	0
  4199  002410  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4200  002412  0E7F               	movlw	127
  4201  002414  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4202  002416  500E               	movf	__tdiv_to_l_@cntr,w,c
  4203  002418  0F98               	addlw	152
  4204  00241A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4205  00241C  0E18               	movlw	24
  4206  00241E  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4207  002420                     l741:
  4208  002420  90D8               	bcf	status,0,c
  4209  002422  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4210  002424  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4211  002426  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4212  002428  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4213  00242A  5004               	movf	__tdiv_to_l_@f2,w,c
  4214  00242C  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4215  00242E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4216  002430  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4217  002432  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4218  002434  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4219  002436  A0D8               	btfss	status,0,c
  4220  002438  D007               	goto	l742
  4221  00243A  5004               	movf	__tdiv_to_l_@f2,w,c
  4222  00243C  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4223  00243E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4224  002440  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4225  002442  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4226  002444  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4227  002446  800A               	bsf	__tdiv_to_l_@quot,0,c
  4228  002448                     l742:
  4229  002448  90D8               	bcf	status,0,c
  4230  00244A  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4231  00244C  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4232  00244E  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4233  002450  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4234  002452  D7E6               	goto	l741
  4235  002454  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4236  002456  D016               	goto	l744
  4237  002458  500F               	movf	__tdiv_to_l_@exp1,w,c
  4238  00245A  0A80               	xorlw	128
  4239  00245C  0F97               	addlw	151
  4240  00245E  B0D8               	btfsc	status,0,c
  4241  002460  D009               	goto	l745
  4242  002462  0E00               	movlw	0
  4243  002464  6E01               	movwf	?__tdiv_to_l_,c
  4244  002466  0E00               	movlw	0
  4245  002468  6E02               	movwf	?__tdiv_to_l_+1,c
  4246  00246A  0E00               	movlw	0
  4247  00246C  6E03               	movwf	?__tdiv_to_l_+2,c
  4248  00246E  0E00               	movlw	0
  4249  002470  6E04               	movwf	?__tdiv_to_l_+3,c
  4250  002472  0012               	return	
  4251  002474                     l745:
  4252  002474  90D8               	bcf	status,0,c
  4253  002476  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4254  002478  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4255  00247A  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4256  00247C  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4257  00247E  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4258  002480  D7F9               	goto	l745
  4259  002482  D015               	goto	u2240
  4260  002484                     l744:
  4261  002484  0E17               	movlw	23
  4262  002486  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4263  002488  D00F               	goto	l750
  4264  00248A  0E00               	movlw	0
  4265  00248C  6E01               	movwf	?__tdiv_to_l_,c
  4266  00248E  0E00               	movlw	0
  4267  002490  6E02               	movwf	?__tdiv_to_l_+1,c
  4268  002492  0E00               	movlw	0
  4269  002494  6E03               	movwf	?__tdiv_to_l_+2,c
  4270  002496  0E00               	movlw	0
  4271  002498  6E04               	movwf	?__tdiv_to_l_+3,c
  4272  00249A  0012               	return	
  4273  00249C  90D8               	bcf	status,0,c
  4274  00249E  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4275  0024A0  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4276  0024A2  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4277  0024A4  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4278  0024A6  060F               	decf	__tdiv_to_l_@exp1,f,c
  4279  0024A8                     l750:
  4280  0024A8  500F               	movf	__tdiv_to_l_@exp1,w,c
  4281  0024AA  A4D8               	btfss	status,2,c
  4282  0024AC  D7F7               	goto	l751
  4283  0024AE                     u2240:
  4284  0024AE  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4285  0024B2  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4286  0024B6  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4287  0024BA  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4288  0024BE  0012               	return		;funcret
  4289  0024C0                     __end_of__tdiv_to_l_:
  4290                           	opt stack 0
  4291                           tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           prodh	equ	0xFF4
  4296                           prodl	equ	0xFF3
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           postdec2	equ	0xFDD
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function __div_to_l_ *****************
  4307 ;; Defined at:
  4308 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  f1              3    0[COMRAM] unsigned long 
  4311 ;;  f2              3    3[COMRAM] unsigned long 
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;  quot            4    6[COMRAM] unsigned long 
  4314 ;;  exp1            1   11[COMRAM] unsigned char 
  4315 ;;  cntr            1   10[COMRAM] unsigned char 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  4    0[COMRAM] unsigned long 
  4318 ;; Registers used:
  4319 ;;		wreg, status,2, status,0
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4325 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;Total ram usage:       12 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; This function calls:
  4332 ;;		Nothing
  4333 ;; This function is called by:
  4334 ;;		_sprintf
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text9
  4339  0024C0                     __ptext9:
  4340                           	opt stack 0
  4341  0024C0                     __div_to_l_:
  4342                           	opt stack 29
  4343                           
  4344                           ;incstack = 0
  4345  0024C0  3403               	rlcf	__div_to_l_@f1+2,w,c
  4346  0024C2  3404               	rlcf	__div_to_l_@f1+3,w,c
  4347  0024C4  6E0C               	movwf	__div_to_l_@exp1,c
  4348  0024C6  500C               	movf	__div_to_l_@exp1,w,c
  4349  0024C8  A4D8               	btfss	status,2,c
  4350  0024CA  D009               	goto	l634
  4351  0024CC  0E00               	movlw	0
  4352  0024CE  6E01               	movwf	?__div_to_l_,c
  4353  0024D0  0E00               	movlw	0
  4354  0024D2  6E02               	movwf	?__div_to_l_+1,c
  4355  0024D4  0E00               	movlw	0
  4356  0024D6  6E03               	movwf	?__div_to_l_+2,c
  4357  0024D8  0E00               	movlw	0
  4358  0024DA  6E04               	movwf	?__div_to_l_+3,c
  4359  0024DC  0012               	return	
  4360  0024DE                     l634:
  4361  0024DE  3406               	rlcf	__div_to_l_@f2+2,w,c
  4362  0024E0  3407               	rlcf	__div_to_l_@f2+3,w,c
  4363  0024E2  6E0B               	movwf	__div_to_l_@cntr,c
  4364  0024E4  500B               	movf	__div_to_l_@cntr,w,c
  4365  0024E6  A4D8               	btfss	status,2,c
  4366  0024E8  D009               	goto	l636
  4367  0024EA  0E00               	movlw	0
  4368  0024EC  6E01               	movwf	?__div_to_l_,c
  4369  0024EE  0E00               	movlw	0
  4370  0024F0  6E02               	movwf	?__div_to_l_+1,c
  4371  0024F2  0E00               	movlw	0
  4372  0024F4  6E03               	movwf	?__div_to_l_+2,c
  4373  0024F6  0E00               	movlw	0
  4374  0024F8  6E04               	movwf	?__div_to_l_+3,c
  4375  0024FA  0012               	return	
  4376  0024FC                     l636:
  4377  0024FC  8E03               	bsf	__div_to_l_@f1+2,7,c
  4378  0024FE  0EFF               	movlw	255
  4379  002500  1601               	andwf	__div_to_l_@f1,f,c
  4380  002502  0EFF               	movlw	255
  4381  002504  1602               	andwf	__div_to_l_@f1+1,f,c
  4382  002506  0EFF               	movlw	255
  4383  002508  1603               	andwf	__div_to_l_@f1+2,f,c
  4384  00250A  0E00               	movlw	0
  4385  00250C  1604               	andwf	__div_to_l_@f1+3,f,c
  4386  00250E  8E06               	bsf	__div_to_l_@f2+2,7,c
  4387  002510  0EFF               	movlw	255
  4388  002512  1604               	andwf	__div_to_l_@f2,f,c
  4389  002514  0EFF               	movlw	255
  4390  002516  1605               	andwf	__div_to_l_@f2+1,f,c
  4391  002518  0EFF               	movlw	255
  4392  00251A  1606               	andwf	__div_to_l_@f2+2,f,c
  4393  00251C  0E00               	movlw	0
  4394  00251E  1607               	andwf	__div_to_l_@f2+3,f,c
  4395  002520  0E00               	movlw	0
  4396  002522  6E07               	movwf	__div_to_l_@quot,c
  4397  002524  0E00               	movlw	0
  4398  002526  6E08               	movwf	__div_to_l_@quot+1,c
  4399  002528  0E00               	movlw	0
  4400  00252A  6E09               	movwf	__div_to_l_@quot+2,c
  4401  00252C  0E00               	movlw	0
  4402  00252E  6E0A               	movwf	__div_to_l_@quot+3,c
  4403  002530  0E7F               	movlw	127
  4404  002532  5E0C               	subwf	__div_to_l_@exp1,f,c
  4405  002534  500B               	movf	__div_to_l_@cntr,w,c
  4406  002536  0FA0               	addlw	160
  4407  002538  5E0C               	subwf	__div_to_l_@exp1,f,c
  4408  00253A  0E20               	movlw	32
  4409  00253C  6E0B               	movwf	__div_to_l_@cntr,c
  4410  00253E  90D8               	bcf	status,0,c
  4411  002540  3607               	rlcf	__div_to_l_@quot,f,c
  4412  002542  3608               	rlcf	__div_to_l_@quot+1,f,c
  4413  002544  3609               	rlcf	__div_to_l_@quot+2,f,c
  4414  002546  360A               	rlcf	__div_to_l_@quot+3,f,c
  4415  002548  5004               	movf	__div_to_l_@f2,w,c
  4416  00254A  5C01               	subwf	__div_to_l_@f1,w,c
  4417  00254C  5005               	movf	__div_to_l_@f2+1,w,c
  4418  00254E  5802               	subwfb	__div_to_l_@f1+1,w,c
  4419  002550  5006               	movf	__div_to_l_@f2+2,w,c
  4420  002552  5803               	subwfb	__div_to_l_@f1+2,w,c
  4421  002554  5007               	movf	__div_to_l_@f2+3,w,c
  4422  002556  5804               	subwfb	__div_to_l_@f1+3,w,c
  4423  002558  A0D8               	btfss	status,0,c
  4424  00255A  D009               	goto	l638
  4425  00255C  5004               	movf	__div_to_l_@f2,w,c
  4426  00255E  5E01               	subwf	__div_to_l_@f1,f,c
  4427  002560  5005               	movf	__div_to_l_@f2+1,w,c
  4428  002562  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4429  002564  5006               	movf	__div_to_l_@f2+2,w,c
  4430  002566  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4431  002568  5007               	movf	__div_to_l_@f2+3,w,c
  4432  00256A  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4433  00256C  8007               	bsf	__div_to_l_@quot,0,c
  4434  00256E                     l638:
  4435  00256E  90D8               	bcf	status,0,c
  4436  002570  3601               	rlcf	__div_to_l_@f1,f,c
  4437  002572  3602               	rlcf	__div_to_l_@f1+1,f,c
  4438  002574  3603               	rlcf	__div_to_l_@f1+2,f,c
  4439  002576  3604               	rlcf	__div_to_l_@f1+3,f,c
  4440  002578  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4441  00257A  D7E1               	goto	l637
  4442  00257C  AE0C               	btfss	__div_to_l_@exp1,7,c
  4443  00257E  D016               	goto	l640
  4444  002580  500C               	movf	__div_to_l_@exp1,w,c
  4445  002582  0A80               	xorlw	128
  4446  002584  0F9F               	addlw	159
  4447  002586  B0D8               	btfsc	status,0,c
  4448  002588  D009               	goto	l641
  4449  00258A  0E00               	movlw	0
  4450  00258C  6E01               	movwf	?__div_to_l_,c
  4451  00258E  0E00               	movlw	0
  4452  002590  6E02               	movwf	?__div_to_l_+1,c
  4453  002592  0E00               	movlw	0
  4454  002594  6E03               	movwf	?__div_to_l_+2,c
  4455  002596  0E00               	movlw	0
  4456  002598  6E04               	movwf	?__div_to_l_+3,c
  4457  00259A  0012               	return	
  4458  00259C                     l641:
  4459  00259C  90D8               	bcf	status,0,c
  4460  00259E  320A               	rrcf	__div_to_l_@quot+3,f,c
  4461  0025A0  3209               	rrcf	__div_to_l_@quot+2,f,c
  4462  0025A2  3208               	rrcf	__div_to_l_@quot+1,f,c
  4463  0025A4  3207               	rrcf	__div_to_l_@quot,f,c
  4464  0025A6  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4465  0025A8  D7F9               	goto	l641
  4466  0025AA  D015               	goto	u2310
  4467  0025AC                     l640:
  4468  0025AC  0E1F               	movlw	31
  4469  0025AE  640C               	cpfsgt	__div_to_l_@exp1,c
  4470  0025B0  D00F               	goto	l646
  4471  0025B2  0E00               	movlw	0
  4472  0025B4  6E01               	movwf	?__div_to_l_,c
  4473  0025B6  0E00               	movlw	0
  4474  0025B8  6E02               	movwf	?__div_to_l_+1,c
  4475  0025BA  0E00               	movlw	0
  4476  0025BC  6E03               	movwf	?__div_to_l_+2,c
  4477  0025BE  0E00               	movlw	0
  4478  0025C0  6E04               	movwf	?__div_to_l_+3,c
  4479  0025C2  0012               	return	
  4480  0025C4  90D8               	bcf	status,0,c
  4481  0025C6  3607               	rlcf	__div_to_l_@quot,f,c
  4482  0025C8  3608               	rlcf	__div_to_l_@quot+1,f,c
  4483  0025CA  3609               	rlcf	__div_to_l_@quot+2,f,c
  4484  0025CC  360A               	rlcf	__div_to_l_@quot+3,f,c
  4485  0025CE  060C               	decf	__div_to_l_@exp1,f,c
  4486  0025D0                     l646:
  4487  0025D0  500C               	movf	__div_to_l_@exp1,w,c
  4488  0025D2  A4D8               	btfss	status,2,c
  4489  0025D4  D7F7               	goto	l647
  4490  0025D6                     u2310:
  4491  0025D6  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4492  0025DA  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4493  0025DE  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4494  0025E2  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4495  0025E6  0012               	return		;funcret
  4496  0025E8                     __end_of__div_to_l_:
  4497                           	opt stack 0
  4498                           tblptru	equ	0xFF8
  4499                           tblptrh	equ	0xFF7
  4500                           tblptrl	equ	0xFF6
  4501                           tablat	equ	0xFF5
  4502                           prodh	equ	0xFF4
  4503                           prodl	equ	0xFF3
  4504                           postinc0	equ	0xFEE
  4505                           wreg	equ	0xFE8
  4506                           indf2	equ	0xFDF
  4507                           postinc2	equ	0xFDE
  4508                           postdec2	equ	0xFDD
  4509                           fsr2h	equ	0xFDA
  4510                           fsr2l	equ	0xFD9
  4511                           status	equ	0xFD8
  4512                           
  4513 ;; *************** function ___lltoft *****************
  4514 ;; Defined at:
  4515 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  c               4    8[COMRAM] unsigned long 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  exp             1   16[COMRAM] unsigned char 
  4520 ;; Return value:  Size  Location     Type
  4521 ;;                  3    8[COMRAM] float 
  4522 ;; Registers used:
  4523 ;;		wreg, status,2, status,0, cstack
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4529 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;Total ram usage:        9 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    1
  4536 ;; This function calls:
  4537 ;;		___ftpack
  4538 ;; This function is called by:
  4539 ;;		_sprintf
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text10
  4544  002E02                     __ptext10:
  4545                           	opt stack 0
  4546  002E02                     ___lltoft:
  4547                           	opt stack 28
  4548                           
  4549                           ;incstack = 0
  4550  002E02  0E8E               	movlw	142
  4551  002E04  6E11               	movwf	___lltoft@exp,c
  4552  002E06  D006               	goto	l845
  4553  002E08  90D8               	bcf	status,0,c
  4554  002E0A  320C               	rrcf	___lltoft@c+3,f,c
  4555  002E0C  320B               	rrcf	___lltoft@c+2,f,c
  4556  002E0E  320A               	rrcf	___lltoft@c+1,f,c
  4557  002E10  3209               	rrcf	___lltoft@c,f,c
  4558  002E12  2A11               	incf	___lltoft@exp,f,c
  4559  002E14                     l845:
  4560  002E14  0E00               	movlw	0
  4561  002E16  1409               	andwf	___lltoft@c,w,c
  4562  002E18  6E0D               	movwf	??___lltoft& (0+255),c
  4563  002E1A  0E00               	movlw	0
  4564  002E1C  140A               	andwf	___lltoft@c+1,w,c
  4565  002E1E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4566  002E20  0E00               	movlw	0
  4567  002E22  140B               	andwf	___lltoft@c+2,w,c
  4568  002E24  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4569  002E26  0EFF               	movlw	255
  4570  002E28  140C               	andwf	___lltoft@c+3,w,c
  4571  002E2A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4572  002E2C  500D               	movf	??___lltoft,w,c
  4573  002E2E  100E               	iorwf	??___lltoft+1,w,c
  4574  002E30  100F               	iorwf	??___lltoft+2,w,c
  4575  002E32  1010               	iorwf	??___lltoft+3,w,c
  4576  002E34  A4D8               	btfss	status,2,c
  4577  002E36  D7E8               	goto	l846
  4578  002E38  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4579  002E3C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4580  002E40  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4581  002E44  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4582  002E48  0E00               	movlw	0
  4583  002E4A  6E05               	movwf	___ftpack@sign,c
  4584  002E4C  ECC5  F014         	call	___ftpack	;wreg free
  4585  002E50  C001  F009         	movff	?___ftpack,?___lltoft
  4586  002E54  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4587  002E58  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4588  002E5C  0012               	return	
  4589  002E5E                     __end_of___lltoft:
  4590                           	opt stack 0
  4591                           tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           postinc0	equ	0xFEE
  4598                           wreg	equ	0xFE8
  4599                           indf2	equ	0xFDF
  4600                           postinc2	equ	0xFDE
  4601                           postdec2	equ	0xFDD
  4602                           fsr2h	equ	0xFDA
  4603                           fsr2l	equ	0xFD9
  4604                           status	equ	0xFD8
  4605                           
  4606 ;; *************** function ___llmod *****************
  4607 ;; Defined at:
  4608 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  dividend        4    0[COMRAM] unsigned long 
  4611 ;;  divisor         4    4[COMRAM] unsigned long 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  counter         1    8[COMRAM] unsigned char 
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  4    0[COMRAM] unsigned long 
  4616 ;; Registers used:
  4617 ;;		wreg, status,2, status,0
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4623 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;Total ram usage:        9 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; This function calls:
  4630 ;;		Nothing
  4631 ;; This function is called by:
  4632 ;;		_sprintf
  4633 ;; This function uses a non-reentrant model
  4634 ;;
  4635                           
  4636                           	psect	text11
  4637  002D9C                     __ptext11:
  4638                           	opt stack 0
  4639  002D9C                     ___llmod:
  4640                           	opt stack 29
  4641                           
  4642                           ;incstack = 0
  4643  002D9C  5005               	movf	___llmod@divisor,w,c
  4644  002D9E  1006               	iorwf	___llmod@divisor+1,w,c
  4645  002DA0  1007               	iorwf	___llmod@divisor+2,w,c
  4646  002DA2  1008               	iorwf	___llmod@divisor+3,w,c
  4647  002DA4  B4D8               	btfsc	status,2,c
  4648  002DA6  D024               	goto	l839
  4649  002DA8  0E01               	movlw	1
  4650  002DAA  6E09               	movwf	___llmod@counter,c
  4651  002DAC  D006               	goto	l834
  4652  002DAE  90D8               	bcf	status,0,c
  4653  002DB0  3605               	rlcf	___llmod@divisor,f,c
  4654  002DB2  3606               	rlcf	___llmod@divisor+1,f,c
  4655  002DB4  3607               	rlcf	___llmod@divisor+2,f,c
  4656  002DB6  3608               	rlcf	___llmod@divisor+3,f,c
  4657  002DB8  2A09               	incf	___llmod@counter,f,c
  4658  002DBA                     l834:
  4659  002DBA  AE08               	btfss	___llmod@divisor+3,7,c
  4660  002DBC  D7F8               	goto	l835
  4661  002DBE                     u2470:
  4662  002DBE  5005               	movf	___llmod@divisor,w,c
  4663  002DC0  5C01               	subwf	___llmod@dividend,w,c
  4664  002DC2  5006               	movf	___llmod@divisor+1,w,c
  4665  002DC4  5802               	subwfb	___llmod@dividend+1,w,c
  4666  002DC6  5007               	movf	___llmod@divisor+2,w,c
  4667  002DC8  5803               	subwfb	___llmod@dividend+2,w,c
  4668  002DCA  5008               	movf	___llmod@divisor+3,w,c
  4669  002DCC  5804               	subwfb	___llmod@dividend+3,w,c
  4670  002DCE  A0D8               	btfss	status,0,c
  4671  002DD0  D008               	goto	l838
  4672  002DD2  5005               	movf	___llmod@divisor,w,c
  4673  002DD4  5E01               	subwf	___llmod@dividend,f,c
  4674  002DD6  5006               	movf	___llmod@divisor+1,w,c
  4675  002DD8  5A02               	subwfb	___llmod@dividend+1,f,c
  4676  002DDA  5007               	movf	___llmod@divisor+2,w,c
  4677  002DDC  5A03               	subwfb	___llmod@dividend+2,f,c
  4678  002DDE  5008               	movf	___llmod@divisor+3,w,c
  4679  002DE0  5A04               	subwfb	___llmod@dividend+3,f,c
  4680  002DE2                     l838:
  4681  002DE2  90D8               	bcf	status,0,c
  4682  002DE4  3208               	rrcf	___llmod@divisor+3,f,c
  4683  002DE6  3207               	rrcf	___llmod@divisor+2,f,c
  4684  002DE8  3206               	rrcf	___llmod@divisor+1,f,c
  4685  002DEA  3205               	rrcf	___llmod@divisor,f,c
  4686  002DEC  2E09               	decfsz	___llmod@counter,f,c
  4687  002DEE  D7E7               	goto	u2470
  4688  002DF0                     l839:
  4689  002DF0  C001  F001         	movff	___llmod@dividend,?___llmod
  4690  002DF4  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4691  002DF8  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4692  002DFC  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4693  002E00  0012               	return		;funcret
  4694  002E02                     __end_of___llmod:
  4695                           	opt stack 0
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           prodh	equ	0xFF4
  4701                           prodl	equ	0xFF3
  4702                           postinc0	equ	0xFEE
  4703                           wreg	equ	0xFE8
  4704                           indf2	equ	0xFDF
  4705                           postinc2	equ	0xFDE
  4706                           postdec2	equ	0xFDD
  4707                           fsr2h	equ	0xFDA
  4708                           fsr2l	equ	0xFD9
  4709                           status	equ	0xFD8
  4710                           
  4711 ;; *************** function ___ftsub *****************
  4712 ;; Defined at:
  4713 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;  f1              3   57[COMRAM] float 
  4716 ;;  f2              3   60[COMRAM] float 
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  3   57[COMRAM] float 
  4721 ;; Registers used:
  4722 ;;		wreg, status,2, status,0, cstack
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4728 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;Total ram usage:        6 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    2
  4735 ;; This function calls:
  4736 ;;		___ftadd
  4737 ;; This function is called by:
  4738 ;;		_sprintf
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text12
  4743  00304A                     __ptext12:
  4744                           	opt stack 0
  4745  00304A                     ___ftsub:
  4746                           	opt stack 27
  4747                           
  4748                           ;incstack = 0
  4749  00304A  503D               	movf	___ftsub@f2,w,c
  4750  00304C  103E               	iorwf	___ftsub@f2+1,w,c
  4751  00304E  103F               	iorwf	___ftsub@f2+2,w,c
  4752  003050  B4D8               	btfsc	status,2,c
  4753  003052  D006               	goto	l779
  4754  003054  0E00               	movlw	0
  4755  003056  1A3D               	xorwf	___ftsub@f2,f,c
  4756  003058  0E00               	movlw	0
  4757  00305A  1A3E               	xorwf	___ftsub@f2+1,f,c
  4758  00305C  0E80               	movlw	128
  4759  00305E  1A3F               	xorwf	___ftsub@f2+2,f,c
  4760  003060                     l779:
  4761  003060  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4762  003064  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4763  003068  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4764  00306C  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4765  003070  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4766  003074  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4767  003078  ECF1  F010         	call	___ftadd	;wreg free
  4768  00307C  C02E  F03A         	movff	?___ftadd,?___ftsub
  4769  003080  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4770  003084  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4771  003088  0012               	return	
  4772  00308A                     __end_of___ftsub:
  4773                           	opt stack 0
  4774                           tblptru	equ	0xFF8
  4775                           tblptrh	equ	0xFF7
  4776                           tblptrl	equ	0xFF6
  4777                           tablat	equ	0xFF5
  4778                           prodh	equ	0xFF4
  4779                           prodl	equ	0xFF3
  4780                           postinc0	equ	0xFEE
  4781                           wreg	equ	0xFE8
  4782                           indf2	equ	0xFDF
  4783                           postinc2	equ	0xFDE
  4784                           postdec2	equ	0xFDD
  4785                           fsr2h	equ	0xFDA
  4786                           fsr2l	equ	0xFD9
  4787                           status	equ	0xFD8
  4788                           
  4789 ;; *************** function ___ftadd *****************
  4790 ;; Defined at:
  4791 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;  f1              3   45[COMRAM] float 
  4794 ;;  f2              3   48[COMRAM] float 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;  exp1            1   56[COMRAM] unsigned char 
  4797 ;;  exp2            1   55[COMRAM] unsigned char 
  4798 ;;  sign            1   54[COMRAM] unsigned char 
  4799 ;; Return value:  Size  Location     Type
  4800 ;;                  3   45[COMRAM] float 
  4801 ;; Registers used:
  4802 ;;		wreg, status,2, status,0, cstack
  4803 ;; Tracked objects:
  4804 ;;		On entry : 0/0
  4805 ;;		On exit  : 0/0
  4806 ;;		Unchanged: 0/0
  4807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4808 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4811 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4812 ;;Total ram usage:       12 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; Hardware stack levels required when called:    1
  4815 ;; This function calls:
  4816 ;;		___ftpack
  4817 ;; This function is called by:
  4818 ;;		_sprintf
  4819 ;;		___ftsub
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           	psect	text13
  4824  0021E2                     __ptext13:
  4825                           	opt stack 0
  4826  0021E2                     ___ftadd:
  4827                           	opt stack 27
  4828                           
  4829                           ;incstack = 0
  4830  0021E2  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4831  0021E6  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4832  0021E8  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4833  0021EA  342F               	rlcf	___ftadd@f1+1,w,c
  4834  0021EC  3634               	rlcf	??___ftadd& (0+255),f,c
  4835  0021EE  E301               	bnc	u1591
  4836  0021F0  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4837  0021F2                     u1591:
  4838  0021F2  5034               	movf	??___ftadd,w,c
  4839  0021F4  6E39               	movwf	___ftadd@exp1,c
  4840  0021F6  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4841  0021FA  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4842  0021FC  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4843  0021FE  3432               	rlcf	___ftadd@f2+1,w,c
  4844  002200  3634               	rlcf	??___ftadd& (0+255),f,c
  4845  002202  E301               	bnc	u1601
  4846  002204  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4847  002206                     u1601:
  4848  002206  5034               	movf	??___ftadd,w,c
  4849  002208  6E38               	movwf	___ftadd@exp2,c
  4850  00220A  5039               	movf	___ftadd@exp1,w,c
  4851  00220C  B4D8               	btfsc	status,2,c
  4852  00220E  D00B               	goto	u1630
  4853  002210  5038               	movf	___ftadd@exp2,w,c
  4854  002212  5C39               	subwf	___ftadd@exp1,w,c
  4855  002214  B0D8               	btfsc	status,0,c
  4856  002216  D00E               	goto	l697
  4857  002218  5039               	movf	___ftadd@exp1,w,c
  4858  00221A  0800               	sublw	0
  4859  00221C  2438               	addwf	___ftadd@exp2,w,c
  4860  00221E  6E34               	movwf	??___ftadd& (0+255),c
  4861  002220  0E18               	movlw	24
  4862  002222  6434               	cpfsgt	??___ftadd,c
  4863  002224  D007               	goto	l697
  4864  002226                     u1630:
  4865  002226  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4866  00222A  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4867  00222E  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4868  002232  0012               	return	
  4869  002234                     l697:
  4870  002234  5038               	movf	___ftadd@exp2,w,c
  4871  002236  B4D8               	btfsc	status,2,c
  4872  002238  D00B               	goto	u1660
  4873  00223A  5039               	movf	___ftadd@exp1,w,c
  4874  00223C  5C38               	subwf	___ftadd@exp2,w,c
  4875  00223E  B0D8               	btfsc	status,0,c
  4876  002240  D00E               	goto	l701
  4877  002242  5038               	movf	___ftadd@exp2,w,c
  4878  002244  0800               	sublw	0
  4879  002246  2439               	addwf	___ftadd@exp1,w,c
  4880  002248  6E34               	movwf	??___ftadd& (0+255),c
  4881  00224A  0E18               	movlw	24
  4882  00224C  6434               	cpfsgt	??___ftadd,c
  4883  00224E  D007               	goto	l701
  4884  002250                     u1660:
  4885  002250  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4886  002254  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4887  002258  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4888  00225C  0012               	return	
  4889  00225E                     l701:
  4890  00225E  0E06               	movlw	6
  4891  002260  6E37               	movwf	___ftadd@sign,c
  4892  002262  BE30               	btfsc	___ftadd@f1+2,7,c
  4893  002264  8E37               	bsf	___ftadd@sign,7,c
  4894  002266  BE33               	btfsc	___ftadd@f2+2,7,c
  4895  002268  8C37               	bsf	___ftadd@sign,6,c
  4896  00226A  8E2F               	bsf	___ftadd@f1+1,7,c
  4897  00226C  0EFF               	movlw	255
  4898  00226E  162E               	andwf	___ftadd@f1,f,c
  4899  002270  0EFF               	movlw	255
  4900  002272  162F               	andwf	___ftadd@f1+1,f,c
  4901  002274  0E00               	movlw	0
  4902  002276  1630               	andwf	___ftadd@f1+2,f,c
  4903  002278  8E32               	bsf	___ftadd@f2+1,7,c
  4904  00227A  0EFF               	movlw	255
  4905  00227C  1631               	andwf	___ftadd@f2,f,c
  4906  00227E  0EFF               	movlw	255
  4907  002280  1632               	andwf	___ftadd@f2+1,f,c
  4908  002282  0E00               	movlw	0
  4909  002284  1633               	andwf	___ftadd@f2+2,f,c
  4910  002286  5038               	movf	___ftadd@exp2,w,c
  4911  002288  5C39               	subwf	___ftadd@exp1,w,c
  4912  00228A  B0D8               	btfsc	status,0,c
  4913  00228C  D01B               	goto	l706
  4914  00228E                     u1690:
  4915  00228E  90D8               	bcf	status,0,c
  4916  002290  3631               	rlcf	___ftadd@f2,f,c
  4917  002292  3632               	rlcf	___ftadd@f2+1,f,c
  4918  002294  3633               	rlcf	___ftadd@f2+2,f,c
  4919  002296  0638               	decf	___ftadd@exp2,f,c
  4920  002298  5039               	movf	___ftadd@exp1,w,c
  4921  00229A  1838               	xorwf	___ftadd@exp2,w,c
  4922  00229C  B4D8               	btfsc	status,2,c
  4923  00229E  D00D               	goto	l711
  4924  0022A0  0637               	decf	___ftadd@sign,f,c
  4925  0022A2  C037  F034         	movff	___ftadd@sign,??___ftadd
  4926  0022A6  0E07               	movlw	7
  4927  0022A8  1634               	andwf	??___ftadd,f,c
  4928  0022AA  B4D8               	btfsc	status,2,c
  4929  0022AC  D006               	goto	l711
  4930  0022AE  D7EF               	goto	u1690
  4931  0022B0  90D8               	bcf	status,0,c
  4932  0022B2  3230               	rrcf	___ftadd@f1+2,f,c
  4933  0022B4  322F               	rrcf	___ftadd@f1+1,f,c
  4934  0022B6  322E               	rrcf	___ftadd@f1,f,c
  4935  0022B8  2A39               	incf	___ftadd@exp1,f,c
  4936  0022BA                     l711:
  4937  0022BA  5038               	movf	___ftadd@exp2,w,c
  4938  0022BC  1839               	xorwf	___ftadd@exp1,w,c
  4939  0022BE  B4D8               	btfsc	status,2,c
  4940  0022C0  D01F               	goto	u1760
  4941  0022C2  D7F6               	goto	l712
  4942  0022C4                     l706:
  4943  0022C4  5039               	movf	___ftadd@exp1,w,c
  4944  0022C6  5C38               	subwf	___ftadd@exp2,w,c
  4945  0022C8  B0D8               	btfsc	status,0,c
  4946  0022CA  D01A               	goto	u1760
  4947  0022CC                     u1730:
  4948  0022CC  90D8               	bcf	status,0,c
  4949  0022CE  362E               	rlcf	___ftadd@f1,f,c
  4950  0022D0  362F               	rlcf	___ftadd@f1+1,f,c
  4951  0022D2  3630               	rlcf	___ftadd@f1+2,f,c
  4952  0022D4  0639               	decf	___ftadd@exp1,f,c
  4953  0022D6  5039               	movf	___ftadd@exp1,w,c
  4954  0022D8  1838               	xorwf	___ftadd@exp2,w,c
  4955  0022DA  B4D8               	btfsc	status,2,c
  4956  0022DC  D00D               	goto	l720
  4957  0022DE  0637               	decf	___ftadd@sign,f,c
  4958  0022E0  C037  F034         	movff	___ftadd@sign,??___ftadd
  4959  0022E4  0E07               	movlw	7
  4960  0022E6  1634               	andwf	??___ftadd,f,c
  4961  0022E8  B4D8               	btfsc	status,2,c
  4962  0022EA  D006               	goto	l720
  4963  0022EC  D7EF               	goto	u1730
  4964  0022EE  90D8               	bcf	status,0,c
  4965  0022F0  3233               	rrcf	___ftadd@f2+2,f,c
  4966  0022F2  3232               	rrcf	___ftadd@f2+1,f,c
  4967  0022F4  3231               	rrcf	___ftadd@f2,f,c
  4968  0022F6  2A38               	incf	___ftadd@exp2,f,c
  4969  0022F8                     l720:
  4970  0022F8  5038               	movf	___ftadd@exp2,w,c
  4971  0022FA  1839               	xorwf	___ftadd@exp1,w,c
  4972  0022FC  A4D8               	btfss	status,2,c
  4973  0022FE  D7F7               	goto	l721
  4974  002300                     u1760:
  4975  002300  AE37               	btfss	___ftadd@sign,7,c
  4976  002302  D00C               	goto	l723
  4977  002304  0EFF               	movlw	255
  4978  002306  1A2E               	xorwf	___ftadd@f1,f,c
  4979  002308  0EFF               	movlw	255
  4980  00230A  1A2F               	xorwf	___ftadd@f1+1,f,c
  4981  00230C  0EFF               	movlw	255
  4982  00230E  1A30               	xorwf	___ftadd@f1+2,f,c
  4983  002310  0E01               	movlw	1
  4984  002312  262E               	addwf	___ftadd@f1,f,c
  4985  002314  0E00               	movlw	0
  4986  002316  222F               	addwfc	___ftadd@f1+1,f,c
  4987  002318  0E00               	movlw	0
  4988  00231A  2230               	addwfc	___ftadd@f1+2,f,c
  4989  00231C                     l723:
  4990  00231C  AC37               	btfss	___ftadd@sign,6,c
  4991  00231E  D00C               	goto	l724
  4992  002320  0EFF               	movlw	255
  4993  002322  1A31               	xorwf	___ftadd@f2,f,c
  4994  002324  0EFF               	movlw	255
  4995  002326  1A32               	xorwf	___ftadd@f2+1,f,c
  4996  002328  0EFF               	movlw	255
  4997  00232A  1A33               	xorwf	___ftadd@f2+2,f,c
  4998  00232C  0E01               	movlw	1
  4999  00232E  2631               	addwf	___ftadd@f2,f,c
  5000  002330  0E00               	movlw	0
  5001  002332  2232               	addwfc	___ftadd@f2+1,f,c
  5002  002334  0E00               	movlw	0
  5003  002336  2233               	addwfc	___ftadd@f2+2,f,c
  5004  002338                     l724:
  5005  002338  0E00               	movlw	0
  5006  00233A  6E37               	movwf	___ftadd@sign,c
  5007  00233C  502E               	movf	___ftadd@f1,w,c
  5008  00233E  2631               	addwf	___ftadd@f2,f,c
  5009  002340  502F               	movf	___ftadd@f1+1,w,c
  5010  002342  2232               	addwfc	___ftadd@f2+1,f,c
  5011  002344  5030               	movf	___ftadd@f1+2,w,c
  5012  002346  2233               	addwfc	___ftadd@f2+2,f,c
  5013  002348  AE33               	btfss	___ftadd@f2+2,7,c
  5014  00234A  D00E               	goto	l725
  5015  00234C  0EFF               	movlw	255
  5016  00234E  1A31               	xorwf	___ftadd@f2,f,c
  5017  002350  0EFF               	movlw	255
  5018  002352  1A32               	xorwf	___ftadd@f2+1,f,c
  5019  002354  0EFF               	movlw	255
  5020  002356  1A33               	xorwf	___ftadd@f2+2,f,c
  5021  002358  0E01               	movlw	1
  5022  00235A  2631               	addwf	___ftadd@f2,f,c
  5023  00235C  0E00               	movlw	0
  5024  00235E  2232               	addwfc	___ftadd@f2+1,f,c
  5025  002360  0E00               	movlw	0
  5026  002362  2233               	addwfc	___ftadd@f2+2,f,c
  5027  002364  0E01               	movlw	1
  5028  002366  6E37               	movwf	___ftadd@sign,c
  5029  002368                     l725:
  5030  002368  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5031  00236C  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5032  002370  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5033  002374  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5034  002378  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5035  00237C  ECC5  F014         	call	___ftpack	;wreg free
  5036  002380  C001  F02E         	movff	?___ftpack,?___ftadd
  5037  002384  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5038  002388  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5039  00238C  0012               	return	
  5040  00238E                     __end_of___ftadd:
  5041                           	opt stack 0
  5042                           tblptru	equ	0xFF8
  5043                           tblptrh	equ	0xFF7
  5044                           tblptrl	equ	0xFF6
  5045                           tablat	equ	0xFF5
  5046                           prodh	equ	0xFF4
  5047                           prodl	equ	0xFF3
  5048                           postinc0	equ	0xFEE
  5049                           wreg	equ	0xFE8
  5050                           indf2	equ	0xFDF
  5051                           postinc2	equ	0xFDE
  5052                           postdec2	equ	0xFDD
  5053                           fsr2h	equ	0xFDA
  5054                           fsr2l	equ	0xFD9
  5055                           status	equ	0xFD8
  5056                           
  5057 ;; *************** function ___ftneg *****************
  5058 ;; Defined at:
  5059 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;  f1              3    0[COMRAM] float 
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;		None
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  3    0[COMRAM] float 
  5066 ;; Registers used:
  5067 ;;		wreg, status,2, status,0
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5073 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5077 ;;Total ram usage:        3 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; This function calls:
  5080 ;;		Nothing
  5081 ;; This function is called by:
  5082 ;;		_sprintf
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text14
  5087  003110                     __ptext14:
  5088                           	opt stack 0
  5089  003110                     ___ftneg:
  5090                           	opt stack 29
  5091                           
  5092                           ;incstack = 0
  5093  003110  5001               	movf	___ftneg@f1,w,c
  5094  003112  1002               	iorwf	___ftneg@f1+1,w,c
  5095  003114  1003               	iorwf	___ftneg@f1+2,w,c
  5096  003116  B4D8               	btfsc	status,2,c
  5097  003118  D006               	goto	l773
  5098  00311A  0E00               	movlw	0
  5099  00311C  1A01               	xorwf	___ftneg@f1,f,c
  5100  00311E  0E00               	movlw	0
  5101  003120  1A02               	xorwf	___ftneg@f1+1,f,c
  5102  003122  0E80               	movlw	128
  5103  003124  1A03               	xorwf	___ftneg@f1+2,f,c
  5104  003126                     l773:
  5105  003126  C001  F001         	movff	___ftneg@f1,?___ftneg
  5106  00312A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5107  00312E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5108  003132  0012               	return		;funcret
  5109  003134                     __end_of___ftneg:
  5110                           	opt stack 0
  5111                           tblptru	equ	0xFF8
  5112                           tblptrh	equ	0xFF7
  5113                           tblptrl	equ	0xFF6
  5114                           tablat	equ	0xFF5
  5115                           prodh	equ	0xFF4
  5116                           prodl	equ	0xFF3
  5117                           postinc0	equ	0xFEE
  5118                           wreg	equ	0xFE8
  5119                           indf2	equ	0xFDF
  5120                           postinc2	equ	0xFDE
  5121                           postdec2	equ	0xFDD
  5122                           fsr2h	equ	0xFDA
  5123                           fsr2l	equ	0xFD9
  5124                           status	equ	0xFD8
  5125                           
  5126 ;; *************** function ___ftge *****************
  5127 ;; Defined at:
  5128 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;  ff1             3    0[COMRAM] float 
  5131 ;;  ff2             3    3[COMRAM] float 
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;		None               void
  5136 ;; Registers used:
  5137 ;;		wreg, status,2, status,0
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5143 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5145 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5146 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5147 ;;Total ram usage:        9 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; This function calls:
  5150 ;;		Nothing
  5151 ;; This function is called by:
  5152 ;;		_sprintf
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text15
  5157  002A38                     __ptext15:
  5158                           	opt stack 0
  5159  002A38                     ___ftge:
  5160                           	opt stack 29
  5161                           
  5162                           ;incstack = 0
  5163  002A38  AE03               	btfss	___ftge@ff1+2,7,c
  5164  002A3A  D016               	goto	l755
  5165  002A3C  C001  F007         	movff	___ftge@ff1,??___ftge
  5166  002A40  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5167  002A44  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5168  002A48  1E07               	comf	??___ftge,f,c
  5169  002A4A  1E08               	comf	??___ftge+1,f,c
  5170  002A4C  1E09               	comf	??___ftge+2,f,c
  5171  002A4E  2A07               	incf	??___ftge,f,c
  5172  002A50  0E00               	movlw	0
  5173  002A52  2208               	addwfc	??___ftge+1,f,c
  5174  002A54  2209               	addwfc	??___ftge+2,f,c
  5175  002A56  0E00               	movlw	0
  5176  002A58  2407               	addwf	??___ftge,w,c
  5177  002A5A  6E01               	movwf	___ftge@ff1,c
  5178  002A5C  0E00               	movlw	0
  5179  002A5E  2008               	addwfc	??___ftge+1,w,c
  5180  002A60  6E02               	movwf	___ftge@ff1+1,c
  5181  002A62  0E80               	movlw	128
  5182  002A64  2009               	addwfc	??___ftge+2,w,c
  5183  002A66  6E03               	movwf	___ftge@ff1+2,c
  5184  002A68                     l755:
  5185  002A68  AE06               	btfss	___ftge@ff2+2,7,c
  5186  002A6A  D016               	goto	l756
  5187  002A6C  C004  F007         	movff	___ftge@ff2,??___ftge
  5188  002A70  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5189  002A74  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5190  002A78  1E07               	comf	??___ftge,f,c
  5191  002A7A  1E08               	comf	??___ftge+1,f,c
  5192  002A7C  1E09               	comf	??___ftge+2,f,c
  5193  002A7E  2A07               	incf	??___ftge,f,c
  5194  002A80  0E00               	movlw	0
  5195  002A82  2208               	addwfc	??___ftge+1,f,c
  5196  002A84  2209               	addwfc	??___ftge+2,f,c
  5197  002A86  0E00               	movlw	0
  5198  002A88  2407               	addwf	??___ftge,w,c
  5199  002A8A  6E04               	movwf	___ftge@ff2,c
  5200  002A8C  0E00               	movlw	0
  5201  002A8E  2008               	addwfc	??___ftge+1,w,c
  5202  002A90  6E05               	movwf	___ftge@ff2+1,c
  5203  002A92  0E80               	movlw	128
  5204  002A94  2009               	addwfc	??___ftge+2,w,c
  5205  002A96  6E06               	movwf	___ftge@ff2+2,c
  5206  002A98                     l756:
  5207  002A98  0E00               	movlw	0
  5208  002A9A  1A01               	xorwf	___ftge@ff1,f,c
  5209  002A9C  0E00               	movlw	0
  5210  002A9E  1A02               	xorwf	___ftge@ff1+1,f,c
  5211  002AA0  0E80               	movlw	128
  5212  002AA2  1A03               	xorwf	___ftge@ff1+2,f,c
  5213  002AA4  0E00               	movlw	0
  5214  002AA6  1A04               	xorwf	___ftge@ff2,f,c
  5215  002AA8  0E00               	movlw	0
  5216  002AAA  1A05               	xorwf	___ftge@ff2+1,f,c
  5217  002AAC  0E80               	movlw	128
  5218  002AAE  1A06               	xorwf	___ftge@ff2+2,f,c
  5219  002AB0  5004               	movf	___ftge@ff2,w,c
  5220  002AB2  5C01               	subwf	___ftge@ff1,w,c
  5221  002AB4  5005               	movf	___ftge@ff2+1,w,c
  5222  002AB6  5802               	subwfb	___ftge@ff1+1,w,c
  5223  002AB8  5006               	movf	___ftge@ff2+2,w,c
  5224  002ABA  5803               	subwfb	___ftge@ff1+2,w,c
  5225  002ABC  B0D8               	btfsc	status,0,c
  5226  002ABE  D002               	goto	l2341
  5227  002AC0  90D8               	bcf	status,0,c
  5228  002AC2  0012               	return	
  5229  002AC4                     l2341:
  5230  002AC4  80D8               	bsf	status,0,c
  5231  002AC6  0012               	return	
  5232  002AC8                     __end_of___ftge:
  5233                           	opt stack 0
  5234                           tblptru	equ	0xFF8
  5235                           tblptrh	equ	0xFF7
  5236                           tblptrl	equ	0xFF6
  5237                           tablat	equ	0xFF5
  5238                           prodh	equ	0xFF4
  5239                           prodl	equ	0xFF3
  5240                           postinc0	equ	0xFEE
  5241                           wreg	equ	0xFE8
  5242                           indf2	equ	0xFDF
  5243                           postinc2	equ	0xFDE
  5244                           postdec2	equ	0xFDD
  5245                           fsr2h	equ	0xFDA
  5246                           fsr2l	equ	0xFD9
  5247                           status	equ	0xFD8
  5248                           
  5249 ;; *************** function _pwm_config *****************
  5250 ;; Defined at:
  5251 ;;		line 46 in file "config.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      void 
  5258 ;; Registers used:
  5259 ;;		wreg, status,2
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;Total ram usage:        0 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; This function calls:
  5272 ;;		Nothing
  5273 ;; This function is called by:
  5274 ;;		_main
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text16
  5279  0030C2                     __ptext16:
  5280                           	opt stack 0
  5281  0030C2                     _pwm_config:
  5282                           	opt stack 30
  5283                           
  5284                           ;config.c: 48: CCPTMRS0=0b00000000;
  5285                           
  5286                           ;incstack = 0
  5287  0030C2  0E00               	movlw	0
  5288  0030C4  010F               	movlb	15	; () banked
  5289  0030C6  6F49               	movwf	73,b	;volatile
  5290                           
  5291                           ;config.c: 49: CCP2CON=0b00001100;
  5292  0030C8  0E0C               	movlw	12
  5293  0030CA  6E66               	movwf	3942,c	;volatile
  5294                           
  5295                           ;config.c: 50: CCP1CON=0b00001100;
  5296  0030CC  0E0C               	movlw	12
  5297  0030CE  6EBD               	movwf	4029,c	;volatile
  5298                           
  5299                           ;config.c: 51: T2CON=0b01111101;
  5300  0030D0  0E7D               	movlw	125
  5301  0030D2  6EBA               	movwf	4026,c	;volatile
  5302                           
  5303                           ;config.c: 52: PR2=160;
  5304  0030D4  0EA0               	movlw	160
  5305  0030D6  6EBB               	movwf	4027,c	;volatile
  5306                           
  5307                           ;config.c: 54: CCPR2L=128;
  5308  0030D8  0E80               	movlw	128
  5309  0030DA  6E67               	movwf	3943,c	;volatile
  5310                           
  5311                           ;config.c: 55: CCPR1L=64;
  5312  0030DC  0E40               	movlw	64
  5313  0030DE  6EBE               	movwf	4030,c	;volatile
  5314                           
  5315                           ;config.c: 56: CCP3CON=0b00001100;
  5316  0030E0  0E0C               	movlw	12
  5317  0030E2  6F5D               	movwf	93,b	;volatile
  5318                           
  5319                           ;config.c: 57: CCPR3L=128;
  5320  0030E4  0E80               	movlw	128
  5321  0030E6  6F5E               	movwf	94,b	;volatile
  5322                           
  5323                           ; BSR set to: 15
  5324  0030E8  0012               	return		;funcret
  5325  0030EA                     __end_of_pwm_config:
  5326                           	opt stack 0
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           indf2	equ	0xFDF
  5336                           postinc2	equ	0xFDE
  5337                           postdec2	equ	0xFDD
  5338                           fsr2h	equ	0xFDA
  5339                           fsr2l	equ	0xFD9
  5340                           status	equ	0xFD8
  5341                           
  5342 ;; *************** function _init_io_display *****************
  5343 ;; Defined at:
  5344 ;;		line 88 in file "config.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;		None
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;		None
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      void 
  5351 ;; Registers used:
  5352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;Total ram usage:        2 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    5
  5365 ;; This function calls:
  5366 ;;		_Cursor_Off
  5367 ;;		_I2C_Master_Init
  5368 ;;		_Lcd_Clear
  5369 ;;		_Lcd_Init
  5370 ;;		_Lcd_Set_Cursor
  5371 ;;		_Lcd_Write_String
  5372 ;; This function is called by:
  5373 ;;		_main
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           	psect	text17
  5378  002D30                     __ptext17:
  5379                           	opt stack 0
  5380  002D30                     _init_io_display:
  5381                           	opt stack 25
  5382                           
  5383                           ;config.c: 90: TRISCbits.TRISC3=1;
  5384                           
  5385                           ; BSR set to: 15
  5386                           ;incstack = 0
  5387  002D30  8694               	bsf	3988,3,c	;volatile
  5388                           
  5389                           ;config.c: 91: TRISCbits.TRISC4=1;
  5390  002D32  8894               	bsf	3988,4,c	;volatile
  5391                           
  5392                           ;config.c: 92: I2C_Master_Init(100000);
  5393  002D34  0EA0               	movlw	160
  5394  002D36  6E0E               	movwf	I2C_Master_Init@c,c
  5395  002D38  0E86               	movlw	134
  5396  002D3A  6E0F               	movwf	I2C_Master_Init@c+1,c
  5397  002D3C  0E01               	movlw	1
  5398  002D3E  6E10               	movwf	I2C_Master_Init@c+2,c
  5399  002D40  0E00               	movlw	0
  5400  002D42  6E11               	movwf	I2C_Master_Init@c+3,c
  5401  002D44  EC2F  F017         	call	_I2C_Master_Init	;wreg free
  5402                           
  5403                           ;config.c: 93: _delay((unsigned long)((100)*(64000000/4000.0)));
  5404  002D48  0E09               	movlw	9
  5405  002D4A  6E17               	movwf	(??_init_io_display+1)& (0+255),c
  5406  002D4C  0E1E               	movlw	30
  5407  002D4E  6E16               	movwf	??_init_io_display& (0+255),c
  5408  002D50  0EE4               	movlw	228
  5409  002D52                     u3067:
  5410  002D52  2EE8               	decfsz	wreg,f,c
  5411  002D54  D7FE               	bra	u3067
  5412  002D56  2E16               	decfsz	??_init_io_display& (0+255),f,c
  5413  002D58  D7FC               	bra	u3067
  5414  002D5A  2E17               	decfsz	(??_init_io_display+1)& (0+255),f,c
  5415  002D5C  D7FA               	bra	u3067
  5416  002D5E  D000               	nop2	
  5417                           
  5418                           ;config.c: 94: Lcd_Init();
  5419  002D60  ECE7  F015         	call	_Lcd_Init	;wreg free
  5420                           
  5421                           ;config.c: 95: Lcd_Clear();
  5422  002D64  ECD0  F018         	call	_Lcd_Clear	;wreg free
  5423                           
  5424                           ;config.c: 96: Cursor_Off();
  5425  002D68  ECD7  F018         	call	_Cursor_Off	;wreg free
  5426                           
  5427                           ;config.c: 97: Lcd_Set_Cursor(1,1);
  5428  002D6C  0E01               	movlw	1
  5429  002D6E  6E0B               	movwf	Lcd_Set_Cursor@b,c
  5430  002D70  0E01               	movlw	1
  5431  002D72  ECB2  F017         	call	_Lcd_Set_Cursor
  5432                           
  5433                           ;config.c: 98: Lcd_Write_String("Test");
  5434  002D76  0E77               	movlw	low STR_9
  5435  002D78  6E08               	movwf	Lcd_Write_String@a,c
  5436  002D7A  0E10               	movlw	high STR_9
  5437  002D7C  6E09               	movwf	Lcd_Write_String@a+1,c
  5438  002D7E  EC25  F016         	call	_Lcd_Write_String	;wreg free
  5439                           
  5440                           ;config.c: 99: _delay((unsigned long)((100)*(64000000/4000.0)));
  5441  002D82  0E09               	movlw	9
  5442  002D84  6E17               	movwf	(??_init_io_display+1)& (0+255),c
  5443  002D86  0E1E               	movlw	30
  5444  002D88  6E16               	movwf	??_init_io_display& (0+255),c
  5445  002D8A  0EE4               	movlw	228
  5446  002D8C                     u3077:
  5447  002D8C  2EE8               	decfsz	wreg,f,c
  5448  002D8E  D7FE               	bra	u3077
  5449  002D90  2E16               	decfsz	??_init_io_display& (0+255),f,c
  5450  002D92  D7FC               	bra	u3077
  5451  002D94  2E17               	decfsz	(??_init_io_display+1)& (0+255),f,c
  5452  002D96  D7FA               	bra	u3077
  5453  002D98  D000               	nop2	
  5454  002D9A  0012               	return		;funcret
  5455  002D9C                     __end_of_init_io_display:
  5456                           	opt stack 0
  5457                           tblptru	equ	0xFF8
  5458                           tblptrh	equ	0xFF7
  5459                           tblptrl	equ	0xFF6
  5460                           tablat	equ	0xFF5
  5461                           prodh	equ	0xFF4
  5462                           prodl	equ	0xFF3
  5463                           postinc0	equ	0xFEE
  5464                           wreg	equ	0xFE8
  5465                           indf2	equ	0xFDF
  5466                           postinc2	equ	0xFDE
  5467                           postdec2	equ	0xFDD
  5468                           fsr2h	equ	0xFDA
  5469                           fsr2l	equ	0xFD9
  5470                           status	equ	0xFD8
  5471                           
  5472 ;; *************** function _Lcd_Write_String *****************
  5473 ;; Defined at:
  5474 ;;		line 115 in file "i2c_display.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;  a               2    7[COMRAM] PTR unsigned char 
  5477 ;;		 -> STR_9(5), STR_8(3), STR_6(4), STR_5(3), 
  5478 ;;		 -> main@str_A(8), STR_3(3), main@str_V(8), STR_1(3), 
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;  i               2   11[COMRAM] int 
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      void 
  5483 ;; Registers used:
  5484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5490 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;Total ram usage:        6 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    4
  5497 ;; This function calls:
  5498 ;;		_Lcd_Write_Char
  5499 ;; This function is called by:
  5500 ;;		_main
  5501 ;;		_init_io_display
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text18
  5506  002C4A                     __ptext18:
  5507                           	opt stack 0
  5508  002C4A                     _Lcd_Write_String:
  5509                           	opt stack 25
  5510                           
  5511                           ;i2c_display.c: 117: int i;
  5512                           ;i2c_display.c: 118: for(i=0;a[i]!='\0';i++)
  5513                           
  5514                           ;incstack = 0
  5515  002C4A  0E00               	movlw	0
  5516  002C4C  6E0D               	movwf	Lcd_Write_String@i+1,c
  5517  002C4E  0E00               	movlw	0
  5518  002C50  6E0C               	movwf	Lcd_Write_String@i,c
  5519  002C52  D01B               	goto	l293
  5520  002C54                     
  5521                           ;i2c_display.c: 119: Lcd_Write_Char(a[i]);
  5522  002C54  500C               	movf	Lcd_Write_String@i,w,c
  5523  002C56  2408               	addwf	Lcd_Write_String@a,w,c
  5524  002C58  6E0A               	movwf	??_Lcd_Write_String& (0+255),c
  5525  002C5A  500D               	movf	Lcd_Write_String@i+1,w,c
  5526  002C5C  2009               	addwfc	Lcd_Write_String@a+1,w,c
  5527  002C5E  6E0B               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5528  002C60  C00A  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5529  002C64  C00B  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5530  002C68  0E00               	movlw	low (__smallconst shr (0+16))
  5531  002C6A  6EF8               	movwf	tblptru,c
  5532  002C6C  0E0F               	movlw	(high __ramtop+-1)
  5533  002C6E  64F7               	cpfsgt	tblptrh,c
  5534  002C70  D003               	bra	u2037
  5535  002C72  0008               	tblrd		*
  5536  002C74  50F5               	movf	tablat,w,c
  5537  002C76  D005               	bra	u2030
  5538  002C78                     u2037:
  5539  002C78  CFF6 FFE9          	movff	tblptrl,fsr0l
  5540  002C7C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5541  002C80  50EF               	movf	indf0,w,c
  5542  002C82                     u2030:
  5543  002C82  EC5C  F017         	call	_Lcd_Write_Char
  5544  002C86  4A0C               	infsnz	Lcd_Write_String@i,f,c
  5545  002C88  2A0D               	incf	Lcd_Write_String@i+1,f,c
  5546  002C8A                     l293:
  5547  002C8A  500C               	movf	Lcd_Write_String@i,w,c
  5548  002C8C  2408               	addwf	Lcd_Write_String@a,w,c
  5549  002C8E  6E0A               	movwf	??_Lcd_Write_String& (0+255),c
  5550  002C90  500D               	movf	Lcd_Write_String@i+1,w,c
  5551  002C92  2009               	addwfc	Lcd_Write_String@a+1,w,c
  5552  002C94  6E0B               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5553  002C96  C00A  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5554  002C9A  C00B  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5555  002C9E  0E00               	movlw	low (__smallconst shr (0+16))
  5556  002CA0  6EF8               	movwf	tblptru,c
  5557  002CA2  0E0F               	movlw	(high __ramtop+-1)
  5558  002CA4  64F7               	cpfsgt	tblptrh,c
  5559  002CA6  D003               	bra	u2047
  5560  002CA8  0008               	tblrd		*
  5561  002CAA  50F5               	movf	tablat,w,c
  5562  002CAC  D005               	bra	u2040
  5563  002CAE                     u2047:
  5564  002CAE  CFF6 FFE9          	movff	tblptrl,fsr0l
  5565  002CB2  CFF7 FFEA          	movff	tblptrh,fsr0h
  5566  002CB6  50EF               	movf	indf0,w,c
  5567  002CB8                     u2040:
  5568  002CB8  0900               	iorlw	0
  5569  002CBA  B4D8               	btfsc	status,2,c
  5570  002CBC  0012               	return	
  5571  002CBE  D7CA               	goto	l294
  5572  002CC0                     __end_of_Lcd_Write_String:
  5573                           	opt stack 0
  5574                           tblptru	equ	0xFF8
  5575                           tblptrh	equ	0xFF7
  5576                           tblptrl	equ	0xFF6
  5577                           tablat	equ	0xFF5
  5578                           prodh	equ	0xFF4
  5579                           prodl	equ	0xFF3
  5580                           indf0	equ	0xFEF
  5581                           postinc0	equ	0xFEE
  5582                           fsr0h	equ	0xFEA
  5583                           fsr0l	equ	0xFE9
  5584                           wreg	equ	0xFE8
  5585                           indf2	equ	0xFDF
  5586                           postinc2	equ	0xFDE
  5587                           postdec2	equ	0xFDD
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8
  5591                           
  5592 ;; *************** function _Lcd_Write_Char *****************
  5593 ;; Defined at:
  5594 ;;		line 91 in file "i2c_display.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  a               1    wreg     unsigned char 
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;  a               1    4[COMRAM] unsigned char 
  5599 ;;  temp            1    6[COMRAM] unsigned char 
  5600 ;;  y               1    5[COMRAM] unsigned char 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  1    wreg      void 
  5603 ;; Registers used:
  5604 ;;		wreg, status,2, status,0, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5613 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5614 ;;Total ram usage:        3 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    3
  5617 ;; This function calls:
  5618 ;;		_Lcd_Port
  5619 ;; This function is called by:
  5620 ;;		_Lcd_Write_String
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           	psect	text19
  5625  002EB8                     __ptext19:
  5626                           	opt stack 0
  5627  002EB8                     _Lcd_Write_Char:
  5628                           	opt stack 25
  5629                           
  5630                           ;incstack = 0
  5631                           ;Lcd_Write_Char@a stored from wreg
  5632  002EB8  6E05               	movwf	Lcd_Write_Char@a,c
  5633                           
  5634                           ;i2c_display.c: 93: char temp,y;
  5635                           ;i2c_display.c: 94: temp = a&0x0F;
  5636  002EBA  5005               	movf	Lcd_Write_Char@a,w,c
  5637  002EBC  0B0F               	andlw	15
  5638  002EBE  6E07               	movwf	Lcd_Write_Char@temp,c
  5639                           
  5640                           ;i2c_display.c: 95: temp=temp<<4;
  5641  002EC0  3807               	swapf	Lcd_Write_Char@temp,w,c
  5642  002EC2  0BF0               	andlw	240
  5643  002EC4  6E07               	movwf	Lcd_Write_Char@temp,c
  5644                           
  5645                           ;i2c_display.c: 96: y = a&0xF0;
  5646  002EC6  5005               	movf	Lcd_Write_Char@a,w,c
  5647  002EC8  0BF0               	andlw	240
  5648  002ECA  6E06               	movwf	Lcd_Write_Char@y,c
  5649                           
  5650                           ;i2c_display.c: 99: Lcd_Port(0x00 | 0x01 | 0x00 | 0x00);
  5651  002ECC  0E01               	movlw	1
  5652  002ECE  EC9A  F018         	call	_Lcd_Port
  5653                           
  5654                           ;i2c_display.c: 100: Lcd_Port(y);
  5655  002ED2  5006               	movf	Lcd_Write_Char@y,w,c
  5656  002ED4  EC9A  F018         	call	_Lcd_Port
  5657                           
  5658                           ;i2c_display.c: 102: Lcd_Port(y | 0x01 | 0x04 | 0x00);
  5659  002ED8  5006               	movf	Lcd_Write_Char@y,w,c
  5660  002EDA  0905               	iorlw	5
  5661  002EDC  EC9A  F018         	call	_Lcd_Port
  5662                           
  5663                           ;i2c_display.c: 103: _delay((unsigned long)((40)*(64000000/4000000.0)));
  5664  002EE0  0ED5               	movlw	213
  5665  002EE2                     u3087:
  5666  002EE2  2EE8               	decfsz	wreg,f,c
  5667  002EE4  D7FE               	bra	u3087
  5668  002EE6  F000               	nop	
  5669                           
  5670                           ;i2c_display.c: 105: Lcd_Port(y | 0x01 | 0x00 | 0x00);
  5671  002EE8  5006               	movf	Lcd_Write_Char@y,w,c
  5672  002EEA  0901               	iorlw	1
  5673  002EEC  EC9A  F018         	call	_Lcd_Port
  5674                           
  5675                           ;i2c_display.c: 106: Lcd_Port(temp);
  5676  002EF0  5007               	movf	Lcd_Write_Char@temp,w,c
  5677  002EF2  EC9A  F018         	call	_Lcd_Port
  5678                           
  5679                           ;i2c_display.c: 109: Lcd_Port(temp | 0x01 | 0x04 | 0x00);
  5680  002EF6  5007               	movf	Lcd_Write_Char@temp,w,c
  5681  002EF8  0905               	iorlw	5
  5682  002EFA  EC9A  F018         	call	_Lcd_Port
  5683                           
  5684                           ;i2c_display.c: 110: _delay((unsigned long)((40)*(64000000/4000000.0)));
  5685  002EFE  0ED5               	movlw	213
  5686  002F00                     u3097:
  5687  002F00  2EE8               	decfsz	wreg,f,c
  5688  002F02  D7FE               	bra	u3097
  5689  002F04  F000               	nop	
  5690                           
  5691                           ;i2c_display.c: 112: Lcd_Port(temp | 0x01 | 0x00 | 0x00);
  5692  002F06  5007               	movf	Lcd_Write_Char@temp,w,c
  5693  002F08  0901               	iorlw	1
  5694  002F0A  EC9A  F018         	call	_Lcd_Port
  5695  002F0E  0012               	return		;funcret
  5696  002F10                     __end_of_Lcd_Write_Char:
  5697                           	opt stack 0
  5698                           tblptru	equ	0xFF8
  5699                           tblptrh	equ	0xFF7
  5700                           tblptrl	equ	0xFF6
  5701                           tablat	equ	0xFF5
  5702                           prodh	equ	0xFF4
  5703                           prodl	equ	0xFF3
  5704                           indf0	equ	0xFEF
  5705                           postinc0	equ	0xFEE
  5706                           fsr0h	equ	0xFEA
  5707                           fsr0l	equ	0xFE9
  5708                           wreg	equ	0xFE8
  5709                           indf2	equ	0xFDF
  5710                           postinc2	equ	0xFDE
  5711                           postdec2	equ	0xFDD
  5712                           fsr2h	equ	0xFDA
  5713                           fsr2l	equ	0xFD9
  5714                           status	equ	0xFD8
  5715                           
  5716 ;; *************** function _Lcd_Set_Cursor *****************
  5717 ;; Defined at:
  5718 ;;		line 51 in file "i2c_display.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;  a               1    wreg     unsigned char 
  5721 ;;  b               1   10[COMRAM] unsigned char 
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;  a               1   11[COMRAM] unsigned char 
  5724 ;;  temp            1   14[COMRAM] unsigned char 
  5725 ;;  y               1   13[COMRAM] unsigned char 
  5726 ;;  z               1   12[COMRAM] unsigned char 
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5736 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;Total ram usage:        5 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    4
  5743 ;; This function calls:
  5744 ;;		_Lcd_Cmd
  5745 ;; This function is called by:
  5746 ;;		_main
  5747 ;;		_init_io_display
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           	psect	text20
  5752  002F64                     __ptext20:
  5753                           	opt stack 0
  5754  002F64                     _Lcd_Set_Cursor:
  5755                           	opt stack 25
  5756                           
  5757                           ;incstack = 0
  5758                           ;Lcd_Set_Cursor@a stored from wreg
  5759  002F64  6E0C               	movwf	Lcd_Set_Cursor@a,c
  5760                           
  5761                           ;i2c_display.c: 53: char temp,z,y;
  5762                           ;i2c_display.c: 54: if(a == 1)
  5763  002F66  040C               	decf	Lcd_Set_Cursor@a,w,c
  5764  002F68  A4D8               	btfss	status,2,c
  5765  002F6A  D010               	goto	l281
  5766                           
  5767                           ;i2c_display.c: 55: {
  5768                           ;i2c_display.c: 56: temp = 0x80 + b - 1;
  5769  002F6C  500B               	movf	Lcd_Set_Cursor@b,w,c
  5770  002F6E  0F7F               	addlw	127
  5771  002F70  6E0F               	movwf	Lcd_Set_Cursor@temp,c
  5772                           
  5773                           ;i2c_display.c: 57: z = temp>>4;
  5774  002F72  380F               	swapf	Lcd_Set_Cursor@temp,w,c
  5775  002F74  0B0F               	andlw	15
  5776  002F76  6E0D               	movwf	Lcd_Set_Cursor@z,c
  5777                           
  5778                           ;i2c_display.c: 58: y = temp & 0x0F;
  5779  002F78  500F               	movf	Lcd_Set_Cursor@temp,w,c
  5780  002F7A  0B0F               	andlw	15
  5781  002F7C  6E0E               	movwf	Lcd_Set_Cursor@y,c
  5782                           
  5783                           ;i2c_display.c: 59: Lcd_Cmd(z);
  5784  002F7E  500D               	movf	Lcd_Set_Cursor@z,w,c
  5785  002F80  ECDA  F017         	call	_Lcd_Cmd
  5786                           
  5787                           ;i2c_display.c: 60: Lcd_Cmd(y);
  5788  002F84  500E               	movf	Lcd_Set_Cursor@y,w,c
  5789  002F86  ECDA  F017         	call	_Lcd_Cmd
  5790                           
  5791                           ;i2c_display.c: 61: }
  5792  002F8A  0012               	return	
  5793  002F8C                     l281:
  5794                           
  5795                           ;i2c_display.c: 62: else if(a == 2)
  5796  002F8C  0E02               	movlw	2
  5797  002F8E  180C               	xorwf	Lcd_Set_Cursor@a,w,c
  5798  002F90  A4D8               	btfss	status,2,c
  5799  002F92  0012               	return	
  5800                           
  5801                           ;i2c_display.c: 63: {
  5802                           ;i2c_display.c: 64: temp = 0xC0 + b - 1;
  5803  002F94  500B               	movf	Lcd_Set_Cursor@b,w,c
  5804  002F96  0FBF               	addlw	191
  5805  002F98  6E0F               	movwf	Lcd_Set_Cursor@temp,c
  5806                           
  5807                           ;i2c_display.c: 65: z = temp>>4;
  5808  002F9A  380F               	swapf	Lcd_Set_Cursor@temp,w,c
  5809  002F9C  0B0F               	andlw	15
  5810  002F9E  6E0D               	movwf	Lcd_Set_Cursor@z,c
  5811                           
  5812                           ;i2c_display.c: 66: y = temp & 0x0F;
  5813  002FA0  500F               	movf	Lcd_Set_Cursor@temp,w,c
  5814  002FA2  0B0F               	andlw	15
  5815  002FA4  6E0E               	movwf	Lcd_Set_Cursor@y,c
  5816                           
  5817                           ;i2c_display.c: 67: Lcd_Cmd(z);
  5818  002FA6  500D               	movf	Lcd_Set_Cursor@z,w,c
  5819  002FA8  ECDA  F017         	call	_Lcd_Cmd
  5820                           
  5821                           ;i2c_display.c: 68: Lcd_Cmd(y);
  5822  002FAC  500E               	movf	Lcd_Set_Cursor@y,w,c
  5823  002FAE  ECDA  F017         	call	_Lcd_Cmd
  5824  002FB2  0012               	return	
  5825  002FB4                     __end_of_Lcd_Set_Cursor:
  5826                           	opt stack 0
  5827                           tblptru	equ	0xFF8
  5828                           tblptrh	equ	0xFF7
  5829                           tblptrl	equ	0xFF6
  5830                           tablat	equ	0xFF5
  5831                           prodh	equ	0xFF4
  5832                           prodl	equ	0xFF3
  5833                           indf0	equ	0xFEF
  5834                           postinc0	equ	0xFEE
  5835                           fsr0h	equ	0xFEA
  5836                           fsr0l	equ	0xFE9
  5837                           wreg	equ	0xFE8
  5838                           indf2	equ	0xFDF
  5839                           postinc2	equ	0xFDE
  5840                           postdec2	equ	0xFDD
  5841                           fsr2h	equ	0xFDA
  5842                           fsr2l	equ	0xFD9
  5843                           status	equ	0xFD8
  5844                           
  5845 ;; *************** function _Lcd_Init *****************
  5846 ;; Defined at:
  5847 ;;		line 72 in file "i2c_display.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;		None
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;		None
  5852 ;; Return value:  Size  Location     Type
  5853 ;;                  1    wreg      void 
  5854 ;; Registers used:
  5855 ;;		wreg, status,2, status,0, cstack
  5856 ;; Tracked objects:
  5857 ;;		On entry : 0/0
  5858 ;;		On exit  : 0/0
  5859 ;;		Unchanged: 0/0
  5860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5864 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;Total ram usage:        2 bytes
  5866 ;; Hardware stack levels used:    1
  5867 ;; Hardware stack levels required when called:    4
  5868 ;; This function calls:
  5869 ;;		_Lcd_Cmd
  5870 ;;		_Lcd_Port
  5871 ;; This function is called by:
  5872 ;;		_init_io_display
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           	psect	text21
  5877  002BCE                     __ptext21:
  5878                           	opt stack 0
  5879  002BCE                     _Lcd_Init:
  5880                           	opt stack 25
  5881                           
  5882                           ;i2c_display.c: 74: Lcd_Port(0x00);
  5883                           
  5884                           ;incstack = 0
  5885  002BCE  0E00               	movlw	0
  5886  002BD0  EC9A  F018         	call	_Lcd_Port
  5887                           
  5888                           ;i2c_display.c: 75: _delay((unsigned long)((20)*(64000000/4000.0)));
  5889  002BD4  0E02               	movlw	2
  5890  002BD6  6E0C               	movwf	(??_Lcd_Init+1)& (0+255),c
  5891  002BD8  0EA0               	movlw	160
  5892  002BDA  6E0B               	movwf	??_Lcd_Init& (0+255),c
  5893  002BDC  0E92               	movlw	146
  5894  002BDE                     u3107:
  5895  002BDE  2EE8               	decfsz	wreg,f,c
  5896  002BE0  D7FE               	bra	u3107
  5897  002BE2  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  5898  002BE4  D7FC               	bra	u3107
  5899  002BE6  2E0C               	decfsz	(??_Lcd_Init+1)& (0+255),f,c
  5900  002BE8  D7FA               	bra	u3107
  5901  002BEA  D000               	nop2	
  5902                           
  5903                           ;i2c_display.c: 76: Lcd_Cmd(0x03);
  5904  002BEC  0E03               	movlw	3
  5905  002BEE  ECDA  F017         	call	_Lcd_Cmd
  5906                           
  5907                           ;i2c_display.c: 77: _delay((unsigned long)((5)*(64000000/4000.0)));
  5908  002BF2  0E68               	movlw	104
  5909  002BF4  6E0B               	movwf	??_Lcd_Init& (0+255),c
  5910  002BF6  0EE4               	movlw	228
  5911  002BF8                     u3117:
  5912  002BF8  2EE8               	decfsz	wreg,f,c
  5913  002BFA  D7FE               	bra	u3117
  5914  002BFC  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  5915  002BFE  D7FC               	bra	u3117
  5916  002C00  D000               	nop2	
  5917                           
  5918                           ;i2c_display.c: 78: Lcd_Cmd(0x03);
  5919  002C02  0E03               	movlw	3
  5920  002C04  ECDA  F017         	call	_Lcd_Cmd
  5921                           
  5922                           ;i2c_display.c: 79: _delay((unsigned long)((11)*(64000000/4000.0)));
  5923  002C08  0EE5               	movlw	229
  5924  002C0A  6E0B               	movwf	??_Lcd_Init& (0+255),c
  5925  002C0C  0E91               	movlw	145
  5926  002C0E                     u3127:
  5927  002C0E  2EE8               	decfsz	wreg,f,c
  5928  002C10  D7FE               	bra	u3127
  5929  002C12  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  5930  002C14  D7FC               	bra	u3127
  5931  002C16  F000               	nop	
  5932                           
  5933                           ;i2c_display.c: 80: Lcd_Cmd(0x03);
  5934  002C18  0E03               	movlw	3
  5935  002C1A  ECDA  F017         	call	_Lcd_Cmd
  5936                           
  5937                           ;i2c_display.c: 82: Lcd_Cmd(0x02);
  5938  002C1E  0E02               	movlw	2
  5939  002C20  ECDA  F017         	call	_Lcd_Cmd
  5940                           
  5941                           ;i2c_display.c: 83: Lcd_Cmd(0x02);
  5942  002C24  0E02               	movlw	2
  5943  002C26  ECDA  F017         	call	_Lcd_Cmd
  5944                           
  5945                           ;i2c_display.c: 84: Lcd_Cmd(0x08);
  5946  002C2A  0E08               	movlw	8
  5947  002C2C  ECDA  F017         	call	_Lcd_Cmd
  5948                           
  5949                           ;i2c_display.c: 85: Lcd_Cmd(0x00);
  5950  002C30  0E00               	movlw	0
  5951  002C32  ECDA  F017         	call	_Lcd_Cmd
  5952                           
  5953                           ;i2c_display.c: 86: Lcd_Cmd(0x0C);
  5954  002C36  0E0C               	movlw	12
  5955  002C38  ECDA  F017         	call	_Lcd_Cmd
  5956                           
  5957                           ;i2c_display.c: 87: Lcd_Cmd(0x00);
  5958  002C3C  0E00               	movlw	0
  5959  002C3E  ECDA  F017         	call	_Lcd_Cmd
  5960                           
  5961                           ;i2c_display.c: 88: Lcd_Cmd(0x06);
  5962  002C42  0E06               	movlw	6
  5963  002C44  ECDA  F017         	call	_Lcd_Cmd
  5964  002C48  0012               	return		;funcret
  5965  002C4A                     __end_of_Lcd_Init:
  5966                           	opt stack 0
  5967                           tblptru	equ	0xFF8
  5968                           tblptrh	equ	0xFF7
  5969                           tblptrl	equ	0xFF6
  5970                           tablat	equ	0xFF5
  5971                           prodh	equ	0xFF4
  5972                           prodl	equ	0xFF3
  5973                           indf0	equ	0xFEF
  5974                           postinc0	equ	0xFEE
  5975                           fsr0h	equ	0xFEA
  5976                           fsr0l	equ	0xFE9
  5977                           wreg	equ	0xFE8
  5978                           indf2	equ	0xFDF
  5979                           postinc2	equ	0xFDE
  5980                           postdec2	equ	0xFDD
  5981                           fsr2h	equ	0xFDA
  5982                           fsr2l	equ	0xFD9
  5983                           status	equ	0xFD8
  5984                           
  5985 ;; *************** function _Lcd_Clear *****************
  5986 ;; Defined at:
  5987 ;;		line 45 in file "i2c_display.c"
  5988 ;; Parameters:    Size  Location     Type
  5989 ;;		None
  5990 ;; Auto vars:     Size  Location     Type
  5991 ;;		None
  5992 ;; Return value:  Size  Location     Type
  5993 ;;                  1    wreg      void 
  5994 ;; Registers used:
  5995 ;;		wreg, status,2, status,0, cstack
  5996 ;; Tracked objects:
  5997 ;;		On entry : 0/0
  5998 ;;		On exit  : 0/0
  5999 ;;		Unchanged: 0/0
  6000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;Total ram usage:        0 bytes
  6006 ;; Hardware stack levels used:    1
  6007 ;; Hardware stack levels required when called:    4
  6008 ;; This function calls:
  6009 ;;		_Lcd_Cmd
  6010 ;; This function is called by:
  6011 ;;		_main
  6012 ;;		_init_io_display
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           	psect	text22
  6017  0031A0                     __ptext22:
  6018                           	opt stack 0
  6019  0031A0                     _Lcd_Clear:
  6020                           	opt stack 25
  6021                           
  6022                           ;i2c_display.c: 47: Lcd_Cmd(0);
  6023                           
  6024                           ;incstack = 0
  6025  0031A0  0E00               	movlw	0
  6026  0031A2  ECDA  F017         	call	_Lcd_Cmd
  6027                           
  6028                           ;i2c_display.c: 48: Lcd_Cmd(1);
  6029  0031A6  0E01               	movlw	1
  6030  0031A8  ECDA  F017         	call	_Lcd_Cmd
  6031  0031AC  0012               	return		;funcret
  6032  0031AE                     __end_of_Lcd_Clear:
  6033                           	opt stack 0
  6034                           tblptru	equ	0xFF8
  6035                           tblptrh	equ	0xFF7
  6036                           tblptrl	equ	0xFF6
  6037                           tablat	equ	0xFF5
  6038                           prodh	equ	0xFF4
  6039                           prodl	equ	0xFF3
  6040                           indf0	equ	0xFEF
  6041                           postinc0	equ	0xFEE
  6042                           fsr0h	equ	0xFEA
  6043                           fsr0l	equ	0xFE9
  6044                           wreg	equ	0xFE8
  6045                           indf2	equ	0xFDF
  6046                           postinc2	equ	0xFDE
  6047                           postdec2	equ	0xFDD
  6048                           fsr2h	equ	0xFDA
  6049                           fsr2l	equ	0xFD9
  6050                           status	equ	0xFD8
  6051                           
  6052 ;; *************** function _I2C_Master_Init *****************
  6053 ;; Defined at:
  6054 ;;		line 165 in file "i2c_display.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;  c               4   13[COMRAM] const unsigned long 
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;		None
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      void 
  6061 ;; Registers used:
  6062 ;;		wreg, status,2, status,0, cstack
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6068 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;Total ram usage:        8 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    1
  6075 ;; This function calls:
  6076 ;;		___lldiv
  6077 ;; This function is called by:
  6078 ;;		_init_io_display
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text23
  6083  002E5E                     __ptext23:
  6084                           	opt stack 0
  6085  002E5E                     _I2C_Master_Init:
  6086                           	opt stack 28
  6087                           
  6088                           ;i2c_display.c: 167: SSP1CON1 = 0b00101000;
  6089                           
  6090                           ;incstack = 0
  6091  002E5E  0E28               	movlw	40
  6092  002E60  6EC6               	movwf	4038,c	;volatile
  6093                           
  6094                           ;i2c_display.c: 168: SSP1CON2 = 0x00;
  6095  002E62  0E00               	movlw	0
  6096  002E64  6EC5               	movwf	4037,c	;volatile
  6097                           
  6098                           ;i2c_display.c: 169: SSP1ADD = (64000000/(4*c))-1;
  6099  002E66  0E00               	movlw	0
  6100  002E68  6E01               	movwf	___lldiv@dividend,c
  6101  002E6A  0E90               	movlw	144
  6102  002E6C  6E02               	movwf	___lldiv@dividend+1,c
  6103  002E6E  0ED0               	movlw	208
  6104  002E70  6E03               	movwf	___lldiv@dividend+2,c
  6105  002E72  0E03               	movlw	3
  6106  002E74  6E04               	movwf	___lldiv@dividend+3,c
  6107  002E76  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6108  002E7A  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6109  002E7E  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6110  002E82  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6111  002E86  0E02               	movlw	2
  6112  002E88                     u2065:
  6113  002E88  90D8               	bcf	status,0,c
  6114  002E8A  3612               	rlcf	??_I2C_Master_Init,f,c
  6115  002E8C  3613               	rlcf	??_I2C_Master_Init+1,f,c
  6116  002E8E  3614               	rlcf	??_I2C_Master_Init+2,f,c
  6117  002E90  3615               	rlcf	??_I2C_Master_Init+3,f,c
  6118  002E92  2EE8               	decfsz	wreg,f,c
  6119  002E94  D7F9               	goto	u2065
  6120  002E96  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  6121  002E9A  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6122  002E9E  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6123  002EA2  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6124  002EA6  ECA6  F015         	call	___lldiv	;wreg free
  6125  002EAA  0401               	decf	?___lldiv,w,c
  6126  002EAC  6EC8               	movwf	4040,c	;volatile
  6127                           
  6128                           ;i2c_display.c: 170: SSP1STAT = 0x00;
  6129  002EAE  0E00               	movlw	0
  6130  002EB0  6EC7               	movwf	4039,c	;volatile
  6131                           
  6132                           ;i2c_display.c: 171: TRISCbits.TRISC3=1;
  6133  002EB2  8694               	bsf	3988,3,c	;volatile
  6134                           
  6135                           ;i2c_display.c: 172: TRISCbits.TRISC4=1;
  6136  002EB4  8894               	bsf	3988,4,c	;volatile
  6137  002EB6  0012               	return		;funcret
  6138  002EB8                     __end_of_I2C_Master_Init:
  6139                           	opt stack 0
  6140                           tblptru	equ	0xFF8
  6141                           tblptrh	equ	0xFF7
  6142                           tblptrl	equ	0xFF6
  6143                           tablat	equ	0xFF5
  6144                           prodh	equ	0xFF4
  6145                           prodl	equ	0xFF3
  6146                           indf0	equ	0xFEF
  6147                           postinc0	equ	0xFEE
  6148                           fsr0h	equ	0xFEA
  6149                           fsr0l	equ	0xFE9
  6150                           wreg	equ	0xFE8
  6151                           indf2	equ	0xFDF
  6152                           postinc2	equ	0xFDE
  6153                           postdec2	equ	0xFDD
  6154                           fsr2h	equ	0xFDA
  6155                           fsr2l	equ	0xFD9
  6156                           status	equ	0xFD8
  6157                           
  6158 ;; *************** function ___lldiv *****************
  6159 ;; Defined at:
  6160 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  dividend        4    0[COMRAM] unsigned long 
  6163 ;;  divisor         4    4[COMRAM] unsigned long 
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;  quotient        4    8[COMRAM] unsigned long 
  6166 ;;  counter         1   12[COMRAM] unsigned char 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  4    0[COMRAM] unsigned long 
  6169 ;; Registers used:
  6170 ;;		wreg, status,2, status,0
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6176 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;Total ram usage:       13 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; This function calls:
  6183 ;;		Nothing
  6184 ;; This function is called by:
  6185 ;;		_I2C_Master_Init
  6186 ;;		_sprintf
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text24
  6191  002B4C                     __ptext24:
  6192                           	opt stack 0
  6193  002B4C                     ___lldiv:
  6194                           	opt stack 29
  6195                           
  6196                           ;incstack = 0
  6197  002B4C  0E00               	movlw	0
  6198  002B4E  6E09               	movwf	___lldiv@quotient,c
  6199  002B50  0E00               	movlw	0
  6200  002B52  6E0A               	movwf	___lldiv@quotient+1,c
  6201  002B54  0E00               	movlw	0
  6202  002B56  6E0B               	movwf	___lldiv@quotient+2,c
  6203  002B58  0E00               	movlw	0
  6204  002B5A  6E0C               	movwf	___lldiv@quotient+3,c
  6205  002B5C  5005               	movf	___lldiv@divisor,w,c
  6206  002B5E  1006               	iorwf	___lldiv@divisor+1,w,c
  6207  002B60  1007               	iorwf	___lldiv@divisor+2,w,c
  6208  002B62  1008               	iorwf	___lldiv@divisor+3,w,c
  6209  002B64  B4D8               	btfsc	status,2,c
  6210  002B66  D02A               	goto	l829
  6211  002B68  0E01               	movlw	1
  6212  002B6A  6E0D               	movwf	___lldiv@counter,c
  6213  002B6C  D006               	goto	l824
  6214  002B6E  90D8               	bcf	status,0,c
  6215  002B70  3605               	rlcf	___lldiv@divisor,f,c
  6216  002B72  3606               	rlcf	___lldiv@divisor+1,f,c
  6217  002B74  3607               	rlcf	___lldiv@divisor+2,f,c
  6218  002B76  3608               	rlcf	___lldiv@divisor+3,f,c
  6219  002B78  2A0D               	incf	___lldiv@counter,f,c
  6220  002B7A                     l824:
  6221  002B7A  AE08               	btfss	___lldiv@divisor+3,7,c
  6222  002B7C  D7F8               	goto	l825
  6223  002B7E                     u1990:
  6224  002B7E  90D8               	bcf	status,0,c
  6225  002B80  3609               	rlcf	___lldiv@quotient,f,c
  6226  002B82  360A               	rlcf	___lldiv@quotient+1,f,c
  6227  002B84  360B               	rlcf	___lldiv@quotient+2,f,c
  6228  002B86  360C               	rlcf	___lldiv@quotient+3,f,c
  6229  002B88  5005               	movf	___lldiv@divisor,w,c
  6230  002B8A  5C01               	subwf	___lldiv@dividend,w,c
  6231  002B8C  5006               	movf	___lldiv@divisor+1,w,c
  6232  002B8E  5802               	subwfb	___lldiv@dividend+1,w,c
  6233  002B90  5007               	movf	___lldiv@divisor+2,w,c
  6234  002B92  5803               	subwfb	___lldiv@dividend+2,w,c
  6235  002B94  5008               	movf	___lldiv@divisor+3,w,c
  6236  002B96  5804               	subwfb	___lldiv@dividend+3,w,c
  6237  002B98  A0D8               	btfss	status,0,c
  6238  002B9A  D009               	goto	l828
  6239  002B9C  5005               	movf	___lldiv@divisor,w,c
  6240  002B9E  5E01               	subwf	___lldiv@dividend,f,c
  6241  002BA0  5006               	movf	___lldiv@divisor+1,w,c
  6242  002BA2  5A02               	subwfb	___lldiv@dividend+1,f,c
  6243  002BA4  5007               	movf	___lldiv@divisor+2,w,c
  6244  002BA6  5A03               	subwfb	___lldiv@dividend+2,f,c
  6245  002BA8  5008               	movf	___lldiv@divisor+3,w,c
  6246  002BAA  5A04               	subwfb	___lldiv@dividend+3,f,c
  6247  002BAC  8009               	bsf	___lldiv@quotient,0,c
  6248  002BAE                     l828:
  6249  002BAE  90D8               	bcf	status,0,c
  6250  002BB0  3208               	rrcf	___lldiv@divisor+3,f,c
  6251  002BB2  3207               	rrcf	___lldiv@divisor+2,f,c
  6252  002BB4  3206               	rrcf	___lldiv@divisor+1,f,c
  6253  002BB6  3205               	rrcf	___lldiv@divisor,f,c
  6254  002BB8  2E0D               	decfsz	___lldiv@counter,f,c
  6255  002BBA  D7E1               	goto	u1990
  6256  002BBC                     l829:
  6257  002BBC  C009  F001         	movff	___lldiv@quotient,?___lldiv
  6258  002BC0  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6259  002BC4  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6260  002BC8  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6261  002BCC  0012               	return		;funcret
  6262  002BCE                     __end_of___lldiv:
  6263                           	opt stack 0
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           prodh	equ	0xFF4
  6269                           prodl	equ	0xFF3
  6270                           indf0	equ	0xFEF
  6271                           postinc0	equ	0xFEE
  6272                           fsr0h	equ	0xFEA
  6273                           fsr0l	equ	0xFE9
  6274                           wreg	equ	0xFE8
  6275                           indf2	equ	0xFDF
  6276                           postinc2	equ	0xFDE
  6277                           postdec2	equ	0xFDD
  6278                           fsr2h	equ	0xFDA
  6279                           fsr2l	equ	0xFD9
  6280                           status	equ	0xFD8
  6281                           
  6282 ;; *************** function _Cursor_Off *****************
  6283 ;; Defined at:
  6284 ;;		line 140 in file "i2c_display.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;		None
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;		None
  6289 ;; Return value:  Size  Location     Type
  6290 ;;                  1    wreg      void 
  6291 ;; Registers used:
  6292 ;;		wreg, status,2, status,0, cstack
  6293 ;; Tracked objects:
  6294 ;;		On entry : 0/0
  6295 ;;		On exit  : 0/0
  6296 ;;		Unchanged: 0/0
  6297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;Total ram usage:        0 bytes
  6303 ;; Hardware stack levels used:    1
  6304 ;; Hardware stack levels required when called:    4
  6305 ;; This function calls:
  6306 ;;		_Lcd_Cmd
  6307 ;; This function is called by:
  6308 ;;		_init_io_display
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           	psect	text25
  6313  0031AE                     __ptext25:
  6314                           	opt stack 0
  6315  0031AE                     _Cursor_Off:
  6316                           	opt stack 25
  6317                           
  6318                           ;i2c_display.c: 142: Lcd_Cmd(0x00);
  6319                           
  6320                           ;incstack = 0
  6321  0031AE  0E00               	movlw	0
  6322  0031B0  ECDA  F017         	call	_Lcd_Cmd
  6323                           
  6324                           ;i2c_display.c: 143: Lcd_Cmd(0x0C);
  6325  0031B4  0E0C               	movlw	12
  6326  0031B6  ECDA  F017         	call	_Lcd_Cmd
  6327  0031BA  0012               	return		;funcret
  6328  0031BC                     __end_of_Cursor_Off:
  6329                           	opt stack 0
  6330                           tblptru	equ	0xFF8
  6331                           tblptrh	equ	0xFF7
  6332                           tblptrl	equ	0xFF6
  6333                           tablat	equ	0xFF5
  6334                           prodh	equ	0xFF4
  6335                           prodl	equ	0xFF3
  6336                           indf0	equ	0xFEF
  6337                           postinc0	equ	0xFEE
  6338                           fsr0h	equ	0xFEA
  6339                           fsr0l	equ	0xFE9
  6340                           wreg	equ	0xFE8
  6341                           indf2	equ	0xFDF
  6342                           postinc2	equ	0xFDE
  6343                           postdec2	equ	0xFDD
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function _Lcd_Cmd *****************
  6349 ;; Defined at:
  6350 ;;		line 26 in file "i2c_display.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  a               1    wreg     unsigned char 
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;  a               1    9[COMRAM] unsigned char 
  6355 ;;  buff            2    7[COMRAM] int 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  1    wreg      void 
  6358 ;; Registers used:
  6359 ;;		wreg, status,2, status,0, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;Total ram usage:        6 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    3
  6372 ;; This function calls:
  6373 ;;		_Lcd_Port
  6374 ;; This function is called by:
  6375 ;;		_Lcd_Clear
  6376 ;;		_Lcd_Set_Cursor
  6377 ;;		_Lcd_Init
  6378 ;;		_Cursor_Off
  6379 ;;		_Lcd_Shift_Right
  6380 ;;		_Lcd_Shift_Left
  6381 ;;		_Cursor_On
  6382 ;;		_Cursor_Left
  6383 ;;		_Cursor_Right
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           	psect	text26
  6388  002FB4                     __ptext26:
  6389                           	opt stack 0
  6390  002FB4                     _Lcd_Cmd:
  6391                           	opt stack 25
  6392                           
  6393                           ;incstack = 0
  6394                           ;Lcd_Cmd@a stored from wreg
  6395  002FB4  6E0A               	movwf	Lcd_Cmd@a,c
  6396                           
  6397                           ;i2c_display.c: 28: int buff;
  6398                           ;i2c_display.c: 29: a=a<<4;
  6399  002FB6  380A               	swapf	Lcd_Cmd@a,w,c
  6400  002FB8  0BF0               	andlw	240
  6401  002FBA  6E0A               	movwf	Lcd_Cmd@a,c
  6402                           
  6403                           ;i2c_display.c: 32: Lcd_Port(0x00 || 0x00 || 0x00 || 0x00);
  6404  002FBC  0E01               	movlw	1
  6405  002FBE  6E07               	movwf	_Lcd_Cmd$804,c
  6406  002FC0  0E00               	movlw	0
  6407  002FC2  6E07               	movwf	_Lcd_Cmd$804,c
  6408  002FC4  5007               	movf	_Lcd_Cmd$804,w,c
  6409  002FC6  EC9A  F018         	call	_Lcd_Port
  6410                           
  6411                           ;i2c_display.c: 34: Lcd_Port(a);
  6412  002FCA  500A               	movf	Lcd_Cmd@a,w,c
  6413  002FCC  EC9A  F018         	call	_Lcd_Port
  6414                           
  6415                           ;i2c_display.c: 37: buff=a | 0x00 | 0x04 | 0x00;
  6416  002FD0  0E04               	movlw	4
  6417  002FD2  C00A  F005         	movff	Lcd_Cmd@a,??_Lcd_Cmd
  6418  002FD6  6A06               	clrf	(??_Lcd_Cmd+1)& (0+255),c
  6419  002FD8  1005               	iorwf	??_Lcd_Cmd,w,c
  6420  002FDA  6E08               	movwf	Lcd_Cmd@buff,c
  6421  002FDC  5006               	movf	??_Lcd_Cmd+1,w,c
  6422  002FDE  6E09               	movwf	Lcd_Cmd@buff+1,c
  6423                           
  6424                           ;i2c_display.c: 38: Lcd_Port(buff);
  6425  002FE0  5008               	movf	Lcd_Cmd@buff,w,c
  6426  002FE2  EC9A  F018         	call	_Lcd_Port
  6427                           
  6428                           ;i2c_display.c: 39: _delay((unsigned long)((4)*(64000000/4000.0)));
  6429  002FE6  0E54               	movlw	84
  6430  002FE8  6E05               	movwf	??_Lcd_Cmd& (0+255),c
  6431  002FEA  0E1C               	movlw	28
  6432  002FEC                     u3137:
  6433  002FEC  2EE8               	decfsz	wreg,f,c
  6434  002FEE  D7FE               	bra	u3137
  6435  002FF0  2E05               	decfsz	??_Lcd_Cmd& (0+255),f,c
  6436  002FF2  D7FC               	bra	u3137
  6437  002FF4  D000               	nop2	
  6438                           
  6439                           ;i2c_display.c: 41: buff=a | 0x00 | 0x00 | 0x00;
  6440  002FF6  C00A  F008         	movff	Lcd_Cmd@a,Lcd_Cmd@buff
  6441  002FFA  6A09               	clrf	Lcd_Cmd@buff+1,c
  6442                           
  6443                           ;i2c_display.c: 42: Lcd_Port(buff);
  6444  002FFC  5008               	movf	Lcd_Cmd@buff,w,c
  6445  002FFE  EC9A  F018         	call	_Lcd_Port
  6446  003002  0012               	return		;funcret
  6447  003004                     __end_of_Lcd_Cmd:
  6448                           	opt stack 0
  6449                           tblptru	equ	0xFF8
  6450                           tblptrh	equ	0xFF7
  6451                           tblptrl	equ	0xFF6
  6452                           tablat	equ	0xFF5
  6453                           prodh	equ	0xFF4
  6454                           prodl	equ	0xFF3
  6455                           indf0	equ	0xFEF
  6456                           postinc0	equ	0xFEE
  6457                           fsr0h	equ	0xFEA
  6458                           fsr0l	equ	0xFE9
  6459                           wreg	equ	0xFE8
  6460                           indf2	equ	0xFDF
  6461                           postinc2	equ	0xFDE
  6462                           postdec2	equ	0xFDD
  6463                           fsr2h	equ	0xFDA
  6464                           fsr2l	equ	0xFD9
  6465                           status	equ	0xFD8
  6466                           
  6467 ;; *************** function _Lcd_Port *****************
  6468 ;; Defined at:
  6469 ;;		line 20 in file "i2c_display.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;  data            1    wreg     unsigned char 
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  data            1    3[COMRAM] unsigned char 
  6474 ;; Return value:  Size  Location     Type
  6475 ;;                  1    wreg      void 
  6476 ;; Registers used:
  6477 ;;		wreg, status,2, status,0, cstack
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6484 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6486 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6487 ;;Total ram usage:        1 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:    2
  6490 ;; This function calls:
  6491 ;;		_I2C_Master_Start
  6492 ;;		_I2C_Master_Stop
  6493 ;;		_I2C_Write_Display
  6494 ;; This function is called by:
  6495 ;;		_Lcd_Cmd
  6496 ;;		_Lcd_Init
  6497 ;;		_Lcd_Write_Char
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text27
  6502  003134                     __ptext27:
  6503                           	opt stack 0
  6504  003134                     _Lcd_Port:
  6505                           	opt stack 25
  6506                           
  6507                           ;incstack = 0
  6508                           ;Lcd_Port@data stored from wreg
  6509  003134  6E04               	movwf	Lcd_Port@data,c
  6510  003136  ECE7  F018         	call	_I2C_Master_Start	;wreg free
  6511                           
  6512                           ;i2c_display.c: 22: I2C_Write_Display(0x70);
  6513  00313A  0E00               	movlw	0
  6514  00313C  6E03               	movwf	I2C_Write_Display@d+1,c
  6515  00313E  0E70               	movlw	112
  6516  003140  6E02               	movwf	I2C_Write_Display@d,c
  6517  003142  ECDE  F018         	call	_I2C_Write_Display	;wreg free
  6518                           
  6519                           ;i2c_display.c: 23: I2C_Write_Display(data);
  6520  003146  C004  F002         	movff	Lcd_Port@data,I2C_Write_Display@d
  6521  00314A  6A03               	clrf	I2C_Write_Display@d+1,c
  6522  00314C  ECDE  F018         	call	_I2C_Write_Display	;wreg free
  6523                           
  6524                           ;i2c_display.c: 24: I2C_Master_Stop();
  6525  003150  ECE3  F018         	call	_I2C_Master_Stop	;wreg free
  6526  003154  0012               	return		;funcret
  6527  003156                     __end_of_Lcd_Port:
  6528                           	opt stack 0
  6529                           tblptru	equ	0xFF8
  6530                           tblptrh	equ	0xFF7
  6531                           tblptrl	equ	0xFF6
  6532                           tablat	equ	0xFF5
  6533                           prodh	equ	0xFF4
  6534                           prodl	equ	0xFF3
  6535                           indf0	equ	0xFEF
  6536                           postinc0	equ	0xFEE
  6537                           fsr0h	equ	0xFEA
  6538                           fsr0l	equ	0xFE9
  6539                           wreg	equ	0xFE8
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           fsr2h	equ	0xFDA
  6544                           fsr2l	equ	0xFD9
  6545                           status	equ	0xFD8
  6546                           
  6547 ;; *************** function _I2C_Write_Display *****************
  6548 ;; Defined at:
  6549 ;;		line 206 in file "i2c_display.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;  d               2    1[COMRAM] unsigned int 
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg, status,2, status,0, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6563 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;Total ram usage:        2 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    1
  6570 ;; This function calls:
  6571 ;;		_I2C_Master_Wait
  6572 ;; This function is called by:
  6573 ;;		_Lcd_Port
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           	psect	text28
  6578  0031BC                     __ptext28:
  6579                           	opt stack 0
  6580  0031BC                     _I2C_Write_Display:
  6581                           	opt stack 25
  6582                           
  6583                           ;i2c_display.c: 208: I2C_Master_Wait();
  6584                           
  6585                           ;incstack = 0
  6586  0031BC  ECC7  F018         	call	_I2C_Master_Wait	;wreg free
  6587                           
  6588                           ;i2c_display.c: 209: SSP1BUF = d;
  6589  0031C0  C002  FFC9         	movff	I2C_Write_Display@d,4041	;volatile
  6590  0031C4  0012               	return		;funcret
  6591  0031C6                     __end_of_I2C_Write_Display:
  6592                           	opt stack 0
  6593                           tblptru	equ	0xFF8
  6594                           tblptrh	equ	0xFF7
  6595                           tblptrl	equ	0xFF6
  6596                           tablat	equ	0xFF5
  6597                           prodh	equ	0xFF4
  6598                           prodl	equ	0xFF3
  6599                           indf0	equ	0xFEF
  6600                           postinc0	equ	0xFEE
  6601                           fsr0h	equ	0xFEA
  6602                           fsr0l	equ	0xFE9
  6603                           wreg	equ	0xFE8
  6604                           indf2	equ	0xFDF
  6605                           postinc2	equ	0xFDE
  6606                           postdec2	equ	0xFDD
  6607                           fsr2h	equ	0xFDA
  6608                           fsr2l	equ	0xFD9
  6609                           status	equ	0xFD8
  6610                           
  6611 ;; *************** function _I2C_Master_Stop *****************
  6612 ;; Defined at:
  6613 ;;		line 194 in file "i2c_display.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;		None
  6616 ;; Auto vars:     Size  Location     Type
  6617 ;;		None
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  1    wreg      void 
  6620 ;; Registers used:
  6621 ;;		wreg, status,2, status,0, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;Total ram usage:        0 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    1
  6634 ;; This function calls:
  6635 ;;		_I2C_Master_Wait
  6636 ;; This function is called by:
  6637 ;;		_Lcd_Port
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           	psect	text29
  6642  0031C6                     __ptext29:
  6643                           	opt stack 0
  6644  0031C6                     _I2C_Master_Stop:
  6645                           	opt stack 25
  6646                           
  6647                           ;i2c_display.c: 196: I2C_Master_Wait();
  6648                           
  6649                           ;incstack = 0
  6650  0031C6  ECC7  F018         	call	_I2C_Master_Wait	;wreg free
  6651                           
  6652                           ;i2c_display.c: 197: SSP1CON2bits.PEN = 1;
  6653  0031CA  84C5               	bsf	4037,2,c	;volatile
  6654  0031CC  0012               	return		;funcret
  6655  0031CE                     __end_of_I2C_Master_Stop:
  6656                           	opt stack 0
  6657                           tblptru	equ	0xFF8
  6658                           tblptrh	equ	0xFF7
  6659                           tblptrl	equ	0xFF6
  6660                           tablat	equ	0xFF5
  6661                           prodh	equ	0xFF4
  6662                           prodl	equ	0xFF3
  6663                           indf0	equ	0xFEF
  6664                           postinc0	equ	0xFEE
  6665                           fsr0h	equ	0xFEA
  6666                           fsr0l	equ	0xFE9
  6667                           wreg	equ	0xFE8
  6668                           indf2	equ	0xFDF
  6669                           postinc2	equ	0xFDE
  6670                           postdec2	equ	0xFDD
  6671                           fsr2h	equ	0xFDA
  6672                           fsr2l	equ	0xFD9
  6673                           status	equ	0xFD8
  6674                           
  6675 ;; *************** function _I2C_Master_Start *****************
  6676 ;; Defined at:
  6677 ;;		line 182 in file "i2c_display.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;		None
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;		None
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  1    wreg      void 
  6684 ;; Registers used:
  6685 ;;		wreg, status,2, status,0, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;Total ram usage:        0 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    1
  6698 ;; This function calls:
  6699 ;;		_I2C_Master_Wait
  6700 ;; This function is called by:
  6701 ;;		_Lcd_Port
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text30
  6706  0031CE                     __ptext30:
  6707                           	opt stack 0
  6708  0031CE                     _I2C_Master_Start:
  6709                           	opt stack 25
  6710                           
  6711                           ;i2c_display.c: 184: I2C_Master_Wait();
  6712                           
  6713                           ;incstack = 0
  6714  0031CE  ECC7  F018         	call	_I2C_Master_Wait	;wreg free
  6715                           
  6716                           ;i2c_display.c: 185: SSP1CON2bits.SEN = 1;
  6717  0031D2  80C5               	bsf	4037,0,c	;volatile
  6718  0031D4  0012               	return		;funcret
  6719  0031D6                     __end_of_I2C_Master_Start:
  6720                           	opt stack 0
  6721                           tblptru	equ	0xFF8
  6722                           tblptrh	equ	0xFF7
  6723                           tblptrl	equ	0xFF6
  6724                           tablat	equ	0xFF5
  6725                           prodh	equ	0xFF4
  6726                           prodl	equ	0xFF3
  6727                           indf0	equ	0xFEF
  6728                           postinc0	equ	0xFEE
  6729                           fsr0h	equ	0xFEA
  6730                           fsr0l	equ	0xFE9
  6731                           wreg	equ	0xFE8
  6732                           indf2	equ	0xFDF
  6733                           postinc2	equ	0xFDE
  6734                           postdec2	equ	0xFDD
  6735                           fsr2h	equ	0xFDA
  6736                           fsr2l	equ	0xFD9
  6737                           status	equ	0xFD8
  6738                           
  6739 ;; *************** function _I2C_Master_Wait *****************
  6740 ;; Defined at:
  6741 ;;		line 175 in file "i2c_display.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;		None
  6744 ;; Auto vars:     Size  Location     Type
  6745 ;;		None
  6746 ;; Return value:  Size  Location     Type
  6747 ;;                  1    wreg      void 
  6748 ;; Registers used:
  6749 ;;		wreg, status,2, status,0
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6757 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6758 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;Total ram usage:        1 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; This function calls:
  6762 ;;		Nothing
  6763 ;; This function is called by:
  6764 ;;		_I2C_Master_Start
  6765 ;;		_I2C_Master_Stop
  6766 ;;		_I2C_Write_Display
  6767 ;;		_I2C_Master_RepeatedStart
  6768 ;;		_I2C_Master_Write
  6769 ;;		_I2C_Master_Read
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text31
  6774  00318E                     __ptext31:
  6775                           	opt stack 0
  6776  00318E                     _I2C_Master_Wait:
  6777                           	opt stack 25
  6778                           
  6779                           ;i2c_display.c: 177: while ((SSP1STAT & 0x04) || (SSP1CON2 & 0x1F));
  6780                           
  6781                           ;incstack = 0
  6782  00318E  B4C7               	btfsc	4039,2,c	;volatile
  6783  003190  D7FE               	goto	_I2C_Master_Wait
  6784  003192  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  6785  003196  0E1F               	movlw	31
  6786  003198  1601               	andwf	??_I2C_Master_Wait,f,c
  6787  00319A  B4D8               	btfsc	status,2,c
  6788  00319C  0012               	return	
  6789  00319E  D7F7               	goto	_I2C_Master_Wait
  6790  0031A0                     __end_of_I2C_Master_Wait:
  6791                           	opt stack 0
  6792                           tblptru	equ	0xFF8
  6793                           tblptrh	equ	0xFF7
  6794                           tblptrl	equ	0xFF6
  6795                           tablat	equ	0xFF5
  6796                           prodh	equ	0xFF4
  6797                           prodl	equ	0xFF3
  6798                           indf0	equ	0xFEF
  6799                           postinc0	equ	0xFEE
  6800                           fsr0h	equ	0xFEA
  6801                           fsr0l	equ	0xFE9
  6802                           wreg	equ	0xFE8
  6803                           indf2	equ	0xFDF
  6804                           postinc2	equ	0xFDE
  6805                           postdec2	equ	0xFDD
  6806                           fsr2h	equ	0xFDA
  6807                           fsr2l	equ	0xFD9
  6808                           status	equ	0xFD8
  6809                           
  6810 ;; *************** function _config *****************
  6811 ;; Defined at:
  6812 ;;		line 7 in file "config.c"
  6813 ;; Parameters:    Size  Location     Type
  6814 ;;		None
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;		None
  6817 ;; Return value:  Size  Location     Type
  6818 ;;                  1    wreg      void 
  6819 ;; Registers used:
  6820 ;;		wreg, status,2
  6821 ;; Tracked objects:
  6822 ;;		On entry : 0/0
  6823 ;;		On exit  : 0/0
  6824 ;;		Unchanged: 0/0
  6825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;Total ram usage:        0 bytes
  6831 ;; Hardware stack levels used:    1
  6832 ;; This function calls:
  6833 ;;		Nothing
  6834 ;; This function is called by:
  6835 ;;		_main
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text32
  6840  002F10                     __ptext32:
  6841                           	opt stack 0
  6842  002F10                     _config:
  6843                           	opt stack 30
  6844                           
  6845                           ;config.c: 9: TRISA=0Xff;
  6846                           
  6847                           ;incstack = 0
  6848  002F10  6892               	setf	3986,c	;volatile
  6849                           
  6850                           ;config.c: 10: TRISB=0X00;
  6851  002F12  0E00               	movlw	0
  6852  002F14  6E93               	movwf	3987,c	;volatile
  6853                           
  6854                           ;config.c: 11: TRISC=0X00;
  6855  002F16  0E00               	movlw	0
  6856  002F18  6E94               	movwf	3988,c	;volatile
  6857                           
  6858                           ;config.c: 12: TRISD=0X00;
  6859  002F1A  0E00               	movlw	0
  6860  002F1C  6E95               	movwf	3989,c	;volatile
  6861                           
  6862                           ;config.c: 13: TRISE=0Xff;
  6863  002F1E  6896               	setf	3990,c	;volatile
  6864                           
  6865                           ;config.c: 15: PORTA=0X00;
  6866  002F20  0E00               	movlw	0
  6867  002F22  6E80               	movwf	3968,c	;volatile
  6868                           
  6869                           ;config.c: 16: PORTB=0X00;
  6870  002F24  0E00               	movlw	0
  6871  002F26  6E81               	movwf	3969,c	;volatile
  6872                           
  6873                           ;config.c: 17: PORTC=0X00;
  6874  002F28  0E00               	movlw	0
  6875  002F2A  6E82               	movwf	3970,c	;volatile
  6876                           
  6877                           ;config.c: 18: PORTD=0X00;
  6878  002F2C  0E00               	movlw	0
  6879  002F2E  6E83               	movwf	3971,c	;volatile
  6880                           
  6881                           ;config.c: 19: PORTE=0X00;
  6882  002F30  0E00               	movlw	0
  6883  002F32  6E84               	movwf	3972,c	;volatile
  6884                           
  6885                           ;config.c: 21: LATA=0X00;
  6886  002F34  0E00               	movlw	0
  6887  002F36  6E89               	movwf	3977,c	;volatile
  6888                           
  6889                           ;config.c: 22: LATB=0X00;
  6890  002F38  0E00               	movlw	0
  6891  002F3A  6E8A               	movwf	3978,c	;volatile
  6892                           
  6893                           ;config.c: 23: LATC=0X00;
  6894  002F3C  0E00               	movlw	0
  6895  002F3E  6E8B               	movwf	3979,c	;volatile
  6896                           
  6897                           ;config.c: 24: LATD=0X00;
  6898  002F40  0E00               	movlw	0
  6899  002F42  6E8C               	movwf	3980,c	;volatile
  6900                           
  6901                           ;config.c: 25: LATE=0X00;
  6902  002F44  0E00               	movlw	0
  6903  002F46  6E8D               	movwf	3981,c	;volatile
  6904                           
  6905                           ;config.c: 27: ANSELA=0Xff;
  6906  002F48  010F               	movlb	15	; () banked
  6907  002F4A  6938               	setf	56,b	;volatile
  6908                           
  6909                           ;config.c: 28: ANSELB=0X00;
  6910  002F4C  0E00               	movlw	0
  6911  002F4E  6F39               	movwf	57,b	;volatile
  6912                           
  6913                           ;config.c: 29: ANSELC=0X00;
  6914  002F50  0E00               	movlw	0
  6915  002F52  6F3A               	movwf	58,b	;volatile
  6916                           
  6917                           ;config.c: 30: ANSELD=0X00;
  6918  002F54  0E00               	movlw	0
  6919  002F56  6F3B               	movwf	59,b	;volatile
  6920                           
  6921                           ;config.c: 31: ANSELE=0X00;
  6922  002F58  0E00               	movlw	0
  6923  002F5A  6F3C               	movwf	60,b	;volatile
  6924                           
  6925                           ;config.c: 33: OSCCON=0b01110100;
  6926  002F5C  0E74               	movlw	116
  6927  002F5E  6ED3               	movwf	4051,c	;volatile
  6928                           
  6929                           ; BSR set to: 15
  6930                           ;config.c: 34: OSCTUNEbits.PLLEN=1;
  6931  002F60  8C9B               	bsf	3995,6,c	;volatile
  6932                           
  6933                           ; BSR set to: 15
  6934  002F62  0012               	return		;funcret
  6935  002F64                     __end_of_config:
  6936                           	opt stack 0
  6937                           tblptru	equ	0xFF8
  6938                           tblptrh	equ	0xFF7
  6939                           tblptrl	equ	0xFF6
  6940                           tablat	equ	0xFF5
  6941                           prodh	equ	0xFF4
  6942                           prodl	equ	0xFF3
  6943                           indf0	equ	0xFEF
  6944                           postinc0	equ	0xFEE
  6945                           fsr0h	equ	0xFEA
  6946                           fsr0l	equ	0xFE9
  6947                           wreg	equ	0xFE8
  6948                           indf2	equ	0xFDF
  6949                           postinc2	equ	0xFDE
  6950                           postdec2	equ	0xFDD
  6951                           fsr2h	equ	0xFDA
  6952                           fsr2l	equ	0xFD9
  6953                           status	equ	0xFD8
  6954                           
  6955 ;; *************** function _buck_boost *****************
  6956 ;; Defined at:
  6957 ;;		line 40 in file "pwm_con.c"
  6958 ;; Parameters:    Size  Location     Type
  6959 ;;  type            2   57[COMRAM] int 
  6960 ;;  dty             2   59[COMRAM] int 
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;		None
  6963 ;; Return value:  Size  Location     Type
  6964 ;;                  1    wreg      void 
  6965 ;; Registers used:
  6966 ;;		wreg, status,2, status,0, cstack
  6967 ;; Tracked objects:
  6968 ;;		On entry : 0/0
  6969 ;;		On exit  : 0/0
  6970 ;;		Unchanged: 0/0
  6971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6972 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6975 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;Total ram usage:        4 bytes
  6977 ;; Hardware stack levels used:    1
  6978 ;; Hardware stack levels required when called:    2
  6979 ;; This function calls:
  6980 ;;		___awtoft
  6981 ;;		___ftmul
  6982 ;;		___fttol
  6983 ;; This function is called by:
  6984 ;;		_main
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           	psect	text33
  6989  0028B6                     __ptext33:
  6990                           	opt stack 0
  6991  0028B6                     _buck_boost:
  6992                           	opt stack 28
  6993                           
  6994                           ;pwm_con.c: 42: if (type==1)
  6995                           
  6996                           ; BSR set to: 15
  6997                           ;incstack = 0
  6998  0028B6  043A               	decf	buck_boost@type,w,c
  6999  0028B8  103B               	iorwf	buck_boost@type+1,w,c
  7000  0028BA  A4D8               	btfss	status,2,c
  7001  0028BC  D030               	goto	l211
  7002                           
  7003                           ;pwm_con.c: 43: {
  7004                           ;pwm_con.c: 44: CCPR1L=0;
  7005  0028BE  0E00               	movlw	0
  7006  0028C0  6EBE               	movwf	4030,c	;volatile
  7007                           
  7008                           ;pwm_con.c: 45: if(dty>100)
  7009  0028C2  BE3D               	btfsc	buck_boost@dty+1,7,c
  7010  0028C4  D00A               	goto	l212
  7011  0028C6  503D               	movf	buck_boost@dty+1,w,c
  7012  0028C8  E104               	bnz	u2510
  7013  0028CA  0E65               	movlw	101
  7014  0028CC  5C3C               	subwf	buck_boost@dty,w,c
  7015  0028CE  A0D8               	btfss	status,0,c
  7016  0028D0  D004               	goto	l212
  7017  0028D2                     u2510:
  7018                           
  7019                           ;pwm_con.c: 46: {
  7020                           ;pwm_con.c: 47: dty=100;
  7021  0028D2  0E00               	movlw	0
  7022  0028D4  6E3D               	movwf	buck_boost@dty+1,c
  7023  0028D6  0E64               	movlw	100
  7024  0028D8  6E3C               	movwf	buck_boost@dty,c
  7025  0028DA                     l212:
  7026                           
  7027                           ;pwm_con.c: 48: }
  7028                           ;pwm_con.c: 50: c=dty*1.7;
  7029  0028DA  0E9A               	movlw	154
  7030  0028DC  6E18               	movwf	___ftmul@f2,c
  7031  0028DE  0ED9               	movlw	217
  7032  0028E0  6E19               	movwf	___ftmul@f2+1,c
  7033  0028E2  0E3F               	movlw	63
  7034  0028E4  6E1A               	movwf	___ftmul@f2+2,c
  7035  0028E6  C03C  F009         	movff	buck_boost@dty,___awtoft@c
  7036  0028EA  C03D  F00A         	movff	buck_boost@dty+1,___awtoft@c+1
  7037  0028EE  EC45  F018         	call	___awtoft	;wreg free
  7038  0028F2  C009  F015         	movff	?___awtoft,___ftmul@f1
  7039  0028F6  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  7040  0028FA  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  7041  0028FE  EC6E  F013         	call	___ftmul	;wreg free
  7042  002902  C015  F02B         	movff	?___ftmul,___fttol@f1
  7043  002906  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  7044  00290A  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  7045  00290E  ECF4  F012         	call	___fttol	;wreg free
  7046  002912  C02B  F04F         	movff	?___fttol,_c
  7047  002916  C02C  F050         	movff	?___fttol+1,_c+1
  7048                           
  7049                           ;pwm_con.c: 51: CCPR2L=c;
  7050  00291A  C04F  FF67         	movff	_c,3943	;volatile
  7051  00291E                     l211:
  7052                           
  7053                           ;pwm_con.c: 53: }
  7054                           ;pwm_con.c: 55: if (type==2)
  7055  00291E  0E02               	movlw	2
  7056  002920  183A               	xorwf	buck_boost@type,w,c
  7057  002922  103B               	iorwf	buck_boost@type+1,w,c
  7058  002924  A4D8               	btfss	status,2,c
  7059  002926  0012               	return	
  7060                           
  7061                           ;pwm_con.c: 56: {
  7062                           ;pwm_con.c: 57: CCPR2L=100;
  7063  002928  0E64               	movlw	100
  7064  00292A  6E67               	movwf	3943,c	;volatile
  7065                           
  7066                           ;pwm_con.c: 58: if(dty>100)
  7067  00292C  BE3D               	btfsc	buck_boost@dty+1,7,c
  7068  00292E  D00A               	goto	l214
  7069  002930  503D               	movf	buck_boost@dty+1,w,c
  7070  002932  E104               	bnz	u2530
  7071  002934  0E65               	movlw	101
  7072  002936  5C3C               	subwf	buck_boost@dty,w,c
  7073  002938  A0D8               	btfss	status,0,c
  7074  00293A  D004               	goto	l214
  7075  00293C                     u2530:
  7076                           
  7077                           ;pwm_con.c: 59: {
  7078                           ;pwm_con.c: 60: dty=100;
  7079  00293C  0E00               	movlw	0
  7080  00293E  6E3D               	movwf	buck_boost@dty+1,c
  7081  002940  0E64               	movlw	100
  7082  002942  6E3C               	movwf	buck_boost@dty,c
  7083  002944                     l214:
  7084                           
  7085                           ;pwm_con.c: 61: }
  7086                           ;pwm_con.c: 63: c=dty*1.7;
  7087  002944  0E9A               	movlw	154
  7088  002946  6E18               	movwf	___ftmul@f2,c
  7089  002948  0ED9               	movlw	217
  7090  00294A  6E19               	movwf	___ftmul@f2+1,c
  7091  00294C  0E3F               	movlw	63
  7092  00294E  6E1A               	movwf	___ftmul@f2+2,c
  7093  002950  C03C  F009         	movff	buck_boost@dty,___awtoft@c
  7094  002954  C03D  F00A         	movff	buck_boost@dty+1,___awtoft@c+1
  7095  002958  EC45  F018         	call	___awtoft	;wreg free
  7096  00295C  C009  F015         	movff	?___awtoft,___ftmul@f1
  7097  002960  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  7098  002964  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  7099  002968  EC6E  F013         	call	___ftmul	;wreg free
  7100  00296C  C015  F02B         	movff	?___ftmul,___fttol@f1
  7101  002970  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  7102  002974  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  7103  002978  ECF4  F012         	call	___fttol	;wreg free
  7104  00297C  C02B  F04F         	movff	?___fttol,_c
  7105  002980  C02C  F050         	movff	?___fttol+1,_c+1
  7106                           
  7107                           ;pwm_con.c: 64: CCPR1L=c;
  7108  002984  C04F  FFBE         	movff	_c,4030	;volatile
  7109  002988  0012               	return	
  7110  00298A                     __end_of_buck_boost:
  7111                           	opt stack 0
  7112                           tblptru	equ	0xFF8
  7113                           tblptrh	equ	0xFF7
  7114                           tblptrl	equ	0xFF6
  7115                           tablat	equ	0xFF5
  7116                           prodh	equ	0xFF4
  7117                           prodl	equ	0xFF3
  7118                           indf0	equ	0xFEF
  7119                           postinc0	equ	0xFEE
  7120                           fsr0h	equ	0xFEA
  7121                           fsr0l	equ	0xFE9
  7122                           wreg	equ	0xFE8
  7123                           indf2	equ	0xFDF
  7124                           postinc2	equ	0xFDE
  7125                           postdec2	equ	0xFDD
  7126                           fsr2h	equ	0xFDA
  7127                           fsr2l	equ	0xFD9
  7128                           status	equ	0xFD8
  7129                           
  7130 ;; *************** function ___fttol *****************
  7131 ;; Defined at:
  7132 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;  f1              3   42[COMRAM] float 
  7135 ;; Auto vars:     Size  Location     Type
  7136 ;;  lval            4   52[COMRAM] unsigned long 
  7137 ;;  exp1            1   56[COMRAM] unsigned char 
  7138 ;;  sign1           1   51[COMRAM] unsigned char 
  7139 ;; Return value:  Size  Location     Type
  7140 ;;                  4   42[COMRAM] long 
  7141 ;; Registers used:
  7142 ;;		wreg, status,2, status,0
  7143 ;; Tracked objects:
  7144 ;;		On entry : 0/0
  7145 ;;		On exit  : 0/0
  7146 ;;		Unchanged: 0/0
  7147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7149 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7150 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7151 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7152 ;;Total ram usage:       15 bytes
  7153 ;; Hardware stack levels used:    1
  7154 ;; This function calls:
  7155 ;;		Nothing
  7156 ;; This function is called by:
  7157 ;;		_buck_boost
  7158 ;;		_sprintf
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162                           	psect	text34
  7163  0025E8                     __ptext34:
  7164                           	opt stack 0
  7165  0025E8                     ___fttol:
  7166                           	opt stack 29
  7167                           
  7168                           ;incstack = 0
  7169  0025E8  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  7170  0025EC  6A30               	clrf	(??___fttol+1)& (0+255),c
  7171  0025EE  6A31               	clrf	(??___fttol+2)& (0+255),c
  7172  0025F0  342C               	rlcf	___fttol@f1+1,w,c
  7173  0025F2  362F               	rlcf	??___fttol& (0+255),f,c
  7174  0025F4  E301               	bnc	u2381
  7175  0025F6  8030               	bsf	(??___fttol+1)& (0+255),0,c
  7176  0025F8                     u2381:
  7177  0025F8  502F               	movf	??___fttol,w,c
  7178  0025FA  6E39               	movwf	___fttol@exp1,c
  7179  0025FC  5039               	movf	___fttol@exp1,w,c
  7180  0025FE  A4D8               	btfss	status,2,c
  7181  002600  D009               	goto	l783
  7182  002602  0E00               	movlw	0
  7183  002604  6E2B               	movwf	?___fttol,c
  7184  002606  0E00               	movlw	0
  7185  002608  6E2C               	movwf	?___fttol+1,c
  7186  00260A  0E00               	movlw	0
  7187  00260C  6E2D               	movwf	?___fttol+2,c
  7188  00260E  0E00               	movlw	0
  7189  002610  6E2E               	movwf	?___fttol+3,c
  7190  002612  0012               	return	
  7191  002614                     l783:
  7192  002614  0E17               	movlw	23
  7193  002616  6E2F               	movwf	??___fttol& (0+255),c
  7194  002618  C02B  F030         	movff	___fttol@f1,??___fttol+1
  7195  00261C  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  7196  002620  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  7197  002624  282F               	incf	??___fttol,w,c
  7198  002626  6E33               	movwf	(??___fttol+4)& (0+255),c
  7199  002628  D004               	goto	u2400
  7200  00262A                     u2405:
  7201  00262A  90D8               	bcf	status,0,c
  7202  00262C  3232               	rrcf	??___fttol+3,f,c
  7203  00262E  3231               	rrcf	??___fttol+2,f,c
  7204  002630  3230               	rrcf	??___fttol+1,f,c
  7205  002632                     u2400:
  7206  002632  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  7207  002634  D7FA               	goto	u2405
  7208  002636  5030               	movf	??___fttol+1,w,c
  7209  002638  6E34               	movwf	___fttol@sign1,c
  7210  00263A  8E2C               	bsf	___fttol@f1+1,7,c
  7211  00263C  0EFF               	movlw	255
  7212  00263E  162B               	andwf	___fttol@f1,f,c
  7213  002640  0EFF               	movlw	255
  7214  002642  162C               	andwf	___fttol@f1+1,f,c
  7215  002644  0E00               	movlw	0
  7216  002646  162D               	andwf	___fttol@f1+2,f,c
  7217  002648  502B               	movf	___fttol@f1,w,c
  7218  00264A  6E35               	movwf	___fttol@lval,c
  7219  00264C  502C               	movf	___fttol@f1+1,w,c
  7220  00264E  6E36               	movwf	___fttol@lval+1,c
  7221  002650  502D               	movf	___fttol@f1+2,w,c
  7222  002652  6E37               	movwf	___fttol@lval+2,c
  7223  002654  6A38               	clrf	___fttol@lval+3,c
  7224  002656  0E8E               	movlw	142
  7225  002658  5E39               	subwf	___fttol@exp1,f,c
  7226  00265A  AE39               	btfss	___fttol@exp1,7,c
  7227  00265C  D016               	goto	l785
  7228  00265E  5039               	movf	___fttol@exp1,w,c
  7229  002660  0A80               	xorlw	128
  7230  002662  0F8F               	addlw	143
  7231  002664  B0D8               	btfsc	status,0,c
  7232  002666  D009               	goto	l786
  7233  002668  0E00               	movlw	0
  7234  00266A  6E2B               	movwf	?___fttol,c
  7235  00266C  0E00               	movlw	0
  7236  00266E  6E2C               	movwf	?___fttol+1,c
  7237  002670  0E00               	movlw	0
  7238  002672  6E2D               	movwf	?___fttol+2,c
  7239  002674  0E00               	movlw	0
  7240  002676  6E2E               	movwf	?___fttol+3,c
  7241  002678  0012               	return	
  7242  00267A                     l786:
  7243  00267A  90D8               	bcf	status,0,c
  7244  00267C  3238               	rrcf	___fttol@lval+3,f,c
  7245  00267E  3237               	rrcf	___fttol@lval+2,f,c
  7246  002680  3236               	rrcf	___fttol@lval+1,f,c
  7247  002682  3235               	rrcf	___fttol@lval,f,c
  7248  002684  3E39               	incfsz	___fttol@exp1,f,c
  7249  002686  D7F9               	goto	l786
  7250  002688  D015               	goto	u2440
  7251  00268A                     l785:
  7252  00268A  0E17               	movlw	23
  7253  00268C  6439               	cpfsgt	___fttol@exp1,c
  7254  00268E  D00F               	goto	l791
  7255  002690  0E00               	movlw	0
  7256  002692  6E2B               	movwf	?___fttol,c
  7257  002694  0E00               	movlw	0
  7258  002696  6E2C               	movwf	?___fttol+1,c
  7259  002698  0E00               	movlw	0
  7260  00269A  6E2D               	movwf	?___fttol+2,c
  7261  00269C  0E00               	movlw	0
  7262  00269E  6E2E               	movwf	?___fttol+3,c
  7263  0026A0  0012               	return	
  7264  0026A2  90D8               	bcf	status,0,c
  7265  0026A4  3635               	rlcf	___fttol@lval,f,c
  7266  0026A6  3636               	rlcf	___fttol@lval+1,f,c
  7267  0026A8  3637               	rlcf	___fttol@lval+2,f,c
  7268  0026AA  3638               	rlcf	___fttol@lval+3,f,c
  7269  0026AC  0639               	decf	___fttol@exp1,f,c
  7270  0026AE                     l791:
  7271  0026AE  5039               	movf	___fttol@exp1,w,c
  7272  0026B0  A4D8               	btfss	status,2,c
  7273  0026B2  D7F7               	goto	l792
  7274  0026B4                     u2440:
  7275  0026B4  5034               	movf	___fttol@sign1,w,c
  7276  0026B6  B4D8               	btfsc	status,2,c
  7277  0026B8  D008               	goto	l794
  7278  0026BA  1E38               	comf	___fttol@lval+3,f,c
  7279  0026BC  1E37               	comf	___fttol@lval+2,f,c
  7280  0026BE  1E36               	comf	___fttol@lval+1,f,c
  7281  0026C0  6C35               	negf	___fttol@lval,c
  7282  0026C2  0E00               	movlw	0
  7283  0026C4  2236               	addwfc	___fttol@lval+1,f,c
  7284  0026C6  2237               	addwfc	___fttol@lval+2,f,c
  7285  0026C8  2238               	addwfc	___fttol@lval+3,f,c
  7286  0026CA                     l794:
  7287  0026CA  C035  F02B         	movff	___fttol@lval,?___fttol
  7288  0026CE  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  7289  0026D2  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  7290  0026D6  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  7291  0026DA  0012               	return	
  7292  0026DC                     __end_of___fttol:
  7293                           	opt stack 0
  7294                           tblptru	equ	0xFF8
  7295                           tblptrh	equ	0xFF7
  7296                           tblptrl	equ	0xFF6
  7297                           tablat	equ	0xFF5
  7298                           prodh	equ	0xFF4
  7299                           prodl	equ	0xFF3
  7300                           indf0	equ	0xFEF
  7301                           postinc0	equ	0xFEE
  7302                           fsr0h	equ	0xFEA
  7303                           fsr0l	equ	0xFE9
  7304                           wreg	equ	0xFE8
  7305                           indf2	equ	0xFDF
  7306                           postinc2	equ	0xFDE
  7307                           postdec2	equ	0xFDD
  7308                           fsr2h	equ	0xFDA
  7309                           fsr2l	equ	0xFD9
  7310                           status	equ	0xFD8
  7311                           
  7312 ;; *************** function ___ftmul *****************
  7313 ;; Defined at:
  7314 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;  f1              3   20[COMRAM] float 
  7317 ;;  f2              3   23[COMRAM] float 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  7320 ;;  sign            1   34[COMRAM] unsigned char 
  7321 ;;  cntr            1   33[COMRAM] unsigned char 
  7322 ;;  exp             1   29[COMRAM] unsigned char 
  7323 ;; Return value:  Size  Location     Type
  7324 ;;                  3   20[COMRAM] float 
  7325 ;; Registers used:
  7326 ;;		wreg, status,2, status,0, cstack
  7327 ;; Tracked objects:
  7328 ;;		On entry : 0/0
  7329 ;;		On exit  : 0/0
  7330 ;;		Unchanged: 0/0
  7331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7332 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7333 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7334 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7335 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7336 ;;Total ram usage:       15 bytes
  7337 ;; Hardware stack levels used:    1
  7338 ;; Hardware stack levels required when called:    1
  7339 ;; This function calls:
  7340 ;;		___ftpack
  7341 ;; This function is called by:
  7342 ;;		_main
  7343 ;;		_buck_boost
  7344 ;;		_fround
  7345 ;;		_scale
  7346 ;;		_sprintf
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           	psect	text35
  7351  0026DC                     __ptext35:
  7352                           	opt stack 0
  7353  0026DC                     ___ftmul:
  7354                           	opt stack 27
  7355                           
  7356                           ;incstack = 0
  7357  0026DC  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  7358  0026E0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7359  0026E2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7360  0026E4  3416               	rlcf	___ftmul@f1+1,w,c
  7361  0026E6  361B               	rlcf	??___ftmul& (0+255),f,c
  7362  0026E8  E301               	bnc	u1801
  7363  0026EA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7364  0026EC                     u1801:
  7365  0026EC  501B               	movf	??___ftmul,w,c
  7366  0026EE  6E1E               	movwf	___ftmul@exp,c
  7367  0026F0  501E               	movf	___ftmul@exp,w,c
  7368  0026F2  A4D8               	btfss	status,2,c
  7369  0026F4  D007               	goto	l762
  7370  0026F6  0E00               	movlw	0
  7371  0026F8  6E15               	movwf	?___ftmul,c
  7372  0026FA  0E00               	movlw	0
  7373  0026FC  6E16               	movwf	?___ftmul+1,c
  7374  0026FE  0E00               	movlw	0
  7375  002700  6E17               	movwf	?___ftmul+2,c
  7376  002702  0012               	return	
  7377  002704                     l762:
  7378  002704  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  7379  002708  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7380  00270A  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7381  00270C  3419               	rlcf	___ftmul@f2+1,w,c
  7382  00270E  361B               	rlcf	??___ftmul& (0+255),f,c
  7383  002710  E301               	bnc	u1821
  7384  002712  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7385  002714                     u1821:
  7386  002714  501B               	movf	??___ftmul,w,c
  7387  002716  6E23               	movwf	___ftmul@sign,c
  7388  002718  5023               	movf	___ftmul@sign,w,c
  7389  00271A  A4D8               	btfss	status,2,c
  7390  00271C  D007               	goto	l764
  7391  00271E  0E00               	movlw	0
  7392  002720  6E15               	movwf	?___ftmul,c
  7393  002722  0E00               	movlw	0
  7394  002724  6E16               	movwf	?___ftmul+1,c
  7395  002726  0E00               	movlw	0
  7396  002728  6E17               	movwf	?___ftmul+2,c
  7397  00272A  0012               	return	
  7398  00272C                     l764:
  7399  00272C  5023               	movf	___ftmul@sign,w,c
  7400  00272E  0F7B               	addlw	123
  7401  002730  261E               	addwf	___ftmul@exp,f,c
  7402  002732  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  7403  002736  501A               	movf	___ftmul@f2+2,w,c
  7404  002738  1A23               	xorwf	___ftmul@sign,f,c
  7405  00273A  0E80               	movlw	128
  7406  00273C  1623               	andwf	___ftmul@sign,f,c
  7407  00273E  8E16               	bsf	___ftmul@f1+1,7,c
  7408  002740  8E19               	bsf	___ftmul@f2+1,7,c
  7409  002742  0EFF               	movlw	255
  7410  002744  1618               	andwf	___ftmul@f2,f,c
  7411  002746  0EFF               	movlw	255
  7412  002748  1619               	andwf	___ftmul@f2+1,f,c
  7413  00274A  0E00               	movlw	0
  7414  00274C  161A               	andwf	___ftmul@f2+2,f,c
  7415  00274E  0E00               	movlw	0
  7416  002750  6E1F               	movwf	___ftmul@f3_as_product,c
  7417  002752  0E00               	movlw	0
  7418  002754  6E20               	movwf	___ftmul@f3_as_product+1,c
  7419  002756  0E00               	movlw	0
  7420  002758  6E21               	movwf	___ftmul@f3_as_product+2,c
  7421  00275A  0E07               	movlw	7
  7422  00275C  6E22               	movwf	___ftmul@cntr,c
  7423  00275E  A015               	btfss	___ftmul@f1,0,c
  7424  002760  D006               	goto	l766
  7425  002762  5018               	movf	___ftmul@f2,w,c
  7426  002764  261F               	addwf	___ftmul@f3_as_product,f,c
  7427  002766  5019               	movf	___ftmul@f2+1,w,c
  7428  002768  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7429  00276A  501A               	movf	___ftmul@f2+2,w,c
  7430  00276C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7431  00276E                     l766:
  7432  00276E  90D8               	bcf	status,0,c
  7433  002770  3217               	rrcf	___ftmul@f1+2,f,c
  7434  002772  3216               	rrcf	___ftmul@f1+1,f,c
  7435  002774  3215               	rrcf	___ftmul@f1,f,c
  7436  002776  90D8               	bcf	status,0,c
  7437  002778  3618               	rlcf	___ftmul@f2,f,c
  7438  00277A  3619               	rlcf	___ftmul@f2+1,f,c
  7439  00277C  361A               	rlcf	___ftmul@f2+2,f,c
  7440  00277E  2E22               	decfsz	___ftmul@cntr,f,c
  7441  002780  D7EE               	goto	l765
  7442  002782  0E09               	movlw	9
  7443  002784  6E22               	movwf	___ftmul@cntr,c
  7444  002786  A015               	btfss	___ftmul@f1,0,c
  7445  002788  D006               	goto	l769
  7446  00278A  5018               	movf	___ftmul@f2,w,c
  7447  00278C  261F               	addwf	___ftmul@f3_as_product,f,c
  7448  00278E  5019               	movf	___ftmul@f2+1,w,c
  7449  002790  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7450  002792  501A               	movf	___ftmul@f2+2,w,c
  7451  002794  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7452  002796                     l769:
  7453  002796  90D8               	bcf	status,0,c
  7454  002798  3217               	rrcf	___ftmul@f1+2,f,c
  7455  00279A  3216               	rrcf	___ftmul@f1+1,f,c
  7456  00279C  3215               	rrcf	___ftmul@f1,f,c
  7457  00279E  90D8               	bcf	status,0,c
  7458  0027A0  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  7459  0027A2  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  7460  0027A4  321F               	rrcf	___ftmul@f3_as_product,f,c
  7461  0027A6  2E22               	decfsz	___ftmul@cntr,f,c
  7462  0027A8  D7EE               	goto	l768
  7463  0027AA  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7464  0027AE  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7465  0027B2  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7466  0027B6  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  7467  0027BA  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  7468  0027BE  ECC5  F014         	call	___ftpack	;wreg free
  7469  0027C2  C001  F015         	movff	?___ftpack,?___ftmul
  7470  0027C6  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  7471  0027CA  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  7472  0027CE  0012               	return	
  7473  0027D0                     __end_of___ftmul:
  7474                           	opt stack 0
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           indf0	equ	0xFEF
  7482                           postinc0	equ	0xFEE
  7483                           fsr0h	equ	0xFEA
  7484                           fsr0l	equ	0xFE9
  7485                           wreg	equ	0xFE8
  7486                           indf2	equ	0xFDF
  7487                           postinc2	equ	0xFDE
  7488                           postdec2	equ	0xFDD
  7489                           fsr2h	equ	0xFDA
  7490                           fsr2l	equ	0xFD9
  7491                           status	equ	0xFD8
  7492                           
  7493 ;; *************** function ___awtoft *****************
  7494 ;; Defined at:
  7495 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;  c               2    8[COMRAM] int 
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;  sign            1   11[COMRAM] unsigned char 
  7500 ;; Return value:  Size  Location     Type
  7501 ;;                  3    8[COMRAM] float 
  7502 ;; Registers used:
  7503 ;;		wreg, status,2, status,0, cstack
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7509 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;Total ram usage:        4 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; Hardware stack levels required when called:    1
  7516 ;; This function calls:
  7517 ;;		___ftpack
  7518 ;; This function is called by:
  7519 ;;		_main
  7520 ;;		_buck_boost
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           	psect	text36
  7525  00308A                     __ptext36:
  7526                           	opt stack 0
  7527  00308A                     ___awtoft:
  7528                           	opt stack 28
  7529                           
  7530                           ;incstack = 0
  7531  00308A  0E00               	movlw	0
  7532  00308C  6E0C               	movwf	___awtoft@sign,c
  7533  00308E  AE0A               	btfss	___awtoft@c+1,7,c
  7534  003090  D006               	goto	l630
  7535  003092  6C09               	negf	___awtoft@c,c
  7536  003094  1E0A               	comf	___awtoft@c+1,f,c
  7537  003096  B0D8               	btfsc	status,0,c
  7538  003098  2A0A               	incf	___awtoft@c+1,f,c
  7539  00309A  0E01               	movlw	1
  7540  00309C  6E0C               	movwf	___awtoft@sign,c
  7541  00309E                     l630:
  7542  00309E  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7543  0030A2  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7544  0030A6  6A03               	clrf	___ftpack@arg+2,c
  7545  0030A8  0E8E               	movlw	142
  7546  0030AA  6E04               	movwf	___ftpack@exp,c
  7547  0030AC  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  7548  0030B0  ECC5  F014         	call	___ftpack	;wreg free
  7549  0030B4  C001  F009         	movff	?___ftpack,?___awtoft
  7550  0030B8  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  7551  0030BC  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  7552  0030C0  0012               	return	
  7553  0030C2                     __end_of___awtoft:
  7554                           	opt stack 0
  7555                           tblptru	equ	0xFF8
  7556                           tblptrh	equ	0xFF7
  7557                           tblptrl	equ	0xFF6
  7558                           tablat	equ	0xFF5
  7559                           prodh	equ	0xFF4
  7560                           prodl	equ	0xFF3
  7561                           indf0	equ	0xFEF
  7562                           postinc0	equ	0xFEE
  7563                           fsr0h	equ	0xFEA
  7564                           fsr0l	equ	0xFE9
  7565                           wreg	equ	0xFE8
  7566                           indf2	equ	0xFDF
  7567                           postinc2	equ	0xFDE
  7568                           postdec2	equ	0xFDD
  7569                           fsr2h	equ	0xFDA
  7570                           fsr2l	equ	0xFD9
  7571                           status	equ	0xFD8
  7572                           
  7573 ;; *************** function _adc_config *****************
  7574 ;; Defined at:
  7575 ;;		line 62 in file "config.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;		None
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;		None
  7580 ;; Return value:  Size  Location     Type
  7581 ;;                  1    wreg      void 
  7582 ;; Registers used:
  7583 ;;		wreg, status,2
  7584 ;; Tracked objects:
  7585 ;;		On entry : 0/0
  7586 ;;		On exit  : 0/0
  7587 ;;		Unchanged: 0/0
  7588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7593 ;;Total ram usage:        0 bytes
  7594 ;; Hardware stack levels used:    1
  7595 ;; This function calls:
  7596 ;;		Nothing
  7597 ;; This function is called by:
  7598 ;;		_main
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           	psect	text37
  7603  003174                     __ptext37:
  7604                           	opt stack 0
  7605  003174                     _adc_config:
  7606                           	opt stack 30
  7607                           
  7608                           ;incstack = 0
  7609  003174  8092               	bsf	3986,0,c	;volatile
  7610                           
  7611                           ;config.c: 64: ANSELAbits.ANSA0=1;
  7612  003176  010F               	movlb	15	; () banked
  7613  003178  8138               	bsf	56,0,b	;volatile
  7614                           
  7615                           ;config.c: 65: TRISAbits.RA1=1;
  7616  00317A  8292               	bsf	3986,1,c	;volatile
  7617                           
  7618                           ;config.c: 66: ANSELAbits.ANSA1=1;
  7619  00317C  8338               	bsf	56,1,b	;volatile
  7620                           
  7621                           ; BSR set to: 15
  7622                           ;config.c: 69: ADCON0=0b00000011;
  7623  00317E  0E03               	movlw	3
  7624  003180  6EC2               	movwf	4034,c	;volatile
  7625                           
  7626                           ;config.c: 70: ADCON1=0b10000000;
  7627  003182  0E80               	movlw	128
  7628  003184  6EC1               	movwf	4033,c	;volatile
  7629                           
  7630                           ;config.c: 71: ADCON2=0b00111110;
  7631  003186  0E3E               	movlw	62
  7632  003188  6EC0               	movwf	4032,c	;volatile
  7633                           
  7634                           ; BSR set to: 15
  7635                           ;config.c: 72: ADCON2bits.ADFM=0;
  7636  00318A  9EC0               	bcf	4032,7,c	;volatile
  7637                           
  7638                           ; BSR set to: 15
  7639  00318C  0012               	return		;funcret
  7640  00318E                     __end_of_adc_config:
  7641                           	opt stack 0
  7642                           tblptru	equ	0xFF8
  7643                           tblptrh	equ	0xFF7
  7644                           tblptrl	equ	0xFF6
  7645                           tablat	equ	0xFF5
  7646                           prodh	equ	0xFF4
  7647                           prodl	equ	0xFF3
  7648                           indf0	equ	0xFEF
  7649                           postinc0	equ	0xFEE
  7650                           fsr0h	equ	0xFEA
  7651                           fsr0l	equ	0xFE9
  7652                           wreg	equ	0xFE8
  7653                           indf2	equ	0xFDF
  7654                           postinc2	equ	0xFDE
  7655                           postdec2	equ	0xFDD
  7656                           fsr2h	equ	0xFDA
  7657                           fsr2l	equ	0xFD9
  7658                           status	equ	0xFD8
  7659                           
  7660 ;; *************** function ___ftdiv *****************
  7661 ;; Defined at:
  7662 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;  f1              3    8[COMRAM] float 
  7665 ;;  f2              3   11[COMRAM] float 
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;  f3              3   18[COMRAM] float 
  7668 ;;  sign            1   22[COMRAM] unsigned char 
  7669 ;;  exp             1   21[COMRAM] unsigned char 
  7670 ;;  cntr            1   17[COMRAM] unsigned char 
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  3    8[COMRAM] float 
  7673 ;; Registers used:
  7674 ;;		wreg, status,2, status,0, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7680 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;Total ram usage:       15 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    1
  7687 ;; This function calls:
  7688 ;;		___ftpack
  7689 ;; This function is called by:
  7690 ;;		_main
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           	psect	text38
  7695  0027D0                     __ptext38:
  7696                           	opt stack 0
  7697  0027D0                     ___ftdiv:
  7698                           	opt stack 29
  7699                           
  7700                           ; BSR set to: 15
  7701                           ;incstack = 0
  7702  0027D0  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  7703  0027D4  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  7704  0027D6  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  7705  0027D8  340A               	rlcf	___ftdiv@f1+1,w,c
  7706  0027DA  360F               	rlcf	??___ftdiv& (0+255),f,c
  7707  0027DC  E301               	bnc	u2871
  7708  0027DE  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  7709  0027E0                     u2871:
  7710  0027E0  500F               	movf	??___ftdiv,w,c
  7711  0027E2  6E16               	movwf	___ftdiv@exp,c
  7712  0027E4  5016               	movf	___ftdiv@exp,w,c
  7713  0027E6  A4D8               	btfss	status,2,c
  7714  0027E8  D007               	goto	l730
  7715  0027EA  0E00               	movlw	0
  7716  0027EC  6E09               	movwf	?___ftdiv,c
  7717  0027EE  0E00               	movlw	0
  7718  0027F0  6E0A               	movwf	?___ftdiv+1,c
  7719  0027F2  0E00               	movlw	0
  7720  0027F4  6E0B               	movwf	?___ftdiv+2,c
  7721  0027F6  0012               	return	
  7722  0027F8                     l730:
  7723  0027F8  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  7724  0027FC  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  7725  0027FE  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  7726  002800  340D               	rlcf	___ftdiv@f2+1,w,c
  7727  002802  360F               	rlcf	??___ftdiv& (0+255),f,c
  7728  002804  E301               	bnc	u2891
  7729  002806  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  7730  002808                     u2891:
  7731  002808  500F               	movf	??___ftdiv,w,c
  7732  00280A  6E17               	movwf	___ftdiv@sign,c
  7733  00280C  5017               	movf	___ftdiv@sign,w,c
  7734  00280E  A4D8               	btfss	status,2,c
  7735  002810  D007               	goto	l732
  7736  002812  0E00               	movlw	0
  7737  002814  6E09               	movwf	?___ftdiv,c
  7738  002816  0E00               	movlw	0
  7739  002818  6E0A               	movwf	?___ftdiv+1,c
  7740  00281A  0E00               	movlw	0
  7741  00281C  6E0B               	movwf	?___ftdiv+2,c
  7742  00281E  0012               	return	
  7743  002820                     l732:
  7744  002820  0E00               	movlw	0
  7745  002822  6E13               	movwf	___ftdiv@f3,c
  7746  002824  0E00               	movlw	0
  7747  002826  6E14               	movwf	___ftdiv@f3+1,c
  7748  002828  0E00               	movlw	0
  7749  00282A  6E15               	movwf	___ftdiv@f3+2,c
  7750  00282C  5017               	movf	___ftdiv@sign,w,c
  7751  00282E  0F89               	addlw	137
  7752  002830  5E16               	subwf	___ftdiv@exp,f,c
  7753  002832  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  7754  002836  500E               	movf	___ftdiv@f2+2,w,c
  7755  002838  1A17               	xorwf	___ftdiv@sign,f,c
  7756  00283A  0E80               	movlw	128
  7757  00283C  1617               	andwf	___ftdiv@sign,f,c
  7758  00283E  8E0A               	bsf	___ftdiv@f1+1,7,c
  7759  002840  0EFF               	movlw	255
  7760  002842  1609               	andwf	___ftdiv@f1,f,c
  7761  002844  0EFF               	movlw	255
  7762  002846  160A               	andwf	___ftdiv@f1+1,f,c
  7763  002848  0E00               	movlw	0
  7764  00284A  160B               	andwf	___ftdiv@f1+2,f,c
  7765  00284C  8E0D               	bsf	___ftdiv@f2+1,7,c
  7766  00284E  0EFF               	movlw	255
  7767  002850  160C               	andwf	___ftdiv@f2,f,c
  7768  002852  0EFF               	movlw	255
  7769  002854  160D               	andwf	___ftdiv@f2+1,f,c
  7770  002856  0E00               	movlw	0
  7771  002858  160E               	andwf	___ftdiv@f2+2,f,c
  7772  00285A  0E18               	movlw	24
  7773  00285C  6E12               	movwf	___ftdiv@cntr,c
  7774  00285E  90D8               	bcf	status,0,c
  7775  002860  3613               	rlcf	___ftdiv@f3,f,c
  7776  002862  3614               	rlcf	___ftdiv@f3+1,f,c
  7777  002864  3615               	rlcf	___ftdiv@f3+2,f,c
  7778  002866  500C               	movf	___ftdiv@f2,w,c
  7779  002868  5C09               	subwf	___ftdiv@f1,w,c
  7780  00286A  500D               	movf	___ftdiv@f2+1,w,c
  7781  00286C  580A               	subwfb	___ftdiv@f1+1,w,c
  7782  00286E  500E               	movf	___ftdiv@f2+2,w,c
  7783  002870  580B               	subwfb	___ftdiv@f1+2,w,c
  7784  002872  A0D8               	btfss	status,0,c
  7785  002874  D007               	goto	l734
  7786  002876  500C               	movf	___ftdiv@f2,w,c
  7787  002878  5E09               	subwf	___ftdiv@f1,f,c
  7788  00287A  500D               	movf	___ftdiv@f2+1,w,c
  7789  00287C  5A0A               	subwfb	___ftdiv@f1+1,f,c
  7790  00287E  500E               	movf	___ftdiv@f2+2,w,c
  7791  002880  5A0B               	subwfb	___ftdiv@f1+2,f,c
  7792  002882  8013               	bsf	___ftdiv@f3,0,c
  7793  002884                     l734:
  7794  002884  90D8               	bcf	status,0,c
  7795  002886  3609               	rlcf	___ftdiv@f1,f,c
  7796  002888  360A               	rlcf	___ftdiv@f1+1,f,c
  7797  00288A  360B               	rlcf	___ftdiv@f1+2,f,c
  7798  00288C  2E12               	decfsz	___ftdiv@cntr,f,c
  7799  00288E  D7E7               	goto	l733
  7800  002890  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  7801  002894  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7802  002898  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7803  00289C  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  7804  0028A0  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  7805  0028A4  ECC5  F014         	call	___ftpack	;wreg free
  7806  0028A8  C001  F009         	movff	?___ftpack,?___ftdiv
  7807  0028AC  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  7808  0028B0  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  7809  0028B4  0012               	return	
  7810  0028B6                     __end_of___ftdiv:
  7811                           	opt stack 0
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           indf0	equ	0xFEF
  7819                           postinc0	equ	0xFEE
  7820                           fsr0h	equ	0xFEA
  7821                           fsr0l	equ	0xFE9
  7822                           wreg	equ	0xFE8
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8
  7829                           
  7830 ;; *************** function ___ftpack *****************
  7831 ;; Defined at:
  7832 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  arg             3    0[COMRAM] unsigned um
  7835 ;;  exp             1    3[COMRAM] unsigned char 
  7836 ;;  sign            1    4[COMRAM] unsigned char 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;		None
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  3    0[COMRAM] float 
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, status,0
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7848 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;Total ram usage:        8 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; This function calls:
  7855 ;;		Nothing
  7856 ;; This function is called by:
  7857 ;;		___awtoft
  7858 ;;		___ftadd
  7859 ;;		___ftdiv
  7860 ;;		___ftmul
  7861 ;;		___lltoft
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text39
  7866  00298A                     __ptext39:
  7867                           	opt stack 0
  7868  00298A                     ___ftpack:
  7869                           	opt stack 27
  7870                           
  7871                           ;incstack = 0
  7872  00298A  5004               	movf	___ftpack@exp,w,c
  7873  00298C  B4D8               	btfsc	status,2,c
  7874  00298E  D005               	goto	u1520
  7875  002990  5001               	movf	___ftpack@arg,w,c
  7876  002992  1002               	iorwf	___ftpack@arg+1,w,c
  7877  002994  1003               	iorwf	___ftpack@arg+2,w,c
  7878  002996  A4D8               	btfss	status,2,c
  7879  002998  D00C               	goto	l666
  7880  00299A                     u1520:
  7881  00299A  0E00               	movlw	0
  7882  00299C  6E01               	movwf	?___ftpack,c
  7883  00299E  0E00               	movlw	0
  7884  0029A0  6E02               	movwf	?___ftpack+1,c
  7885  0029A2  0E00               	movlw	0
  7886  0029A4  6E03               	movwf	?___ftpack+2,c
  7887  0029A6  0012               	return	
  7888  0029A8  2A04               	incf	___ftpack@exp,f,c
  7889  0029AA  90D8               	bcf	status,0,c
  7890  0029AC  3203               	rrcf	___ftpack@arg+2,f,c
  7891  0029AE  3202               	rrcf	___ftpack@arg+1,f,c
  7892  0029B0  3201               	rrcf	___ftpack@arg,f,c
  7893  0029B2                     l666:
  7894  0029B2  0E00               	movlw	0
  7895  0029B4  1401               	andwf	___ftpack@arg,w,c
  7896  0029B6  6E06               	movwf	??___ftpack& (0+255),c
  7897  0029B8  0E00               	movlw	0
  7898  0029BA  1402               	andwf	___ftpack@arg+1,w,c
  7899  0029BC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7900  0029BE  0EFE               	movlw	254
  7901  0029C0  1403               	andwf	___ftpack@arg+2,w,c
  7902  0029C2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7903  0029C4  5006               	movf	??___ftpack,w,c
  7904  0029C6  1007               	iorwf	??___ftpack+1,w,c
  7905  0029C8  1008               	iorwf	??___ftpack+2,w,c
  7906  0029CA  B4D8               	btfsc	status,2,c
  7907  0029CC  D00C               	goto	l669
  7908  0029CE  D7EC               	goto	l667
  7909  0029D0  2A04               	incf	___ftpack@exp,f,c
  7910  0029D2  0E01               	movlw	1
  7911  0029D4  2601               	addwf	___ftpack@arg,f,c
  7912  0029D6  0E00               	movlw	0
  7913  0029D8  2202               	addwfc	___ftpack@arg+1,f,c
  7914  0029DA  0E00               	movlw	0
  7915  0029DC  2203               	addwfc	___ftpack@arg+2,f,c
  7916  0029DE  90D8               	bcf	status,0,c
  7917  0029E0  3203               	rrcf	___ftpack@arg+2,f,c
  7918  0029E2  3202               	rrcf	___ftpack@arg+1,f,c
  7919  0029E4  3201               	rrcf	___ftpack@arg,f,c
  7920  0029E6                     l669:
  7921  0029E6  0E00               	movlw	0
  7922  0029E8  1401               	andwf	___ftpack@arg,w,c
  7923  0029EA  6E06               	movwf	??___ftpack& (0+255),c
  7924  0029EC  0E00               	movlw	0
  7925  0029EE  1402               	andwf	___ftpack@arg+1,w,c
  7926  0029F0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7927  0029F2  0EFF               	movlw	255
  7928  0029F4  1403               	andwf	___ftpack@arg+2,w,c
  7929  0029F6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7930  0029F8  5006               	movf	??___ftpack,w,c
  7931  0029FA  1007               	iorwf	??___ftpack+1,w,c
  7932  0029FC  1008               	iorwf	??___ftpack+2,w,c
  7933  0029FE  B4D8               	btfsc	status,2,c
  7934  002A00  D006               	goto	l672
  7935  002A02  D7E6               	goto	l670
  7936  002A04  0604               	decf	___ftpack@exp,f,c
  7937  002A06  90D8               	bcf	status,0,c
  7938  002A08  3601               	rlcf	___ftpack@arg,f,c
  7939  002A0A  3602               	rlcf	___ftpack@arg+1,f,c
  7940  002A0C  3603               	rlcf	___ftpack@arg+2,f,c
  7941  002A0E                     l672:
  7942  002A0E  BE02               	btfsc	___ftpack@arg+1,7,c
  7943  002A10  D003               	goto	u1560
  7944  002A12  0E02               	movlw	2
  7945  002A14  6004               	cpfslt	___ftpack@exp,c
  7946  002A16  D7F6               	goto	l673
  7947  002A18                     u1560:
  7948  002A18  A004               	btfss	___ftpack@exp,0,c
  7949  002A1A  9E02               	bcf	___ftpack@arg+1,7,c
  7950  002A1C  90D8               	bcf	status,0,c
  7951  002A1E  3204               	rrcf	___ftpack@exp,f,c
  7952  002A20  5004               	movf	___ftpack@exp,w,c
  7953  002A22  1203               	iorwf	___ftpack@arg+2,f,c
  7954  002A24  5005               	movf	___ftpack@sign,w,c
  7955  002A26  A4D8               	btfss	status,2,c
  7956  002A28  8E03               	bsf	___ftpack@arg+2,7,c
  7957  002A2A  C001  F001         	movff	___ftpack@arg,?___ftpack
  7958  002A2E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7959  002A32  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7960  002A36  0012               	return	
  7961  002A38                     __end_of___ftpack:
  7962                           	opt stack 0
  7963                           tblptru	equ	0xFF8
  7964                           tblptrh	equ	0xFF7
  7965                           tblptrl	equ	0xFF6
  7966                           tablat	equ	0xFF5
  7967                           prodh	equ	0xFF4
  7968                           prodl	equ	0xFF3
  7969                           indf0	equ	0xFEF
  7970                           postinc0	equ	0xFEE
  7971                           fsr0h	equ	0xFEA
  7972                           fsr0l	equ	0xFE9
  7973                           wreg	equ	0xFE8
  7974                           indf2	equ	0xFDF
  7975                           postinc2	equ	0xFDE
  7976                           postdec2	equ	0xFDD
  7977                           fsr2h	equ	0xFDA
  7978                           fsr2l	equ	0xFD9
  7979                           status	equ	0xFD8
  7980                           tblptru	equ	0xFF8
  7981                           tblptrh	equ	0xFF7
  7982                           tblptrl	equ	0xFF6
  7983                           tablat	equ	0xFF5
  7984                           prodh	equ	0xFF4
  7985                           prodl	equ	0xFF3
  7986                           indf0	equ	0xFEF
  7987                           postinc0	equ	0xFEE
  7988                           fsr0h	equ	0xFEA
  7989                           fsr0l	equ	0xFE9
  7990                           wreg	equ	0xFE8
  7991                           indf2	equ	0xFDF
  7992                           postinc2	equ	0xFDE
  7993                           postdec2	equ	0xFDD
  7994                           fsr2h	equ	0xFDA
  7995                           fsr2l	equ	0xFD9
  7996                           status	equ	0xFD8
  7997                           
  7998                           	psect	rparam
  7999  0000                     tblptru	equ	0xFF8
  8000                           tblptrh	equ	0xFF7
  8001                           tblptrl	equ	0xFF6
  8002                           tablat	equ	0xFF5
  8003                           prodh	equ	0xFF4
  8004                           prodl	equ	0xFF3
  8005                           indf0	equ	0xFEF
  8006                           postinc0	equ	0xFEE
  8007                           fsr0h	equ	0xFEA
  8008                           fsr0l	equ	0xFE9
  8009                           wreg	equ	0xFE8
  8010                           indf2	equ	0xFDF
  8011                           postinc2	equ	0xFDE
  8012                           postdec2	equ	0xFDD
  8013                           fsr2h	equ	0xFDA
  8014                           fsr2l	equ	0xFD9
  8015                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    118
    Data        2
    BSS         132
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      94
    BANK0           160     65     119
    BANK1           256      0      64
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_7(CODE[5]), STR_4(CODE[5]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> main@str_A(BANK0[8]), main@str_V(BANK0[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 8
		 -> STR_9(CODE[5]), STR_8(CODE[3]), STR_6(CODE[4]), STR_5(CODE[3]), 
		 -> main@str_A(BANK0[8]), STR_3(CODE[3]), main@str_V(BANK0[8]), STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->_fround
    _init_io_display->_I2C_Master_Init
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _Cursor_Off->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _Lcd_Port->_I2C_Write_Display
    _I2C_Write_Display->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _buck_boost->___fttol
    ___fttol->_scale
    ___ftmul->___wmul
    ___awtoft->___ftpack
    ___ftdiv->___ftpack

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                79    79      0   81847
                                             76 COMRAM     2     2      0
                                             23 BANK0     42    42      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                         _adc_config
                         _buck_boost
                             _config
                    _init_io_display
                         _pwm_config
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   52285
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12667
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   12469
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _pwm_config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_io_display                                      2     2      0    4305
                                             21 COMRAM     2     2      0
                         _Cursor_Off
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2    1171
                                              7 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     397
                                              4 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1    1157
                                             10 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     551
                                             10 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     355
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     716
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _Cursor_Off                                           0     0      0     355
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              6     6      0     355
                                              4 COMRAM     6     6      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     196
                                              3 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                  _I2C_Write_Display
 ---------------------------------------------------------------------------------
 (5) _I2C_Write_Display                                    2     0      2     174
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buck_boost                                           4     0      4    9891
                                             57 COMRAM     4     0      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     632
                                             42 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5997
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2976
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _adc_config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3215
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _adc_config
   _buck_boost
     ___awtoft
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _config
   _init_io_display
     _Cursor_Off
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _I2C_Master_Init
       ___lldiv
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
   _pwm_config
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      40       7       25.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     41      77       5       74.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4E      5E       1       98.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     115      12        0.0%
DATA                 0      0     115       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Mar 12 12:32:07 2019

                         _b 00C7                           _c 004F                           _d 00C5  
                        l61 1C08                ___awdiv@sign 000C                          _nt 00C9  
       ___wmul@multiplicand 0011                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                ___ftadd@exp1 0039  
              ___ftadd@exp2 0038                ___ftadd@sign 0037                         l211 291E  
                       l212 28DA                         l214 2944          I2C_Write_Display@d 0002  
                       l402 1386                         l420 157C                         l421 159E  
                       l413 1534                         l422 16D0                         l414 14A0  
                       l431 1750                         l423 15EE                         l360 20D6  
                       l432 1774                         l416 1554                         l408 1444  
                       l281 2F8C                         l425 16F2                         l417 153E  
                       l610 2B34                         l602 2ADC                         l370 197E  
                       l426 16DC                         l611 2B42                         l603 2AEC  
                       l363 21A2                         l371 1ACE                         l419 1578  
                       l428 1714                         l380 1116                         l293 2C8A  
                       l701 225E                         l605 2B0A                         l373 1B7E  
                       l429 1730                         l381 10DE                         l630 309E  
                       l294 2C54                         l606 2B02                         l622 2D0E  
                       l366 19A2                         l390 16FC                         l711 22BA  
                       l623 2D18                         l615 2CD4                         l367 18CE  
                       l391 1176                         l720 22F8                         l712 22B0  
                       l640 25AC                         l624 2D26                         l616 2CE0  
                       l392 11B8                         l384 113E                         l721 22EE  
                       l641 259C                         l609 2B2A                         l377 109E  
                       l730 27F8                         l706 22C4                         l634 24DE  
                       l618 2CF6                         l394 124A                         l378 10B4  
                       l723 231C                         l619 2CEE                         l395 12B0  
                       l387 113A                         l379 112C                         l732 2820  
                       l724 2338                         l636 24FC                         l740 23E6  
                       l388 1162                         l733 285E                         l725 2368  
                       l637 253E                         l741 2420                         l397 12D6  
                       l670 29D0                         l734 2884                         l646 25D0  
                       l638 256E                         l750 24A8                         l742 2448  
                       l398 1316                         l647 25C4                         l751 249C  
                       l399 13DE                         l672 2A0E                         l824 2B7A  
                       l744 2484                         l673 2A04                         l825 2B6E  
                       l745 2474                         l666 29B2                         l762 2704  
                       l834 2DBA                         l738 23BA                         l667 29A8  
                       l755 2A68                         l835 2DAE                         l764 272C  
                       l828 2BAE                         l756 2A98                         l669 29E6  
                       l765 275E                         l829 2BBC                         l773 3126  
                       l845 2E14                         l766 276E                         l838 2DE2  
                       l846 2E08                         l791 26AE                         l783 2614  
                       l839 2DF0                         l768 2786                         l792 26A2  
                       l769 2796                         l785 268A                         l697 2234  
                       l794 26CA                         l786 267A                         l779 3060  
                       l798 316C                __CFG_CPB$OFF 000000                         _PR2 000FBB  
              __CFG_CPD$OFF 000000                         _fac 0059                         _dir 00D5  
                       _cnt 005D                         _dty 00BD                         _str 00A1  
              ___awmod@sign 0006                         wreg 000FE8                __CFG_LVP$OFF 000000  
              ___ftdiv@cntr 0012               buck_boost@dty 003C                ___ftdiv@sign 0017  
                      l2341 2AC4                        l3209 153E                        l3161 1360  
                      l3153 1316                        l3181 1448                        l3271 1770  
                      STR_1 1088                        STR_2 107C                        STR_3 1085  
                      STR_4 107C                        STR_5 108B                        STR_6 1081  
                      STR_7 107C                        STR_8 108E                        STR_9 1077  
                      u2030 2C82                        u2040 2CB8                        u2037 2C78  
                      _LATA 000F89                        u2310 25D6                        _LATB 000F8A  
                      u2047 2CAE                        u3007 1E16                        _LATC 000F8B  
                      u1520 299A                        u2400 2632                        u2240 24AE  
                      _LATD 000F8C                        u2065 2E88                        u1601 2206  
                      u2161 239E                        u3017 1E32                        _LATE 000F8D  
                      u3107 2BDE                        u3027 1E4A                        u2405 262A  
                      u3117 2BF8                        u2181 23CA                        u3037 1E5E  
                      u2510 28D2                        u1630 2226                        u3127 2C0E  
                      u3047 1F3C                        u1560 2A18                        u2440 26B4  
                      u1801 26EC                        u3137 2FEC                        u3057 1F58  
                      u2530 293C                        u1730 22CC                        u2610 11F0  
                      u3067 2D52                        u1660 2250                        u1821 2714  
                      u2381 25F8                        u3077 2D8C                        u2470 2DBE  
                      u3087 2EE2                        u1591 21F2                        u2615 11E6  
                      u1760 2300                        u3097 2F00                        u1690 228E  
                      u2730 1480                        u2650 12E8                        u2660 1328  
                      u1950 2CFA                        u2760 1562                        u1890 2B0E  
                      u2770 1572                        u2690 1360                        u2860 178C  
                      u1990 2B7E                        u2871 27E0                        u2891 2808  
                      u2947 1C26                        u2957 1C3A                        u2967 1D0C  
                      u2977 1D28                        u2987 1D40                        u2997 1D54  
                      _adcn 00C1                        _adcp 00C3                        _data 00B5  
         ?_Lcd_Write_String 0008                        _buck 00BB                        _main 1BA2  
              ___ftpack@arg 0001                        _pasi 0053                ___ftpack@exp 0004  
                      fsr0h 000FEA                        indf0 000FEF                        fsr2h 000FDA  
                      fsr0l 000FE9                        indf2 000FDF                        fsr2l 000FD9  
             __CFG_BORV$190 000000                        _type 00BF                        prodh 000FF4  
                      prodl 000FF3                        start 0000          ??_Lcd_Write_String 000A  
             __CFG_IESO$OFF 000000                _sprintf$1504 0060             __end_of_Lcd_Cmd 3004  
              ___ftmul@cntr 0022                ___param_bank 000000                ___ftmul@sign 0023  
              ___fttol@exp1 0039                ___fttol@lval 0035            ?_I2C_Master_Init 000E  
          ?_I2C_Master_Wait 0001            ?_I2C_Master_Stop 0001              buck_boost@type 003A  
                     ?_main 0001             __end_of___awdiv 2B4C             __end_of___ftadd 238E  
           __end_of___awmod 2D30             __end_of___ftdiv 28B6             __end_of___ftneg 3134  
           __end_of___lldiv 2BCE             __end_of___ftmul 27D0             ___awdiv@divisor 0009  
           __end_of___llmod 2E02             __end_of___ftsub 308A             __end_of___fttol 26DC  
                     _T2CON 000FBA             ___awdiv@counter 000B                       _PORTA 000F80  
                     _PORTB 000F81                       _PORTC 000F82                       _PORTD 000F83  
                     _PORTE 000F84     __size_of_Lcd_Set_Cursor 0050                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96                       _UQEnd 005B               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
              ___lltoft@exp 0011              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
            __CFG_EBTRB$OFF 000000               ___awtoft@sign 000C             __end_of_dpowers 1029  
                     _boost 00B9                       _scale 179A             __end_of_isdigit 3174  
        __CFG_MCLRE$EXTMCLR 000000               ___ftpack@sign 0005                       _start 00CF  
            __CFG_BOREN$OFF 000000                       tablat 000FF5                       status 000FD8  
           __end_of_sprintf 179A              __CFG_HFOFST$ON 000000              __CFG_PBADEN$ON 000000  
          __end_of_Lcd_Init 2C4A            __end_of_Lcd_Port 3156                 _Lcd_Cmd$804 0007  
           __initialization 3004                __end_of_main 1F90                  _Cursor_Off 31AE  
                    ??_main 004D               ___fttol@sign1 0034          __size_of_Lcd_Clear 000E  
             __activetblptr 000002              __CFG_PLLCFG$ON 000000        __size_of__tdiv_to_l_ 0132  
         ?_I2C_Master_Start 0001          ??_I2C_Master_Start 0002                      _ADCON0 000FC2  
                    _ADCON1 000FC1                      _ADCON2 000FC0            ___llmod@dividend 0001  
                    ?_scale 0024                      _ADRESH 000FC4                      _CCPR1L 000FBE  
                    _CCPR2L 000F67                      _CCPR3L 000F5E            ___awdiv@dividend 0007  
          __end_of___awtoft 30C2                      _ANSELA 000F38                      _ANSELB 000F39  
                    _ANSELC 000F3A                      _ANSELD 000F3B                      _ANSELE 000F3C  
          __end_of___ftpack 2A38            __end_of___lltoft 2E5E              __CFG_WDTEN$OFF 000000  
                    _OSCCON 000FD3                   ??_Lcd_Cmd 0005     __size_of_Lcd_Write_Char 0058  
                    _SSPBUF 000FC9                      _URBuff 0100              __CFG_XINST$OFF 000000  
          __end_of__powers_ 1050                      ___ftge 2A38                      ___wmul 30EA  
                 ??___awdiv 000B                   ??___ftadd 0034                   ??___awmod 0005  
                 ??___ftdiv 000F                   ??___ftneg 0004                   ??___lldiv 0009  
                 ??___ftmul 001B                   ??___llmod 0009                   ??___ftsub 0040  
                 ??___fttol 002F                      _config 2F10                      _fround 1F90  
             main@rez_adc_A 0098               main@rez_adc_U 009A                      clear_0 3022  
                    clear_1 302E                      clear_2 303A            ___awdiv@quotient 000D  
           ___awmod@divisor 0003             ___awmod@counter 0005             _init_io_display 2D30  
     ___ftmul@f3_as_product 001F                __pdataCOMRAM 005D                   ??_isdigit 0001  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_sprintf 0047             Lcd_Set_Cursor@a 000C  
           Lcd_Set_Cursor@b 000B             Lcd_Set_Cursor@y 000E             Lcd_Set_Cursor@z 000D  
                __accesstop 0060     __end_of__initialization 3040                  ___ftadd@f1 002E  
                ___ftadd@f2 0031                  ___ftge@ff1 0001                  ___ftge@ff2 0004  
         __end_of_Lcd_Clear 31AE               ___rparam_used 000001                  ___ftdiv@f1 0009  
                ___ftdiv@f2 000C                  ___ftdiv@f3 0013                  ___ftneg@f1 0001  
                ___awtoft@c 0009                  ___ftmul@f1 0015                  ___ftmul@f2 0018  
                ___ftsub@f1 003A                  ___ftsub@f2 003D                  ___fttol@f1 002B  
            __pcstackCOMRAM 0001                  _adc_config 3174                  ___lltoft@c 0009  
             __end_of_scale 1BA2                 ?_Cursor_Off 0001              _Lcd_Set_Cursor 2F64  
                __div_to_l_ 24C0                   ?_Lcd_Init 0001                   ?_Lcd_Port 0001  
           __div_to_l_@exp1 000C             __div_to_l_@cntr 000B                     ??_scale 0027  
           __div_to_l_@quot 0007                  __pbssBANK0 00A1                  __pbssBANK1 0100  
             __div_to_l_@f1 0001               __div_to_l_@f2 0004          __CFG_CCP2MX$PORTC1 000000  
   __end_of_init_io_display 2D9C                     ?___ftge 0001                     ?___wmul 000F  
        __CFG_CCP3MX$PORTB5 000000                     ?_config 0001                     _CCP1CON 000FBD  
         _I2C_Write_Display 31BC                     _CCP2CON 000F66                     _CCP3CON 000F5D  
                   ?_fround 0024   __size_of_Lcd_Write_String 0076                   ?___awtoft 0009  
                 ?___ftpack 0001      __end_of_Lcd_Set_Cursor 2FB4                   ?___lltoft 0009  
        ?_I2C_Write_Display 0002                  _directie_2 0051                  _buck_boost 28B6  
         __CFG_PRICLKEN$OFF 000000         ??_I2C_Write_Display 0004                  ??_Lcd_Init 000B  
                   _SSP1ADD 000FC8                     _SSP1BUF 000FC9                  ??_Lcd_Port 0004  
                   _UQFront 005C              _Lcd_Write_Char 2EB8                     _Lcd_Cmd 2FB4  
       __size_of_Cursor_Off 000E                  _go_stepper 00D1             __CFG_PWRTEN$OFF 000000  
         __end_of__npowers_ 1077                     __Hparam 0000                  _scale$1503 0027  
                   __Lparam 0000   __end_of_I2C_Write_Display 31C6                 ?_adc_config 0001  
           __size_of___ftge 0090                     ___awdiv 2AC8                     ___ftadd 21E2  
                   ___awmod 2CC0                     ___ftdiv 27D0                     ___ftneg 3110  
                   ___lldiv 2B4C             __size_of___wmul 0026                     ___ftmul 26DC  
                   ___llmod 2D9C                     ___ftsub 304A                     ___fttol 25E8  
              __psmallconst 1000             __size_of_config 0054             __CFG_STVREN$OFF 000000  
                   __pcinit 3004                  ??___awtoft 000C                  ??___ftpack 0006  
           __size_of_fround 0252                     __ramtop 1000             ?_Lcd_Set_Cursor 000B  
                ??___lltoft 000D                     __ptext0 1BA2                     __ptext1 1092  
                   __ptext2 179A                     __ptext3 3156                     __ptext4 1F90  
                   __ptext5 30EA                     __ptext6 2CC0                     __ptext7 2AC8  
                   __ptext8 238E                     __ptext9 24C0                 ?__div_to_l_ 0001  
                   _dpowers 1001                     _dty_car 00B7                     _isdigit 3156  
                _duty_boost 0057            ___awmod@dividend 0001                     _nr_pasi 00D3  
  __size_of_I2C_Master_Init 005A    __size_of_I2C_Master_Wait 0012    __size_of_I2C_Master_Stop 0008  
                   _sprintf 1092                     main@dty 007A      __end_of_Lcd_Write_Char 2F10  
      end_of_initialization 3040               __Lmediumconst 0000   __size_of_I2C_Master_Start 0008  
           ___lldiv@divisor 0005             ___lldiv@counter 000D            I2C_Master_Init@c 000E  
          ?_init_io_display 0001                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE              __tdiv_to_l_@f1 0001              __tdiv_to_l_@f2 0004  
             ??__tdiv_to_l_ 0007                 ?_buck_boost 003A                   _TRISAbits 000F92  
                 _TRISCbits 000F94                   _TRISDbits 000F95                  _pwm_config 30C2  
           ?_Lcd_Write_Char 0001         __size_of_adc_config 001A           Lcd_Write_String@a 0008  
         Lcd_Write_String@i 000C                 ___ftdiv@exp 0016                  main@curent 008C  
                main@tens_A 008F         __size_of__div_to_l_ 0128                 ___ftmul@exp 001E  
                 _Lcd_Clear 31A0  __size_of_I2C_Write_Display 000A              __end_of___ftge 2AC8  
              ??_Cursor_Off 000B              __end_of___wmul 3110            _Lcd_Write_String 2C4A  
             __pidataCOMRAM 31D6              __end_of_config 2F64              __end_of_fround 21E2  
       start_initialization 3004         __end_of__tdiv_to_l_ 24C0           __size_of_Lcd_Init 007C  
         __size_of_Lcd_Port 0022           ??_I2C_Master_Init 0012           ??_I2C_Master_Wait 0001  
         ??_I2C_Master_Stop 0002          __end_of_Cursor_Off 31BC             ___llmod@divisor 0005  
           ___llmod@counter 0009         __size_of_buck_boost 00D4                  ?_Lcd_Clear 0001  
                  ??___ftge 0007                    ??___wmul 0013                    ??_config 0001  
           Lcd_Write_Char@a 0005             Lcd_Write_Char@y 0006                    ??_fround 0027  
             sprintf@tmpval 006D                  fround@prec 002D           __size_of___awtoft 0038  
         __size_of___ftpack 00AE           __size_of___lltoft 005C                 __pbssCOMRAM 004F  
             __pcstackBANK0 0060                 ?_pwm_config 0001                _isdigit$1130 0002  
                  ?_Lcd_Cmd 0001                 sprintf@flag 0065                 sprintf@fval 0073  
               sprintf@prec 0071            _I2C_Master_Start 31CE            ??_Lcd_Set_Cursor 000C  
              ??_adc_config 0001                    ?___awdiv 0007                    ?___ftadd 002E  
                  ?___awmod 0001                    ?___ftdiv 0009                    ?___ftneg 0001  
                  ?___lldiv 0001                    ?___ftmul 0015                    ?___llmod 0001  
                  ?___ftsub 003A                   __npowers_ 1050                    ?___fttol 002B  
               __tdiv_to_l_ 238E                ??__div_to_l_ 0007                 __smallconst 1000  
                  ?_isdigit 0001                    _CCPTMRS0 000F49                    ?_sprintf 0040  
            __size_of_scale 0408          __end_of_adc_config 318E                   _duty_buck 0055  
            ___wmul@product 0013                    _LATDbits 000F8C                    _PIE1bits 000F9D  
                  Lcd_Cmd@a 000A          __end_of__div_to_l_ 25E8                 ??_Lcd_Clear 000B  
          __CFG_WDTPS$32768 000000         __size_of_pwm_config 0028                    _SSP1CON1 000FC6  
                  _SSP1CON2 000FC5                    _SSP1STAT 000FC7                  _ADCON0bits 000FC2  
                _ADCON2bits 000FC0           ___wmul@multiplier 000F                   main@Power 0077  
              ??_buck_boost 003E            ??_Lcd_Write_Char 0005                   main@str_A 007C  
                 main@str_V 0084                    _Lcd_Init 2BCE                    _Lcd_Port 3134  
  __end_of_Lcd_Write_String 2CC0            __size_of_Lcd_Cmd 0050                Lcd_Port@data 0004  
                  __Hrparam 0000                    __Lrparam 0000          __end_of_buck_boost 298A  
         __CFG_P2BMX$PORTD2 000000            __size_of___awdiv 0084            __size_of___ftadd 01AC  
          __size_of___awmod 0070            __size_of___ftdiv 00E6            __size_of___ftneg 0024  
          __size_of___lldiv 0082            __size_of___ftmul 00F4            __size_of___llmod 0066  
          __size_of___ftsub 0040            __size_of___fttol 00F4                    ___awtoft 308A  
                  ___ftpack 298A                 _fround$1501 002A                 _fround$1502 0027  
                  ___lltoft 2E02                  _ANSELAbits 000F38    __size_of_init_io_display 006C  
                sprintf@exp 006B                  sprintf@val 0067             _I2C_Master_Init 2E5E  
           _I2C_Master_Wait 318E             _I2C_Master_Stop 31C6            __size_of_isdigit 001E  
                  __ptext10 2E02                    __ptext11 2D9C                    __ptext20 2F64  
                  __ptext12 304A                    __ptext21 2BCE                    __ptext13 21E2  
                  __ptext30 31CE                    __ptext22 31A0                    __ptext14 3110  
                  __ptext31 318E                    __ptext23 2E5E                    __ptext15 2A38  
                  __ptext32 2F10                    __ptext24 2B4C                    __ptext16 30C2  
                  __ptext33 28B6                    __ptext25 31AE                    __ptext17 2D30  
                  __ptext34 25E8                    __ptext26 2FB4                    __ptext18 2C4A  
                  __ptext35 26DC                    __ptext27 3134                    __ptext19 2EB8  
                  __ptext36 308A                    __ptext28 31BC                    __ptext37 3174  
                  __ptext29 31C6                    __ptext38 27D0                    __ptext39 298A  
              _SSP1CON2bits 000FC5                    __powers_ 1029            __size_of_sprintf 0708  
               Lcd_Cmd@buff 0008               __size_of_main 03EE                    _pasi_int 00CD  
                  _sel_pasi 00CB                    main@Iout 0092                    main@Uout 0095  
                  main@tens 009E                    main@port 009C    __end_of_I2C_Master_Start 31D6  
               _OSCTUNEbits 000F9B                  _INTCONbits 000FF2                ??_pwm_config 0001  
                  isdigit@c 0003                    scale@scl 002A          Lcd_Write_Char@temp 0007  
                 sprintf@ap 0063            __tdiv_to_l_@exp1 000F                   sprintf@sp 0040  
          __tdiv_to_l_@cntr 000E            __tdiv_to_l_@quot 000A            ___lldiv@dividend 0001  
        __end_of_pwm_config 30EA     __end_of_I2C_Master_Init 2EB8     __end_of_I2C_Master_Wait 31A0  
   __end_of_I2C_Master_Stop 31CE          Lcd_Set_Cursor@temp 000F                ?__tdiv_to_l_ 0001  
                  sprintf@c 0076                    sprintf@f 0042            ___lldiv@quotient 0009  
         __CFG_T3CMX$PORTC0 000000           ??_init_io_display 0016           __CFG_FOSC$INTIO67 000000  
