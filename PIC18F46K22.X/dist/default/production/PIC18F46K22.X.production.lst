

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Mar 12 20:13:02 2019

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58  0000                     
    59                           ; Version 1.44
    60                           ; Generated 14/09/2017 GMT
    61                           ; 
    62                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F46K22 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataCOMRAM
    95  0030E4                     __pidataCOMRAM:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _cnt
    99  0030E4  0001               	dw	1
   100                           
   101                           	psect	smallconst
   102  001000                     __psmallconst:
   103                           	opt stack 0
   104  001000  00                 	db	0
   105  001001                     _dpowers:
   106                           	opt stack 0
   107  001001  0001               	dw	1
   108  001003  0000               	dw	0
   109  001005  000A               	dw	10
   110  001007  0000               	dw	0
   111  001009  0064               	dw	100
   112  00100B  0000               	dw	0
   113  00100D  03E8               	dw	1000
   114  00100F  0000               	dw	0
   115  001011  2710               	dw	10000
   116  001013  0000               	dw	0
   117  001015  86A0               	dw	34464
   118  001017  0001               	dw	1
   119  001019  4240               	dw	16960
   120  00101B  000F               	dw	15
   121  00101D  9680               	dw	38528
   122  00101F  0098               	dw	152
   123  001021  E100               	dw	57600
   124  001023  05F5               	dw	1525
   125  001025  CA00               	dw	51712
   126  001027  3B9A               	dw	15258
   127  001029                     __end_of_dpowers:
   128                           	opt stack 0
   129  001029                     __powers_:
   130                           	opt stack 0
   131  001029  00                 	db	0
   132  00102A  80                 	db	128
   133  00102B  3F                 	db	63
   134  00102C  00                 	db	0
   135  00102D  20                 	db	32
   136  00102E  41                 	db	65
   137  00102F  00                 	db	0
   138  001030  C8                 	db	200
   139  001031  42                 	db	66
   140  001032  00                 	db	0
   141  001033  7A                 	db	122
   142  001034  44                 	db	68
   143  001035  40                 	db	64
   144  001036  1C                 	db	28
   145  001037  46                 	db	70
   146  001038  50                 	db	80
   147  001039  C3                 	db	195
   148  00103A  47                 	db	71
   149  00103B  24                 	db	36
   150  00103C  74                 	db	116
   151  00103D  49                 	db	73
   152  00103E  97                 	db	151
   153  00103F  18                 	db	24
   154  001040  4B                 	db	75
   155  001041  BC                 	db	188
   156  001042  BE                 	db	190
   157  001043  4C                 	db	76
   158  001044  6B                 	db	107
   159  001045  6E                 	db	110
   160  001046  4E                 	db	78
   161  001047  03                 	db	3
   162  001048  15                 	db	21
   163  001049  50                 	db	80
   164  00104A  79                 	db	121
   165  00104B  AD                 	db	173
   166  00104C  60                 	db	96
   167  00104D  F3                 	db	243
   168  00104E  49                 	db	73
   169  00104F  71                 	db	113
   170  001050                     __end_of__powers_:
   171                           	opt stack 0
   172  001050                     __npowers_:
   173                           	opt stack 0
   174  001050  00                 	db	0
   175  001051  80                 	db	128
   176  001052  3F                 	db	63
   177  001053  CD                 	db	205
   178  001054  CC                 	db	204
   179  001055  3D                 	db	61
   180  001056  D7                 	db	215
   181  001057  23                 	db	35
   182  001058  3C                 	db	60
   183  001059  12                 	db	18
   184  00105A  83                 	db	131
   185  00105B  3A                 	db	58
   186  00105C  B7                 	db	183
   187  00105D  D1                 	db	209
   188  00105E  38                 	db	56
   189  00105F  C6                 	db	198
   190  001060  27                 	db	39
   191  001061  37                 	db	55
   192  001062  38                 	db	56
   193  001063  86                 	db	134
   194  001064  35                 	db	53
   195  001065  C0                 	db	192
   196  001066  D6                 	db	214
   197  001067  33                 	db	51
   198  001068  CC                 	db	204
   199  001069  2B                 	db	43
   200  00106A  32                 	db	50
   201  00106B  70                 	db	112
   202  00106C  89                 	db	137
   203  00106D  30                 	db	48
   204  00106E  E7                 	db	231
   205  00106F  DB                 	db	219
   206  001070  2E                 	db	46
   207  001071  E5                 	db	229
   208  001072  3C                 	db	60
   209  001073  1E                 	db	30
   210  001074  42                 	db	66
   211  001075  A2                 	db	162
   212  001076  0D                 	db	13
   213  001077                     __end_of__npowers_:
   214                           	opt stack 0
   215  0000                     _ANSELAbits	set	3896
   216  0000                     _CCPR3L	set	3934
   217  0000                     _CCP3CON	set	3933
   218  0000                     _CCPTMRS0	set	3913
   219  0000                     _ANSELE	set	3900
   220  0000                     _ANSELD	set	3899
   221  0000                     _ANSELC	set	3898
   222  0000                     _ANSELB	set	3897
   223  0000                     _ANSELA	set	3896
   224  0000                     _ADCON0bits	set	4034
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSP1BUF	set	4041
   227  0000                     _SSP1CON2bits	set	4037
   228  0000                     _SSP1STAT	set	4039
   229  0000                     _SSP1ADD	set	4040
   230  0000                     _SSP1CON2	set	4037
   231  0000                     _SSP1CON1	set	4038
   232  0000                     _PIE1bits	set	3997
   233  0000                     _INTCONbits	set	4082
   234  0000                     _TRISCbits	set	3988
   235  0000                     _ADCON2bits	set	4032
   236  0000                     _ADCON2	set	4032
   237  0000                     _ADCON1	set	4033
   238  0000                     _TRISAbits	set	3986
   239  0000                     _PR2	set	4027
   240  0000                     _T2CON	set	4026
   241  0000                     _CCP1CON	set	4029
   242  0000                     _CCP2CON	set	3942
   243  0000                     _OSCTUNEbits	set	3995
   244  0000                     _OSCCON	set	4051
   245  0000                     _LATE	set	3981
   246  0000                     _LATD	set	3980
   247  0000                     _LATC	set	3979
   248  0000                     _LATB	set	3978
   249  0000                     _LATA	set	3977
   250  0000                     _PORTE	set	3972
   251  0000                     _PORTD	set	3971
   252  0000                     _PORTC	set	3970
   253  0000                     _PORTB	set	3969
   254  0000                     _PORTA	set	3968
   255  0000                     _TRISE	set	3990
   256  0000                     _TRISD	set	3989
   257  0000                     _TRISC	set	3988
   258  0000                     _TRISB	set	3987
   259  0000                     _TRISA	set	3986
   260  0000                     _CCPR2L	set	3943
   261  0000                     _CCPR1L	set	4030
   262  0000                     _ADRESH	set	4036
   263  0000                     _ADCON0	set	4034
   264  0000                     _LATDbits	set	3980
   265  0000                     _TRISDbits	set	3989
   266  001077                     STR_9:
   267                           
   268                           ; BSR set to: 15
   269  001077  54                 	db	84	;'T'
   270  001078  65                 	db	101	;'e'
   271  001079  73                 	db	115	;'s'
   272  00107A  74                 	db	116	;'t'
   273  00107B  00                 	db	0
   274  00107C                     STR_2:
   275                           
   276                           ; BSR set to: 15
   277  00107C  25                 	db	37
   278  00107D  2E                 	db	46
   279  00107E  32                 	db	50	;'2'
   280  00107F  66                 	db	102	;'f'
   281  001080  00                 	db	0
   282  001081                     STR_6:
   283                           
   284                           ; BSR set to: 15
   285  001081  55                 	db	85	;'U'
   286  001082  69                 	db	105	;'i'
   287  001083  3D                 	db	61	;'='
   288  001084  00                 	db	0
   289  001085                     STR_3:
   290                           
   291                           ; BSR set to: 15
   292  001085  49                 	db	73	;'I'
   293  001086  3D                 	db	61	;'='
   294  001087  00                 	db	0
   295  001088                     STR_1:
   296                           
   297                           ; BSR set to: 15
   298  001088  55                 	db	85	;'U'
   299  001089  3D                 	db	61	;'='
   300  00108A  00                 	db	0
   301  00108B                     STR_5:
   302                           
   303                           ; BSR set to: 15
   304  00108B  20                 	db	32
   305  00108C  41                 	db	65	;'A'
   306  00108D  00                 	db	0
   307  00108E                     STR_8:
   308                           
   309                           ; BSR set to: 15
   310  00108E  20                 	db	32
   311  00108F  56                 	db	86	;'V'
   312  001090  00                 	db	0
   313  0000                     
   314                           ; #config settings
   315  001091  00                 	db	0	; dummy byte at the end
   316  0000                     
   317                           	psect	cinit
   318  002F26                     __pcinit:
   319                           	opt stack 0
   320  002F26                     start_initialization:
   321                           	opt stack 0
   322  002F26                     __initialization:
   323                           	opt stack 0
   324                           
   325                           ; Initialize objects allocated to COMRAM (2 bytes)
   326                           ; load TBLPTR registers with __pidataCOMRAM
   327  002F26  0EE4               	movlw	low __pidataCOMRAM
   328  002F28  6EF6               	movwf	tblptrl,c
   329  002F2A  0E30               	movlw	high __pidataCOMRAM
   330  002F2C  6EF7               	movwf	tblptrh,c
   331  002F2E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   332  002F30  6EF8               	movwf	tblptru,c
   333  002F32  0009               	tblrd		*+	;fetch initializer
   334  002F34  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   335  002F38  0009               	tblrd		*+	;fetch initializer
   336  002F3A  CFF5 F05F          	movff	tablat,__pdataCOMRAM+1
   337                           
   338                           ; Clear objects allocated to BANK1 (84 bytes)
   339  002F3E  EE01  F000         	lfsr	0,__pbssBANK1
   340  002F42  0E54               	movlw	84
   341  002F44                     clear_0:
   342  002F44  6AEE               	clrf	postinc0,c
   343  002F46  06E8               	decf	wreg,f,c
   344  002F48  E1FD               	bnz	clear_0
   345                           
   346                           ; Clear objects allocated to BANK0 (79 bytes)
   347  002F4A  EE00  F060         	lfsr	0,__pbssBANK0
   348  002F4E  0E4F               	movlw	79
   349  002F50                     clear_1:
   350  002F50  6AEE               	clrf	postinc0,c
   351  002F52  06E8               	decf	wreg,f,c
   352  002F54  E1FD               	bnz	clear_1
   353                           
   354                           ; Clear objects allocated to COMRAM (15 bytes)
   355  002F56  EE00  F04F         	lfsr	0,__pbssCOMRAM
   356  002F5A  0E0F               	movlw	15
   357  002F5C                     clear_2:
   358  002F5C  6AEE               	clrf	postinc0,c
   359  002F5E  06E8               	decf	wreg,f,c
   360  002F60  E1FD               	bnz	clear_2
   361  002F62                     end_of_initialization:
   362                           	opt stack 0
   363  002F62                     __end_of__initialization:
   364                           	opt stack 0
   365  002F62  0E00               	movlw	low (__Lmediumconst shr (0+16))
   366  002F64  6EF8               	movwf	tblptru,c
   367  002F66  0100               	movlb	0
   368  002F68  EFFA  F00E         	goto	_main	;jump to C main() function
   369                           tblptru	equ	0xFF8
   370                           tblptrh	equ	0xFF7
   371                           tblptrl	equ	0xFF6
   372                           tablat	equ	0xFF5
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           
   376                           	psect	bssCOMRAM
   377  00004F                     __pbssCOMRAM:
   378                           	opt stack 0
   379  00004F                     _tens:
   380                           	opt stack 0
   381  00004F                     	ds	3
   382  000052                     _rez_adc_U:
   383                           	opt stack 0
   384  000052                     	ds	3
   385  000055                     _rez_adc_A:
   386                           	opt stack 0
   387  000055                     	ds	3
   388  000058                     _c:
   389                           	opt stack 0
   390  000058                     	ds	2
   391  00005A                     _duty_boost:
   392                           	opt stack 0
   393  00005A                     	ds	2
   394  00005C                     _UQEnd:
   395                           	opt stack 0
   396  00005C                     	ds	1
   397  00005D                     _UQFront:
   398                           	opt stack 0
   399  00005D                     	ds	1
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           
   407                           	psect	dataCOMRAM
   408  00005E                     __pdataCOMRAM:
   409                           	opt stack 0
   410  00005E                     _cnt:
   411                           	opt stack 0
   412  00005E                     	ds	2
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           
   420                           	psect	bssBANK0
   421  000060                     __pbssBANK0:
   422                           	opt stack 0
   423  000060                     _str_P:
   424                           	opt stack 0
   425  000060                     	ds	8
   426  000068                     _curent:
   427                           	opt stack 0
   428  000068                     	ds	3
   429  00006B                     _Uin:
   430                           	opt stack 0
   431  00006B                     	ds	3
   432  00006E                     _Uout:
   433                           	opt stack 0
   434  00006E                     	ds	3
   435  000071                     _Iout:
   436                           	opt stack 0
   437  000071                     	ds	3
   438  000074                     _tens_A:
   439                           	opt stack 0
   440  000074                     	ds	3
   441  000077                     _data:
   442                           	opt stack 0
   443  000077                     	ds	2
   444  000079                     _dty_car:
   445                           	opt stack 0
   446  000079                     	ds	2
   447  00007B                     _boost:
   448                           	opt stack 0
   449  00007B                     	ds	2
   450  00007D                     _buck:
   451                           	opt stack 0
   452  00007D                     	ds	2
   453  00007F                     _dty:
   454                           	opt stack 0
   455  00007F                     	ds	2
   456  000081                     _type:
   457                           	opt stack 0
   458  000081                     	ds	2
   459  000083                     _adcn:
   460                           	opt stack 0
   461  000083                     	ds	2
   462  000085                     _adcp:
   463                           	opt stack 0
   464  000085                     	ds	2
   465  000087                     _d:
   466                           	opt stack 0
   467  000087                     	ds	2
   468  000089                     _b:
   469                           	opt stack 0
   470  000089                     	ds	2
   471  00008B                     _nt:
   472                           	opt stack 0
   473  00008B                     	ds	2
   474  00008D                     _sel_pasi:
   475                           	opt stack 0
   476  00008D                     	ds	2
   477  00008F                     _pasi_int:
   478                           	opt stack 0
   479  00008F                     	ds	2
   480  000091                     _start:
   481                           	opt stack 0
   482  000091                     	ds	2
   483  000093                     _go_stepper:
   484                           	opt stack 0
   485  000093                     	ds	2
   486  000095                     _directie_2:
   487                           	opt stack 0
   488  000095                     	ds	2
   489  000097                     _nr_pasi:
   490                           	opt stack 0
   491  000097                     	ds	2
   492  000099                     _dir:
   493                           	opt stack 0
   494  000099                     	ds	2
   495  00009B                     _pasi:
   496                           	opt stack 0
   497  00009B                     	ds	2
   498  00009D                     _duty_buck:
   499                           	opt stack 0
   500  00009D                     	ds	2
   501  00009F                     _str_A:
   502                           	opt stack 0
   503  00009F                     	ds	8
   504  0000A7                     _str_V:
   505                           	opt stack 0
   506  0000A7                     	ds	8
   507                           tblptru	equ	0xFF8
   508                           tblptrh	equ	0xFF7
   509                           tblptrl	equ	0xFF6
   510                           tablat	equ	0xFF5
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           
   514                           	psect	bssBANK1
   515  000100                     __pbssBANK1:
   516                           	opt stack 0
   517  000100                     _URBuff:
   518                           	opt stack 0
   519  000100                     	ds	64
   520  000140                     _str:
   521                           	opt stack 0
   522  000140                     	ds	20
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           
   530                           	psect	cstackBANK0
   531  0000AF                     __pcstackBANK0:
   532                           	opt stack 0
   533  0000AF                     _sprintf$1558:
   534                           	opt stack 0
   535                           
   536                           ; 3 bytes @ 0x0
   537  0000AF                     	ds	3
   538  0000B2                     sprintf@ap:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x3
   542  0000B2                     	ds	2
   543  0000B4                     sprintf@flag:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x5
   547  0000B4                     	ds	2
   548  0000B6                     sprintf@val:
   549                           	opt stack 0
   550                           
   551                           ; 4 bytes @ 0x7
   552  0000B6                     	ds	4
   553  0000BA                     sprintf@exp:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0xB
   557  0000BA                     	ds	2
   558  0000BC                     sprintf@tmpval:
   559                           	opt stack 0
   560                           
   561                           ; 4 bytes @ 0xD
   562  0000BC                     	ds	4
   563  0000C0                     sprintf@prec:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x11
   567  0000C0                     	ds	2
   568  0000C2                     sprintf@fval:
   569                           	opt stack 0
   570                           
   571                           ; 3 bytes @ 0x13
   572  0000C2                     	ds	3
   573  0000C5                     sprintf@c:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x16
   577  0000C5                     	ds	1
   578  0000C6                     main@Power:
   579                           	opt stack 0
   580                           
   581                           ; 3 bytes @ 0x17
   582  0000C6                     	ds	3
   583  0000C9                     main@dty:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x1A
   587  0000C9                     	ds	2
   588  0000CB                     main@str_A:
   589                           	opt stack 0
   590                           
   591                           ; 8 bytes @ 0x1C
   592  0000CB                     	ds	8
   593  0000D3                     main@str_V:
   594                           	opt stack 0
   595                           
   596                           ; 8 bytes @ 0x24
   597  0000D3                     	ds	8
   598  0000DB                     main@curent:
   599                           	opt stack 0
   600                           
   601                           ; 3 bytes @ 0x2C
   602  0000DB                     	ds	3
   603  0000DE                     main@Iout:
   604                           	opt stack 0
   605                           
   606                           ; 3 bytes @ 0x2F
   607  0000DE                     	ds	3
   608  0000E1                     main@Uout:
   609                           	opt stack 0
   610                           
   611                           ; 3 bytes @ 0x32
   612  0000E1                     	ds	3
   613  0000E4                     main@Uin:
   614                           	opt stack 0
   615                           
   616                           ; 3 bytes @ 0x35
   617  0000E4                     	ds	3
   618  0000E7                     main@c:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x38
   622  0000E7                     	ds	2
   623  0000E9                     main@tens:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x3A
   627  0000E9                     	ds	3
   628  0000EC                     main@port:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x3D
   632  0000EC                     	ds	2
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           
   640                           	psect	cstackCOMRAM
   641  000001                     __pcstackCOMRAM:
   642                           	opt stack 0
   643  000001                     ??_isdigit:
   644  000001                     ??_I2C_Master_Wait:
   645  000001                     ?___awmod:
   646                           	opt stack 0
   647  000001                     ?___ftpack:
   648                           	opt stack 0
   649  000001                     ?___ftneg:
   650                           	opt stack 0
   651  000001                     ?__tdiv_to_l_:
   652                           	opt stack 0
   653  000001                     ?__div_to_l_:
   654                           	opt stack 0
   655  000001                     ?___lldiv:
   656                           	opt stack 0
   657  000001                     ?___llmod:
   658                           	opt stack 0
   659  000001                     ___awmod@dividend:
   660                           	opt stack 0
   661  000001                     __div_to_l_@f1:
   662                           	opt stack 0
   663  000001                     ___ftpack@arg:
   664                           	opt stack 0
   665  000001                     __tdiv_to_l_@f1:
   666                           	opt stack 0
   667  000001                     ___ftge@ff1:
   668                           	opt stack 0
   669  000001                     ___ftneg@f1:
   670                           	opt stack 0
   671  000001                     ___lldiv@dividend:
   672                           	opt stack 0
   673  000001                     ___llmod@dividend:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x0
   677  000001                     	ds	1
   678  000002                     _isdigit$1172:
   679                           	opt stack 0
   680  000002                     I2C_Write_Display@d:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x1
   684  000002                     	ds	1
   685  000003                     isdigit@c:
   686                           	opt stack 0
   687  000003                     ___awmod@divisor:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x2
   691  000003                     	ds	1
   692  000004                     Lcd_Port@data:
   693                           	opt stack 0
   694  000004                     ___ftpack@exp:
   695                           	opt stack 0
   696  000004                     __div_to_l_@f2:
   697                           	opt stack 0
   698  000004                     __tdiv_to_l_@f2:
   699                           	opt stack 0
   700  000004                     ___ftge@ff2:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0x3
   704  000004                     	ds	1
   705  000005                     ??_Lcd_Cmd:
   706  000005                     Lcd_Write_Char@a:
   707                           	opt stack 0
   708  000005                     ___awmod@counter:
   709                           	opt stack 0
   710  000005                     ___ftpack@sign:
   711                           	opt stack 0
   712  000005                     ___lldiv@divisor:
   713                           	opt stack 0
   714  000005                     ___llmod@divisor:
   715                           	opt stack 0
   716                           
   717                           ; 4 bytes @ 0x4
   718  000005                     	ds	1
   719  000006                     ??___ftpack:
   720  000006                     Lcd_Write_Char@y:
   721                           	opt stack 0
   722  000006                     ___awmod@sign:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x5
   726  000006                     	ds	1
   727  000007                     ??__tdiv_to_l_:
   728  000007                     ??___ftge:
   729  000007                     ?___awdiv:
   730                           	opt stack 0
   731  000007                     _Lcd_Cmd$736:
   732                           	opt stack 0
   733  000007                     Lcd_Write_Char@temp:
   734                           	opt stack 0
   735  000007                     ___awdiv@dividend:
   736                           	opt stack 0
   737  000007                     __div_to_l_@quot:
   738                           	opt stack 0
   739                           
   740                           ; 4 bytes @ 0x6
   741  000007                     	ds	1
   742  000008                     Lcd_Cmd@buff:
   743                           	opt stack 0
   744  000008                     Lcd_Write_String@a:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x7
   748  000008                     	ds	1
   749  000009                     ?___ftdiv:
   750                           	opt stack 0
   751  000009                     ?___lbtoft:
   752                           	opt stack 0
   753  000009                     ?___lltoft:
   754                           	opt stack 0
   755  000009                     ___llmod@counter:
   756                           	opt stack 0
   757  000009                     ___awdiv@divisor:
   758                           	opt stack 0
   759  000009                     ___ftdiv@f1:
   760                           	opt stack 0
   761  000009                     ___lldiv@quotient:
   762                           	opt stack 0
   763  000009                     ___lltoft@c:
   764                           	opt stack 0
   765                           
   766                           ; 4 bytes @ 0x8
   767  000009                     	ds	1
   768  00000A                     ??_Lcd_Write_String:
   769  00000A                     Lcd_Cmd@a:
   770                           	opt stack 0
   771  00000A                     __tdiv_to_l_@quot:
   772                           	opt stack 0
   773                           
   774                           ; 4 bytes @ 0x9
   775  00000A                     	ds	1
   776  00000B                     ??_Lcd_Init:
   777  00000B                     Lcd_Set_Cursor@b:
   778                           	opt stack 0
   779  00000B                     ___awdiv@counter:
   780                           	opt stack 0
   781  00000B                     __div_to_l_@cntr:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0xA
   785  00000B                     	ds	1
   786  00000C                     Lcd_Set_Cursor@a:
   787                           	opt stack 0
   788  00000C                     ___awdiv@sign:
   789                           	opt stack 0
   790  00000C                     __div_to_l_@exp1:
   791                           	opt stack 0
   792  00000C                     ___lbtoft@c:
   793                           	opt stack 0
   794  00000C                     Lcd_Write_String@i:
   795                           	opt stack 0
   796  00000C                     ___ftdiv@f2:
   797                           	opt stack 0
   798                           
   799                           ; 3 bytes @ 0xB
   800  00000C                     	ds	1
   801  00000D                     ??___lltoft:
   802  00000D                     Lcd_Set_Cursor@z:
   803                           	opt stack 0
   804  00000D                     ___lldiv@counter:
   805                           	opt stack 0
   806  00000D                     ___awdiv@quotient:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0xC
   810  00000D                     	ds	1
   811  00000E                     Lcd_Set_Cursor@y:
   812                           	opt stack 0
   813  00000E                     __tdiv_to_l_@cntr:
   814                           	opt stack 0
   815  00000E                     I2C_Master_Init@c:
   816                           	opt stack 0
   817                           
   818                           ; 4 bytes @ 0xD
   819  00000E                     	ds	1
   820  00000F                     ??___ftdiv:
   821  00000F                     ?___wmul:
   822                           	opt stack 0
   823  00000F                     Lcd_Set_Cursor@temp:
   824                           	opt stack 0
   825  00000F                     __tdiv_to_l_@exp1:
   826                           	opt stack 0
   827  00000F                     ___wmul@multiplier:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0xE
   831  00000F                     	ds	2
   832  000011                     ___lltoft@exp:
   833                           	opt stack 0
   834  000011                     ___wmul@multiplicand:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x10
   838  000011                     	ds	1
   839  000012                     ??_I2C_Master_Init:
   840  000012                     ___ftdiv@cntr:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x11
   844  000012                     	ds	1
   845  000013                     ___wmul@product:
   846                           	opt stack 0
   847  000013                     ___ftdiv@f3:
   848                           	opt stack 0
   849                           
   850                           ; 3 bytes @ 0x12
   851  000013                     	ds	2
   852  000015                     ?___ftmul:
   853                           	opt stack 0
   854  000015                     ___ftmul@f1:
   855                           	opt stack 0
   856                           
   857                           ; 3 bytes @ 0x14
   858  000015                     	ds	1
   859  000016                     ??_init_io_display:
   860  000016                     ___ftdiv@exp:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x15
   864  000016                     	ds	1
   865  000017                     ___ftdiv@sign:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x16
   869  000017                     	ds	1
   870  000018                     ___ftmul@f2:
   871                           	opt stack 0
   872                           
   873                           ; 3 bytes @ 0x17
   874  000018                     	ds	3
   875  00001B                     ??___ftmul:
   876                           
   877                           ; 1 bytes @ 0x1A
   878  00001B                     	ds	3
   879  00001E                     ___ftmul@exp:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x1D
   883  00001E                     	ds	1
   884  00001F                     ___ftmul@f3_as_product:
   885                           	opt stack 0
   886                           
   887                           ; 3 bytes @ 0x1E
   888  00001F                     	ds	3
   889  000022                     ___ftmul@cntr:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x21
   893  000022                     	ds	1
   894  000023                     ___ftmul@sign:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x22
   898  000023                     	ds	1
   899  000024                     ??_read_Uout:
   900  000024                     ??_read_Iout:
   901  000024                     ??_read_Uin:
   902  000024                     ?_fround:
   903                           	opt stack 0
   904  000024                     ?_scale:
   905                           	opt stack 0
   906                           
   907                           ; 3 bytes @ 0x23
   908  000024                     	ds	3
   909  000027                     _fround$1556:
   910                           	opt stack 0
   911  000027                     _scale$1557:
   912                           	opt stack 0
   913                           
   914                           ; 3 bytes @ 0x26
   915  000027                     	ds	3
   916  00002A                     scale@scl:
   917                           	opt stack 0
   918  00002A                     _fround$1555:
   919                           	opt stack 0
   920                           
   921                           ; 3 bytes @ 0x29
   922  00002A                     	ds	1
   923  00002B                     ?___fttol:
   924                           	opt stack 0
   925  00002B                     ___fttol@f1:
   926                           	opt stack 0
   927                           
   928                           ; 3 bytes @ 0x2A
   929  00002B                     	ds	2
   930  00002D                     fround@prec:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x2C
   934  00002D                     	ds	1
   935  00002E                     ?___ftadd:
   936                           	opt stack 0
   937  00002E                     ___ftadd@f1:
   938                           	opt stack 0
   939                           
   940                           ; 3 bytes @ 0x2D
   941  00002E                     	ds	1
   942  00002F                     ??___fttol:
   943                           
   944                           ; 1 bytes @ 0x2E
   945  00002F                     	ds	2
   946  000031                     ___ftadd@f2:
   947                           	opt stack 0
   948                           
   949                           ; 3 bytes @ 0x30
   950  000031                     	ds	3
   951  000034                     ??___ftadd:
   952  000034                     ___fttol@sign1:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x33
   956  000034                     	ds	1
   957  000035                     ___fttol@lval:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x34
   961  000035                     	ds	2
   962  000037                     ___ftadd@sign:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x36
   966  000037                     	ds	1
   967  000038                     ___ftadd@exp2:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x37
   971  000038                     	ds	1
   972  000039                     ___ftadd@exp1:
   973                           	opt stack 0
   974  000039                     ___fttol@exp1:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x38
   978  000039                     	ds	1
   979  00003A                     ?___ftsub:
   980                           	opt stack 0
   981  00003A                     ___ftsub@f1:
   982                           	opt stack 0
   983                           
   984                           ; 3 bytes @ 0x39
   985  00003A                     	ds	3
   986  00003D                     ___ftsub@f2:
   987                           	opt stack 0
   988                           
   989                           ; 3 bytes @ 0x3C
   990  00003D                     	ds	3
   991  000040                     ?_sprintf:
   992                           	opt stack 0
   993  000040                     sprintf@sp:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0x3F
   997  000040                     	ds	2
   998  000042                     sprintf@f:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x41
  1002  000042                     	ds	5
  1003  000047                     ??_sprintf:
  1004                           
  1005                           ; 1 bytes @ 0x46
  1006  000047                     	ds	6
  1007  00004D                     ??_main:
  1008                           
  1009                           ; 1 bytes @ 0x4C
  1010  00004D                     	ds	2
  1011                           tblptru	equ	0xFF8
  1012                           tblptrh	equ	0xFF7
  1013                           tblptrl	equ	0xFF6
  1014                           tablat	equ	0xFF5
  1015                           postinc0	equ	0xFEE
  1016                           wreg	equ	0xFE8
  1017                           
  1018 ;;
  1019 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1020 ;;
  1021 ;; *************** function _main *****************
  1022 ;; Defined at:
  1023 ;;		line 16 in file "main.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;  pwm_buffer     20    0        unsigned char [20]
  1028 ;;  str_V           8   36[BANK0 ] unsigned char [8]
  1029 ;;  str_A           8   28[BANK0 ] unsigned char [8]
  1030 ;;  str_P           8    0        unsigned char [8]
  1031 ;;  tens            3   58[BANK0 ] float 
  1032 ;;  Uin             3   53[BANK0 ] float 
  1033 ;;  Uout            3   50[BANK0 ] float 
  1034 ;;  Iout            3   47[BANK0 ] float 
  1035 ;;  curent          3   44[BANK0 ] float 
  1036 ;;  Power           3   23[BANK0 ] float 
  1037 ;;  numar           3    0        float 
  1038 ;;  tens_A          3    0        float 
  1039 ;;  port            2   61[BANK0 ] int 
  1040 ;;  c               2   56[BANK0 ] int 
  1041 ;;  dty             2   26[BANK0 ] int 
  1042 ;;  tip             2    0        int 
  1043 ;;  rez_adc         2    0        int 
  1044 ;;  rez_adc_U       2    0        int 
  1045 ;;  rez_adc_A       2    0        int 
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  1    wreg      void 
  1048 ;; Registers used:
  1049 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1050 ;; Tracked objects:
  1051 ;;		On entry : 0/0
  1052 ;;		On exit  : 0/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1056 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1057 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1058 ;;      Totals:         2      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1059 ;;Total ram usage:       42 bytes
  1060 ;; Hardware stack levels required when called:    6
  1061 ;; This function calls:
  1062 ;;		_Lcd_Clear
  1063 ;;		_Lcd_Set_Cursor
  1064 ;;		_Lcd_Write_String
  1065 ;;		___ftge
  1066 ;;		___ftmul
  1067 ;;		_adc_config
  1068 ;;		_config
  1069 ;;		_init_io_display
  1070 ;;		_pwm_config
  1071 ;;		_read_Iout
  1072 ;;		_read_Uin
  1073 ;;		_read_Uout
  1074 ;;		_sprintf
  1075 ;; This function is called by:
  1076 ;;		Startup code after reset
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text0
  1081  001DF4                     __ptext0:
  1082                           	opt stack 0
  1083  001DF4                     _main:
  1084                           	opt stack 25
  1085                           
  1086                           ;main.c: 19: char pwm_buffer[20];
  1087                           ;main.c: 20: config();
  1088                           
  1089                           ;incstack = 0
  1090  001DF4  EC19  F017         	call	_config	;wreg free
  1091                           
  1092                           ;main.c: 21: pwm_config();
  1093  001DF8  ECD6  F017         	call	_pwm_config	;wreg free
  1094                           
  1095                           ;main.c: 22: adc_config();
  1096  001DFC  EC41  F018         	call	_adc_config	;wreg free
  1097                           
  1098                           ;main.c: 23: init_io_display();
  1099  001E00  EC29  F016         	call	_init_io_display	;wreg free
  1100                           
  1101                           ;main.c: 24: char str_V[8],str_A[8],str_P[8];
  1102                           ;main.c: 25: float tens,tens_A,curent,Power,Iout,Uout,Uin;
  1103                           ;main.c: 26: int rez_adc_A,rez_adc_U;
  1104                           ;main.c: 27: int dty,rez_adc,tip,port,c=100;
  1105  001E04  0E00               	movlw	0
  1106  001E06  0100               	movlb	0	; () banked
  1107  001E08  6FE8               	movwf	(main@c+1)& (0+255),b
  1108  001E0A  0E64               	movlw	100
  1109  001E0C  6FE7               	movwf	main@c& (0+255),b
  1110                           
  1111                           ; BSR set to: 0
  1112                           ;main.c: 28: float numar;
  1113                           ;main.c: 29: dty=0;
  1114  001E0E  0E00               	movlw	0
  1115  001E10  6FCA               	movwf	(main@dty+1)& (0+255),b
  1116  001E12  0E00               	movlw	0
  1117  001E14  6FC9               	movwf	main@dty& (0+255),b
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;main.c: 30: port=0;
  1121  001E16  0E00               	movlw	0
  1122  001E18  6FED               	movwf	(main@port+1)& (0+255),b
  1123  001E1A  0E00               	movlw	0
  1124  001E1C  6FEC               	movwf	main@port& (0+255),b
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;main.c: 31: TRISDbits.RD4=0;
  1128  001E1E  9895               	bcf	3989,4,c	;volatile
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;main.c: 32: LATDbits.LD6=0;
  1132  001E20  9C8C               	bcf	3980,6,c	;volatile
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;main.c: 33: LATDbits.LD7=0;
  1136  001E22  9E8C               	bcf	3980,7,c	;volatile
  1137                           
  1138                           ; BSR set to: 0
  1139                           ;main.c: 34: LATDbits.LD5=0;
  1140  001E24  9A8C               	bcf	3980,5,c	;volatile
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;main.c: 35: LATDbits.LD4=0;
  1144  001E26  988C               	bcf	3980,4,c	;volatile
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;main.c: 38: ADCON0=0b00010011;
  1148  001E28  0E13               	movlw	19
  1149  001E2A  6EC2               	movwf	4034,c	;volatile
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;main.c: 40: Lcd_Clear();
  1153  001E2C  EC57  F018         	call	_Lcd_Clear	;wreg free
  1154  001E30                     
  1155                           ;main.c: 51: {
  1156                           ;main.c: 52: read_Uout();
  1157  001E30  EC2B  F014         	call	_read_Uout	;wreg free
  1158                           
  1159                           ;main.c: 54: Lcd_Set_Cursor(1,1);
  1160  001E34  0E01               	movlw	1
  1161  001E36  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1162  001E38  0E01               	movlw	1
  1163  001E3A  EC43  F017         	call	_Lcd_Set_Cursor
  1164                           
  1165                           ;main.c: 55: Lcd_Write_String("U=");
  1166  001E3E  0E88               	movlw	low STR_1
  1167  001E40  6E08               	movwf	Lcd_Write_String@a,c
  1168  001E42  0E10               	movlw	high STR_1
  1169  001E44  6E09               	movwf	Lcd_Write_String@a+1,c
  1170  001E46  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1171                           
  1172                           ;main.c: 56: sprintf(str_V, "%.2f", tens);
  1173  001E4A  0ED3               	movlw	low main@str_V
  1174  001E4C  6E40               	movwf	sprintf@sp,c
  1175  001E4E  0E00               	movlw	high main@str_V
  1176  001E50  6E41               	movwf	sprintf@sp+1,c
  1177  001E52  0E7C               	movlw	low STR_2
  1178  001E54  6E42               	movwf	sprintf@f,c
  1179  001E56  0E10               	movlw	high STR_2
  1180  001E58  6E43               	movwf	sprintf@f+1,c
  1181  001E5A  C0E9  F044         	movff	main@tens,?_sprintf+4
  1182  001E5E  C0EA  F045         	movff	main@tens+1,?_sprintf+5
  1183  001E62  C0EB  F046         	movff	main@tens+2,?_sprintf+6
  1184  001E66  EC49  F008         	call	_sprintf	;wreg free
  1185                           
  1186                           ;main.c: 57: Lcd_Set_Cursor(1,3);
  1187  001E6A  0E03               	movlw	3
  1188  001E6C  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1189  001E6E  0E01               	movlw	1
  1190  001E70  EC43  F017         	call	_Lcd_Set_Cursor
  1191                           
  1192                           ;main.c: 58: Lcd_Write_String(str_V);
  1193  001E74  0ED3               	movlw	low main@str_V
  1194  001E76  6E08               	movwf	Lcd_Write_String@a,c
  1195  001E78  0E00               	movlw	high main@str_V
  1196  001E7A  6E09               	movwf	Lcd_Write_String@a+1,c
  1197  001E7C  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1198                           
  1199                           ;main.c: 59: port=1;
  1200  001E80  0E00               	movlw	0
  1201  001E82  0100               	movlb	0	; () banked
  1202  001E84  6FED               	movwf	(main@port+1)& (0+255),b
  1203  001E86  0E01               	movlw	1
  1204  001E88  6FEC               	movwf	main@port& (0+255),b
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;main.c: 60: _delay((unsigned long)((100)*(64000000/4000.0)));
  1208  001E8A  0E09               	movlw	9
  1209  001E8C  6E4E               	movwf	(??_main+1)& (0+255),c
  1210  001E8E  0E1E               	movlw	30
  1211  001E90  6E4D               	movwf	??_main& (0+255),c
  1212  001E92  0EE4               	movlw	228
  1213  001E94                     u2947:
  1214  001E94  2EE8               	decfsz	wreg,f,c
  1215  001E96  D7FE               	bra	u2947
  1216  001E98  2E4D               	decfsz	??_main& (0+255),f,c
  1217  001E9A  D7FC               	bra	u2947
  1218  001E9C  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1219  001E9E  D7FA               	bra	u2947
  1220  001EA0  D000               	nop2	
  1221                           
  1222                           ;main.c: 61: ADRESH=0X00;
  1223  001EA2  0E00               	movlw	0
  1224  001EA4  6EC4               	movwf	4036,c	;volatile
  1225                           
  1226                           ;main.c: 62: _delay((unsigned long)((100)*(64000000/4000.0)));
  1227  001EA6  0E09               	movlw	9
  1228  001EA8  6E4E               	movwf	(??_main+1)& (0+255),c
  1229  001EAA  0E1E               	movlw	30
  1230  001EAC  6E4D               	movwf	??_main& (0+255),c
  1231  001EAE  0EE4               	movlw	228
  1232  001EB0                     u2957:
  1233  001EB0  2EE8               	decfsz	wreg,f,c
  1234  001EB2  D7FE               	bra	u2957
  1235  001EB4  2E4D               	decfsz	??_main& (0+255),f,c
  1236  001EB6  D7FC               	bra	u2957
  1237  001EB8  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1238  001EBA  D7FA               	bra	u2957
  1239  001EBC  D000               	nop2	
  1240                           
  1241                           ;main.c: 66: {
  1242                           ;main.c: 67: read_Iout();
  1243  001EBE  ECB7  F015         	call	_read_Iout	;wreg free
  1244                           
  1245                           ;main.c: 69: Lcd_Set_Cursor(2,1);
  1246  001EC2  0E01               	movlw	1
  1247  001EC4  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1248  001EC6  0E02               	movlw	2
  1249  001EC8  EC43  F017         	call	_Lcd_Set_Cursor
  1250                           
  1251                           ;main.c: 70: Lcd_Write_String("I=");
  1252  001ECC  0E85               	movlw	low STR_3
  1253  001ECE  6E08               	movwf	Lcd_Write_String@a,c
  1254  001ED0  0E10               	movlw	high STR_3
  1255  001ED2  6E09               	movwf	Lcd_Write_String@a+1,c
  1256  001ED4  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1257                           
  1258                           ;main.c: 71: sprintf(str_A, "%.2f", curent);
  1259  001ED8  0ECB               	movlw	low main@str_A
  1260  001EDA  6E40               	movwf	sprintf@sp,c
  1261  001EDC  0E00               	movlw	high main@str_A
  1262  001EDE  6E41               	movwf	sprintf@sp+1,c
  1263  001EE0  0E7C               	movlw	low STR_2
  1264  001EE2  6E42               	movwf	sprintf@f,c
  1265  001EE4  0E10               	movlw	high STR_2
  1266  001EE6  6E43               	movwf	sprintf@f+1,c
  1267  001EE8  C0DB  F044         	movff	main@curent,?_sprintf+4
  1268  001EEC  C0DC  F045         	movff	main@curent+1,?_sprintf+5
  1269  001EF0  C0DD  F046         	movff	main@curent+2,?_sprintf+6
  1270  001EF4  EC49  F008         	call	_sprintf	;wreg free
  1271                           
  1272                           ;main.c: 72: Lcd_Set_Cursor(2,3);
  1273  001EF8  0E03               	movlw	3
  1274  001EFA  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1275  001EFC  0E02               	movlw	2
  1276  001EFE  EC43  F017         	call	_Lcd_Set_Cursor
  1277                           
  1278                           ;main.c: 73: Lcd_Write_String(str_A);
  1279  001F02  0ECB               	movlw	low main@str_A
  1280  001F04  6E08               	movwf	Lcd_Write_String@a,c
  1281  001F06  0E00               	movlw	high main@str_A
  1282  001F08  6E09               	movwf	Lcd_Write_String@a+1,c
  1283  001F0A  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1284                           
  1285                           ;main.c: 74: Lcd_Write_String(" A");
  1286  001F0E  0E8B               	movlw	low STR_5
  1287  001F10  6E08               	movwf	Lcd_Write_String@a,c
  1288  001F12  0E10               	movlw	high STR_5
  1289  001F14  6E09               	movwf	Lcd_Write_String@a+1,c
  1290  001F16  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1291                           
  1292                           ;main.c: 75: port=2;
  1293  001F1A  0E00               	movlw	0
  1294  001F1C  0100               	movlb	0	; () banked
  1295  001F1E  6FED               	movwf	(main@port+1)& (0+255),b
  1296  001F20  0E02               	movlw	2
  1297  001F22  6FEC               	movwf	main@port& (0+255),b
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;main.c: 76: _delay((unsigned long)((100)*(64000000/4000.0)));
  1301  001F24  0E09               	movlw	9
  1302  001F26  6E4E               	movwf	(??_main+1)& (0+255),c
  1303  001F28  0E1E               	movlw	30
  1304  001F2A  6E4D               	movwf	??_main& (0+255),c
  1305  001F2C  0EE4               	movlw	228
  1306  001F2E                     u2967:
  1307  001F2E  2EE8               	decfsz	wreg,f,c
  1308  001F30  D7FE               	bra	u2967
  1309  001F32  2E4D               	decfsz	??_main& (0+255),f,c
  1310  001F34  D7FC               	bra	u2967
  1311  001F36  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1312  001F38  D7FA               	bra	u2967
  1313  001F3A  D000               	nop2	
  1314                           
  1315                           ;main.c: 77: ADRESH=0X00;
  1316  001F3C  0E00               	movlw	0
  1317  001F3E  6EC4               	movwf	4036,c	;volatile
  1318                           
  1319                           ;main.c: 78: _delay((unsigned long)((100)*(64000000/4000.0)));
  1320  001F40  0E09               	movlw	9
  1321  001F42  6E4E               	movwf	(??_main+1)& (0+255),c
  1322  001F44  0E1E               	movlw	30
  1323  001F46  6E4D               	movwf	??_main& (0+255),c
  1324  001F48  0EE4               	movlw	228
  1325  001F4A                     u2977:
  1326  001F4A  2EE8               	decfsz	wreg,f,c
  1327  001F4C  D7FE               	bra	u2977
  1328  001F4E  2E4D               	decfsz	??_main& (0+255),f,c
  1329  001F50  D7FC               	bra	u2977
  1330  001F52  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1331  001F54  D7FA               	bra	u2977
  1332  001F56  D000               	nop2	
  1333                           
  1334                           ;main.c: 81: {
  1335                           ;main.c: 82: read_Uin();
  1336  001F58  EC73  F014         	call	_read_Uin	;wreg free
  1337                           
  1338                           ;main.c: 84: Lcd_Set_Cursor(1,9);
  1339  001F5C  0E09               	movlw	9
  1340  001F5E  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1341  001F60  0E01               	movlw	1
  1342  001F62  EC43  F017         	call	_Lcd_Set_Cursor
  1343                           
  1344                           ;main.c: 85: Lcd_Write_String("Ui=");
  1345  001F66  0E81               	movlw	low STR_6
  1346  001F68  6E08               	movwf	Lcd_Write_String@a,c
  1347  001F6A  0E10               	movlw	high STR_6
  1348  001F6C  6E09               	movwf	Lcd_Write_String@a+1,c
  1349  001F6E  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1350                           
  1351                           ;main.c: 86: sprintf(str_V, "%.2f", tens);
  1352  001F72  0ED3               	movlw	low main@str_V
  1353  001F74  6E40               	movwf	sprintf@sp,c
  1354  001F76  0E00               	movlw	high main@str_V
  1355  001F78  6E41               	movwf	sprintf@sp+1,c
  1356  001F7A  0E7C               	movlw	low STR_2
  1357  001F7C  6E42               	movwf	sprintf@f,c
  1358  001F7E  0E10               	movlw	high STR_2
  1359  001F80  6E43               	movwf	sprintf@f+1,c
  1360  001F82  C0E9  F044         	movff	main@tens,?_sprintf+4
  1361  001F86  C0EA  F045         	movff	main@tens+1,?_sprintf+5
  1362  001F8A  C0EB  F046         	movff	main@tens+2,?_sprintf+6
  1363  001F8E  EC49  F008         	call	_sprintf	;wreg free
  1364                           
  1365                           ;main.c: 87: Lcd_Set_Cursor(1,12);
  1366  001F92  0E0C               	movlw	12
  1367  001F94  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1368  001F96  0E01               	movlw	1
  1369  001F98  EC43  F017         	call	_Lcd_Set_Cursor
  1370                           
  1371                           ;main.c: 88: Lcd_Write_String(str_V);
  1372  001F9C  0ED3               	movlw	low main@str_V
  1373  001F9E  6E08               	movwf	Lcd_Write_String@a,c
  1374  001FA0  0E00               	movlw	high main@str_V
  1375  001FA2  6E09               	movwf	Lcd_Write_String@a+1,c
  1376  001FA4  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1377                           
  1378                           ;main.c: 89: Lcd_Write_String(" V");
  1379  001FA8  0E8E               	movlw	low STR_8
  1380  001FAA  6E08               	movwf	Lcd_Write_String@a,c
  1381  001FAC  0E10               	movlw	high STR_8
  1382  001FAE  6E09               	movwf	Lcd_Write_String@a+1,c
  1383  001FB0  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1384                           
  1385                           ;main.c: 90: port=0;
  1386  001FB4  0E00               	movlw	0
  1387  001FB6  0100               	movlb	0	; () banked
  1388  001FB8  6FED               	movwf	(main@port+1)& (0+255),b
  1389  001FBA  0E00               	movlw	0
  1390  001FBC  6FEC               	movwf	main@port& (0+255),b
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;main.c: 91: _delay((unsigned long)((100)*(64000000/4000.0)));
  1394  001FBE  0E09               	movlw	9
  1395  001FC0  6E4E               	movwf	(??_main+1)& (0+255),c
  1396  001FC2  0E1E               	movlw	30
  1397  001FC4  6E4D               	movwf	??_main& (0+255),c
  1398  001FC6  0EE4               	movlw	228
  1399  001FC8                     u2987:
  1400  001FC8  2EE8               	decfsz	wreg,f,c
  1401  001FCA  D7FE               	bra	u2987
  1402  001FCC  2E4D               	decfsz	??_main& (0+255),f,c
  1403  001FCE  D7FC               	bra	u2987
  1404  001FD0  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1405  001FD2  D7FA               	bra	u2987
  1406  001FD4  D000               	nop2	
  1407                           
  1408                           ;main.c: 92: ADRESH=0X00;
  1409  001FD6  0E00               	movlw	0
  1410  001FD8  6EC4               	movwf	4036,c	;volatile
  1411                           
  1412                           ;main.c: 93: _delay((unsigned long)((100)*(64000000/4000.0)));
  1413  001FDA  0E09               	movlw	9
  1414  001FDC  6E4E               	movwf	(??_main+1)& (0+255),c
  1415  001FDE  0E1E               	movlw	30
  1416  001FE0  6E4D               	movwf	??_main& (0+255),c
  1417  001FE2  0EE4               	movlw	228
  1418  001FE4                     u2997:
  1419  001FE4  2EE8               	decfsz	wreg,f,c
  1420  001FE6  D7FE               	bra	u2997
  1421  001FE8  2E4D               	decfsz	??_main& (0+255),f,c
  1422  001FEA  D7FC               	bra	u2997
  1423  001FEC  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1424  001FEE  D7FA               	bra	u2997
  1425  001FF0  D000               	nop2	
  1426                           
  1427                           ;main.c: 94: }
  1428                           ;main.c: 97: if(Uin<12)
  1429  001FF2  C0E4  F001         	movff	main@Uin,___ftge@ff1
  1430  001FF6  C0E5  F002         	movff	main@Uin+1,___ftge@ff1+1
  1431  001FFA  C0E6  F003         	movff	main@Uin+2,___ftge@ff1+2
  1432  001FFE  0E00               	movlw	0
  1433  002000  6E04               	movwf	___ftge@ff2,c
  1434  002002  0E40               	movlw	64
  1435  002004  6E05               	movwf	___ftge@ff2+1,c
  1436  002006  0E41               	movlw	65
  1437  002008  6E06               	movwf	___ftge@ff2+2,c
  1438  00200A  ECE3  F013         	call	___ftge	;wreg free
  1439  00200E  B0D8               	btfsc	status,0,c
  1440  002010  D70F               	goto	l65
  1441                           
  1442                           ;main.c: 98: {
  1443                           ;main.c: 99: CCPR1L=0;
  1444  002012  0E00               	movlw	0
  1445  002014  6EBE               	movwf	4030,c	;volatile
  1446                           
  1447                           ;main.c: 100: Power=Uout*Iout;
  1448  002016  C0E1  F015         	movff	main@Uout,___ftmul@f1
  1449  00201A  C0E2  F016         	movff	main@Uout+1,___ftmul@f1+1
  1450  00201E  C0E3  F017         	movff	main@Uout+2,___ftmul@f1+2
  1451  002022  C0DE  F018         	movff	main@Iout,___ftmul@f2
  1452  002026  C0DF  F019         	movff	main@Iout+1,___ftmul@f2+1
  1453  00202A  C0E0  F01A         	movff	main@Iout+2,___ftmul@f2+2
  1454  00202E  EC9F  F012         	call	___ftmul	;wreg free
  1455  002032  C015  F0C6         	movff	?___ftmul,main@Power
  1456  002036  C016  F0C7         	movff	?___ftmul+1,main@Power+1
  1457  00203A  C017  F0C8         	movff	?___ftmul+2,main@Power+2
  1458                           
  1459                           ;main.c: 101: CCPR2L=c;
  1460  00203E  C0E7  FF67         	movff	main@c,3943	;volatile
  1461  002042  D6F6               	goto	l65
  1462  002044                     __end_of_main:
  1463                           	opt stack 0
  1464                           tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           postinc0	equ	0xFEE
  1469                           wreg	equ	0xFE8
  1470                           status	equ	0xFD8
  1471                           
  1472 ;; *************** function _sprintf *****************
  1473 ;; Defined at:
  1474 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1477 ;;		 -> str_A(8), str_V(8), main@str_A(8), main@str_V(8), 
  1478 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1479 ;;		 -> STR_16(5), STR_13(5), STR_11(5), STR_7(5), 
  1480 ;;		 -> STR_4(5), STR_2(5), 
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;  tmpval          4   13[BANK0 ] struct .
  1483 ;;  val             4    7[BANK0 ] unsigned long 
  1484 ;;  fval            3   19[BANK0 ] unsigned long 
  1485 ;;  cp              3    0        PTR const unsigned char 
  1486 ;;  prec            2   17[BANK0 ] int 
  1487 ;;  exp             2   11[BANK0 ] int 
  1488 ;;  flag            2    5[BANK0 ] unsigned short 
  1489 ;;  ap              2    3[BANK0 ] PTR void [1]
  1490 ;;		 -> ?_sprintf(2), 
  1491 ;;  len             2    0        unsigned int 
  1492 ;;  width           2    0        int 
  1493 ;;  c               1   22[BANK0 ] char 
  1494 ;;  d               1    0        unsigned char 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  2   63[COMRAM] int 
  1497 ;; Registers used:
  1498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1504 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Totals:        13      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;Total ram usage:       36 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    3
  1511 ;; This function calls:
  1512 ;;		___awdiv
  1513 ;;		___ftadd
  1514 ;;		___ftge
  1515 ;;		___ftmul
  1516 ;;		___ftneg
  1517 ;;		___ftsub
  1518 ;;		___fttol
  1519 ;;		___lldiv
  1520 ;;		___llmod
  1521 ;;		___lltoft
  1522 ;;		___wmul
  1523 ;;		__div_to_l_
  1524 ;;		__tdiv_to_l_
  1525 ;;		_fround
  1526 ;;		_isdigit
  1527 ;;		_scale
  1528 ;; This function is called by:
  1529 ;;		_main
  1530 ;;		_write_Uout
  1531 ;;		_write_Uin
  1532 ;;		_write_Iout
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           	psect	text1
  1537  001092                     __ptext1:
  1538                           	opt stack 0
  1539  001092                     _sprintf:
  1540                           	opt stack 27
  1541                           
  1542                           ;doprnt.c: 494: va_list ap;
  1543                           ;doprnt.c: 499: signed char c;
  1544                           ;doprnt.c: 501: int width;
  1545                           ;doprnt.c: 504: int prec;
  1546                           ;doprnt.c: 508: unsigned short flag;
  1547                           ;doprnt.c: 515: char d;
  1548                           ;doprnt.c: 516: double fval;
  1549                           ;doprnt.c: 517: int exp;
  1550                           ;doprnt.c: 523: union {
  1551                           ;doprnt.c: 524: unsigned long vd;
  1552                           ;doprnt.c: 525: double integ;
  1553                           ;doprnt.c: 526: } tmpval;
  1554                           ;doprnt.c: 528: unsigned long val;
  1555                           ;doprnt.c: 529: unsigned len;
  1556                           ;doprnt.c: 530: const char * cp;
  1557                           ;doprnt.c: 533: *ap = __va_start();
  1558                           
  1559                           ;incstack = 0
  1560  001092  0E44               	movlw	low (?_sprintf+4)
  1561  001094  0100               	movlb	0	; () banked
  1562  001096  6FB2               	movwf	sprintf@ap& (0+255),b
  1563  001098  0E00               	movlw	high (?_sprintf+4)
  1564  00109A  6FB3               	movwf	(sprintf@ap+1)& (0+255),b
  1565                           
  1566                           ;doprnt.c: 536: while(c = *f++) {
  1567  00109C  D36B               	goto	l493
  1568  00109E                     
  1569                           ; BSR set to: 0
  1570                           ;doprnt.c: 538: if(c != '%')
  1571                           
  1572                           ; BSR set to: 0
  1573  00109E  0E25               	movlw	37
  1574  0010A0  19C5               	xorwf	sprintf@c& (0+255),w,b
  1575  0010A2  B4D8               	btfsc	status,2,c
  1576  0010A4  D007               	goto	l439
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;doprnt.c: 540: {
  1580                           ;doprnt.c: 541: ((*sp++ = (c)));
  1581  0010A6  C040  FFD9         	movff	sprintf@sp,fsr2l
  1582  0010AA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1583  0010AE  C0C5  FFDF         	movff	sprintf@c,indf2
  1584  0010B2  D35E               	goto	l3386
  1585  0010B4                     l439:
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;doprnt.c: 543: }
  1589                           ;doprnt.c: 548: flag = 0;
  1590                           
  1591                           ; BSR set to: 0
  1592  0010B4  0E00               	movlw	0
  1593  0010B6  6FB5               	movwf	(sprintf@flag+1)& (0+255),b
  1594  0010B8  0E00               	movlw	0
  1595  0010BA  6FB4               	movwf	sprintf@flag& (0+255),b
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;doprnt.c: 611: if(*f == '.') {
  1599  0010BC  C042  FFF6         	movff	sprintf@f,tblptrl
  1600  0010C0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1601  0010C4                     	if	0	;tblptru may be non-zero
  1602  0010C4                     	endif
  1603  0010C4                     	if	0	;tblptru may be non-zero
  1604  0010C4                     	endif
  1605  0010C4  0008               	tblrd		*
  1606  0010C6  50F5               	movf	tablat,w,c
  1607  0010C8  0A2E               	xorlw	46
  1608  0010CA  A4D8               	btfss	status,2,c
  1609  0010CC  D02F               	goto	l440
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;doprnt.c: 612: flag |= 0x4000;
  1613  0010CE  8DB5               	bsf	(sprintf@flag+1)& (0+255),6,b
  1614                           
  1615                           ;doprnt.c: 613: f++;
  1616  0010D0  4A42               	infsnz	sprintf@f,f,c
  1617  0010D2  2A43               	incf	sprintf@f+1,f,c
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;doprnt.c: 620: {
  1621                           ;doprnt.c: 621: prec = 0;
  1622  0010D4  0E00               	movlw	0
  1623  0010D6  6FC1               	movwf	(sprintf@prec+1)& (0+255),b
  1624  0010D8  0E00               	movlw	0
  1625  0010DA  6FC0               	movwf	sprintf@prec& (0+255),b
  1626                           
  1627                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1628  0010DC  D01C               	goto	l441
  1629  0010DE                     
  1630                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1631                           
  1632                           ; BSR set to: 0
  1633  0010DE  C0C0  F00F         	movff	sprintf@prec,___wmul@multiplier
  1634  0010E2  C0C1  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1635  0010E6  0E00               	movlw	0
  1636  0010E8  6E12               	movwf	___wmul@multiplicand+1,c
  1637  0010EA  0E0A               	movlw	10
  1638  0010EC  6E11               	movwf	___wmul@multiplicand,c
  1639  0010EE  ECEA  F017         	call	___wmul	;wreg free
  1640  0010F2  C042  FFF6         	movff	sprintf@f,tblptrl
  1641  0010F6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1642  0010FA                     	if	0	;tblptru may be non-zero
  1643  0010FA                     	endif
  1644  0010FA                     	if	0	;tblptru may be non-zero
  1645  0010FA                     	endif
  1646  0010FA  0008               	tblrd		*
  1647  0010FC  50F5               	movf	tablat,w,c
  1648  0010FE  260F               	addwf	?___wmul,f,c
  1649  001100  0E00               	movlw	0
  1650  001102  2210               	addwfc	?___wmul+1,f,c
  1651  001104  0ED0               	movlw	208
  1652  001106  240F               	addwf	?___wmul,w,c
  1653  001108  0100               	movlb	0	; () banked
  1654  00110A  6FC0               	movwf	sprintf@prec& (0+255),b
  1655  00110C  0EFF               	movlw	255
  1656  00110E  2010               	addwfc	?___wmul+1,w,c
  1657  001110  6FC1               	movwf	(sprintf@prec+1)& (0+255),b
  1658                           
  1659                           ; BSR set to: 0
  1660  001112  4A42               	infsnz	sprintf@f,f,c
  1661  001114  2A43               	incf	sprintf@f+1,f,c
  1662  001116                     l441:
  1663                           
  1664                           ; BSR set to: 0
  1665                           
  1666                           ; BSR set to: 0
  1667  001116  C042  FFF6         	movff	sprintf@f,tblptrl
  1668  00111A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1669  00111E                     	if	0	;tblptru may be non-zero
  1670  00111E                     	endif
  1671  00111E                     	if	0	;tblptru may be non-zero
  1672  00111E                     	endif
  1673  00111E  0008               	tblrd		*
  1674  001120  50F5               	movf	tablat,w,c
  1675  001122  EC32  F018         	call	_isdigit
  1676  001126  A0D8               	btfss	status,0,c
  1677  001128  D00A               	goto	l445
  1678  00112A  D7D9               	goto	l442
  1679  00112C                     l440:
  1680                           
  1681                           ;doprnt.c: 626: prec = 0;
  1682  00112C  0E00               	movlw	0
  1683  00112E  0100               	movlb	0	; () banked
  1684  001130  6FC1               	movwf	(sprintf@prec+1)& (0+255),b
  1685  001132  0E00               	movlw	0
  1686  001134  6FC0               	movwf	sprintf@prec& (0+255),b
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;doprnt.c: 628: flag |= 0x1000;
  1690  001136  89B5               	bsf	(sprintf@flag+1)& (0+255),4,b
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;doprnt.c: 630: }
  1694                           ;doprnt.c: 635: switch(c = *f++) {
  1695  001138  D002               	goto	l445
  1696  00113A                     
  1697                           ; BSR set to: 0
  1698                           ;doprnt.c: 663: flag |= 0x400;
  1699                           
  1700                           ; BSR set to: 0
  1701  00113A  85B5               	bsf	(sprintf@flag+1)& (0+255),2,b
  1702                           
  1703                           ;doprnt.c: 664: break;
  1704  00113C  D012               	goto	l449
  1705  00113E                     l445:
  1706                           
  1707                           ; BSR set to: 0
  1708  00113E  C042  FFF6         	movff	sprintf@f,tblptrl
  1709  001142  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1710  001146  4A42               	infsnz	sprintf@f,f,c
  1711  001148  2A43               	incf	sprintf@f+1,f,c
  1712  00114A                     	if	0	;tblptru may be non-zero
  1713  00114A                     	endif
  1714  00114A                     	if	0	;tblptru may be non-zero
  1715  00114A                     	endif
  1716  00114A  0008               	tblrd		*
  1717  00114C  CFF5 F0C5          	movff	tablat,sprintf@c
  1718  001150  0100               	movlb	0	; () banked
  1719  001152  51C5               	movf	sprintf@c& (0+255),w,b
  1720                           
  1721                           ; Switch size 1, requested type "space"
  1722                           ; Number of cases is 2, Range of values is 0 to 102
  1723                           ; switch strategies available:
  1724                           ; Name         Instructions Cycles
  1725                           ; simple_byte            7     4 (average)
  1726                           ;	Chosen strategy is simple_byte
  1727  001154  0A00               	xorlw	0	; case 0
  1728  001156  B4D8               	btfsc	status,2,c
  1729  001158  D319               	goto	u2860
  1730  00115A  0A66               	xorlw	102	; case 102
  1731  00115C  B4D8               	btfsc	status,2,c
  1732  00115E  D7ED               	goto	l448
  1733  001160  D309               	goto	l493
  1734  001162                     l449:
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;doprnt.c: 825: if(flag & (0x700)) {
  1738                           
  1739                           ; BSR set to: 0
  1740  001162  0E07               	movlw	7
  1741  001164  15B5               	andwf	(sprintf@flag+1)& (0+255),w,b
  1742  001166  B4D8               	btfsc	status,2,c
  1743  001168  D2C9               	goto	l451
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;doprnt.c: 827: if(flag & 0x1000)
  1747  00116A  A9B5               	btfss	(sprintf@flag+1)& (0+255),4,b
  1748  00116C  D004               	goto	l452
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;doprnt.c: 829: prec = 6;
  1752  00116E  0E00               	movlw	0
  1753  001170  6FC1               	movwf	(sprintf@prec+1)& (0+255),b
  1754  001172  0E06               	movlw	6
  1755  001174  6FC0               	movwf	sprintf@prec& (0+255),b
  1756  001176                     l452:
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1760                           
  1761                           ; BSR set to: 0
  1762  001176  C0B2  FFD9         	movff	sprintf@ap,fsr2l
  1763  00117A  C0B3  FFDA         	movff	sprintf@ap+1,fsr2h
  1764  00117E  CFDE F0C2          	movff	postinc2,sprintf@fval
  1765  001182  CFDE F0C3          	movff	postinc2,sprintf@fval+1
  1766  001186  CFDD F0C4          	movff	postdec2,sprintf@fval+2
  1767                           
  1768                           ; BSR set to: 0
  1769  00118A  0E03               	movlw	3
  1770  00118C  27B2               	addwf	sprintf@ap& (0+255),f,b
  1771  00118E  0E00               	movlw	0
  1772  001190  23B3               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;doprnt.c: 831: if(fval < 0.0) {
  1776  001192  AFC4               	btfss	(sprintf@fval+2)& (0+255),7,b
  1777  001194  D011               	goto	l453
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;doprnt.c: 832: fval = -fval;
  1781  001196  C0C2  F001         	movff	sprintf@fval,___ftneg@f1
  1782  00119A  C0C3  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1783  00119E  C0C4  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1784  0011A2  ECFD  F017         	call	___ftneg	;wreg free
  1785  0011A6  C001  F0C2         	movff	?___ftneg,sprintf@fval
  1786  0011AA  C002  F0C3         	movff	?___ftneg+1,sprintf@fval+1
  1787  0011AE  C003  F0C4         	movff	?___ftneg+2,sprintf@fval+2
  1788                           
  1789                           ;doprnt.c: 833: flag |= 0x03;
  1790  0011B2  0E03               	movlw	3
  1791  0011B4  0100               	movlb	0	; () banked
  1792  0011B6  13B4               	iorwf	sprintf@flag& (0+255),f,b
  1793  0011B8                     l453:
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;doprnt.c: 834: }
  1797                           ;doprnt.c: 835: exp = 0;
  1798                           
  1799                           ; BSR set to: 0
  1800  0011B8  0E00               	movlw	0
  1801  0011BA  6FBB               	movwf	(sprintf@exp+1)& (0+255),b
  1802  0011BC  0E00               	movlw	0
  1803  0011BE  6FBA               	movwf	sprintf@exp& (0+255),b
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;doprnt.c: 836: if( fval!=0) {
  1807  0011C0  51C2               	movf	sprintf@fval& (0+255),w,b
  1808  0011C2  11C3               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1809  0011C4  11C4               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1810  0011C6  B4D8               	btfsc	status,2,c
  1811  0011C8  D086               	goto	l458
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1815  0011CA  0E82               	movlw	130
  1816  0011CC  6E47               	movwf	??_sprintf& (0+255),c
  1817  0011CE  0EFF               	movlw	255
  1818  0011D0  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1819  0011D2  C0C2  F049         	movff	sprintf@fval,??_sprintf+2
  1820  0011D6  C0C3  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1821  0011DA  C0C4  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1822  0011DE  C0C5  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1823  0011E2  0E10               	movlw	16
  1824  0011E4  D005               	goto	u2610
  1825  0011E6                     u2615:
  1826  0011E6  90D8               	bcf	status,0,c
  1827  0011E8  324C               	rrcf	??_sprintf+5,f,c
  1828  0011EA  324B               	rrcf	??_sprintf+4,f,c
  1829  0011EC  324A               	rrcf	??_sprintf+3,f,c
  1830  0011EE  3249               	rrcf	??_sprintf+2,f,c
  1831  0011F0                     u2610:
  1832  0011F0  2EE8               	decfsz	wreg,f,c
  1833  0011F2  D7F9               	goto	u2615
  1834  0011F4  5049               	movf	??_sprintf+2,w,c
  1835  0011F6  2447               	addwf	??_sprintf,w,c
  1836  0011F8  6FBA               	movwf	sprintf@exp& (0+255),b
  1837  0011FA  0E00               	movlw	0
  1838  0011FC  2048               	addwfc	??_sprintf+1,w,c
  1839  0011FE  6FBB               	movwf	(sprintf@exp+1)& (0+255),b
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;doprnt.c: 838: exp--;
  1843  001200  07BA               	decf	sprintf@exp& (0+255),f,b
  1844  001202  A0D8               	btfss	status,0,c
  1845  001204  07BB               	decf	(sprintf@exp+1)& (0+255),f,b
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;doprnt.c: 839: exp *= 3;
  1849  001206  C0BA  F00F         	movff	sprintf@exp,___wmul@multiplier
  1850  00120A  C0BB  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1851  00120E  0E00               	movlw	0
  1852  001210  6E12               	movwf	___wmul@multiplicand+1,c
  1853  001212  0E03               	movlw	3
  1854  001214  6E11               	movwf	___wmul@multiplicand,c
  1855  001216  ECEA  F017         	call	___wmul	;wreg free
  1856  00121A  C00F  F0BA         	movff	?___wmul,sprintf@exp
  1857  00121E  C010  F0BB         	movff	?___wmul+1,sprintf@exp+1
  1858                           
  1859                           ;doprnt.c: 840: exp /= 10;
  1860  001222  C0BA  F007         	movff	sprintf@exp,___awdiv@dividend
  1861  001226  C0BB  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1862  00122A  0E00               	movlw	0
  1863  00122C  6E0A               	movwf	___awdiv@divisor+1,c
  1864  00122E  0E0A               	movlw	10
  1865  001230  6E09               	movwf	___awdiv@divisor,c
  1866  001232  ECBB  F014         	call	___awdiv	;wreg free
  1867  001236  C007  F0BA         	movff	?___awdiv,sprintf@exp
  1868  00123A  C008  F0BB         	movff	?___awdiv+1,sprintf@exp+1
  1869                           
  1870                           ;doprnt.c: 841: if(exp < 0)
  1871  00123E  0100               	movlb	0	; () banked
  1872  001240  AFBB               	btfss	(sprintf@exp+1)& (0+255),7,b
  1873  001242  D003               	goto	l455
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;doprnt.c: 842: exp--;
  1877  001244  07BA               	decf	sprintf@exp& (0+255),f,b
  1878  001246  A0D8               	btfss	status,0,c
  1879  001248  07BB               	decf	(sprintf@exp+1)& (0+255),f,b
  1880  00124A                     l455:
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1884                           
  1885                           ; BSR set to: 0
  1886  00124A  51BA               	movf	sprintf@exp& (0+255),w,b
  1887  00124C  0800               	sublw	0
  1888  00124E  ECCD  F00B         	call	_scale
  1889  001252  C024  F0BC         	movff	?_scale,sprintf@tmpval
  1890  001256  C025  F0BD         	movff	?_scale+1,sprintf@tmpval+1
  1891  00125A  C026  F0BE         	movff	?_scale+2,sprintf@tmpval+2
  1892                           
  1893                           ;doprnt.c: 847: tmpval.integ *= fval;
  1894  00125E  C0BC  F015         	movff	sprintf@tmpval,___ftmul@f1
  1895  001262  C0BD  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1896  001266  C0BE  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1897  00126A  C0C2  F018         	movff	sprintf@fval,___ftmul@f2
  1898  00126E  C0C3  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1899  001272  C0C4  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1900  001276  EC9F  F012         	call	___ftmul	;wreg free
  1901  00127A  C015  F0BC         	movff	?___ftmul,sprintf@tmpval
  1902  00127E  C016  F0BD         	movff	?___ftmul+1,sprintf@tmpval+1
  1903  001282  C017  F0BE         	movff	?___ftmul+2,sprintf@tmpval+2
  1904                           
  1905                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1906  001286  C0BC  F001         	movff	sprintf@tmpval,___ftge@ff1
  1907  00128A  C0BD  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1908  00128E  C0BE  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1909  001292  0E00               	movlw	0
  1910  001294  6E04               	movwf	___ftge@ff2,c
  1911  001296  0E80               	movlw	128
  1912  001298  6E05               	movwf	___ftge@ff2+1,c
  1913  00129A  0E3F               	movlw	63
  1914  00129C  6E06               	movwf	___ftge@ff2+2,c
  1915  00129E  ECE3  F013         	call	___ftge	;wreg free
  1916  0012A2  B0D8               	btfsc	status,0,c
  1917  0012A4  D005               	goto	l456
  1918                           
  1919                           ;doprnt.c: 849: exp--;
  1920  0012A6  0100               	movlb	0	; () banked
  1921  0012A8  07BA               	decf	sprintf@exp& (0+255),f,b
  1922  0012AA  A0D8               	btfss	status,0,c
  1923  0012AC  07BB               	decf	(sprintf@exp+1)& (0+255),f,b
  1924  0012AE  D013               	goto	l458
  1925  0012B0                     l456:
  1926                           
  1927                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1928                           
  1929                           ; BSR set to: 0
  1930  0012B0  C0BC  F001         	movff	sprintf@tmpval,___ftge@ff1
  1931  0012B4  C0BD  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1932  0012B8  C0BE  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1933  0012BC  0E00               	movlw	0
  1934  0012BE  6E04               	movwf	___ftge@ff2,c
  1935  0012C0  0E20               	movlw	32
  1936  0012C2  6E05               	movwf	___ftge@ff2+1,c
  1937  0012C4  0E41               	movlw	65
  1938  0012C6  6E06               	movwf	___ftge@ff2+2,c
  1939  0012C8  ECE3  F013         	call	___ftge	;wreg free
  1940  0012CC  A0D8               	btfss	status,0,c
  1941  0012CE  D003               	goto	l458
  1942                           
  1943                           ;doprnt.c: 851: exp++;
  1944  0012D0  0100               	movlb	0	; () banked
  1945  0012D2  4BBA               	infsnz	sprintf@exp& (0+255),f,b
  1946  0012D4  2BBB               	incf	(sprintf@exp+1)& (0+255),f,b
  1947  0012D6                     l458:
  1948                           
  1949                           ;doprnt.c: 852: }
  1950                           ;doprnt.c: 1112: if(prec <= 12)
  1951                           
  1952                           ; BSR set to: 0
  1953                           
  1954                           ; BSR set to: 0
  1955                           
  1956                           ; BSR set to: 0
  1957  0012D6  0100               	movlb	0	; () banked
  1958  0012D8  BFC1               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1959  0012DA  D006               	goto	u2650
  1960  0012DC  51C1               	movf	(sprintf@prec+1)& (0+255),w,b
  1961  0012DE  E11B               	bnz	l3268
  1962  0012E0  0E0D               	movlw	13
  1963  0012E2  5DC0               	subwf	sprintf@prec& (0+255),w,b
  1964  0012E4  B0D8               	btfsc	status,0,c
  1965  0012E6  D017               	goto	l459
  1966  0012E8                     u2650:
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;doprnt.c: 1113: fval += fround(prec);
  1970  0012E8  C0C2  F02E         	movff	sprintf@fval,___ftadd@f1
  1971  0012EC  C0C3  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1972  0012F0  C0C4  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1973  0012F4  51C0               	movf	sprintf@prec& (0+255),w,b
  1974  0012F6  ECD1  F00D         	call	_fround
  1975  0012FA  C024  F031         	movff	?_fround,___ftadd@f2
  1976  0012FE  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1977  001302  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1978  001306  EC22  F010         	call	___ftadd	;wreg free
  1979  00130A  C02E  F0C2         	movff	?___ftadd,sprintf@fval
  1980  00130E  C02F  F0C3         	movff	?___ftadd+1,sprintf@fval+1
  1981  001312  C030  F0C4         	movff	?___ftadd+2,sprintf@fval+2
  1982  001316                     l459:
  1983  001316                     l3268:
  1984                           
  1985                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1986  001316  0100               	movlb	0	; () banked
  1987  001318  BFBB               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1988  00131A  D006               	goto	u2660
  1989  00131C  51BB               	movf	(sprintf@exp+1)& (0+255),w,b
  1990  00131E  E120               	bnz	l3276
  1991  001320  0E0A               	movlw	10
  1992  001322  5DBA               	subwf	sprintf@exp& (0+255),w,b
  1993  001324  B0D8               	btfsc	status,0,c
  1994  001326  D01C               	goto	u2690
  1995  001328                     u2660:
  1996                           
  1997                           ; BSR set to: 0
  1998  001328  51C2               	movf	sprintf@fval& (0+255),w,b
  1999  00132A  11C3               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2000  00132C  11C4               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2001  00132E  B4D8               	btfsc	status,2,c
  2002  001330  D056               	goto	l460
  2003                           
  2004                           ; BSR set to: 0
  2005  001332  C0C2  F02B         	movff	sprintf@fval,___fttol@f1
  2006  001336  C0C3  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2007  00133A  C0C4  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2008  00133E  EC25  F012         	call	___fttol	;wreg free
  2009  001342  502B               	movf	?___fttol,w,c
  2010  001344  102C               	iorwf	?___fttol+1,w,c
  2011  001346  102D               	iorwf	?___fttol+2,w,c
  2012  001348  102E               	iorwf	?___fttol+3,w,c
  2013  00134A  A4D8               	btfss	status,2,c
  2014  00134C  D048               	goto	l460
  2015  00134E  0100               	movlb	0	; () banked
  2016  001350  BFBB               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2017  001352  D045               	goto	l460
  2018  001354  51BB               	movf	(sprintf@exp+1)& (0+255),w,b
  2019  001356  E104               	bnz	l3276
  2020  001358  0E02               	movlw	2
  2021  00135A  5DBA               	subwf	sprintf@exp& (0+255),w,b
  2022  00135C  A0D8               	btfss	status,0,c
  2023  00135E  D03F               	goto	l460
  2024  001360                     u2690:
  2025  001360                     l3276:
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2029  001360  C0BC  F001         	movff	sprintf@tmpval,___ftge@ff1
  2030  001364  C0BD  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2031  001368  C0BE  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2032  00136C  0E70               	movlw	112
  2033  00136E  6E04               	movwf	___ftge@ff2,c
  2034  001370  0E89               	movlw	137
  2035  001372  6E05               	movwf	___ftge@ff2+1,c
  2036  001374  0E40               	movlw	64
  2037  001376  6E06               	movwf	___ftge@ff2+2,c
  2038  001378  ECE3  F013         	call	___ftge	;wreg free
  2039  00137C  B0D8               	btfsc	status,0,c
  2040  00137E  D003               	goto	l463
  2041                           
  2042                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2043  001380  0100               	movlb	0	; () banked
  2044  001382  0EF7               	movlw	247
  2045  001384  D002               	goto	L1
  2046  001386                     l463:
  2047                           
  2048                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2049                           
  2050                           ; BSR set to: 0
  2051  001386  0100               	movlb	0	; () banked
  2052  001388  0EF8               	movlw	248
  2053  00138A                     L1:
  2054  00138A  27BA               	addwf	sprintf@exp& (0+255),f,b
  2055  00138C  0EFF               	movlw	255
  2056  00138E  23BB               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;doprnt.c: 1124: }
  2060                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2061                           
  2062                           ; BSR set to: 0
  2063  001390  51BA               	movf	sprintf@exp& (0+255),w,b
  2064  001392  ECCD  F00B         	call	_scale
  2065  001396  C024  F0BC         	movff	?_scale,sprintf@tmpval
  2066  00139A  C025  F0BD         	movff	?_scale+1,sprintf@tmpval+1
  2067  00139E  C026  F0BE         	movff	?_scale+2,sprintf@tmpval+2
  2068                           
  2069                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2070  0013A2  C0C2  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2071  0013A6  C0C3  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2072  0013AA  C0C4  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2073  0013AE  C0BC  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2074  0013B2  C0BD  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2075  0013B6  C0BE  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2076  0013BA  ECF8  F010         	call	__tdiv_to_l_	;wreg free
  2077  0013BE  C001  F0B6         	movff	?__tdiv_to_l_,sprintf@val
  2078  0013C2  C002  F0B7         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2079  0013C6  C003  F0B8         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2080  0013CA  C004  F0B9         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2081                           
  2082                           ;doprnt.c: 1129: fval = 0.0;
  2083  0013CE  0E00               	movlw	0
  2084  0013D0  0100               	movlb	0	; () banked
  2085  0013D2  6FC2               	movwf	sprintf@fval& (0+255),b
  2086  0013D4  0E00               	movlw	0
  2087  0013D6  6FC3               	movwf	(sprintf@fval+1)& (0+255),b
  2088  0013D8  0E00               	movlw	0
  2089  0013DA  6FC4               	movwf	(sprintf@fval+2)& (0+255),b
  2090                           
  2091                           ;doprnt.c: 1130: } else {
  2092  0013DC  D033               	goto	l469
  2093  0013DE                     l460:
  2094                           
  2095                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2096                           
  2097                           ; BSR set to: 0
  2098  0013DE  C0C2  F02B         	movff	sprintf@fval,___fttol@f1
  2099  0013E2  C0C3  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2100  0013E6  C0C4  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2101  0013EA  EC25  F012         	call	___fttol	;wreg free
  2102  0013EE  C02B  F0B6         	movff	?___fttol,sprintf@val
  2103  0013F2  C02C  F0B7         	movff	?___fttol+1,sprintf@val+1
  2104  0013F6  C02D  F0B8         	movff	?___fttol+2,sprintf@val+2
  2105  0013FA  C02E  F0B9         	movff	?___fttol+3,sprintf@val+3
  2106                           
  2107                           ;doprnt.c: 1132: fval -= (double)val;
  2108  0013FE  C0C2  F03A         	movff	sprintf@fval,___ftsub@f1
  2109  001402  C0C3  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2110  001406  C0C4  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2111  00140A  C0B6  F009         	movff	sprintf@val,___lltoft@c
  2112  00140E  C0B7  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2113  001412  C0B8  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2114  001416  C0B9  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2115  00141A  EC92  F016         	call	___lltoft	;wreg free
  2116  00141E  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2117  001422  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2118  001426  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2119  00142A  ECB6  F017         	call	___ftsub	;wreg free
  2120  00142E  C03A  F0C2         	movff	?___ftsub,sprintf@fval
  2121  001432  C03B  F0C3         	movff	?___ftsub+1,sprintf@fval+1
  2122  001436  C03C  F0C4         	movff	?___ftsub+2,sprintf@fval+2
  2123                           
  2124                           ;doprnt.c: 1133: exp = 0;
  2125  00143A  0E00               	movlw	0
  2126  00143C  0100               	movlb	0	; () banked
  2127  00143E  6FBB               	movwf	(sprintf@exp+1)& (0+255),b
  2128  001440  0E00               	movlw	0
  2129  001442  6FBA               	movwf	sprintf@exp& (0+255),b
  2130  001444                     l469:
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;doprnt.c: 1134: }
  2134                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2135                           
  2136                           ; BSR set to: 0
  2137  001444  0E01               	movlw	1
  2138  001446  6FC5               	movwf	sprintf@c& (0+255),b
  2139  001448                     l3296:
  2140                           
  2141                           ; BSR set to: 0
  2142  001448  0E0A               	movlw	10
  2143  00144A  19C5               	xorwf	sprintf@c& (0+255),w,b
  2144  00144C  B4D8               	btfsc	status,2,c
  2145  00144E  D018               	goto	u2730
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;doprnt.c: 1137: if(val < dpowers[c])
  2149                           
  2150                           ; BSR set to: 0
  2151                           
  2152                           ; BSR set to: 0
  2153  001450  51C5               	movf	sprintf@c& (0+255),w,b
  2154  001452  0D04               	mullw	4
  2155  001454  0E01               	movlw	low _dpowers
  2156  001456  24F3               	addwf	prodl,w,c
  2157  001458  6EF6               	movwf	tblptrl,c
  2158  00145A  0E10               	movlw	high _dpowers
  2159  00145C  20F4               	addwfc	prodh,w,c
  2160  00145E  6EF7               	movwf	tblptrh,c
  2161  001460                     	if	0	;There are less than 3 active tblptr bytes
  2162  001460                     	endif
  2163  001460  0009               	tblrd		*+
  2164  001462  50F5               	movf	tablat,w,c
  2165  001464  5DB6               	subwf	sprintf@val& (0+255),w,b
  2166  001466  0009               	tblrd		*+
  2167  001468  50F5               	movf	tablat,w,c
  2168  00146A  59B7               	subwfb	(sprintf@val+1)& (0+255),w,b
  2169  00146C  0009               	tblrd		*+
  2170  00146E  50F5               	movf	tablat,w,c
  2171  001470  59B8               	subwfb	(sprintf@val+2)& (0+255),w,b
  2172  001472  0009               	tblrd		*+
  2173  001474  50F5               	movf	tablat,w,c
  2174  001476  59B9               	subwfb	(sprintf@val+3)& (0+255),w,b
  2175  001478  A0D8               	btfss	status,0,c
  2176  00147A  D002               	goto	u2730
  2177                           
  2178                           ; BSR set to: 0
  2179                           
  2180                           ; BSR set to: 0
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;doprnt.c: 1138: break;
  2184  00147C  2BC5               	incf	sprintf@c& (0+255),f,b
  2185  00147E  D7E4               	goto	l3296
  2186  001480                     u2730:
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;doprnt.c: 1175: {
  2190                           ;doprnt.c: 1188: if(flag & 0x03)
  2191                           
  2192                           ; BSR set to: 0
  2193  001480  0E03               	movlw	3
  2194  001482  15B4               	andwf	sprintf@flag& (0+255),w,b
  2195  001484  6E47               	movwf	??_sprintf& (0+255),c
  2196  001486  0E00               	movlw	0
  2197  001488  15B5               	andwf	(sprintf@flag+1)& (0+255),w,b
  2198  00148A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2199  00148C  5047               	movf	??_sprintf,w,c
  2200  00148E  1048               	iorwf	??_sprintf+1,w,c
  2201  001490  B4D8               	btfsc	status,2,c
  2202  001492  D050               	goto	l474
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2206  001494  C040  FFD9         	movff	sprintf@sp,fsr2l
  2207  001498  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2208  00149C  0E2D               	movlw	45
  2209  00149E  D047               	goto	L2
  2210  0014A0                     
  2211                           ; BSR set to: 0
  2212                           ;doprnt.c: 1200: {
  2213                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2214                           
  2215                           ; BSR set to: 0
  2216  0014A0  C0B6  F001         	movff	sprintf@val,___lldiv@dividend
  2217  0014A4  C0B7  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2218  0014A8  C0B8  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2219  0014AC  C0B9  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2220  0014B0  51C5               	movf	sprintf@c& (0+255),w,b
  2221  0014B2  0D04               	mullw	4
  2222  0014B4  0E01               	movlw	low _dpowers
  2223  0014B6  24F3               	addwf	prodl,w,c
  2224  0014B8  6EF6               	movwf	tblptrl,c
  2225  0014BA  0E10               	movlw	high _dpowers
  2226  0014BC  20F4               	addwfc	prodh,w,c
  2227  0014BE  6EF7               	movwf	tblptrh,c
  2228  0014C0                     	if	0	;There are less than 3 active tblptr bytes
  2229  0014C0                     	endif
  2230  0014C0  0009               	tblrd		*+
  2231  0014C2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2232  0014C6  0009               	tblrd		*+
  2233  0014C8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2234  0014CC  0009               	tblrd		*+
  2235  0014CE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2236  0014D2  000A               	tblrd		*-
  2237  0014D4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2238  0014D8  ECFD  F014         	call	___lldiv	;wreg free
  2239  0014DC  C001  F0BC         	movff	?___lldiv,sprintf@tmpval
  2240  0014E0  C002  F0BD         	movff	?___lldiv+1,sprintf@tmpval+1
  2241  0014E4  C003  F0BE         	movff	?___lldiv+2,sprintf@tmpval+2
  2242  0014E8  C004  F0BF         	movff	?___lldiv+3,sprintf@tmpval+3
  2243                           
  2244                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2245  0014EC  C0BC  F001         	movff	sprintf@tmpval,___llmod@dividend
  2246  0014F0  C0BD  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2247  0014F4  C0BE  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2248  0014F8  C0BF  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2249  0014FC  0E0A               	movlw	10
  2250  0014FE  6E05               	movwf	___llmod@divisor,c
  2251  001500  0E00               	movlw	0
  2252  001502  6E06               	movwf	___llmod@divisor+1,c
  2253  001504  0E00               	movlw	0
  2254  001506  6E07               	movwf	___llmod@divisor+2,c
  2255  001508  0E00               	movlw	0
  2256  00150A  6E08               	movwf	___llmod@divisor+3,c
  2257  00150C  EC5F  F016         	call	___llmod	;wreg free
  2258  001510  C001  F0BC         	movff	?___llmod,sprintf@tmpval
  2259  001514  C002  F0BD         	movff	?___llmod+1,sprintf@tmpval+1
  2260  001518  C003  F0BE         	movff	?___llmod+2,sprintf@tmpval+2
  2261  00151C  C004  F0BF         	movff	?___llmod+3,sprintf@tmpval+3
  2262                           
  2263                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2264  001520  0100               	movlb	0	; () banked
  2265  001522  51BC               	movf	sprintf@tmpval& (0+255),w,b
  2266  001524  0F30               	addlw	48
  2267  001526  C040  FFD9         	movff	sprintf@sp,fsr2l
  2268  00152A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2269  00152E                     L2:
  2270  00152E  6EDF               	movwf	indf2,c
  2271                           
  2272                           ; BSR set to: 0
  2273  001530  4A40               	infsnz	sprintf@sp,f,c
  2274  001532  2A41               	incf	sprintf@sp+1,f,c
  2275  001534                     l474:
  2276                           
  2277                           ; BSR set to: 0
  2278                           
  2279                           ; BSR set to: 0
  2280  001534  07C5               	decf	sprintf@c& (0+255),f,b
  2281  001536  29C5               	incf	sprintf@c& (0+255),w,b
  2282  001538  B4D8               	btfsc	status,2,c
  2283  00153A  D00C               	goto	l477
  2284  00153C  D7B1               	goto	l475
  2285  00153E                     l3324:
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2289  00153E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2290  001542  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2291  001546  0E30               	movlw	48
  2292  001548  6EDF               	movwf	indf2,c
  2293                           
  2294                           ; BSR set to: 0
  2295  00154A  4A40               	infsnz	sprintf@sp,f,c
  2296  00154C  2A41               	incf	sprintf@sp+1,f,c
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;doprnt.c: 1209: exp--;
  2300  00154E  07BA               	decf	sprintf@exp& (0+255),f,b
  2301  001550  A0D8               	btfss	status,0,c
  2302  001552  07BB               	decf	(sprintf@exp+1)& (0+255),f,b
  2303  001554                     l477:
  2304                           
  2305                           ; BSR set to: 0
  2306                           
  2307                           ; BSR set to: 0
  2308  001554  BFBB               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2309  001556  D005               	goto	u2760
  2310  001558  51BB               	movf	(sprintf@exp+1)& (0+255),w,b
  2311  00155A  E1F1               	bnz	l3324
  2312  00155C  05BA               	decf	sprintf@exp& (0+255),w,b
  2313  00155E  B0D8               	btfsc	status,0,c
  2314  001560  D7EE               	goto	l478
  2315  001562                     u2760:
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;doprnt.c: 1210: }
  2319                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2320                           
  2321                           ; BSR set to: 0
  2322  001562  BFC1               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2323  001564  D009               	goto	l480
  2324  001566  51C1               	movf	(sprintf@prec+1)& (0+255),w,b
  2325  001568  E104               	bnz	u2770
  2326  00156A  0E09               	movlw	9
  2327  00156C  5DC0               	subwf	sprintf@prec& (0+255),w,b
  2328  00156E  A0D8               	btfss	status,0,c
  2329  001570  D003               	goto	l480
  2330  001572                     u2770:
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2334  001572  0E08               	movlw	8
  2335  001574  6FC5               	movwf	sprintf@c& (0+255),b
  2336  001576  D002               	goto	l481
  2337  001578                     l480:
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;doprnt.c: 1213: else
  2341                           ;doprnt.c: 1214: c = prec;
  2342  001578  C0C0  F0C5         	movff	sprintf@prec,sprintf@c
  2343  00157C                     l481:
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;doprnt.c: 1215: prec -= c;
  2347                           
  2348                           ; BSR set to: 0
  2349  00157C  51C5               	movf	sprintf@c& (0+255),w,b
  2350  00157E  5FC0               	subwf	sprintf@prec& (0+255),f,b
  2351  001580  0E00               	movlw	0
  2352  001582  BFC5               	btfsc	sprintf@c& (0+255),7,b
  2353  001584  0EFF               	movlw	255
  2354  001586  5BC1               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;doprnt.c: 1219: if(c)
  2358  001588  51C5               	movf	sprintf@c& (0+255),w,b
  2359  00158A  B4D8               	btfsc	status,2,c
  2360  00158C  D008               	goto	l482
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2364  00158E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2365  001592  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2366  001596  0E2E               	movlw	46
  2367  001598  6EDF               	movwf	indf2,c
  2368                           
  2369                           ; BSR set to: 0
  2370  00159A  4A40               	infsnz	sprintf@sp,f,c
  2371  00159C  2A41               	incf	sprintf@sp+1,f,c
  2372  00159E                     l482:
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2376                           
  2377                           ; BSR set to: 0
  2378  00159E  51C5               	movf	sprintf@c& (0+255),w,b
  2379  0015A0  ECCD  F00B         	call	_scale
  2380  0015A4  C024  F0AF         	movff	?_scale,_sprintf$1558
  2381  0015A8  C025  F0B0         	movff	?_scale+1,_sprintf$1558+1
  2382  0015AC  C026  F0B1         	movff	?_scale+2,_sprintf$1558+2
  2383                           
  2384                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2385  0015B0  C0C2  F018         	movff	sprintf@fval,___ftmul@f2
  2386  0015B4  C0C3  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2387  0015B8  C0C4  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2388  0015BC  C0AF  F015         	movff	_sprintf$1558,___ftmul@f1
  2389  0015C0  C0B0  F016         	movff	_sprintf$1558+1,___ftmul@f1+1
  2390  0015C4  C0B1  F017         	movff	_sprintf$1558+2,___ftmul@f1+2
  2391  0015C8  EC9F  F012         	call	___ftmul	;wreg free
  2392  0015CC  C015  F02B         	movff	?___ftmul,___fttol@f1
  2393  0015D0  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2394  0015D4  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2395  0015D8  EC25  F012         	call	___fttol	;wreg free
  2396  0015DC  C02B  F0B6         	movff	?___fttol,sprintf@val
  2397  0015E0  C02C  F0B7         	movff	?___fttol+1,sprintf@val+1
  2398  0015E4  C02D  F0B8         	movff	?___fttol+2,sprintf@val+2
  2399  0015E8  C02E  F0B9         	movff	?___fttol+3,sprintf@val+3
  2400                           
  2401                           ;doprnt.c: 1228: while(c--) {
  2402  0015EC  D071               	goto	l483
  2403  0015EE                     
  2404                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2405  0015EE  C0B6  F001         	movff	sprintf@val,___lldiv@dividend
  2406  0015F2  C0B7  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2407  0015F6  C0B8  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2408  0015FA  C0B9  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2409  0015FE  0100               	movlb	0	; () banked
  2410  001600  51C5               	movf	sprintf@c& (0+255),w,b
  2411  001602  0D04               	mullw	4
  2412  001604  0E01               	movlw	low _dpowers
  2413  001606  24F3               	addwf	prodl,w,c
  2414  001608  6EF6               	movwf	tblptrl,c
  2415  00160A  0E10               	movlw	high _dpowers
  2416  00160C  20F4               	addwfc	prodh,w,c
  2417  00160E  6EF7               	movwf	tblptrh,c
  2418  001610                     	if	0	;There are less than 3 active tblptr bytes
  2419  001610                     	endif
  2420  001610  0009               	tblrd		*+
  2421  001612  CFF5 F005          	movff	tablat,___lldiv@divisor
  2422  001616  0009               	tblrd		*+
  2423  001618  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2424  00161C  0009               	tblrd		*+
  2425  00161E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2426  001622  000A               	tblrd		*-
  2427  001624  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2428  001628  ECFD  F014         	call	___lldiv	;wreg free
  2429  00162C  C001  F0BC         	movff	?___lldiv,sprintf@tmpval
  2430  001630  C002  F0BD         	movff	?___lldiv+1,sprintf@tmpval+1
  2431  001634  C003  F0BE         	movff	?___lldiv+2,sprintf@tmpval+2
  2432  001638  C004  F0BF         	movff	?___lldiv+3,sprintf@tmpval+3
  2433                           
  2434                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2435  00163C  C0BC  F001         	movff	sprintf@tmpval,___llmod@dividend
  2436  001640  C0BD  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2437  001644  C0BE  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2438  001648  C0BF  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2439  00164C  0E0A               	movlw	10
  2440  00164E  6E05               	movwf	___llmod@divisor,c
  2441  001650  0E00               	movlw	0
  2442  001652  6E06               	movwf	___llmod@divisor+1,c
  2443  001654  0E00               	movlw	0
  2444  001656  6E07               	movwf	___llmod@divisor+2,c
  2445  001658  0E00               	movlw	0
  2446  00165A  6E08               	movwf	___llmod@divisor+3,c
  2447  00165C  EC5F  F016         	call	___llmod	;wreg free
  2448  001660  C001  F0BC         	movff	?___llmod,sprintf@tmpval
  2449  001664  C002  F0BD         	movff	?___llmod+1,sprintf@tmpval+1
  2450  001668  C003  F0BE         	movff	?___llmod+2,sprintf@tmpval+2
  2451  00166C  C004  F0BF         	movff	?___llmod+3,sprintf@tmpval+3
  2452                           
  2453                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2454  001670  0100               	movlb	0	; () banked
  2455  001672  51BC               	movf	sprintf@tmpval& (0+255),w,b
  2456  001674  0F30               	addlw	48
  2457  001676  C040  FFD9         	movff	sprintf@sp,fsr2l
  2458  00167A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2459  00167E  6EDF               	movwf	indf2,c
  2460                           
  2461                           ; BSR set to: 0
  2462  001680  4A40               	infsnz	sprintf@sp,f,c
  2463  001682  2A41               	incf	sprintf@sp+1,f,c
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;doprnt.c: 1232: val %= dpowers[c];
  2467  001684  C0B6  F001         	movff	sprintf@val,___llmod@dividend
  2468  001688  C0B7  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2469  00168C  C0B8  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2470  001690  C0B9  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2471  001694  51C5               	movf	sprintf@c& (0+255),w,b
  2472  001696  0D04               	mullw	4
  2473  001698  0E01               	movlw	low _dpowers
  2474  00169A  24F3               	addwf	prodl,w,c
  2475  00169C  6EF6               	movwf	tblptrl,c
  2476  00169E  0E10               	movlw	high _dpowers
  2477  0016A0  20F4               	addwfc	prodh,w,c
  2478  0016A2  6EF7               	movwf	tblptrh,c
  2479  0016A4                     	if	0	;There are less than 3 active tblptr bytes
  2480  0016A4                     	endif
  2481  0016A4  0009               	tblrd		*+
  2482  0016A6  CFF5 F005          	movff	tablat,___llmod@divisor
  2483  0016AA  0009               	tblrd		*+
  2484  0016AC  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2485  0016B0  0009               	tblrd		*+
  2486  0016B2  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2487  0016B6  000A               	tblrd		*-
  2488  0016B8  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2489  0016BC  EC5F  F016         	call	___llmod	;wreg free
  2490  0016C0  C001  F0B6         	movff	?___llmod,sprintf@val
  2491  0016C4  C002  F0B7         	movff	?___llmod+1,sprintf@val+1
  2492  0016C8  C003  F0B8         	movff	?___llmod+2,sprintf@val+2
  2493  0016CC  C004  F0B9         	movff	?___llmod+3,sprintf@val+3
  2494  0016D0                     l483:
  2495  0016D0  0100               	movlb	0	; () banked
  2496  0016D2  07C5               	decf	sprintf@c& (0+255),f,b
  2497  0016D4  29C5               	incf	sprintf@c& (0+255),w,b
  2498  0016D6  B4D8               	btfsc	status,2,c
  2499  0016D8  D00C               	goto	l486
  2500  0016DA  D789               	goto	l484
  2501  0016DC                     
  2502                           ; BSR set to: 0
  2503                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2504                           
  2505                           ; BSR set to: 0
  2506  0016DC  C040  FFD9         	movff	sprintf@sp,fsr2l
  2507  0016E0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2508  0016E4  0E30               	movlw	48
  2509  0016E6  6EDF               	movwf	indf2,c
  2510                           
  2511                           ; BSR set to: 0
  2512  0016E8  4A40               	infsnz	sprintf@sp,f,c
  2513  0016EA  2A41               	incf	sprintf@sp+1,f,c
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;doprnt.c: 1237: prec--;
  2517  0016EC  07C0               	decf	sprintf@prec& (0+255),f,b
  2518  0016EE  A0D8               	btfss	status,0,c
  2519  0016F0  07C1               	decf	(sprintf@prec+1)& (0+255),f,b
  2520  0016F2                     l486:
  2521                           
  2522                           ; BSR set to: 0
  2523                           
  2524                           ; BSR set to: 0
  2525  0016F2  51C0               	movf	sprintf@prec& (0+255),w,b
  2526  0016F4  11C1               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2527  0016F6  B4D8               	btfsc	status,2,c
  2528  0016F8  D03D               	goto	l493
  2529  0016FA  D7F0               	goto	l487
  2530  0016FC                     l451:
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;doprnt.c: 1246: }
  2534                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2535                           
  2536                           ; BSR set to: 0
  2537  0016FC  51C0               	movf	sprintf@prec& (0+255),w,b
  2538  0016FE  11C1               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2539  001700  A4D8               	btfss	status,2,c
  2540  001702  D008               	goto	l489
  2541                           
  2542                           ; BSR set to: 0
  2543  001704  51B6               	movf	sprintf@val& (0+255),w,b
  2544  001706  11B7               	iorwf	(sprintf@val+1)& (0+255),w,b
  2545  001708  11B8               	iorwf	(sprintf@val+2)& (0+255),w,b
  2546  00170A  11B9               	iorwf	(sprintf@val+3)& (0+255),w,b
  2547  00170C  A4D8               	btfss	status,2,c
  2548  00170E  D002               	goto	l489
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;doprnt.c: 1291: prec++;
  2552  001710  4BC0               	infsnz	sprintf@prec& (0+255),f,b
  2553  001712  2BC1               	incf	(sprintf@prec+1)& (0+255),f,b
  2554  001714                     l489:
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;doprnt.c: 1339: if(c < prec)
  2558                           
  2559                           ; BSR set to: 0
  2560  001714  0E80               	movlw	128
  2561  001716  BFC5               	btfsc	sprintf@c& (0+255),7,b
  2562  001718  0E7F               	movlw	127
  2563  00171A  6E47               	movwf	??_sprintf& (0+255),c
  2564  00171C  51C0               	movf	sprintf@prec& (0+255),w,b
  2565  00171E  5DC5               	subwf	sprintf@c& (0+255),w,b
  2566  001720  51C1               	movf	(sprintf@prec+1)& (0+255),w,b
  2567  001722  0A80               	xorlw	128
  2568  001724  5847               	subwfb	??_sprintf& (0+255),w,c
  2569  001726  B0D8               	btfsc	status,0,c
  2570  001728  D003               	goto	l490
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;doprnt.c: 1340: c = prec;
  2574  00172A  C0C0  F0C5         	movff	sprintf@prec,sprintf@c
  2575  00172E  D010               	goto	l492
  2576  001730                     l490:
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;doprnt.c: 1341: else if(prec < c)
  2580                           
  2581                           ; BSR set to: 0
  2582  001730  51C1               	movf	(sprintf@prec+1)& (0+255),w,b
  2583  001732  0A80               	xorlw	128
  2584  001734  6E47               	movwf	??_sprintf& (0+255),c
  2585  001736  51C5               	movf	sprintf@c& (0+255),w,b
  2586  001738  5DC0               	subwf	sprintf@prec& (0+255),w,b
  2587  00173A  0E80               	movlw	128
  2588  00173C  BFC5               	btfsc	sprintf@c& (0+255),7,b
  2589  00173E  0E7F               	movlw	127
  2590  001740  5847               	subwfb	??_sprintf& (0+255),w,c
  2591  001742  B0D8               	btfsc	status,0,c
  2592  001744  D005               	goto	l492
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;doprnt.c: 1342: prec = c;
  2596  001746  51C5               	movf	sprintf@c& (0+255),w,b
  2597  001748  6FC0               	movwf	sprintf@prec& (0+255),b
  2598  00174A  6BC1               	clrf	(sprintf@prec+1)& (0+255),b
  2599  00174C  BFC0               	btfsc	sprintf@prec& (0+255),7,b
  2600  00174E  07C1               	decf	(sprintf@prec+1)& (0+255),f,b
  2601  001750                     l492:
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;doprnt.c: 1422: {
  2605                           ;doprnt.c: 1438: if(flag & 0x03)
  2606                           
  2607                           ; BSR set to: 0
  2608                           
  2609                           ; BSR set to: 0
  2610  001750  0E03               	movlw	3
  2611  001752  15B4               	andwf	sprintf@flag& (0+255),w,b
  2612  001754  6E47               	movwf	??_sprintf& (0+255),c
  2613  001756  0E00               	movlw	0
  2614  001758  15B5               	andwf	(sprintf@flag+1)& (0+255),w,b
  2615  00175A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2616  00175C  5047               	movf	??_sprintf,w,c
  2617  00175E  1048               	iorwf	??_sprintf+1,w,c
  2618  001760  B4D8               	btfsc	status,2,c
  2619  001762  D008               	goto	l493
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2623  001764  C040  FFD9         	movff	sprintf@sp,fsr2l
  2624  001768  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2625  00176C  0E2D               	movlw	45
  2626  00176E  6EDF               	movwf	indf2,c
  2627  001770                     l3386:
  2628                           
  2629                           ; BSR set to: 0
  2630  001770  4A40               	infsnz	sprintf@sp,f,c
  2631  001772  2A41               	incf	sprintf@sp+1,f,c
  2632  001774                     l493:
  2633                           
  2634                           ; BSR set to: 0
  2635                           
  2636                           ; BSR set to: 0
  2637                           
  2638                           ; BSR set to: 0
  2639  001774  C042  FFF6         	movff	sprintf@f,tblptrl
  2640  001778  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2641  00177C  4A42               	infsnz	sprintf@f,f,c
  2642  00177E  2A43               	incf	sprintf@f+1,f,c
  2643  001780                     	if	0	;tblptru may be non-zero
  2644  001780                     	endif
  2645  001780                     	if	0	;tblptru may be non-zero
  2646  001780                     	endif
  2647  001780  0008               	tblrd		*
  2648  001782  CFF5 F0C5          	movff	tablat,sprintf@c
  2649  001786  51C5               	movf	sprintf@c& (0+255),w,b
  2650  001788  A4D8               	btfss	status,2,c
  2651  00178A  D489               	goto	l438
  2652  00178C                     u2860:
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;doprnt.c: 1538: *sp = 0;
  2656                           
  2657                           ; BSR set to: 0
  2658                           
  2659                           ;doprnt.c: 1469: }
  2660                           ;doprnt.c: 1533: }
  2661                           ;doprnt.c: 1535: alldone:
  2662                           
  2663                           ; BSR set to: 0
  2664  00178C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2665  001790  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2666  001794  0E00               	movlw	0
  2667  001796  6EDF               	movwf	indf2,c
  2668  001798  0012               	return	
  2669  00179A                     __end_of_sprintf:
  2670                           	opt stack 0
  2671                           tblptru	equ	0xFF8
  2672                           tblptrh	equ	0xFF7
  2673                           tblptrl	equ	0xFF6
  2674                           tablat	equ	0xFF5
  2675                           prodh	equ	0xFF4
  2676                           prodl	equ	0xFF3
  2677                           postinc0	equ	0xFEE
  2678                           wreg	equ	0xFE8
  2679                           indf2	equ	0xFDF
  2680                           postinc2	equ	0xFDE
  2681                           postdec2	equ	0xFDD
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _scale *****************
  2687 ;; Defined at:
  2688 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  scl             1    wreg     char 
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  scl             1   41[COMRAM] char 
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  3   35[COMRAM] char 
  2695 ;; Registers used:
  2696 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2702 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;Total ram usage:        7 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:    2
  2709 ;; This function calls:
  2710 ;;		___awdiv
  2711 ;;		___awmod
  2712 ;;		___ftmul
  2713 ;;		___wmul
  2714 ;; This function is called by:
  2715 ;;		_sprintf
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text2
  2720  00179A                     __ptext2:
  2721                           	opt stack 0
  2722  00179A                     _scale:
  2723                           	opt stack 27
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;incstack = 0
  2727                           ;scale@scl stored from wreg
  2728  00179A  6E2A               	movwf	scale@scl,c
  2729                           
  2730                           ;doprnt.c: 428: if(scl < 0) {
  2731  00179C  AE2A               	btfss	scale@scl,7,c
  2732  00179E  D101               	goto	l427
  2733                           
  2734                           ;doprnt.c: 429: scl = -scl;
  2735  0017A0  6C2A               	negf	scale@scl,c
  2736                           
  2737                           ;doprnt.c: 430: if(scl>=110)
  2738  0017A2  502A               	movf	scale@scl,w,c
  2739  0017A4  0A80               	xorlw	128
  2740  0017A6  0F12               	addlw	-238
  2741  0017A8  A0D8               	btfss	status,0,c
  2742  0017AA  D091               	goto	l428
  2743                           
  2744                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2745  0017AC  0E00               	movlw	0
  2746  0017AE  6E12               	movwf	___wmul@multiplicand+1,c
  2747  0017B0  0E03               	movlw	3
  2748  0017B2  6E11               	movwf	___wmul@multiplicand,c
  2749  0017B4  0E00               	movlw	0
  2750  0017B6  6E0A               	movwf	___awdiv@divisor+1,c
  2751  0017B8  0E0A               	movlw	10
  2752  0017BA  6E09               	movwf	___awdiv@divisor,c
  2753  0017BC  0E00               	movlw	0
  2754  0017BE  6E04               	movwf	___awmod@divisor+1,c
  2755  0017C0  0E64               	movlw	100
  2756  0017C2  6E03               	movwf	___awmod@divisor,c
  2757  0017C4  502A               	movf	scale@scl,w,c
  2758  0017C6  6E01               	movwf	___awmod@dividend,c
  2759  0017C8  6A02               	clrf	___awmod@dividend+1,c
  2760  0017CA  BE01               	btfsc	___awmod@dividend,7,c
  2761  0017CC  0602               	decf	___awmod@dividend+1,f,c
  2762  0017CE  ECF1  F015         	call	___awmod	;wreg free
  2763  0017D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2764  0017D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2765  0017DA  ECBB  F014         	call	___awdiv	;wreg free
  2766  0017DE  0E09               	movlw	9
  2767  0017E0  2407               	addwf	?___awdiv,w,c
  2768  0017E2  6E0F               	movwf	___wmul@multiplier,c
  2769  0017E4  0E00               	movlw	0
  2770  0017E6  2008               	addwfc	?___awdiv+1,w,c
  2771  0017E8  6E10               	movwf	___wmul@multiplier+1,c
  2772  0017EA  ECEA  F017         	call	___wmul	;wreg free
  2773  0017EE  0E50               	movlw	low __npowers_
  2774  0017F0  240F               	addwf	?___wmul,w,c
  2775  0017F2  6EF6               	movwf	tblptrl,c
  2776  0017F4  0E10               	movlw	high __npowers_
  2777  0017F6  2010               	addwfc	?___wmul+1,w,c
  2778  0017F8  6EF7               	movwf	tblptrh,c
  2779  0017FA                     	if	0	;There are less than 3 active tblptr bytes
  2780  0017FA                     	endif
  2781  0017FA  0009               	tblrd		*+
  2782  0017FC  CFF5 F018          	movff	tablat,___ftmul@f2
  2783  001800  0009               	tblrd		*+
  2784  001802  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2785  001806  000A               	tblrd		*-
  2786  001808  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2787  00180C  0E00               	movlw	0
  2788  00180E  6E0A               	movwf	___awdiv@divisor+1,c
  2789  001810  0E64               	movlw	100
  2790  001812  6E09               	movwf	___awdiv@divisor,c
  2791  001814  502A               	movf	scale@scl,w,c
  2792  001816  6E07               	movwf	___awdiv@dividend,c
  2793  001818  6A08               	clrf	___awdiv@dividend+1,c
  2794  00181A  BE07               	btfsc	___awdiv@dividend,7,c
  2795  00181C  0608               	decf	___awdiv@dividend+1,f,c
  2796  00181E  ECBB  F014         	call	___awdiv	;wreg free
  2797  001822  0E12               	movlw	18
  2798  001824  2407               	addwf	?___awdiv,w,c
  2799  001826  6E0F               	movwf	___wmul@multiplier,c
  2800  001828  0E00               	movlw	0
  2801  00182A  2008               	addwfc	?___awdiv+1,w,c
  2802  00182C  6E10               	movwf	___wmul@multiplier+1,c
  2803  00182E  0E00               	movlw	0
  2804  001830  6E12               	movwf	___wmul@multiplicand+1,c
  2805  001832  0E03               	movlw	3
  2806  001834  6E11               	movwf	___wmul@multiplicand,c
  2807  001836  ECEA  F017         	call	___wmul	;wreg free
  2808  00183A  0E50               	movlw	low __npowers_
  2809  00183C  240F               	addwf	?___wmul,w,c
  2810  00183E  6EF6               	movwf	tblptrl,c
  2811  001840  0E10               	movlw	high __npowers_
  2812  001842  2010               	addwfc	?___wmul+1,w,c
  2813  001844  6EF7               	movwf	tblptrh,c
  2814  001846                     	if	0	;There are less than 3 active tblptr bytes
  2815  001846                     	endif
  2816  001846  0009               	tblrd		*+
  2817  001848  CFF5 F015          	movff	tablat,___ftmul@f1
  2818  00184C  0009               	tblrd		*+
  2819  00184E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2820  001852  000A               	tblrd		*-
  2821  001854  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2822  001858  EC9F  F012         	call	___ftmul	;wreg free
  2823  00185C  C015  F027         	movff	?___ftmul,_scale$1557
  2824  001860  C016  F028         	movff	?___ftmul+1,_scale$1557+1
  2825  001864  C017  F029         	movff	?___ftmul+2,_scale$1557+2
  2826                           
  2827                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2828  001868  C027  F015         	movff	_scale$1557,___ftmul@f1
  2829  00186C  C028  F016         	movff	_scale$1557+1,___ftmul@f1+1
  2830  001870  C029  F017         	movff	_scale$1557+2,___ftmul@f1+2
  2831  001874  0E00               	movlw	0
  2832  001876  6E12               	movwf	___wmul@multiplicand+1,c
  2833  001878  0E03               	movlw	3
  2834  00187A  6E11               	movwf	___wmul@multiplicand,c
  2835  00187C  0E00               	movlw	0
  2836  00187E  6E04               	movwf	___awmod@divisor+1,c
  2837  001880  0E0A               	movlw	10
  2838  001882  6E03               	movwf	___awmod@divisor,c
  2839  001884  502A               	movf	scale@scl,w,c
  2840  001886  6E01               	movwf	___awmod@dividend,c
  2841  001888  6A02               	clrf	___awmod@dividend+1,c
  2842  00188A  BE01               	btfsc	___awmod@dividend,7,c
  2843  00188C  0602               	decf	___awmod@dividend+1,f,c
  2844  00188E  ECF1  F015         	call	___awmod	;wreg free
  2845  001892  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2846  001896  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2847  00189A  ECEA  F017         	call	___wmul	;wreg free
  2848  00189E  0E50               	movlw	low __npowers_
  2849  0018A0  240F               	addwf	?___wmul,w,c
  2850  0018A2  6EF6               	movwf	tblptrl,c
  2851  0018A4  0E10               	movlw	high __npowers_
  2852  0018A6  2010               	addwfc	?___wmul+1,w,c
  2853  0018A8  6EF7               	movwf	tblptrh,c
  2854  0018AA                     	if	0	;There are less than 3 active tblptr bytes
  2855  0018AA                     	endif
  2856  0018AA  0009               	tblrd		*+
  2857  0018AC  CFF5 F018          	movff	tablat,___ftmul@f2
  2858  0018B0  0009               	tblrd		*+
  2859  0018B2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2860  0018B6  000A               	tblrd		*-
  2861  0018B8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2862  0018BC  EC9F  F012         	call	___ftmul	;wreg free
  2863  0018C0  C015  F024         	movff	?___ftmul,?_scale
  2864  0018C4  C016  F025         	movff	?___ftmul+1,?_scale+1
  2865  0018C8  C017  F026         	movff	?___ftmul+2,?_scale+2
  2866  0018CC  0012               	return	
  2867  0018CE                     l428:
  2868                           
  2869                           ;doprnt.c: 432: else if(scl > 10)
  2870  0018CE  502A               	movf	scale@scl,w,c
  2871  0018D0  0A80               	xorlw	128
  2872  0018D2  0F75               	addlw	-139
  2873  0018D4  A0D8               	btfss	status,0,c
  2874  0018D6  D053               	goto	l431
  2875                           
  2876                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2877  0018D8  0E00               	movlw	0
  2878  0018DA  6E0A               	movwf	___awdiv@divisor+1,c
  2879  0018DC  0E0A               	movlw	10
  2880  0018DE  6E09               	movwf	___awdiv@divisor,c
  2881  0018E0  502A               	movf	scale@scl,w,c
  2882  0018E2  6E07               	movwf	___awdiv@dividend,c
  2883  0018E4  6A08               	clrf	___awdiv@dividend+1,c
  2884  0018E6  BE07               	btfsc	___awdiv@dividend,7,c
  2885  0018E8  0608               	decf	___awdiv@dividend+1,f,c
  2886  0018EA  ECBB  F014         	call	___awdiv	;wreg free
  2887  0018EE  0E09               	movlw	9
  2888  0018F0  2407               	addwf	?___awdiv,w,c
  2889  0018F2  6E0F               	movwf	___wmul@multiplier,c
  2890  0018F4  0E00               	movlw	0
  2891  0018F6  2008               	addwfc	?___awdiv+1,w,c
  2892  0018F8  6E10               	movwf	___wmul@multiplier+1,c
  2893  0018FA  0E00               	movlw	0
  2894  0018FC  6E12               	movwf	___wmul@multiplicand+1,c
  2895  0018FE  0E03               	movlw	3
  2896  001900  6E11               	movwf	___wmul@multiplicand,c
  2897  001902  ECEA  F017         	call	___wmul	;wreg free
  2898  001906  0E50               	movlw	low __npowers_
  2899  001908  240F               	addwf	?___wmul,w,c
  2900  00190A  6EF6               	movwf	tblptrl,c
  2901  00190C  0E10               	movlw	high __npowers_
  2902  00190E  2010               	addwfc	?___wmul+1,w,c
  2903  001910  6EF7               	movwf	tblptrh,c
  2904  001912                     	if	0	;There are less than 3 active tblptr bytes
  2905  001912                     	endif
  2906  001912  0009               	tblrd		*+
  2907  001914  CFF5 F015          	movff	tablat,___ftmul@f1
  2908  001918  0009               	tblrd		*+
  2909  00191A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2910  00191E  000A               	tblrd		*-
  2911  001920  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2912  001924  0E00               	movlw	0
  2913  001926  6E12               	movwf	___wmul@multiplicand+1,c
  2914  001928  0E03               	movlw	3
  2915  00192A  6E11               	movwf	___wmul@multiplicand,c
  2916  00192C  0E00               	movlw	0
  2917  00192E  6E04               	movwf	___awmod@divisor+1,c
  2918  001930  0E0A               	movlw	10
  2919  001932  6E03               	movwf	___awmod@divisor,c
  2920  001934  502A               	movf	scale@scl,w,c
  2921  001936  6E01               	movwf	___awmod@dividend,c
  2922  001938  6A02               	clrf	___awmod@dividend+1,c
  2923  00193A  BE01               	btfsc	___awmod@dividend,7,c
  2924  00193C  0602               	decf	___awmod@dividend+1,f,c
  2925  00193E  ECF1  F015         	call	___awmod	;wreg free
  2926  001942  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2927  001946  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2928  00194A  ECEA  F017         	call	___wmul	;wreg free
  2929  00194E  0E50               	movlw	low __npowers_
  2930  001950  240F               	addwf	?___wmul,w,c
  2931  001952  6EF6               	movwf	tblptrl,c
  2932  001954  0E10               	movlw	high __npowers_
  2933  001956  2010               	addwfc	?___wmul+1,w,c
  2934  001958  6EF7               	movwf	tblptrh,c
  2935  00195A                     	if	0	;There are less than 3 active tblptr bytes
  2936  00195A                     	endif
  2937  00195A  0009               	tblrd		*+
  2938  00195C  CFF5 F018          	movff	tablat,___ftmul@f2
  2939  001960  0009               	tblrd		*+
  2940  001962  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2941  001966  000A               	tblrd		*-
  2942  001968  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2943  00196C  EC9F  F012         	call	___ftmul	;wreg free
  2944  001970  C015  F024         	movff	?___ftmul,?_scale
  2945  001974  C016  F025         	movff	?___ftmul+1,?_scale+1
  2946  001978  C017  F026         	movff	?___ftmul+2,?_scale+2
  2947  00197C  0012               	return	
  2948  00197E                     l431:
  2949                           
  2950                           ;doprnt.c: 434: return _npowers_[scl];
  2951  00197E  502A               	movf	scale@scl,w,c
  2952  001980  0D03               	mullw	3
  2953  001982  0E50               	movlw	low __npowers_
  2954  001984  24F3               	addwf	prodl,w,c
  2955  001986  6EF6               	movwf	tblptrl,c
  2956  001988  0E10               	movlw	high __npowers_
  2957  00198A  20F4               	addwfc	prodh,w,c
  2958  00198C  6EF7               	movwf	tblptrh,c
  2959  00198E                     	if	0	;There are less than 3 active tblptr bytes
  2960  00198E                     	endif
  2961  00198E  0009               	tblrd		*+
  2962  001990  CFF5 F024          	movff	tablat,?_scale
  2963  001994  0009               	tblrd		*+
  2964  001996  CFF5 F025          	movff	tablat,?_scale+1
  2965  00199A  000A               	tblrd		*-
  2966  00199C  CFF5 F026          	movff	tablat,?_scale+2
  2967  0019A0  0012               	return	
  2968  0019A2                     l427:
  2969                           
  2970                           ;doprnt.c: 435: }
  2971                           ;doprnt.c: 436: if(scl>=110)
  2972  0019A2  502A               	movf	scale@scl,w,c
  2973  0019A4  0A80               	xorlw	128
  2974  0019A6  0F12               	addlw	-238
  2975  0019A8  A0D8               	btfss	status,0,c
  2976  0019AA  D091               	goto	l432
  2977                           
  2978                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2979  0019AC  0E00               	movlw	0
  2980  0019AE  6E12               	movwf	___wmul@multiplicand+1,c
  2981  0019B0  0E03               	movlw	3
  2982  0019B2  6E11               	movwf	___wmul@multiplicand,c
  2983  0019B4  0E00               	movlw	0
  2984  0019B6  6E0A               	movwf	___awdiv@divisor+1,c
  2985  0019B8  0E0A               	movlw	10
  2986  0019BA  6E09               	movwf	___awdiv@divisor,c
  2987  0019BC  0E00               	movlw	0
  2988  0019BE  6E04               	movwf	___awmod@divisor+1,c
  2989  0019C0  0E64               	movlw	100
  2990  0019C2  6E03               	movwf	___awmod@divisor,c
  2991  0019C4  502A               	movf	scale@scl,w,c
  2992  0019C6  6E01               	movwf	___awmod@dividend,c
  2993  0019C8  6A02               	clrf	___awmod@dividend+1,c
  2994  0019CA  BE01               	btfsc	___awmod@dividend,7,c
  2995  0019CC  0602               	decf	___awmod@dividend+1,f,c
  2996  0019CE  ECF1  F015         	call	___awmod	;wreg free
  2997  0019D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2998  0019D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2999  0019DA  ECBB  F014         	call	___awdiv	;wreg free
  3000  0019DE  0E09               	movlw	9
  3001  0019E0  2407               	addwf	?___awdiv,w,c
  3002  0019E2  6E0F               	movwf	___wmul@multiplier,c
  3003  0019E4  0E00               	movlw	0
  3004  0019E6  2008               	addwfc	?___awdiv+1,w,c
  3005  0019E8  6E10               	movwf	___wmul@multiplier+1,c
  3006  0019EA  ECEA  F017         	call	___wmul	;wreg free
  3007  0019EE  0E29               	movlw	low __powers_
  3008  0019F0  240F               	addwf	?___wmul,w,c
  3009  0019F2  6EF6               	movwf	tblptrl,c
  3010  0019F4  0E10               	movlw	high __powers_
  3011  0019F6  2010               	addwfc	?___wmul+1,w,c
  3012  0019F8  6EF7               	movwf	tblptrh,c
  3013  0019FA                     	if	0	;There are less than 3 active tblptr bytes
  3014  0019FA                     	endif
  3015  0019FA  0009               	tblrd		*+
  3016  0019FC  CFF5 F018          	movff	tablat,___ftmul@f2
  3017  001A00  0009               	tblrd		*+
  3018  001A02  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3019  001A06  000A               	tblrd		*-
  3020  001A08  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3021  001A0C  0E00               	movlw	0
  3022  001A0E  6E0A               	movwf	___awdiv@divisor+1,c
  3023  001A10  0E64               	movlw	100
  3024  001A12  6E09               	movwf	___awdiv@divisor,c
  3025  001A14  502A               	movf	scale@scl,w,c
  3026  001A16  6E07               	movwf	___awdiv@dividend,c
  3027  001A18  6A08               	clrf	___awdiv@dividend+1,c
  3028  001A1A  BE07               	btfsc	___awdiv@dividend,7,c
  3029  001A1C  0608               	decf	___awdiv@dividend+1,f,c
  3030  001A1E  ECBB  F014         	call	___awdiv	;wreg free
  3031  001A22  0E12               	movlw	18
  3032  001A24  2407               	addwf	?___awdiv,w,c
  3033  001A26  6E0F               	movwf	___wmul@multiplier,c
  3034  001A28  0E00               	movlw	0
  3035  001A2A  2008               	addwfc	?___awdiv+1,w,c
  3036  001A2C  6E10               	movwf	___wmul@multiplier+1,c
  3037  001A2E  0E00               	movlw	0
  3038  001A30  6E12               	movwf	___wmul@multiplicand+1,c
  3039  001A32  0E03               	movlw	3
  3040  001A34  6E11               	movwf	___wmul@multiplicand,c
  3041  001A36  ECEA  F017         	call	___wmul	;wreg free
  3042  001A3A  0E29               	movlw	low __powers_
  3043  001A3C  240F               	addwf	?___wmul,w,c
  3044  001A3E  6EF6               	movwf	tblptrl,c
  3045  001A40  0E10               	movlw	high __powers_
  3046  001A42  2010               	addwfc	?___wmul+1,w,c
  3047  001A44  6EF7               	movwf	tblptrh,c
  3048  001A46                     	if	0	;There are less than 3 active tblptr bytes
  3049  001A46                     	endif
  3050  001A46  0009               	tblrd		*+
  3051  001A48  CFF5 F015          	movff	tablat,___ftmul@f1
  3052  001A4C  0009               	tblrd		*+
  3053  001A4E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3054  001A52  000A               	tblrd		*-
  3055  001A54  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3056  001A58  EC9F  F012         	call	___ftmul	;wreg free
  3057  001A5C  C015  F027         	movff	?___ftmul,_scale$1557
  3058  001A60  C016  F028         	movff	?___ftmul+1,_scale$1557+1
  3059  001A64  C017  F029         	movff	?___ftmul+2,_scale$1557+2
  3060                           
  3061                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3062  001A68  C027  F015         	movff	_scale$1557,___ftmul@f1
  3063  001A6C  C028  F016         	movff	_scale$1557+1,___ftmul@f1+1
  3064  001A70  C029  F017         	movff	_scale$1557+2,___ftmul@f1+2
  3065  001A74  0E00               	movlw	0
  3066  001A76  6E12               	movwf	___wmul@multiplicand+1,c
  3067  001A78  0E03               	movlw	3
  3068  001A7A  6E11               	movwf	___wmul@multiplicand,c
  3069  001A7C  0E00               	movlw	0
  3070  001A7E  6E04               	movwf	___awmod@divisor+1,c
  3071  001A80  0E0A               	movlw	10
  3072  001A82  6E03               	movwf	___awmod@divisor,c
  3073  001A84  502A               	movf	scale@scl,w,c
  3074  001A86  6E01               	movwf	___awmod@dividend,c
  3075  001A88  6A02               	clrf	___awmod@dividend+1,c
  3076  001A8A  BE01               	btfsc	___awmod@dividend,7,c
  3077  001A8C  0602               	decf	___awmod@dividend+1,f,c
  3078  001A8E  ECF1  F015         	call	___awmod	;wreg free
  3079  001A92  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3080  001A96  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3081  001A9A  ECEA  F017         	call	___wmul	;wreg free
  3082  001A9E  0E29               	movlw	low __powers_
  3083  001AA0  240F               	addwf	?___wmul,w,c
  3084  001AA2  6EF6               	movwf	tblptrl,c
  3085  001AA4  0E10               	movlw	high __powers_
  3086  001AA6  2010               	addwfc	?___wmul+1,w,c
  3087  001AA8  6EF7               	movwf	tblptrh,c
  3088  001AAA                     	if	0	;There are less than 3 active tblptr bytes
  3089  001AAA                     	endif
  3090  001AAA  0009               	tblrd		*+
  3091  001AAC  CFF5 F018          	movff	tablat,___ftmul@f2
  3092  001AB0  0009               	tblrd		*+
  3093  001AB2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3094  001AB6  000A               	tblrd		*-
  3095  001AB8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3096  001ABC  EC9F  F012         	call	___ftmul	;wreg free
  3097  001AC0  C015  F024         	movff	?___ftmul,?_scale
  3098  001AC4  C016  F025         	movff	?___ftmul+1,?_scale+1
  3099  001AC8  C017  F026         	movff	?___ftmul+2,?_scale+2
  3100  001ACC  0012               	return	
  3101  001ACE                     l432:
  3102                           
  3103                           ;doprnt.c: 438: else if(scl > 10)
  3104  001ACE  502A               	movf	scale@scl,w,c
  3105  001AD0  0A80               	xorlw	128
  3106  001AD2  0F75               	addlw	-139
  3107  001AD4  A0D8               	btfss	status,0,c
  3108  001AD6  D053               	goto	l434
  3109                           
  3110                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3111  001AD8  0E00               	movlw	0
  3112  001ADA  6E0A               	movwf	___awdiv@divisor+1,c
  3113  001ADC  0E0A               	movlw	10
  3114  001ADE  6E09               	movwf	___awdiv@divisor,c
  3115  001AE0  502A               	movf	scale@scl,w,c
  3116  001AE2  6E07               	movwf	___awdiv@dividend,c
  3117  001AE4  6A08               	clrf	___awdiv@dividend+1,c
  3118  001AE6  BE07               	btfsc	___awdiv@dividend,7,c
  3119  001AE8  0608               	decf	___awdiv@dividend+1,f,c
  3120  001AEA  ECBB  F014         	call	___awdiv	;wreg free
  3121  001AEE  0E09               	movlw	9
  3122  001AF0  2407               	addwf	?___awdiv,w,c
  3123  001AF2  6E0F               	movwf	___wmul@multiplier,c
  3124  001AF4  0E00               	movlw	0
  3125  001AF6  2008               	addwfc	?___awdiv+1,w,c
  3126  001AF8  6E10               	movwf	___wmul@multiplier+1,c
  3127  001AFA  0E00               	movlw	0
  3128  001AFC  6E12               	movwf	___wmul@multiplicand+1,c
  3129  001AFE  0E03               	movlw	3
  3130  001B00  6E11               	movwf	___wmul@multiplicand,c
  3131  001B02  ECEA  F017         	call	___wmul	;wreg free
  3132  001B06  0E29               	movlw	low __powers_
  3133  001B08  240F               	addwf	?___wmul,w,c
  3134  001B0A  6EF6               	movwf	tblptrl,c
  3135  001B0C  0E10               	movlw	high __powers_
  3136  001B0E  2010               	addwfc	?___wmul+1,w,c
  3137  001B10  6EF7               	movwf	tblptrh,c
  3138  001B12                     	if	0	;There are less than 3 active tblptr bytes
  3139  001B12                     	endif
  3140  001B12  0009               	tblrd		*+
  3141  001B14  CFF5 F015          	movff	tablat,___ftmul@f1
  3142  001B18  0009               	tblrd		*+
  3143  001B1A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3144  001B1E  000A               	tblrd		*-
  3145  001B20  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3146  001B24  0E00               	movlw	0
  3147  001B26  6E12               	movwf	___wmul@multiplicand+1,c
  3148  001B28  0E03               	movlw	3
  3149  001B2A  6E11               	movwf	___wmul@multiplicand,c
  3150  001B2C  0E00               	movlw	0
  3151  001B2E  6E04               	movwf	___awmod@divisor+1,c
  3152  001B30  0E0A               	movlw	10
  3153  001B32  6E03               	movwf	___awmod@divisor,c
  3154  001B34  502A               	movf	scale@scl,w,c
  3155  001B36  6E01               	movwf	___awmod@dividend,c
  3156  001B38  6A02               	clrf	___awmod@dividend+1,c
  3157  001B3A  BE01               	btfsc	___awmod@dividend,7,c
  3158  001B3C  0602               	decf	___awmod@dividend+1,f,c
  3159  001B3E  ECF1  F015         	call	___awmod	;wreg free
  3160  001B42  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3161  001B46  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3162  001B4A  ECEA  F017         	call	___wmul	;wreg free
  3163  001B4E  0E29               	movlw	low __powers_
  3164  001B50  240F               	addwf	?___wmul,w,c
  3165  001B52  6EF6               	movwf	tblptrl,c
  3166  001B54  0E10               	movlw	high __powers_
  3167  001B56  2010               	addwfc	?___wmul+1,w,c
  3168  001B58  6EF7               	movwf	tblptrh,c
  3169  001B5A                     	if	0	;There are less than 3 active tblptr bytes
  3170  001B5A                     	endif
  3171  001B5A  0009               	tblrd		*+
  3172  001B5C  CFF5 F018          	movff	tablat,___ftmul@f2
  3173  001B60  0009               	tblrd		*+
  3174  001B62  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3175  001B66  000A               	tblrd		*-
  3176  001B68  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3177  001B6C  EC9F  F012         	call	___ftmul	;wreg free
  3178  001B70  C015  F024         	movff	?___ftmul,?_scale
  3179  001B74  C016  F025         	movff	?___ftmul+1,?_scale+1
  3180  001B78  C017  F026         	movff	?___ftmul+2,?_scale+2
  3181  001B7C  0012               	return	
  3182  001B7E                     l434:
  3183                           
  3184                           ;doprnt.c: 440: return _powers_[scl];
  3185  001B7E  502A               	movf	scale@scl,w,c
  3186  001B80  0D03               	mullw	3
  3187  001B82  0E29               	movlw	low __powers_
  3188  001B84  24F3               	addwf	prodl,w,c
  3189  001B86  6EF6               	movwf	tblptrl,c
  3190  001B88  0E10               	movlw	high __powers_
  3191  001B8A  20F4               	addwfc	prodh,w,c
  3192  001B8C  6EF7               	movwf	tblptrh,c
  3193  001B8E                     	if	0	;There are less than 3 active tblptr bytes
  3194  001B8E                     	endif
  3195  001B8E  0009               	tblrd		*+
  3196  001B90  CFF5 F024          	movff	tablat,?_scale
  3197  001B94  0009               	tblrd		*+
  3198  001B96  CFF5 F025          	movff	tablat,?_scale+1
  3199  001B9A  000A               	tblrd		*-
  3200  001B9C  CFF5 F026          	movff	tablat,?_scale+2
  3201  001BA0  0012               	return	
  3202  001BA2                     __end_of_scale:
  3203                           	opt stack 0
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           prodh	equ	0xFF4
  3209                           prodl	equ	0xFF3
  3210                           postinc0	equ	0xFEE
  3211                           wreg	equ	0xFE8
  3212                           indf2	equ	0xFDF
  3213                           postinc2	equ	0xFDE
  3214                           postdec2	equ	0xFDD
  3215                           fsr2h	equ	0xFDA
  3216                           fsr2l	equ	0xFD9
  3217                           status	equ	0xFD8
  3218                           
  3219 ;; *************** function _isdigit *****************
  3220 ;; Defined at:
  3221 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;  c               1    wreg     unsigned char 
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;  c               1    2[COMRAM] unsigned char 
  3226 ;; Return value:  Size  Location     Type
  3227 ;;		None               void
  3228 ;; Registers used:
  3229 ;;		wreg, status,2, status,0
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3238 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;Total ram usage:        3 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; This function calls:
  3242 ;;		Nothing
  3243 ;; This function is called by:
  3244 ;;		_sprintf
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text3
  3249  003064                     __ptext3:
  3250                           	opt stack 0
  3251  003064                     _isdigit:
  3252                           	opt stack 29
  3253                           
  3254                           ;incstack = 0
  3255                           ;isdigit@c stored from wreg
  3256  003064  6E03               	movwf	isdigit@c,c
  3257  003066  0E00               	movlw	0
  3258  003068  6E02               	movwf	_isdigit$1172,c
  3259  00306A  0E3A               	movlw	58
  3260  00306C  6003               	cpfslt	isdigit@c,c
  3261  00306E  D005               	goto	l859
  3262  003070  0E2F               	movlw	47
  3263  003072  6403               	cpfsgt	isdigit@c,c
  3264  003074  D002               	goto	l859
  3265  003076  0E01               	movlw	1
  3266  003078  6E02               	movwf	_isdigit$1172,c
  3267  00307A                     l859:
  3268  00307A  C002  F001         	movff	_isdigit$1172,??_isdigit
  3269  00307E  3001               	rrcf	??_isdigit,w,c
  3270  003080  0012               	return	
  3271  003082                     __end_of_isdigit:
  3272                           	opt stack 0
  3273                           tblptru	equ	0xFF8
  3274                           tblptrh	equ	0xFF7
  3275                           tblptrl	equ	0xFF6
  3276                           tablat	equ	0xFF5
  3277                           prodh	equ	0xFF4
  3278                           prodl	equ	0xFF3
  3279                           postinc0	equ	0xFEE
  3280                           wreg	equ	0xFE8
  3281                           indf2	equ	0xFDF
  3282                           postinc2	equ	0xFDE
  3283                           postdec2	equ	0xFDD
  3284                           fsr2h	equ	0xFDA
  3285                           fsr2l	equ	0xFD9
  3286                           status	equ	0xFD8
  3287                           
  3288 ;; *************** function _fround *****************
  3289 ;; Defined at:
  3290 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;  prec            1    wreg     unsigned char 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  prec            1   44[COMRAM] unsigned char 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  3   35[COMRAM] unsigned char 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3304 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;Total ram usage:       10 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    2
  3311 ;; This function calls:
  3312 ;;		___awdiv
  3313 ;;		___awmod
  3314 ;;		___ftmul
  3315 ;;		___wmul
  3316 ;; This function is called by:
  3317 ;;		_sprintf
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text4
  3322  001BA2                     __ptext4:
  3323                           	opt stack 0
  3324  001BA2                     _fround:
  3325                           	opt stack 27
  3326                           
  3327                           ;incstack = 0
  3328                           ;fround@prec stored from wreg
  3329  001BA2  6E2D               	movwf	fround@prec,c
  3330                           
  3331                           ;doprnt.c: 413: if(prec>=110)
  3332  001BA4  0E6D               	movlw	109
  3333  001BA6  642D               	cpfsgt	fround@prec,c
  3334  001BA8  D09F               	goto	l421
  3335                           
  3336                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3337  001BAA  0E00               	movlw	0
  3338  001BAC  6E12               	movwf	___wmul@multiplicand+1,c
  3339  001BAE  0E03               	movlw	3
  3340  001BB0  6E11               	movwf	___wmul@multiplicand,c
  3341  001BB2  0E00               	movlw	0
  3342  001BB4  6E0A               	movwf	___awdiv@divisor+1,c
  3343  001BB6  0E0A               	movlw	10
  3344  001BB8  6E09               	movwf	___awdiv@divisor,c
  3345  001BBA  0E00               	movlw	0
  3346  001BBC  6E04               	movwf	___awmod@divisor+1,c
  3347  001BBE  0E64               	movlw	100
  3348  001BC0  6E03               	movwf	___awmod@divisor,c
  3349  001BC2  C02D  F001         	movff	fround@prec,___awmod@dividend
  3350  001BC6  6A02               	clrf	___awmod@dividend+1,c
  3351  001BC8  ECF1  F015         	call	___awmod	;wreg free
  3352  001BCC  C001  F007         	movff	?___awmod,___awdiv@dividend
  3353  001BD0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3354  001BD4  ECBB  F014         	call	___awdiv	;wreg free
  3355  001BD8  0E09               	movlw	9
  3356  001BDA  2407               	addwf	?___awdiv,w,c
  3357  001BDC  6E0F               	movwf	___wmul@multiplier,c
  3358  001BDE  0E00               	movlw	0
  3359  001BE0  2008               	addwfc	?___awdiv+1,w,c
  3360  001BE2  6E10               	movwf	___wmul@multiplier+1,c
  3361  001BE4  ECEA  F017         	call	___wmul	;wreg free
  3362  001BE8  0E50               	movlw	low __npowers_
  3363  001BEA  240F               	addwf	?___wmul,w,c
  3364  001BEC  6EF6               	movwf	tblptrl,c
  3365  001BEE  0E10               	movlw	high __npowers_
  3366  001BF0  2010               	addwfc	?___wmul+1,w,c
  3367  001BF2  6EF7               	movwf	tblptrh,c
  3368  001BF4                     	if	0	;There are less than 3 active tblptr bytes
  3369  001BF4                     	endif
  3370  001BF4  0009               	tblrd		*+
  3371  001BF6  CFF5 F018          	movff	tablat,___ftmul@f2
  3372  001BFA  0009               	tblrd		*+
  3373  001BFC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3374  001C00  000A               	tblrd		*-
  3375  001C02  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3376  001C06  0E00               	movlw	0
  3377  001C08  6E0A               	movwf	___awdiv@divisor+1,c
  3378  001C0A  0E64               	movlw	100
  3379  001C0C  6E09               	movwf	___awdiv@divisor,c
  3380  001C0E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3381  001C12  6A08               	clrf	___awdiv@dividend+1,c
  3382  001C14  ECBB  F014         	call	___awdiv	;wreg free
  3383  001C18  0E12               	movlw	18
  3384  001C1A  2407               	addwf	?___awdiv,w,c
  3385  001C1C  6E0F               	movwf	___wmul@multiplier,c
  3386  001C1E  0E00               	movlw	0
  3387  001C20  2008               	addwfc	?___awdiv+1,w,c
  3388  001C22  6E10               	movwf	___wmul@multiplier+1,c
  3389  001C24  0E00               	movlw	0
  3390  001C26  6E12               	movwf	___wmul@multiplicand+1,c
  3391  001C28  0E03               	movlw	3
  3392  001C2A  6E11               	movwf	___wmul@multiplicand,c
  3393  001C2C  ECEA  F017         	call	___wmul	;wreg free
  3394  001C30  0E50               	movlw	low __npowers_
  3395  001C32  240F               	addwf	?___wmul,w,c
  3396  001C34  6EF6               	movwf	tblptrl,c
  3397  001C36  0E10               	movlw	high __npowers_
  3398  001C38  2010               	addwfc	?___wmul+1,w,c
  3399  001C3A  6EF7               	movwf	tblptrh,c
  3400  001C3C                     	if	0	;There are less than 3 active tblptr bytes
  3401  001C3C                     	endif
  3402  001C3C  0009               	tblrd		*+
  3403  001C3E  CFF5 F015          	movff	tablat,___ftmul@f1
  3404  001C42  0009               	tblrd		*+
  3405  001C44  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3406  001C48  000A               	tblrd		*-
  3407  001C4A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3408  001C4E  EC9F  F012         	call	___ftmul	;wreg free
  3409  001C52  C015  F02A         	movff	?___ftmul,_fround$1555
  3410  001C56  C016  F02B         	movff	?___ftmul+1,_fround$1555+1
  3411  001C5A  C017  F02C         	movff	?___ftmul+2,_fround$1555+2
  3412                           
  3413                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3414  001C5E  0E00               	movlw	0
  3415  001C60  6E12               	movwf	___wmul@multiplicand+1,c
  3416  001C62  0E03               	movlw	3
  3417  001C64  6E11               	movwf	___wmul@multiplicand,c
  3418  001C66  0E00               	movlw	0
  3419  001C68  6E04               	movwf	___awmod@divisor+1,c
  3420  001C6A  0E0A               	movlw	10
  3421  001C6C  6E03               	movwf	___awmod@divisor,c
  3422  001C6E  C02D  F001         	movff	fround@prec,___awmod@dividend
  3423  001C72  6A02               	clrf	___awmod@dividend+1,c
  3424  001C74  ECF1  F015         	call	___awmod	;wreg free
  3425  001C78  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3426  001C7C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3427  001C80  ECEA  F017         	call	___wmul	;wreg free
  3428  001C84  0E50               	movlw	low __npowers_
  3429  001C86  240F               	addwf	?___wmul,w,c
  3430  001C88  6EF6               	movwf	tblptrl,c
  3431  001C8A  0E10               	movlw	high __npowers_
  3432  001C8C  2010               	addwfc	?___wmul+1,w,c
  3433  001C8E  6EF7               	movwf	tblptrh,c
  3434  001C90                     	if	0	;There are less than 3 active tblptr bytes
  3435  001C90                     	endif
  3436  001C90  0009               	tblrd		*+
  3437  001C92  CFF5 F018          	movff	tablat,___ftmul@f2
  3438  001C96  0009               	tblrd		*+
  3439  001C98  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3440  001C9C  000A               	tblrd		*-
  3441  001C9E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3442  001CA2  C02A  F015         	movff	_fround$1555,___ftmul@f1
  3443  001CA6  C02B  F016         	movff	_fround$1555+1,___ftmul@f1+1
  3444  001CAA  C02C  F017         	movff	_fround$1555+2,___ftmul@f1+2
  3445  001CAE  EC9F  F012         	call	___ftmul	;wreg free
  3446  001CB2  C015  F027         	movff	?___ftmul,_fround$1556
  3447  001CB6  C016  F028         	movff	?___ftmul+1,_fround$1556+1
  3448  001CBA  C017  F029         	movff	?___ftmul+2,_fround$1556+2
  3449                           
  3450                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3451  001CBE  C027  F015         	movff	_fround$1556,___ftmul@f1
  3452  001CC2  C028  F016         	movff	_fround$1556+1,___ftmul@f1+1
  3453  001CC6  C029  F017         	movff	_fround$1556+2,___ftmul@f1+2
  3454  001CCA  0E00               	movlw	0
  3455  001CCC  6E18               	movwf	___ftmul@f2,c
  3456  001CCE  0E00               	movlw	0
  3457  001CD0  6E19               	movwf	___ftmul@f2+1,c
  3458  001CD2  0E3F               	movlw	63
  3459  001CD4  6E1A               	movwf	___ftmul@f2+2,c
  3460  001CD6  EC9F  F012         	call	___ftmul	;wreg free
  3461  001CDA  C015  F024         	movff	?___ftmul,?_fround
  3462  001CDE  C016  F025         	movff	?___ftmul+1,?_fround+1
  3463  001CE2  C017  F026         	movff	?___ftmul+2,?_fround+2
  3464  001CE6  0012               	return	
  3465  001CE8                     l421:
  3466                           
  3467                           ;doprnt.c: 415: else if(prec > 10)
  3468  001CE8  0E0A               	movlw	10
  3469  001CEA  642D               	cpfsgt	fround@prec,c
  3470  001CEC  D063               	goto	l424
  3471                           
  3472                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3473  001CEE  0E00               	movlw	0
  3474  001CF0  6E12               	movwf	___wmul@multiplicand+1,c
  3475  001CF2  0E03               	movlw	3
  3476  001CF4  6E11               	movwf	___wmul@multiplicand,c
  3477  001CF6  0E00               	movlw	0
  3478  001CF8  6E04               	movwf	___awmod@divisor+1,c
  3479  001CFA  0E0A               	movlw	10
  3480  001CFC  6E03               	movwf	___awmod@divisor,c
  3481  001CFE  C02D  F001         	movff	fround@prec,___awmod@dividend
  3482  001D02  6A02               	clrf	___awmod@dividend+1,c
  3483  001D04  ECF1  F015         	call	___awmod	;wreg free
  3484  001D08  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3485  001D0C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3486  001D10  ECEA  F017         	call	___wmul	;wreg free
  3487  001D14  0E50               	movlw	low __npowers_
  3488  001D16  240F               	addwf	?___wmul,w,c
  3489  001D18  6EF6               	movwf	tblptrl,c
  3490  001D1A  0E10               	movlw	high __npowers_
  3491  001D1C  2010               	addwfc	?___wmul+1,w,c
  3492  001D1E  6EF7               	movwf	tblptrh,c
  3493  001D20                     	if	0	;There are less than 3 active tblptr bytes
  3494  001D20                     	endif
  3495  001D20  0009               	tblrd		*+
  3496  001D22  CFF5 F018          	movff	tablat,___ftmul@f2
  3497  001D26  0009               	tblrd		*+
  3498  001D28  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3499  001D2C  000A               	tblrd		*-
  3500  001D2E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3501  001D32  0E00               	movlw	0
  3502  001D34  6E0A               	movwf	___awdiv@divisor+1,c
  3503  001D36  0E0A               	movlw	10
  3504  001D38  6E09               	movwf	___awdiv@divisor,c
  3505  001D3A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3506  001D3E  6A08               	clrf	___awdiv@dividend+1,c
  3507  001D40  ECBB  F014         	call	___awdiv	;wreg free
  3508  001D44  0E09               	movlw	9
  3509  001D46  2407               	addwf	?___awdiv,w,c
  3510  001D48  6E0F               	movwf	___wmul@multiplier,c
  3511  001D4A  0E00               	movlw	0
  3512  001D4C  2008               	addwfc	?___awdiv+1,w,c
  3513  001D4E  6E10               	movwf	___wmul@multiplier+1,c
  3514  001D50  0E00               	movlw	0
  3515  001D52  6E12               	movwf	___wmul@multiplicand+1,c
  3516  001D54  0E03               	movlw	3
  3517  001D56  6E11               	movwf	___wmul@multiplicand,c
  3518  001D58  ECEA  F017         	call	___wmul	;wreg free
  3519  001D5C  0E50               	movlw	low __npowers_
  3520  001D5E  240F               	addwf	?___wmul,w,c
  3521  001D60  6EF6               	movwf	tblptrl,c
  3522  001D62  0E10               	movlw	high __npowers_
  3523  001D64  2010               	addwfc	?___wmul+1,w,c
  3524  001D66  6EF7               	movwf	tblptrh,c
  3525  001D68                     	if	0	;There are less than 3 active tblptr bytes
  3526  001D68                     	endif
  3527  001D68  0009               	tblrd		*+
  3528  001D6A  CFF5 F015          	movff	tablat,___ftmul@f1
  3529  001D6E  0009               	tblrd		*+
  3530  001D70  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3531  001D74  000A               	tblrd		*-
  3532  001D76  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3533  001D7A  EC9F  F012         	call	___ftmul	;wreg free
  3534  001D7E  C015  F02A         	movff	?___ftmul,_fround$1555
  3535  001D82  C016  F02B         	movff	?___ftmul+1,_fround$1555+1
  3536  001D86  C017  F02C         	movff	?___ftmul+2,_fround$1555+2
  3537                           
  3538                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3539  001D8A  C02A  F015         	movff	_fround$1555,___ftmul@f1
  3540  001D8E  C02B  F016         	movff	_fround$1555+1,___ftmul@f1+1
  3541  001D92  C02C  F017         	movff	_fround$1555+2,___ftmul@f1+2
  3542  001D96  0E00               	movlw	0
  3543  001D98  6E18               	movwf	___ftmul@f2,c
  3544  001D9A  0E00               	movlw	0
  3545  001D9C  6E19               	movwf	___ftmul@f2+1,c
  3546  001D9E  0E3F               	movlw	63
  3547  001DA0  6E1A               	movwf	___ftmul@f2+2,c
  3548  001DA2  EC9F  F012         	call	___ftmul	;wreg free
  3549  001DA6  C015  F024         	movff	?___ftmul,?_fround
  3550  001DAA  C016  F025         	movff	?___ftmul+1,?_fround+1
  3551  001DAE  C017  F026         	movff	?___ftmul+2,?_fround+2
  3552  001DB2  0012               	return	
  3553  001DB4                     l424:
  3554                           
  3555                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3556  001DB4  502D               	movf	fround@prec,w,c
  3557  001DB6  0D03               	mullw	3
  3558  001DB8  0E50               	movlw	low __npowers_
  3559  001DBA  24F3               	addwf	prodl,w,c
  3560  001DBC  6EF6               	movwf	tblptrl,c
  3561  001DBE  0E10               	movlw	high __npowers_
  3562  001DC0  20F4               	addwfc	prodh,w,c
  3563  001DC2  6EF7               	movwf	tblptrh,c
  3564  001DC4                     	if	0	;There are less than 3 active tblptr bytes
  3565  001DC4                     	endif
  3566  001DC4  0009               	tblrd		*+
  3567  001DC6  CFF5 F015          	movff	tablat,___ftmul@f1
  3568  001DCA  0009               	tblrd		*+
  3569  001DCC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3570  001DD0  000A               	tblrd		*-
  3571  001DD2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3572  001DD6  0E00               	movlw	0
  3573  001DD8  6E18               	movwf	___ftmul@f2,c
  3574  001DDA  0E00               	movlw	0
  3575  001DDC  6E19               	movwf	___ftmul@f2+1,c
  3576  001DDE  0E3F               	movlw	63
  3577  001DE0  6E1A               	movwf	___ftmul@f2+2,c
  3578  001DE2  EC9F  F012         	call	___ftmul	;wreg free
  3579  001DE6  C015  F024         	movff	?___ftmul,?_fround
  3580  001DEA  C016  F025         	movff	?___ftmul+1,?_fround+1
  3581  001DEE  C017  F026         	movff	?___ftmul+2,?_fround+2
  3582  001DF2  0012               	return	
  3583  001DF4                     __end_of_fround:
  3584                           	opt stack 0
  3585                           tblptru	equ	0xFF8
  3586                           tblptrh	equ	0xFF7
  3587                           tblptrl	equ	0xFF6
  3588                           tablat	equ	0xFF5
  3589                           prodh	equ	0xFF4
  3590                           prodl	equ	0xFF3
  3591                           postinc0	equ	0xFEE
  3592                           wreg	equ	0xFE8
  3593                           indf2	equ	0xFDF
  3594                           postinc2	equ	0xFDE
  3595                           postdec2	equ	0xFDD
  3596                           fsr2h	equ	0xFDA
  3597                           fsr2l	equ	0xFD9
  3598                           status	equ	0xFD8
  3599                           
  3600 ;; *************** function ___wmul *****************
  3601 ;; Defined at:
  3602 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;  multiplier      2   14[COMRAM] unsigned int 
  3605 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  product         2   18[COMRAM] unsigned int 
  3608 ;; Return value:  Size  Location     Type
  3609 ;;                  2   14[COMRAM] unsigned int 
  3610 ;; Registers used:
  3611 ;;		wreg, status,2, status,0, prodl, prodh
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3617 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;Total ram usage:        6 bytes
  3622 ;; Hardware stack levels used:    1
  3623 ;; This function calls:
  3624 ;;		Nothing
  3625 ;; This function is called by:
  3626 ;;		_fround
  3627 ;;		_scale
  3628 ;;		_sprintf
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           	psect	text5
  3633  002FD4                     __ptext5:
  3634                           	opt stack 0
  3635  002FD4                     ___wmul:
  3636                           	opt stack 28
  3637                           
  3638                           ;incstack = 0
  3639  002FD4  500F               	movf	___wmul@multiplier,w,c
  3640  002FD6  0211               	mulwf	___wmul@multiplicand,c
  3641  002FD8  CFF3 F013          	movff	prodl,___wmul@product
  3642  002FDC  CFF4 F014          	movff	prodh,___wmul@product+1
  3643  002FE0  500F               	movf	___wmul@multiplier,w,c
  3644  002FE2  0212               	mulwf	___wmul@multiplicand+1,c
  3645  002FE4  50F3               	movf	prodl,w,c
  3646  002FE6  2614               	addwf	___wmul@product+1,f,c
  3647  002FE8  5010               	movf	___wmul@multiplier+1,w,c
  3648  002FEA  0211               	mulwf	___wmul@multiplicand,c
  3649  002FEC  50F3               	movf	prodl,w,c
  3650  002FEE  2614               	addwf	___wmul@product+1,f,c
  3651  002FF0  C013  F00F         	movff	___wmul@product,?___wmul
  3652  002FF4  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3653  002FF8  0012               	return	
  3654  002FFA                     __end_of___wmul:
  3655                           	opt stack 0
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           postinc0	equ	0xFEE
  3663                           wreg	equ	0xFE8
  3664                           indf2	equ	0xFDF
  3665                           postinc2	equ	0xFDE
  3666                           postdec2	equ	0xFDD
  3667                           fsr2h	equ	0xFDA
  3668                           fsr2l	equ	0xFD9
  3669                           status	equ	0xFD8
  3670                           
  3671 ;; *************** function ___awmod *****************
  3672 ;; Defined at:
  3673 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;  dividend        2    0[COMRAM] int 
  3676 ;;  divisor         2    2[COMRAM] int 
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;  sign            1    5[COMRAM] unsigned char 
  3679 ;;  counter         1    4[COMRAM] unsigned char 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  2    0[COMRAM] int 
  3682 ;; Registers used:
  3683 ;;		wreg, status,2, status,0
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3689 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;Total ram usage:        6 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; This function calls:
  3696 ;;		Nothing
  3697 ;; This function is called by:
  3698 ;;		_fround
  3699 ;;		_scale
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text6
  3704  002BE2                     __ptext6:
  3705                           	opt stack 0
  3706  002BE2                     ___awmod:
  3707                           	opt stack 28
  3708                           
  3709                           ;incstack = 0
  3710  002BE2  0E00               	movlw	0
  3711  002BE4  6E06               	movwf	___awmod@sign,c
  3712  002BE6  AE02               	btfss	___awmod@dividend+1,7,c
  3713  002BE8  D006               	goto	l676
  3714  002BEA  6C01               	negf	___awmod@dividend,c
  3715  002BEC  1E02               	comf	___awmod@dividend+1,f,c
  3716  002BEE  B0D8               	btfsc	status,0,c
  3717  002BF0  2A02               	incf	___awmod@dividend+1,f,c
  3718  002BF2  0E01               	movlw	1
  3719  002BF4  6E06               	movwf	___awmod@sign,c
  3720  002BF6                     l676:
  3721  002BF6  AE04               	btfss	___awmod@divisor+1,7,c
  3722  002BF8  D004               	goto	l677
  3723  002BFA  6C03               	negf	___awmod@divisor,c
  3724  002BFC  1E04               	comf	___awmod@divisor+1,f,c
  3725  002BFE  B0D8               	btfsc	status,0,c
  3726  002C00  2A04               	incf	___awmod@divisor+1,f,c
  3727  002C02                     l677:
  3728  002C02  5003               	movf	___awmod@divisor,w,c
  3729  002C04  1004               	iorwf	___awmod@divisor+1,w,c
  3730  002C06  B4D8               	btfsc	status,2,c
  3731  002C08  D018               	goto	l684
  3732  002C0A  0E01               	movlw	1
  3733  002C0C  6E05               	movwf	___awmod@counter,c
  3734  002C0E  D004               	goto	l679
  3735  002C10  90D8               	bcf	status,0,c
  3736  002C12  3603               	rlcf	___awmod@divisor,f,c
  3737  002C14  3604               	rlcf	___awmod@divisor+1,f,c
  3738  002C16  2A05               	incf	___awmod@counter,f,c
  3739  002C18                     l679:
  3740  002C18  AE04               	btfss	___awmod@divisor+1,7,c
  3741  002C1A  D7FA               	goto	l680
  3742  002C1C                     u1950:
  3743  002C1C  5003               	movf	___awmod@divisor,w,c
  3744  002C1E  5C01               	subwf	___awmod@dividend,w,c
  3745  002C20  5004               	movf	___awmod@divisor+1,w,c
  3746  002C22  5802               	subwfb	___awmod@dividend+1,w,c
  3747  002C24  A0D8               	btfss	status,0,c
  3748  002C26  D004               	goto	l683
  3749  002C28  5003               	movf	___awmod@divisor,w,c
  3750  002C2A  5E01               	subwf	___awmod@dividend,f,c
  3751  002C2C  5004               	movf	___awmod@divisor+1,w,c
  3752  002C2E  5A02               	subwfb	___awmod@dividend+1,f,c
  3753  002C30                     l683:
  3754  002C30  90D8               	bcf	status,0,c
  3755  002C32  3204               	rrcf	___awmod@divisor+1,f,c
  3756  002C34  3203               	rrcf	___awmod@divisor,f,c
  3757  002C36  2E05               	decfsz	___awmod@counter,f,c
  3758  002C38  D7F1               	goto	u1950
  3759  002C3A                     l684:
  3760  002C3A  5006               	movf	___awmod@sign,w,c
  3761  002C3C  B4D8               	btfsc	status,2,c
  3762  002C3E  D004               	goto	l685
  3763  002C40  6C01               	negf	___awmod@dividend,c
  3764  002C42  1E02               	comf	___awmod@dividend+1,f,c
  3765  002C44  B0D8               	btfsc	status,0,c
  3766  002C46  2A02               	incf	___awmod@dividend+1,f,c
  3767  002C48                     l685:
  3768  002C48  C001  F001         	movff	___awmod@dividend,?___awmod
  3769  002C4C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3770  002C50  0012               	return	
  3771  002C52                     __end_of___awmod:
  3772                           	opt stack 0
  3773                           tblptru	equ	0xFF8
  3774                           tblptrh	equ	0xFF7
  3775                           tblptrl	equ	0xFF6
  3776                           tablat	equ	0xFF5
  3777                           prodh	equ	0xFF4
  3778                           prodl	equ	0xFF3
  3779                           postinc0	equ	0xFEE
  3780                           wreg	equ	0xFE8
  3781                           indf2	equ	0xFDF
  3782                           postinc2	equ	0xFDE
  3783                           postdec2	equ	0xFDD
  3784                           fsr2h	equ	0xFDA
  3785                           fsr2l	equ	0xFD9
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function ___awdiv *****************
  3789 ;; Defined at:
  3790 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  dividend        2    6[COMRAM] int 
  3793 ;;  divisor         2    8[COMRAM] int 
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;  quotient        2   12[COMRAM] int 
  3796 ;;  sign            1   11[COMRAM] unsigned char 
  3797 ;;  counter         1   10[COMRAM] unsigned char 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  2    6[COMRAM] int 
  3800 ;; Registers used:
  3801 ;;		wreg, status,2, status,0
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3807 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;Total ram usage:        8 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; This function calls:
  3814 ;;		Nothing
  3815 ;; This function is called by:
  3816 ;;		_fround
  3817 ;;		_scale
  3818 ;;		_sprintf
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           	psect	text7
  3823  002976                     __ptext7:
  3824                           	opt stack 0
  3825  002976                     ___awdiv:
  3826                           	opt stack 28
  3827                           
  3828                           ;incstack = 0
  3829  002976  0E00               	movlw	0
  3830  002978  6E0C               	movwf	___awdiv@sign,c
  3831  00297A  AE0A               	btfss	___awdiv@divisor+1,7,c
  3832  00297C  D006               	goto	l663
  3833  00297E  6C09               	negf	___awdiv@divisor,c
  3834  002980  1E0A               	comf	___awdiv@divisor+1,f,c
  3835  002982  B0D8               	btfsc	status,0,c
  3836  002984  2A0A               	incf	___awdiv@divisor+1,f,c
  3837  002986  0E01               	movlw	1
  3838  002988  6E0C               	movwf	___awdiv@sign,c
  3839  00298A                     l663:
  3840  00298A  AE08               	btfss	___awdiv@dividend+1,7,c
  3841  00298C  D006               	goto	l664
  3842  00298E  6C07               	negf	___awdiv@dividend,c
  3843  002990  1E08               	comf	___awdiv@dividend+1,f,c
  3844  002992  B0D8               	btfsc	status,0,c
  3845  002994  2A08               	incf	___awdiv@dividend+1,f,c
  3846  002996  0E01               	movlw	1
  3847  002998  1A0C               	xorwf	___awdiv@sign,f,c
  3848  00299A                     l664:
  3849  00299A  0E00               	movlw	0
  3850  00299C  6E0E               	movwf	___awdiv@quotient+1,c
  3851  00299E  0E00               	movlw	0
  3852  0029A0  6E0D               	movwf	___awdiv@quotient,c
  3853  0029A2  5009               	movf	___awdiv@divisor,w,c
  3854  0029A4  100A               	iorwf	___awdiv@divisor+1,w,c
  3855  0029A6  B4D8               	btfsc	status,2,c
  3856  0029A8  D01C               	goto	l671
  3857  0029AA  0E01               	movlw	1
  3858  0029AC  6E0B               	movwf	___awdiv@counter,c
  3859  0029AE  D004               	goto	l666
  3860  0029B0  90D8               	bcf	status,0,c
  3861  0029B2  3609               	rlcf	___awdiv@divisor,f,c
  3862  0029B4  360A               	rlcf	___awdiv@divisor+1,f,c
  3863  0029B6  2A0B               	incf	___awdiv@counter,f,c
  3864  0029B8                     l666:
  3865  0029B8  AE0A               	btfss	___awdiv@divisor+1,7,c
  3866  0029BA  D7FA               	goto	l667
  3867  0029BC                     u1890:
  3868  0029BC  90D8               	bcf	status,0,c
  3869  0029BE  360D               	rlcf	___awdiv@quotient,f,c
  3870  0029C0  360E               	rlcf	___awdiv@quotient+1,f,c
  3871  0029C2  5009               	movf	___awdiv@divisor,w,c
  3872  0029C4  5C07               	subwf	___awdiv@dividend,w,c
  3873  0029C6  500A               	movf	___awdiv@divisor+1,w,c
  3874  0029C8  5808               	subwfb	___awdiv@dividend+1,w,c
  3875  0029CA  A0D8               	btfss	status,0,c
  3876  0029CC  D005               	goto	l670
  3877  0029CE  5009               	movf	___awdiv@divisor,w,c
  3878  0029D0  5E07               	subwf	___awdiv@dividend,f,c
  3879  0029D2  500A               	movf	___awdiv@divisor+1,w,c
  3880  0029D4  5A08               	subwfb	___awdiv@dividend+1,f,c
  3881  0029D6  800D               	bsf	___awdiv@quotient,0,c
  3882  0029D8                     l670:
  3883  0029D8  90D8               	bcf	status,0,c
  3884  0029DA  320A               	rrcf	___awdiv@divisor+1,f,c
  3885  0029DC  3209               	rrcf	___awdiv@divisor,f,c
  3886  0029DE  2E0B               	decfsz	___awdiv@counter,f,c
  3887  0029E0  D7ED               	goto	u1890
  3888  0029E2                     l671:
  3889  0029E2  500C               	movf	___awdiv@sign,w,c
  3890  0029E4  B4D8               	btfsc	status,2,c
  3891  0029E6  D004               	goto	l672
  3892  0029E8  6C0D               	negf	___awdiv@quotient,c
  3893  0029EA  1E0E               	comf	___awdiv@quotient+1,f,c
  3894  0029EC  B0D8               	btfsc	status,0,c
  3895  0029EE  2A0E               	incf	___awdiv@quotient+1,f,c
  3896  0029F0                     l672:
  3897  0029F0  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3898  0029F4  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3899  0029F8  0012               	return	
  3900  0029FA                     __end_of___awdiv:
  3901                           	opt stack 0
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           postinc0	equ	0xFEE
  3909                           wreg	equ	0xFE8
  3910                           indf2	equ	0xFDF
  3911                           postinc2	equ	0xFDE
  3912                           postdec2	equ	0xFDD
  3913                           fsr2h	equ	0xFDA
  3914                           fsr2l	equ	0xFD9
  3915                           status	equ	0xFD8
  3916                           
  3917 ;; *************** function __tdiv_to_l_ *****************
  3918 ;; Defined at:
  3919 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;  f1              3    0[COMRAM] float 
  3922 ;;  f2              3    3[COMRAM] float 
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  quot            4    9[COMRAM] unsigned long 
  3925 ;;  exp1            1   14[COMRAM] unsigned char 
  3926 ;;  cntr            1   13[COMRAM] unsigned char 
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  4    0[COMRAM] unsigned long 
  3929 ;; Registers used:
  3930 ;;		wreg, status,2, status,0
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3936 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;Total ram usage:       15 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; This function calls:
  3943 ;;		Nothing
  3944 ;; This function is called by:
  3945 ;;		_sprintf
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           	psect	text8
  3950  0021F0                     __ptext8:
  3951                           	opt stack 0
  3952  0021F0                     __tdiv_to_l_:
  3953                           	opt stack 29
  3954                           
  3955                           ;incstack = 0
  3956  0021F0  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3957  0021F4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3958  0021F6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3959  0021F8  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3960  0021FA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3961  0021FC  E301               	bnc	u2161
  3962  0021FE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3963  002200                     u2161:
  3964  002200  5007               	movf	??__tdiv_to_l_,w,c
  3965  002202  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3966  002204  500F               	movf	__tdiv_to_l_@exp1,w,c
  3967  002206  A4D8               	btfss	status,2,c
  3968  002208  D009               	goto	l799
  3969  00220A  0E00               	movlw	0
  3970  00220C  6E01               	movwf	?__tdiv_to_l_,c
  3971  00220E  0E00               	movlw	0
  3972  002210  6E02               	movwf	?__tdiv_to_l_+1,c
  3973  002212  0E00               	movlw	0
  3974  002214  6E03               	movwf	?__tdiv_to_l_+2,c
  3975  002216  0E00               	movlw	0
  3976  002218  6E04               	movwf	?__tdiv_to_l_+3,c
  3977  00221A  0012               	return	
  3978  00221C                     l799:
  3979  00221C  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3980  002220  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3981  002222  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3982  002224  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3983  002226  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3984  002228  E301               	bnc	u2181
  3985  00222A  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3986  00222C                     u2181:
  3987  00222C  5007               	movf	??__tdiv_to_l_,w,c
  3988  00222E  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3989  002230  500E               	movf	__tdiv_to_l_@cntr,w,c
  3990  002232  A4D8               	btfss	status,2,c
  3991  002234  D009               	goto	l801
  3992  002236  0E00               	movlw	0
  3993  002238  6E01               	movwf	?__tdiv_to_l_,c
  3994  00223A  0E00               	movlw	0
  3995  00223C  6E02               	movwf	?__tdiv_to_l_+1,c
  3996  00223E  0E00               	movlw	0
  3997  002240  6E03               	movwf	?__tdiv_to_l_+2,c
  3998  002242  0E00               	movlw	0
  3999  002244  6E04               	movwf	?__tdiv_to_l_+3,c
  4000  002246  0012               	return	
  4001  002248                     l801:
  4002  002248  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4003  00224A  0EFF               	movlw	255
  4004  00224C  1601               	andwf	__tdiv_to_l_@f1,f,c
  4005  00224E  0EFF               	movlw	255
  4006  002250  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4007  002252  0E00               	movlw	0
  4008  002254  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4009  002256  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4010  002258  0EFF               	movlw	255
  4011  00225A  1604               	andwf	__tdiv_to_l_@f2,f,c
  4012  00225C  0EFF               	movlw	255
  4013  00225E  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4014  002260  0E00               	movlw	0
  4015  002262  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4016  002264  0E00               	movlw	0
  4017  002266  6E0A               	movwf	__tdiv_to_l_@quot,c
  4018  002268  0E00               	movlw	0
  4019  00226A  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4020  00226C  0E00               	movlw	0
  4021  00226E  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4022  002270  0E00               	movlw	0
  4023  002272  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4024  002274  0E7F               	movlw	127
  4025  002276  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4026  002278  500E               	movf	__tdiv_to_l_@cntr,w,c
  4027  00227A  0F98               	addlw	152
  4028  00227C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4029  00227E  0E18               	movlw	24
  4030  002280  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4031  002282                     l802:
  4032  002282  90D8               	bcf	status,0,c
  4033  002284  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4034  002286  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4035  002288  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4036  00228A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4037  00228C  5004               	movf	__tdiv_to_l_@f2,w,c
  4038  00228E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4039  002290  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4040  002292  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4041  002294  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4042  002296  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4043  002298  A0D8               	btfss	status,0,c
  4044  00229A  D007               	goto	l803
  4045  00229C  5004               	movf	__tdiv_to_l_@f2,w,c
  4046  00229E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4047  0022A0  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4048  0022A2  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4049  0022A4  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4050  0022A6  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4051  0022A8  800A               	bsf	__tdiv_to_l_@quot,0,c
  4052  0022AA                     l803:
  4053  0022AA  90D8               	bcf	status,0,c
  4054  0022AC  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4055  0022AE  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4056  0022B0  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4057  0022B2  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4058  0022B4  D7E6               	goto	l802
  4059  0022B6  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4060  0022B8  D016               	goto	l805
  4061  0022BA  500F               	movf	__tdiv_to_l_@exp1,w,c
  4062  0022BC  0A80               	xorlw	128
  4063  0022BE  0F97               	addlw	151
  4064  0022C0  B0D8               	btfsc	status,0,c
  4065  0022C2  D009               	goto	l806
  4066  0022C4  0E00               	movlw	0
  4067  0022C6  6E01               	movwf	?__tdiv_to_l_,c
  4068  0022C8  0E00               	movlw	0
  4069  0022CA  6E02               	movwf	?__tdiv_to_l_+1,c
  4070  0022CC  0E00               	movlw	0
  4071  0022CE  6E03               	movwf	?__tdiv_to_l_+2,c
  4072  0022D0  0E00               	movlw	0
  4073  0022D2  6E04               	movwf	?__tdiv_to_l_+3,c
  4074  0022D4  0012               	return	
  4075  0022D6                     l806:
  4076  0022D6  90D8               	bcf	status,0,c
  4077  0022D8  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4078  0022DA  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4079  0022DC  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4080  0022DE  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4081  0022E0  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4082  0022E2  D7F9               	goto	l806
  4083  0022E4  D015               	goto	u2240
  4084  0022E6                     l805:
  4085  0022E6  0E17               	movlw	23
  4086  0022E8  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4087  0022EA  D00F               	goto	l811
  4088  0022EC  0E00               	movlw	0
  4089  0022EE  6E01               	movwf	?__tdiv_to_l_,c
  4090  0022F0  0E00               	movlw	0
  4091  0022F2  6E02               	movwf	?__tdiv_to_l_+1,c
  4092  0022F4  0E00               	movlw	0
  4093  0022F6  6E03               	movwf	?__tdiv_to_l_+2,c
  4094  0022F8  0E00               	movlw	0
  4095  0022FA  6E04               	movwf	?__tdiv_to_l_+3,c
  4096  0022FC  0012               	return	
  4097  0022FE  90D8               	bcf	status,0,c
  4098  002300  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4099  002302  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4100  002304  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4101  002306  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4102  002308  060F               	decf	__tdiv_to_l_@exp1,f,c
  4103  00230A                     l811:
  4104  00230A  500F               	movf	__tdiv_to_l_@exp1,w,c
  4105  00230C  A4D8               	btfss	status,2,c
  4106  00230E  D7F7               	goto	l812
  4107  002310                     u2240:
  4108  002310  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4109  002314  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4110  002318  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4111  00231C  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4112  002320  0012               	return		;funcret
  4113  002322                     __end_of__tdiv_to_l_:
  4114                           	opt stack 0
  4115                           tblptru	equ	0xFF8
  4116                           tblptrh	equ	0xFF7
  4117                           tblptrl	equ	0xFF6
  4118                           tablat	equ	0xFF5
  4119                           prodh	equ	0xFF4
  4120                           prodl	equ	0xFF3
  4121                           postinc0	equ	0xFEE
  4122                           wreg	equ	0xFE8
  4123                           indf2	equ	0xFDF
  4124                           postinc2	equ	0xFDE
  4125                           postdec2	equ	0xFDD
  4126                           fsr2h	equ	0xFDA
  4127                           fsr2l	equ	0xFD9
  4128                           status	equ	0xFD8
  4129                           
  4130 ;; *************** function __div_to_l_ *****************
  4131 ;; Defined at:
  4132 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  f1              3    0[COMRAM] unsigned long 
  4135 ;;  f2              3    3[COMRAM] unsigned long 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  quot            4    6[COMRAM] unsigned long 
  4138 ;;  exp1            1   11[COMRAM] unsigned char 
  4139 ;;  cntr            1   10[COMRAM] unsigned char 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  4    0[COMRAM] unsigned long 
  4142 ;; Registers used:
  4143 ;;		wreg, status,2, status,0
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4149 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;Total ram usage:       12 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_sprintf
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text9
  4163  002322                     __ptext9:
  4164                           	opt stack 0
  4165  002322                     __div_to_l_:
  4166                           	opt stack 29
  4167                           
  4168                           ;incstack = 0
  4169  002322  3403               	rlcf	__div_to_l_@f1+2,w,c
  4170  002324  3404               	rlcf	__div_to_l_@f1+3,w,c
  4171  002326  6E0C               	movwf	__div_to_l_@exp1,c
  4172  002328  500C               	movf	__div_to_l_@exp1,w,c
  4173  00232A  A4D8               	btfss	status,2,c
  4174  00232C  D009               	goto	l695
  4175  00232E  0E00               	movlw	0
  4176  002330  6E01               	movwf	?__div_to_l_,c
  4177  002332  0E00               	movlw	0
  4178  002334  6E02               	movwf	?__div_to_l_+1,c
  4179  002336  0E00               	movlw	0
  4180  002338  6E03               	movwf	?__div_to_l_+2,c
  4181  00233A  0E00               	movlw	0
  4182  00233C  6E04               	movwf	?__div_to_l_+3,c
  4183  00233E  0012               	return	
  4184  002340                     l695:
  4185  002340  3406               	rlcf	__div_to_l_@f2+2,w,c
  4186  002342  3407               	rlcf	__div_to_l_@f2+3,w,c
  4187  002344  6E0B               	movwf	__div_to_l_@cntr,c
  4188  002346  500B               	movf	__div_to_l_@cntr,w,c
  4189  002348  A4D8               	btfss	status,2,c
  4190  00234A  D009               	goto	l697
  4191  00234C  0E00               	movlw	0
  4192  00234E  6E01               	movwf	?__div_to_l_,c
  4193  002350  0E00               	movlw	0
  4194  002352  6E02               	movwf	?__div_to_l_+1,c
  4195  002354  0E00               	movlw	0
  4196  002356  6E03               	movwf	?__div_to_l_+2,c
  4197  002358  0E00               	movlw	0
  4198  00235A  6E04               	movwf	?__div_to_l_+3,c
  4199  00235C  0012               	return	
  4200  00235E                     l697:
  4201  00235E  8E03               	bsf	__div_to_l_@f1+2,7,c
  4202  002360  0EFF               	movlw	255
  4203  002362  1601               	andwf	__div_to_l_@f1,f,c
  4204  002364  0EFF               	movlw	255
  4205  002366  1602               	andwf	__div_to_l_@f1+1,f,c
  4206  002368  0EFF               	movlw	255
  4207  00236A  1603               	andwf	__div_to_l_@f1+2,f,c
  4208  00236C  0E00               	movlw	0
  4209  00236E  1604               	andwf	__div_to_l_@f1+3,f,c
  4210  002370  8E06               	bsf	__div_to_l_@f2+2,7,c
  4211  002372  0EFF               	movlw	255
  4212  002374  1604               	andwf	__div_to_l_@f2,f,c
  4213  002376  0EFF               	movlw	255
  4214  002378  1605               	andwf	__div_to_l_@f2+1,f,c
  4215  00237A  0EFF               	movlw	255
  4216  00237C  1606               	andwf	__div_to_l_@f2+2,f,c
  4217  00237E  0E00               	movlw	0
  4218  002380  1607               	andwf	__div_to_l_@f2+3,f,c
  4219  002382  0E00               	movlw	0
  4220  002384  6E07               	movwf	__div_to_l_@quot,c
  4221  002386  0E00               	movlw	0
  4222  002388  6E08               	movwf	__div_to_l_@quot+1,c
  4223  00238A  0E00               	movlw	0
  4224  00238C  6E09               	movwf	__div_to_l_@quot+2,c
  4225  00238E  0E00               	movlw	0
  4226  002390  6E0A               	movwf	__div_to_l_@quot+3,c
  4227  002392  0E7F               	movlw	127
  4228  002394  5E0C               	subwf	__div_to_l_@exp1,f,c
  4229  002396  500B               	movf	__div_to_l_@cntr,w,c
  4230  002398  0FA0               	addlw	160
  4231  00239A  5E0C               	subwf	__div_to_l_@exp1,f,c
  4232  00239C  0E20               	movlw	32
  4233  00239E  6E0B               	movwf	__div_to_l_@cntr,c
  4234  0023A0  90D8               	bcf	status,0,c
  4235  0023A2  3607               	rlcf	__div_to_l_@quot,f,c
  4236  0023A4  3608               	rlcf	__div_to_l_@quot+1,f,c
  4237  0023A6  3609               	rlcf	__div_to_l_@quot+2,f,c
  4238  0023A8  360A               	rlcf	__div_to_l_@quot+3,f,c
  4239  0023AA  5004               	movf	__div_to_l_@f2,w,c
  4240  0023AC  5C01               	subwf	__div_to_l_@f1,w,c
  4241  0023AE  5005               	movf	__div_to_l_@f2+1,w,c
  4242  0023B0  5802               	subwfb	__div_to_l_@f1+1,w,c
  4243  0023B2  5006               	movf	__div_to_l_@f2+2,w,c
  4244  0023B4  5803               	subwfb	__div_to_l_@f1+2,w,c
  4245  0023B6  5007               	movf	__div_to_l_@f2+3,w,c
  4246  0023B8  5804               	subwfb	__div_to_l_@f1+3,w,c
  4247  0023BA  A0D8               	btfss	status,0,c
  4248  0023BC  D009               	goto	l699
  4249  0023BE  5004               	movf	__div_to_l_@f2,w,c
  4250  0023C0  5E01               	subwf	__div_to_l_@f1,f,c
  4251  0023C2  5005               	movf	__div_to_l_@f2+1,w,c
  4252  0023C4  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4253  0023C6  5006               	movf	__div_to_l_@f2+2,w,c
  4254  0023C8  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4255  0023CA  5007               	movf	__div_to_l_@f2+3,w,c
  4256  0023CC  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4257  0023CE  8007               	bsf	__div_to_l_@quot,0,c
  4258  0023D0                     l699:
  4259  0023D0  90D8               	bcf	status,0,c
  4260  0023D2  3601               	rlcf	__div_to_l_@f1,f,c
  4261  0023D4  3602               	rlcf	__div_to_l_@f1+1,f,c
  4262  0023D6  3603               	rlcf	__div_to_l_@f1+2,f,c
  4263  0023D8  3604               	rlcf	__div_to_l_@f1+3,f,c
  4264  0023DA  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4265  0023DC  D7E1               	goto	l698
  4266  0023DE  AE0C               	btfss	__div_to_l_@exp1,7,c
  4267  0023E0  D016               	goto	l701
  4268  0023E2  500C               	movf	__div_to_l_@exp1,w,c
  4269  0023E4  0A80               	xorlw	128
  4270  0023E6  0F9F               	addlw	159
  4271  0023E8  B0D8               	btfsc	status,0,c
  4272  0023EA  D009               	goto	l702
  4273  0023EC  0E00               	movlw	0
  4274  0023EE  6E01               	movwf	?__div_to_l_,c
  4275  0023F0  0E00               	movlw	0
  4276  0023F2  6E02               	movwf	?__div_to_l_+1,c
  4277  0023F4  0E00               	movlw	0
  4278  0023F6  6E03               	movwf	?__div_to_l_+2,c
  4279  0023F8  0E00               	movlw	0
  4280  0023FA  6E04               	movwf	?__div_to_l_+3,c
  4281  0023FC  0012               	return	
  4282  0023FE                     l702:
  4283  0023FE  90D8               	bcf	status,0,c
  4284  002400  320A               	rrcf	__div_to_l_@quot+3,f,c
  4285  002402  3209               	rrcf	__div_to_l_@quot+2,f,c
  4286  002404  3208               	rrcf	__div_to_l_@quot+1,f,c
  4287  002406  3207               	rrcf	__div_to_l_@quot,f,c
  4288  002408  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4289  00240A  D7F9               	goto	l702
  4290  00240C  D015               	goto	u2310
  4291  00240E                     l701:
  4292  00240E  0E1F               	movlw	31
  4293  002410  640C               	cpfsgt	__div_to_l_@exp1,c
  4294  002412  D00F               	goto	l707
  4295  002414  0E00               	movlw	0
  4296  002416  6E01               	movwf	?__div_to_l_,c
  4297  002418  0E00               	movlw	0
  4298  00241A  6E02               	movwf	?__div_to_l_+1,c
  4299  00241C  0E00               	movlw	0
  4300  00241E  6E03               	movwf	?__div_to_l_+2,c
  4301  002420  0E00               	movlw	0
  4302  002422  6E04               	movwf	?__div_to_l_+3,c
  4303  002424  0012               	return	
  4304  002426  90D8               	bcf	status,0,c
  4305  002428  3607               	rlcf	__div_to_l_@quot,f,c
  4306  00242A  3608               	rlcf	__div_to_l_@quot+1,f,c
  4307  00242C  3609               	rlcf	__div_to_l_@quot+2,f,c
  4308  00242E  360A               	rlcf	__div_to_l_@quot+3,f,c
  4309  002430  060C               	decf	__div_to_l_@exp1,f,c
  4310  002432                     l707:
  4311  002432  500C               	movf	__div_to_l_@exp1,w,c
  4312  002434  A4D8               	btfss	status,2,c
  4313  002436  D7F7               	goto	l708
  4314  002438                     u2310:
  4315  002438  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4316  00243C  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4317  002440  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4318  002444  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4319  002448  0012               	return		;funcret
  4320  00244A                     __end_of__div_to_l_:
  4321                           	opt stack 0
  4322                           tblptru	equ	0xFF8
  4323                           tblptrh	equ	0xFF7
  4324                           tblptrl	equ	0xFF6
  4325                           tablat	equ	0xFF5
  4326                           prodh	equ	0xFF4
  4327                           prodl	equ	0xFF3
  4328                           postinc0	equ	0xFEE
  4329                           wreg	equ	0xFE8
  4330                           indf2	equ	0xFDF
  4331                           postinc2	equ	0xFDE
  4332                           postdec2	equ	0xFDD
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function ___lltoft *****************
  4338 ;; Defined at:
  4339 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  c               4    8[COMRAM] unsigned long 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  exp             1   16[COMRAM] unsigned char 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  3    8[COMRAM] float 
  4346 ;; Registers used:
  4347 ;;		wreg, status,2, status,0, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;Total ram usage:        9 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    1
  4360 ;; This function calls:
  4361 ;;		___ftpack
  4362 ;; This function is called by:
  4363 ;;		_sprintf
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           	psect	text10
  4368  002D24                     __ptext10:
  4369                           	opt stack 0
  4370  002D24                     ___lltoft:
  4371                           	opt stack 28
  4372                           
  4373                           ;incstack = 0
  4374  002D24  0E8E               	movlw	142
  4375  002D26  6E11               	movwf	___lltoft@exp,c
  4376  002D28  D006               	goto	l906
  4377  002D2A  90D8               	bcf	status,0,c
  4378  002D2C  320C               	rrcf	___lltoft@c+3,f,c
  4379  002D2E  320B               	rrcf	___lltoft@c+2,f,c
  4380  002D30  320A               	rrcf	___lltoft@c+1,f,c
  4381  002D32  3209               	rrcf	___lltoft@c,f,c
  4382  002D34  2A11               	incf	___lltoft@exp,f,c
  4383  002D36                     l906:
  4384  002D36  0E00               	movlw	0
  4385  002D38  1409               	andwf	___lltoft@c,w,c
  4386  002D3A  6E0D               	movwf	??___lltoft& (0+255),c
  4387  002D3C  0E00               	movlw	0
  4388  002D3E  140A               	andwf	___lltoft@c+1,w,c
  4389  002D40  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4390  002D42  0E00               	movlw	0
  4391  002D44  140B               	andwf	___lltoft@c+2,w,c
  4392  002D46  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4393  002D48  0EFF               	movlw	255
  4394  002D4A  140C               	andwf	___lltoft@c+3,w,c
  4395  002D4C  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4396  002D4E  500D               	movf	??___lltoft,w,c
  4397  002D50  100E               	iorwf	??___lltoft+1,w,c
  4398  002D52  100F               	iorwf	??___lltoft+2,w,c
  4399  002D54  1010               	iorwf	??___lltoft+3,w,c
  4400  002D56  A4D8               	btfss	status,2,c
  4401  002D58  D7E8               	goto	l907
  4402  002D5A  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4403  002D5E  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4404  002D62  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4405  002D66  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4406  002D6A  0E00               	movlw	0
  4407  002D6C  6E05               	movwf	___ftpack@sign,c
  4408  002D6E  EC8C  F013         	call	___ftpack	;wreg free
  4409  002D72  C001  F009         	movff	?___ftpack,?___lltoft
  4410  002D76  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4411  002D7A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4412  002D7E  0012               	return	
  4413  002D80                     __end_of___lltoft:
  4414                           	opt stack 0
  4415                           tblptru	equ	0xFF8
  4416                           tblptrh	equ	0xFF7
  4417                           tblptrl	equ	0xFF6
  4418                           tablat	equ	0xFF5
  4419                           prodh	equ	0xFF4
  4420                           prodl	equ	0xFF3
  4421                           postinc0	equ	0xFEE
  4422                           wreg	equ	0xFE8
  4423                           indf2	equ	0xFDF
  4424                           postinc2	equ	0xFDE
  4425                           postdec2	equ	0xFDD
  4426                           fsr2h	equ	0xFDA
  4427                           fsr2l	equ	0xFD9
  4428                           status	equ	0xFD8
  4429                           
  4430 ;; *************** function ___llmod *****************
  4431 ;; Defined at:
  4432 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  dividend        4    0[COMRAM] unsigned long 
  4435 ;;  divisor         4    4[COMRAM] unsigned long 
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;  counter         1    8[COMRAM] unsigned char 
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  4    0[COMRAM] unsigned long 
  4440 ;; Registers used:
  4441 ;;		wreg, status,2, status,0
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4447 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;Total ram usage:        9 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; This function calls:
  4454 ;;		Nothing
  4455 ;; This function is called by:
  4456 ;;		_sprintf
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           	psect	text11
  4461  002CBE                     __ptext11:
  4462                           	opt stack 0
  4463  002CBE                     ___llmod:
  4464                           	opt stack 29
  4465                           
  4466                           ;incstack = 0
  4467  002CBE  5005               	movf	___llmod@divisor,w,c
  4468  002CC0  1006               	iorwf	___llmod@divisor+1,w,c
  4469  002CC2  1007               	iorwf	___llmod@divisor+2,w,c
  4470  002CC4  1008               	iorwf	___llmod@divisor+3,w,c
  4471  002CC6  B4D8               	btfsc	status,2,c
  4472  002CC8  D024               	goto	l900
  4473  002CCA  0E01               	movlw	1
  4474  002CCC  6E09               	movwf	___llmod@counter,c
  4475  002CCE  D006               	goto	l895
  4476  002CD0  90D8               	bcf	status,0,c
  4477  002CD2  3605               	rlcf	___llmod@divisor,f,c
  4478  002CD4  3606               	rlcf	___llmod@divisor+1,f,c
  4479  002CD6  3607               	rlcf	___llmod@divisor+2,f,c
  4480  002CD8  3608               	rlcf	___llmod@divisor+3,f,c
  4481  002CDA  2A09               	incf	___llmod@counter,f,c
  4482  002CDC                     l895:
  4483  002CDC  AE08               	btfss	___llmod@divisor+3,7,c
  4484  002CDE  D7F8               	goto	l896
  4485  002CE0                     u2510:
  4486  002CE0  5005               	movf	___llmod@divisor,w,c
  4487  002CE2  5C01               	subwf	___llmod@dividend,w,c
  4488  002CE4  5006               	movf	___llmod@divisor+1,w,c
  4489  002CE6  5802               	subwfb	___llmod@dividend+1,w,c
  4490  002CE8  5007               	movf	___llmod@divisor+2,w,c
  4491  002CEA  5803               	subwfb	___llmod@dividend+2,w,c
  4492  002CEC  5008               	movf	___llmod@divisor+3,w,c
  4493  002CEE  5804               	subwfb	___llmod@dividend+3,w,c
  4494  002CF0  A0D8               	btfss	status,0,c
  4495  002CF2  D008               	goto	l899
  4496  002CF4  5005               	movf	___llmod@divisor,w,c
  4497  002CF6  5E01               	subwf	___llmod@dividend,f,c
  4498  002CF8  5006               	movf	___llmod@divisor+1,w,c
  4499  002CFA  5A02               	subwfb	___llmod@dividend+1,f,c
  4500  002CFC  5007               	movf	___llmod@divisor+2,w,c
  4501  002CFE  5A03               	subwfb	___llmod@dividend+2,f,c
  4502  002D00  5008               	movf	___llmod@divisor+3,w,c
  4503  002D02  5A04               	subwfb	___llmod@dividend+3,f,c
  4504  002D04                     l899:
  4505  002D04  90D8               	bcf	status,0,c
  4506  002D06  3208               	rrcf	___llmod@divisor+3,f,c
  4507  002D08  3207               	rrcf	___llmod@divisor+2,f,c
  4508  002D0A  3206               	rrcf	___llmod@divisor+1,f,c
  4509  002D0C  3205               	rrcf	___llmod@divisor,f,c
  4510  002D0E  2E09               	decfsz	___llmod@counter,f,c
  4511  002D10  D7E7               	goto	u2510
  4512  002D12                     l900:
  4513  002D12  C001  F001         	movff	___llmod@dividend,?___llmod
  4514  002D16  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4515  002D1A  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4516  002D1E  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4517  002D22  0012               	return		;funcret
  4518  002D24                     __end_of___llmod:
  4519                           	opt stack 0
  4520                           tblptru	equ	0xFF8
  4521                           tblptrh	equ	0xFF7
  4522                           tblptrl	equ	0xFF6
  4523                           tablat	equ	0xFF5
  4524                           prodh	equ	0xFF4
  4525                           prodl	equ	0xFF3
  4526                           postinc0	equ	0xFEE
  4527                           wreg	equ	0xFE8
  4528                           indf2	equ	0xFDF
  4529                           postinc2	equ	0xFDE
  4530                           postdec2	equ	0xFDD
  4531                           fsr2h	equ	0xFDA
  4532                           fsr2l	equ	0xFD9
  4533                           status	equ	0xFD8
  4534                           
  4535 ;; *************** function ___fttol *****************
  4536 ;; Defined at:
  4537 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;  f1              3   42[COMRAM] float 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  lval            4   52[COMRAM] unsigned long 
  4542 ;;  exp1            1   56[COMRAM] unsigned char 
  4543 ;;  sign1           1   51[COMRAM] unsigned char 
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  4   42[COMRAM] long 
  4546 ;; Registers used:
  4547 ;;		wreg, status,2, status,0
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 0/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4553 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;Total ram usage:       15 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_sprintf
  4563 ;;		_buck_boost
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text12
  4568  00244A                     __ptext12:
  4569                           	opt stack 0
  4570  00244A                     ___fttol:
  4571                           	opt stack 29
  4572                           
  4573                           ;incstack = 0
  4574  00244A  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4575  00244E  6A30               	clrf	(??___fttol+1)& (0+255),c
  4576  002450  6A31               	clrf	(??___fttol+2)& (0+255),c
  4577  002452  342C               	rlcf	___fttol@f1+1,w,c
  4578  002454  362F               	rlcf	??___fttol& (0+255),f,c
  4579  002456  E301               	bnc	u2421
  4580  002458  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4581  00245A                     u2421:
  4582  00245A  502F               	movf	??___fttol,w,c
  4583  00245C  6E39               	movwf	___fttol@exp1,c
  4584  00245E  5039               	movf	___fttol@exp1,w,c
  4585  002460  A4D8               	btfss	status,2,c
  4586  002462  D009               	goto	l844
  4587  002464  0E00               	movlw	0
  4588  002466  6E2B               	movwf	?___fttol,c
  4589  002468  0E00               	movlw	0
  4590  00246A  6E2C               	movwf	?___fttol+1,c
  4591  00246C  0E00               	movlw	0
  4592  00246E  6E2D               	movwf	?___fttol+2,c
  4593  002470  0E00               	movlw	0
  4594  002472  6E2E               	movwf	?___fttol+3,c
  4595  002474  0012               	return	
  4596  002476                     l844:
  4597  002476  0E17               	movlw	23
  4598  002478  6E2F               	movwf	??___fttol& (0+255),c
  4599  00247A  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4600  00247E  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4601  002482  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4602  002486  282F               	incf	??___fttol,w,c
  4603  002488  6E33               	movwf	(??___fttol+4)& (0+255),c
  4604  00248A  D004               	goto	u2440
  4605  00248C                     u2445:
  4606  00248C  90D8               	bcf	status,0,c
  4607  00248E  3232               	rrcf	??___fttol+3,f,c
  4608  002490  3231               	rrcf	??___fttol+2,f,c
  4609  002492  3230               	rrcf	??___fttol+1,f,c
  4610  002494                     u2440:
  4611  002494  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4612  002496  D7FA               	goto	u2445
  4613  002498  5030               	movf	??___fttol+1,w,c
  4614  00249A  6E34               	movwf	___fttol@sign1,c
  4615  00249C  8E2C               	bsf	___fttol@f1+1,7,c
  4616  00249E  0EFF               	movlw	255
  4617  0024A0  162B               	andwf	___fttol@f1,f,c
  4618  0024A2  0EFF               	movlw	255
  4619  0024A4  162C               	andwf	___fttol@f1+1,f,c
  4620  0024A6  0E00               	movlw	0
  4621  0024A8  162D               	andwf	___fttol@f1+2,f,c
  4622  0024AA  502B               	movf	___fttol@f1,w,c
  4623  0024AC  6E35               	movwf	___fttol@lval,c
  4624  0024AE  502C               	movf	___fttol@f1+1,w,c
  4625  0024B0  6E36               	movwf	___fttol@lval+1,c
  4626  0024B2  502D               	movf	___fttol@f1+2,w,c
  4627  0024B4  6E37               	movwf	___fttol@lval+2,c
  4628  0024B6  6A38               	clrf	___fttol@lval+3,c
  4629  0024B8  0E8E               	movlw	142
  4630  0024BA  5E39               	subwf	___fttol@exp1,f,c
  4631  0024BC  AE39               	btfss	___fttol@exp1,7,c
  4632  0024BE  D016               	goto	l846
  4633  0024C0  5039               	movf	___fttol@exp1,w,c
  4634  0024C2  0A80               	xorlw	128
  4635  0024C4  0F8F               	addlw	143
  4636  0024C6  B0D8               	btfsc	status,0,c
  4637  0024C8  D009               	goto	l847
  4638  0024CA  0E00               	movlw	0
  4639  0024CC  6E2B               	movwf	?___fttol,c
  4640  0024CE  0E00               	movlw	0
  4641  0024D0  6E2C               	movwf	?___fttol+1,c
  4642  0024D2  0E00               	movlw	0
  4643  0024D4  6E2D               	movwf	?___fttol+2,c
  4644  0024D6  0E00               	movlw	0
  4645  0024D8  6E2E               	movwf	?___fttol+3,c
  4646  0024DA  0012               	return	
  4647  0024DC                     l847:
  4648  0024DC  90D8               	bcf	status,0,c
  4649  0024DE  3238               	rrcf	___fttol@lval+3,f,c
  4650  0024E0  3237               	rrcf	___fttol@lval+2,f,c
  4651  0024E2  3236               	rrcf	___fttol@lval+1,f,c
  4652  0024E4  3235               	rrcf	___fttol@lval,f,c
  4653  0024E6  3E39               	incfsz	___fttol@exp1,f,c
  4654  0024E8  D7F9               	goto	l847
  4655  0024EA  D015               	goto	u2480
  4656  0024EC                     l846:
  4657  0024EC  0E17               	movlw	23
  4658  0024EE  6439               	cpfsgt	___fttol@exp1,c
  4659  0024F0  D00F               	goto	l852
  4660  0024F2  0E00               	movlw	0
  4661  0024F4  6E2B               	movwf	?___fttol,c
  4662  0024F6  0E00               	movlw	0
  4663  0024F8  6E2C               	movwf	?___fttol+1,c
  4664  0024FA  0E00               	movlw	0
  4665  0024FC  6E2D               	movwf	?___fttol+2,c
  4666  0024FE  0E00               	movlw	0
  4667  002500  6E2E               	movwf	?___fttol+3,c
  4668  002502  0012               	return	
  4669  002504  90D8               	bcf	status,0,c
  4670  002506  3635               	rlcf	___fttol@lval,f,c
  4671  002508  3636               	rlcf	___fttol@lval+1,f,c
  4672  00250A  3637               	rlcf	___fttol@lval+2,f,c
  4673  00250C  3638               	rlcf	___fttol@lval+3,f,c
  4674  00250E  0639               	decf	___fttol@exp1,f,c
  4675  002510                     l852:
  4676  002510  5039               	movf	___fttol@exp1,w,c
  4677  002512  A4D8               	btfss	status,2,c
  4678  002514  D7F7               	goto	l853
  4679  002516                     u2480:
  4680  002516  5034               	movf	___fttol@sign1,w,c
  4681  002518  B4D8               	btfsc	status,2,c
  4682  00251A  D008               	goto	l855
  4683  00251C  1E38               	comf	___fttol@lval+3,f,c
  4684  00251E  1E37               	comf	___fttol@lval+2,f,c
  4685  002520  1E36               	comf	___fttol@lval+1,f,c
  4686  002522  6C35               	negf	___fttol@lval,c
  4687  002524  0E00               	movlw	0
  4688  002526  2236               	addwfc	___fttol@lval+1,f,c
  4689  002528  2237               	addwfc	___fttol@lval+2,f,c
  4690  00252A  2238               	addwfc	___fttol@lval+3,f,c
  4691  00252C                     l855:
  4692  00252C  C035  F02B         	movff	___fttol@lval,?___fttol
  4693  002530  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4694  002534  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4695  002538  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4696  00253C  0012               	return	
  4697  00253E                     __end_of___fttol:
  4698                           	opt stack 0
  4699                           tblptru	equ	0xFF8
  4700                           tblptrh	equ	0xFF7
  4701                           tblptrl	equ	0xFF6
  4702                           tablat	equ	0xFF5
  4703                           prodh	equ	0xFF4
  4704                           prodl	equ	0xFF3
  4705                           postinc0	equ	0xFEE
  4706                           wreg	equ	0xFE8
  4707                           indf2	equ	0xFDF
  4708                           postinc2	equ	0xFDE
  4709                           postdec2	equ	0xFDD
  4710                           fsr2h	equ	0xFDA
  4711                           fsr2l	equ	0xFD9
  4712                           status	equ	0xFD8
  4713                           
  4714 ;; *************** function ___ftsub *****************
  4715 ;; Defined at:
  4716 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  f1              3   57[COMRAM] float 
  4719 ;;  f2              3   60[COMRAM] float 
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;		None
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  3   57[COMRAM] float 
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0, cstack
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4731 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;Total ram usage:        6 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    2
  4738 ;; This function calls:
  4739 ;;		___ftadd
  4740 ;; This function is called by:
  4741 ;;		_sprintf
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           	psect	text13
  4746  002F6C                     __ptext13:
  4747                           	opt stack 0
  4748  002F6C                     ___ftsub:
  4749                           	opt stack 27
  4750                           
  4751                           ;incstack = 0
  4752  002F6C  503D               	movf	___ftsub@f2,w,c
  4753  002F6E  103E               	iorwf	___ftsub@f2+1,w,c
  4754  002F70  103F               	iorwf	___ftsub@f2+2,w,c
  4755  002F72  B4D8               	btfsc	status,2,c
  4756  002F74  D006               	goto	l840
  4757  002F76  0E00               	movlw	0
  4758  002F78  1A3D               	xorwf	___ftsub@f2,f,c
  4759  002F7A  0E00               	movlw	0
  4760  002F7C  1A3E               	xorwf	___ftsub@f2+1,f,c
  4761  002F7E  0E80               	movlw	128
  4762  002F80  1A3F               	xorwf	___ftsub@f2+2,f,c
  4763  002F82                     l840:
  4764  002F82  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4765  002F86  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4766  002F8A  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4767  002F8E  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4768  002F92  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4769  002F96  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4770  002F9A  EC22  F010         	call	___ftadd	;wreg free
  4771  002F9E  C02E  F03A         	movff	?___ftadd,?___ftsub
  4772  002FA2  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4773  002FA6  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4774  002FAA  0012               	return	
  4775  002FAC                     __end_of___ftsub:
  4776                           	opt stack 0
  4777                           tblptru	equ	0xFF8
  4778                           tblptrh	equ	0xFF7
  4779                           tblptrl	equ	0xFF6
  4780                           tablat	equ	0xFF5
  4781                           prodh	equ	0xFF4
  4782                           prodl	equ	0xFF3
  4783                           postinc0	equ	0xFEE
  4784                           wreg	equ	0xFE8
  4785                           indf2	equ	0xFDF
  4786                           postinc2	equ	0xFDE
  4787                           postdec2	equ	0xFDD
  4788                           fsr2h	equ	0xFDA
  4789                           fsr2l	equ	0xFD9
  4790                           status	equ	0xFD8
  4791                           
  4792 ;; *************** function ___ftadd *****************
  4793 ;; Defined at:
  4794 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;  f1              3   45[COMRAM] float 
  4797 ;;  f2              3   48[COMRAM] float 
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;  exp1            1   56[COMRAM] unsigned char 
  4800 ;;  exp2            1   55[COMRAM] unsigned char 
  4801 ;;  sign            1   54[COMRAM] unsigned char 
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  3   45[COMRAM] float 
  4804 ;; Registers used:
  4805 ;;		wreg, status,2, status,0, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4811 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4812 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4813 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4814 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4815 ;;Total ram usage:       12 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    1
  4818 ;; This function calls:
  4819 ;;		___ftpack
  4820 ;; This function is called by:
  4821 ;;		_sprintf
  4822 ;;		___ftsub
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text14
  4827  002044                     __ptext14:
  4828                           	opt stack 0
  4829  002044                     ___ftadd:
  4830                           	opt stack 27
  4831                           
  4832                           ;incstack = 0
  4833  002044  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4834  002048  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4835  00204A  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4836  00204C  342F               	rlcf	___ftadd@f1+1,w,c
  4837  00204E  3634               	rlcf	??___ftadd& (0+255),f,c
  4838  002050  E301               	bnc	u1591
  4839  002052  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4840  002054                     u1591:
  4841  002054  5034               	movf	??___ftadd,w,c
  4842  002056  6E39               	movwf	___ftadd@exp1,c
  4843  002058  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4844  00205C  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4845  00205E  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4846  002060  3432               	rlcf	___ftadd@f2+1,w,c
  4847  002062  3634               	rlcf	??___ftadd& (0+255),f,c
  4848  002064  E301               	bnc	u1601
  4849  002066  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4850  002068                     u1601:
  4851  002068  5034               	movf	??___ftadd,w,c
  4852  00206A  6E38               	movwf	___ftadd@exp2,c
  4853  00206C  5039               	movf	___ftadd@exp1,w,c
  4854  00206E  B4D8               	btfsc	status,2,c
  4855  002070  D00B               	goto	u1630
  4856  002072  5038               	movf	___ftadd@exp2,w,c
  4857  002074  5C39               	subwf	___ftadd@exp1,w,c
  4858  002076  B0D8               	btfsc	status,0,c
  4859  002078  D00E               	goto	l758
  4860  00207A  5039               	movf	___ftadd@exp1,w,c
  4861  00207C  0800               	sublw	0
  4862  00207E  2438               	addwf	___ftadd@exp2,w,c
  4863  002080  6E34               	movwf	??___ftadd& (0+255),c
  4864  002082  0E18               	movlw	24
  4865  002084  6434               	cpfsgt	??___ftadd,c
  4866  002086  D007               	goto	l758
  4867  002088                     u1630:
  4868  002088  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4869  00208C  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4870  002090  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4871  002094  0012               	return	
  4872  002096                     l758:
  4873  002096  5038               	movf	___ftadd@exp2,w,c
  4874  002098  B4D8               	btfsc	status,2,c
  4875  00209A  D00B               	goto	u1660
  4876  00209C  5039               	movf	___ftadd@exp1,w,c
  4877  00209E  5C38               	subwf	___ftadd@exp2,w,c
  4878  0020A0  B0D8               	btfsc	status,0,c
  4879  0020A2  D00E               	goto	l762
  4880  0020A4  5038               	movf	___ftadd@exp2,w,c
  4881  0020A6  0800               	sublw	0
  4882  0020A8  2439               	addwf	___ftadd@exp1,w,c
  4883  0020AA  6E34               	movwf	??___ftadd& (0+255),c
  4884  0020AC  0E18               	movlw	24
  4885  0020AE  6434               	cpfsgt	??___ftadd,c
  4886  0020B0  D007               	goto	l762
  4887  0020B2                     u1660:
  4888  0020B2  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4889  0020B6  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4890  0020BA  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4891  0020BE  0012               	return	
  4892  0020C0                     l762:
  4893  0020C0  0E06               	movlw	6
  4894  0020C2  6E37               	movwf	___ftadd@sign,c
  4895  0020C4  BE30               	btfsc	___ftadd@f1+2,7,c
  4896  0020C6  8E37               	bsf	___ftadd@sign,7,c
  4897  0020C8  BE33               	btfsc	___ftadd@f2+2,7,c
  4898  0020CA  8C37               	bsf	___ftadd@sign,6,c
  4899  0020CC  8E2F               	bsf	___ftadd@f1+1,7,c
  4900  0020CE  0EFF               	movlw	255
  4901  0020D0  162E               	andwf	___ftadd@f1,f,c
  4902  0020D2  0EFF               	movlw	255
  4903  0020D4  162F               	andwf	___ftadd@f1+1,f,c
  4904  0020D6  0E00               	movlw	0
  4905  0020D8  1630               	andwf	___ftadd@f1+2,f,c
  4906  0020DA  8E32               	bsf	___ftadd@f2+1,7,c
  4907  0020DC  0EFF               	movlw	255
  4908  0020DE  1631               	andwf	___ftadd@f2,f,c
  4909  0020E0  0EFF               	movlw	255
  4910  0020E2  1632               	andwf	___ftadd@f2+1,f,c
  4911  0020E4  0E00               	movlw	0
  4912  0020E6  1633               	andwf	___ftadd@f2+2,f,c
  4913  0020E8  5038               	movf	___ftadd@exp2,w,c
  4914  0020EA  5C39               	subwf	___ftadd@exp1,w,c
  4915  0020EC  B0D8               	btfsc	status,0,c
  4916  0020EE  D01B               	goto	l767
  4917  0020F0                     u1690:
  4918  0020F0  90D8               	bcf	status,0,c
  4919  0020F2  3631               	rlcf	___ftadd@f2,f,c
  4920  0020F4  3632               	rlcf	___ftadd@f2+1,f,c
  4921  0020F6  3633               	rlcf	___ftadd@f2+2,f,c
  4922  0020F8  0638               	decf	___ftadd@exp2,f,c
  4923  0020FA  5039               	movf	___ftadd@exp1,w,c
  4924  0020FC  1838               	xorwf	___ftadd@exp2,w,c
  4925  0020FE  B4D8               	btfsc	status,2,c
  4926  002100  D00D               	goto	l772
  4927  002102  0637               	decf	___ftadd@sign,f,c
  4928  002104  C037  F034         	movff	___ftadd@sign,??___ftadd
  4929  002108  0E07               	movlw	7
  4930  00210A  1634               	andwf	??___ftadd,f,c
  4931  00210C  B4D8               	btfsc	status,2,c
  4932  00210E  D006               	goto	l772
  4933  002110  D7EF               	goto	u1690
  4934  002112  90D8               	bcf	status,0,c
  4935  002114  3230               	rrcf	___ftadd@f1+2,f,c
  4936  002116  322F               	rrcf	___ftadd@f1+1,f,c
  4937  002118  322E               	rrcf	___ftadd@f1,f,c
  4938  00211A  2A39               	incf	___ftadd@exp1,f,c
  4939  00211C                     l772:
  4940  00211C  5038               	movf	___ftadd@exp2,w,c
  4941  00211E  1839               	xorwf	___ftadd@exp1,w,c
  4942  002120  B4D8               	btfsc	status,2,c
  4943  002122  D01F               	goto	u1760
  4944  002124  D7F6               	goto	l773
  4945  002126                     l767:
  4946  002126  5039               	movf	___ftadd@exp1,w,c
  4947  002128  5C38               	subwf	___ftadd@exp2,w,c
  4948  00212A  B0D8               	btfsc	status,0,c
  4949  00212C  D01A               	goto	u1760
  4950  00212E                     u1730:
  4951  00212E  90D8               	bcf	status,0,c
  4952  002130  362E               	rlcf	___ftadd@f1,f,c
  4953  002132  362F               	rlcf	___ftadd@f1+1,f,c
  4954  002134  3630               	rlcf	___ftadd@f1+2,f,c
  4955  002136  0639               	decf	___ftadd@exp1,f,c
  4956  002138  5039               	movf	___ftadd@exp1,w,c
  4957  00213A  1838               	xorwf	___ftadd@exp2,w,c
  4958  00213C  B4D8               	btfsc	status,2,c
  4959  00213E  D00D               	goto	l781
  4960  002140  0637               	decf	___ftadd@sign,f,c
  4961  002142  C037  F034         	movff	___ftadd@sign,??___ftadd
  4962  002146  0E07               	movlw	7
  4963  002148  1634               	andwf	??___ftadd,f,c
  4964  00214A  B4D8               	btfsc	status,2,c
  4965  00214C  D006               	goto	l781
  4966  00214E  D7EF               	goto	u1730
  4967  002150  90D8               	bcf	status,0,c
  4968  002152  3233               	rrcf	___ftadd@f2+2,f,c
  4969  002154  3232               	rrcf	___ftadd@f2+1,f,c
  4970  002156  3231               	rrcf	___ftadd@f2,f,c
  4971  002158  2A38               	incf	___ftadd@exp2,f,c
  4972  00215A                     l781:
  4973  00215A  5038               	movf	___ftadd@exp2,w,c
  4974  00215C  1839               	xorwf	___ftadd@exp1,w,c
  4975  00215E  A4D8               	btfss	status,2,c
  4976  002160  D7F7               	goto	l782
  4977  002162                     u1760:
  4978  002162  AE37               	btfss	___ftadd@sign,7,c
  4979  002164  D00C               	goto	l784
  4980  002166  0EFF               	movlw	255
  4981  002168  1A2E               	xorwf	___ftadd@f1,f,c
  4982  00216A  0EFF               	movlw	255
  4983  00216C  1A2F               	xorwf	___ftadd@f1+1,f,c
  4984  00216E  0EFF               	movlw	255
  4985  002170  1A30               	xorwf	___ftadd@f1+2,f,c
  4986  002172  0E01               	movlw	1
  4987  002174  262E               	addwf	___ftadd@f1,f,c
  4988  002176  0E00               	movlw	0
  4989  002178  222F               	addwfc	___ftadd@f1+1,f,c
  4990  00217A  0E00               	movlw	0
  4991  00217C  2230               	addwfc	___ftadd@f1+2,f,c
  4992  00217E                     l784:
  4993  00217E  AC37               	btfss	___ftadd@sign,6,c
  4994  002180  D00C               	goto	l785
  4995  002182  0EFF               	movlw	255
  4996  002184  1A31               	xorwf	___ftadd@f2,f,c
  4997  002186  0EFF               	movlw	255
  4998  002188  1A32               	xorwf	___ftadd@f2+1,f,c
  4999  00218A  0EFF               	movlw	255
  5000  00218C  1A33               	xorwf	___ftadd@f2+2,f,c
  5001  00218E  0E01               	movlw	1
  5002  002190  2631               	addwf	___ftadd@f2,f,c
  5003  002192  0E00               	movlw	0
  5004  002194  2232               	addwfc	___ftadd@f2+1,f,c
  5005  002196  0E00               	movlw	0
  5006  002198  2233               	addwfc	___ftadd@f2+2,f,c
  5007  00219A                     l785:
  5008  00219A  0E00               	movlw	0
  5009  00219C  6E37               	movwf	___ftadd@sign,c
  5010  00219E  502E               	movf	___ftadd@f1,w,c
  5011  0021A0  2631               	addwf	___ftadd@f2,f,c
  5012  0021A2  502F               	movf	___ftadd@f1+1,w,c
  5013  0021A4  2232               	addwfc	___ftadd@f2+1,f,c
  5014  0021A6  5030               	movf	___ftadd@f1+2,w,c
  5015  0021A8  2233               	addwfc	___ftadd@f2+2,f,c
  5016  0021AA  AE33               	btfss	___ftadd@f2+2,7,c
  5017  0021AC  D00E               	goto	l786
  5018  0021AE  0EFF               	movlw	255
  5019  0021B0  1A31               	xorwf	___ftadd@f2,f,c
  5020  0021B2  0EFF               	movlw	255
  5021  0021B4  1A32               	xorwf	___ftadd@f2+1,f,c
  5022  0021B6  0EFF               	movlw	255
  5023  0021B8  1A33               	xorwf	___ftadd@f2+2,f,c
  5024  0021BA  0E01               	movlw	1
  5025  0021BC  2631               	addwf	___ftadd@f2,f,c
  5026  0021BE  0E00               	movlw	0
  5027  0021C0  2232               	addwfc	___ftadd@f2+1,f,c
  5028  0021C2  0E00               	movlw	0
  5029  0021C4  2233               	addwfc	___ftadd@f2+2,f,c
  5030  0021C6  0E01               	movlw	1
  5031  0021C8  6E37               	movwf	___ftadd@sign,c
  5032  0021CA                     l786:
  5033  0021CA  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5034  0021CE  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5035  0021D2  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5036  0021D6  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5037  0021DA  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5038  0021DE  EC8C  F013         	call	___ftpack	;wreg free
  5039  0021E2  C001  F02E         	movff	?___ftpack,?___ftadd
  5040  0021E6  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5041  0021EA  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5042  0021EE  0012               	return	
  5043  0021F0                     __end_of___ftadd:
  5044                           	opt stack 0
  5045                           tblptru	equ	0xFF8
  5046                           tblptrh	equ	0xFF7
  5047                           tblptrl	equ	0xFF6
  5048                           tablat	equ	0xFF5
  5049                           prodh	equ	0xFF4
  5050                           prodl	equ	0xFF3
  5051                           postinc0	equ	0xFEE
  5052                           wreg	equ	0xFE8
  5053                           indf2	equ	0xFDF
  5054                           postinc2	equ	0xFDE
  5055                           postdec2	equ	0xFDD
  5056                           fsr2h	equ	0xFDA
  5057                           fsr2l	equ	0xFD9
  5058                           status	equ	0xFD8
  5059                           
  5060 ;; *************** function ___ftneg *****************
  5061 ;; Defined at:
  5062 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;  f1              3    0[COMRAM] float 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;		None
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  3    0[COMRAM] float 
  5069 ;; Registers used:
  5070 ;;		wreg, status,2, status,0
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5076 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5079 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5080 ;;Total ram usage:        3 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; This function calls:
  5083 ;;		Nothing
  5084 ;; This function is called by:
  5085 ;;		_sprintf
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           	psect	text15
  5090  002FFA                     __ptext15:
  5091                           	opt stack 0
  5092  002FFA                     ___ftneg:
  5093                           	opt stack 29
  5094                           
  5095                           ;incstack = 0
  5096  002FFA  5001               	movf	___ftneg@f1,w,c
  5097  002FFC  1002               	iorwf	___ftneg@f1+1,w,c
  5098  002FFE  1003               	iorwf	___ftneg@f1+2,w,c
  5099  003000  B4D8               	btfsc	status,2,c
  5100  003002  D006               	goto	l834
  5101  003004  0E00               	movlw	0
  5102  003006  1A01               	xorwf	___ftneg@f1,f,c
  5103  003008  0E00               	movlw	0
  5104  00300A  1A02               	xorwf	___ftneg@f1+1,f,c
  5105  00300C  0E80               	movlw	128
  5106  00300E  1A03               	xorwf	___ftneg@f1+2,f,c
  5107  003010                     l834:
  5108  003010  C001  F001         	movff	___ftneg@f1,?___ftneg
  5109  003014  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5110  003018  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5111  00301C  0012               	return		;funcret
  5112  00301E                     __end_of___ftneg:
  5113                           	opt stack 0
  5114                           tblptru	equ	0xFF8
  5115                           tblptrh	equ	0xFF7
  5116                           tblptrl	equ	0xFF6
  5117                           tablat	equ	0xFF5
  5118                           prodh	equ	0xFF4
  5119                           prodl	equ	0xFF3
  5120                           postinc0	equ	0xFEE
  5121                           wreg	equ	0xFE8
  5122                           indf2	equ	0xFDF
  5123                           postinc2	equ	0xFDE
  5124                           postdec2	equ	0xFDD
  5125                           fsr2h	equ	0xFDA
  5126                           fsr2l	equ	0xFD9
  5127                           status	equ	0xFD8
  5128                           
  5129 ;; *************** function ___ftge *****************
  5130 ;; Defined at:
  5131 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;  ff1             3    0[COMRAM] float 
  5134 ;;  ff2             3    3[COMRAM] float 
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;		None
  5137 ;; Return value:  Size  Location     Type
  5138 ;;		None               void
  5139 ;; Registers used:
  5140 ;;		wreg, status,2, status,0
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5146 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5148 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;Total ram usage:        9 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; This function calls:
  5153 ;;		Nothing
  5154 ;; This function is called by:
  5155 ;;		_main
  5156 ;;		_sprintf
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text16
  5161  0027C6                     __ptext16:
  5162                           	opt stack 0
  5163  0027C6                     ___ftge:
  5164                           	opt stack 29
  5165                           
  5166                           ;incstack = 0
  5167  0027C6  AE03               	btfss	___ftge@ff1+2,7,c
  5168  0027C8  D016               	goto	l816
  5169  0027CA  C001  F007         	movff	___ftge@ff1,??___ftge
  5170  0027CE  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5171  0027D2  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5172  0027D6  1E07               	comf	??___ftge,f,c
  5173  0027D8  1E08               	comf	??___ftge+1,f,c
  5174  0027DA  1E09               	comf	??___ftge+2,f,c
  5175  0027DC  2A07               	incf	??___ftge,f,c
  5176  0027DE  0E00               	movlw	0
  5177  0027E0  2208               	addwfc	??___ftge+1,f,c
  5178  0027E2  2209               	addwfc	??___ftge+2,f,c
  5179  0027E4  0E00               	movlw	0
  5180  0027E6  2407               	addwf	??___ftge,w,c
  5181  0027E8  6E01               	movwf	___ftge@ff1,c
  5182  0027EA  0E00               	movlw	0
  5183  0027EC  2008               	addwfc	??___ftge+1,w,c
  5184  0027EE  6E02               	movwf	___ftge@ff1+1,c
  5185  0027F0  0E80               	movlw	128
  5186  0027F2  2009               	addwfc	??___ftge+2,w,c
  5187  0027F4  6E03               	movwf	___ftge@ff1+2,c
  5188  0027F6                     l816:
  5189  0027F6  AE06               	btfss	___ftge@ff2+2,7,c
  5190  0027F8  D016               	goto	l817
  5191  0027FA  C004  F007         	movff	___ftge@ff2,??___ftge
  5192  0027FE  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5193  002802  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5194  002806  1E07               	comf	??___ftge,f,c
  5195  002808  1E08               	comf	??___ftge+1,f,c
  5196  00280A  1E09               	comf	??___ftge+2,f,c
  5197  00280C  2A07               	incf	??___ftge,f,c
  5198  00280E  0E00               	movlw	0
  5199  002810  2208               	addwfc	??___ftge+1,f,c
  5200  002812  2209               	addwfc	??___ftge+2,f,c
  5201  002814  0E00               	movlw	0
  5202  002816  2407               	addwf	??___ftge,w,c
  5203  002818  6E04               	movwf	___ftge@ff2,c
  5204  00281A  0E00               	movlw	0
  5205  00281C  2008               	addwfc	??___ftge+1,w,c
  5206  00281E  6E05               	movwf	___ftge@ff2+1,c
  5207  002820  0E80               	movlw	128
  5208  002822  2009               	addwfc	??___ftge+2,w,c
  5209  002824  6E06               	movwf	___ftge@ff2+2,c
  5210  002826                     l817:
  5211  002826  0E00               	movlw	0
  5212  002828  1A01               	xorwf	___ftge@ff1,f,c
  5213  00282A  0E00               	movlw	0
  5214  00282C  1A02               	xorwf	___ftge@ff1+1,f,c
  5215  00282E  0E80               	movlw	128
  5216  002830  1A03               	xorwf	___ftge@ff1+2,f,c
  5217  002832  0E00               	movlw	0
  5218  002834  1A04               	xorwf	___ftge@ff2,f,c
  5219  002836  0E00               	movlw	0
  5220  002838  1A05               	xorwf	___ftge@ff2+1,f,c
  5221  00283A  0E80               	movlw	128
  5222  00283C  1A06               	xorwf	___ftge@ff2+2,f,c
  5223  00283E  5004               	movf	___ftge@ff2,w,c
  5224  002840  5C01               	subwf	___ftge@ff1,w,c
  5225  002842  5005               	movf	___ftge@ff2+1,w,c
  5226  002844  5802               	subwfb	___ftge@ff1+1,w,c
  5227  002846  5006               	movf	___ftge@ff2+2,w,c
  5228  002848  5803               	subwfb	___ftge@ff1+2,w,c
  5229  00284A  B0D8               	btfsc	status,0,c
  5230  00284C  D002               	goto	l2428
  5231  00284E  90D8               	bcf	status,0,c
  5232  002850  0012               	return	
  5233  002852                     l2428:
  5234  002852  80D8               	bsf	status,0,c
  5235  002854  0012               	return	
  5236  002856                     __end_of___ftge:
  5237                           	opt stack 0
  5238                           tblptru	equ	0xFF8
  5239                           tblptrh	equ	0xFF7
  5240                           tblptrl	equ	0xFF6
  5241                           tablat	equ	0xFF5
  5242                           prodh	equ	0xFF4
  5243                           prodl	equ	0xFF3
  5244                           postinc0	equ	0xFEE
  5245                           wreg	equ	0xFE8
  5246                           indf2	equ	0xFDF
  5247                           postinc2	equ	0xFDE
  5248                           postdec2	equ	0xFDD
  5249                           fsr2h	equ	0xFDA
  5250                           fsr2l	equ	0xFD9
  5251                           status	equ	0xFD8
  5252                           
  5253 ;; *************** function _read_Uout *****************
  5254 ;; Defined at:
  5255 ;;		line 28 in file "MPPT.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      void 
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;Total ram usage:        2 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    2
  5276 ;; This function calls:
  5277 ;;		___ftdiv
  5278 ;;		___ftmul
  5279 ;;		___lbtoft
  5280 ;; This function is called by:
  5281 ;;		_main
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text17
  5286  002856                     __ptext17:
  5287                           	opt stack 0
  5288  002856                     _read_Uout:
  5289                           	opt stack 28
  5290                           
  5291                           ;MPPT.c: 30: ADCON0=0b00000111;
  5292                           
  5293                           ;incstack = 0
  5294  002856  0E07               	movlw	7
  5295  002858  6EC2               	movwf	4034,c	;volatile
  5296                           
  5297                           ;MPPT.c: 31: _delay((unsigned long)((10)*(64000000/4000.0)));
  5298  00285A  0ED0               	movlw	208
  5299  00285C  6E24               	movwf	??_read_Uout& (0+255),c
  5300  00285E  0ECA               	movlw	202
  5301  002860                     u3007:
  5302  002860  2EE8               	decfsz	wreg,f,c
  5303  002862  D7FE               	bra	u3007
  5304  002864  2E24               	decfsz	??_read_Uout& (0+255),f,c
  5305  002866  D7FC               	bra	u3007
  5306                           
  5307                           ;MPPT.c: 32: ADCON0bits.GO=1;
  5308  002868  82C2               	bsf	4034,1,c	;volatile
  5309                           
  5310                           ;MPPT.c: 33: _delay((unsigned long)((100)*(64000000/4000.0)));
  5311  00286A  0E09               	movlw	9
  5312  00286C  6E25               	movwf	(??_read_Uout+1)& (0+255),c
  5313  00286E  0E1E               	movlw	30
  5314  002870  6E24               	movwf	??_read_Uout& (0+255),c
  5315  002872  0EE4               	movlw	228
  5316  002874                     u3017:
  5317  002874  2EE8               	decfsz	wreg,f,c
  5318  002876  D7FE               	bra	u3017
  5319  002878  2E24               	decfsz	??_read_Uout& (0+255),f,c
  5320  00287A  D7FC               	bra	u3017
  5321  00287C  2E25               	decfsz	(??_read_Uout+1)& (0+255),f,c
  5322  00287E  D7FA               	bra	u3017
  5323  002880  D000               	nop2	
  5324                           
  5325                           ;MPPT.c: 34: rez_adc_U=ADRESH;
  5326  002882  50C4               	movf	4036,w,c	;volatile
  5327  002884  EC0F  F018         	call	___lbtoft
  5328  002888  C009  F052         	movff	?___lbtoft,_rez_adc_U
  5329  00288C  C00A  F053         	movff	?___lbtoft+1,_rez_adc_U+1
  5330  002890  C00B  F054         	movff	?___lbtoft+2,_rez_adc_U+2
  5331                           
  5332                           ;MPPT.c: 35: tens=rez_adc_U*0.01953125;
  5333  002894  C052  F015         	movff	_rez_adc_U,___ftmul@f1
  5334  002898  C053  F016         	movff	_rez_adc_U+1,___ftmul@f1+1
  5335  00289C  C054  F017         	movff	_rez_adc_U+2,___ftmul@f1+2
  5336  0028A0  0E00               	movlw	0
  5337  0028A2  6E18               	movwf	___ftmul@f2,c
  5338  0028A4  0EA0               	movlw	160
  5339  0028A6  6E19               	movwf	___ftmul@f2+1,c
  5340  0028A8  0E3C               	movlw	60
  5341  0028AA  6E1A               	movwf	___ftmul@f2+2,c
  5342  0028AC  EC9F  F012         	call	___ftmul	;wreg free
  5343  0028B0  C015  F04F         	movff	?___ftmul,_tens
  5344  0028B4  C016  F050         	movff	?___ftmul+1,_tens+1
  5345  0028B8  C017  F051         	movff	?___ftmul+2,_tens+2
  5346                           
  5347                           ;MPPT.c: 36: Uout=tens/0.25;
  5348  0028BC  C04F  F009         	movff	_tens,___ftdiv@f1
  5349  0028C0  C050  F00A         	movff	_tens+1,___ftdiv@f1+1
  5350  0028C4  C051  F00B         	movff	_tens+2,___ftdiv@f1+2
  5351  0028C8  0E00               	movlw	0
  5352  0028CA  6E0C               	movwf	___ftdiv@f2,c
  5353  0028CC  0E80               	movlw	128
  5354  0028CE  6E0D               	movwf	___ftdiv@f2+1,c
  5355  0028D0  0E3E               	movlw	62
  5356  0028D2  6E0E               	movwf	___ftdiv@f2+2,c
  5357  0028D4  EC19  F013         	call	___ftdiv	;wreg free
  5358  0028D8  C009  F06E         	movff	?___ftdiv,_Uout
  5359  0028DC  C00A  F06F         	movff	?___ftdiv+1,_Uout+1
  5360  0028E0  C00B  F070         	movff	?___ftdiv+2,_Uout+2
  5361  0028E4  0012               	return		;funcret
  5362  0028E6                     __end_of_read_Uout:
  5363                           	opt stack 0
  5364                           tblptru	equ	0xFF8
  5365                           tblptrh	equ	0xFF7
  5366                           tblptrl	equ	0xFF6
  5367                           tablat	equ	0xFF5
  5368                           prodh	equ	0xFF4
  5369                           prodl	equ	0xFF3
  5370                           postinc0	equ	0xFEE
  5371                           wreg	equ	0xFE8
  5372                           indf2	equ	0xFDF
  5373                           postinc2	equ	0xFDE
  5374                           postdec2	equ	0xFDD
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379 ;; *************** function _read_Uin *****************
  5380 ;; Defined at:
  5381 ;;		line 39 in file "MPPT.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;		None
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;		None
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  1    wreg      void 
  5388 ;; Registers used:
  5389 ;;		wreg, status,2, status,0, cstack
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;Total ram usage:        2 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:    2
  5402 ;; This function calls:
  5403 ;;		___ftdiv
  5404 ;;		___ftmul
  5405 ;;		___lbtoft
  5406 ;; This function is called by:
  5407 ;;		_main
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text18
  5412  0028E6                     __ptext18:
  5413                           	opt stack 0
  5414  0028E6                     _read_Uin:
  5415                           	opt stack 28
  5416                           
  5417                           ;MPPT.c: 41: ADCON0=0b00001111;
  5418                           
  5419                           ;incstack = 0
  5420  0028E6  0E0F               	movlw	15
  5421  0028E8  6EC2               	movwf	4034,c	;volatile
  5422                           
  5423                           ;MPPT.c: 42: _delay((unsigned long)((10)*(64000000/4000.0)));
  5424  0028EA  0ED0               	movlw	208
  5425  0028EC  6E24               	movwf	??_read_Uin& (0+255),c
  5426  0028EE  0ECA               	movlw	202
  5427  0028F0                     u3027:
  5428  0028F0  2EE8               	decfsz	wreg,f,c
  5429  0028F2  D7FE               	bra	u3027
  5430  0028F4  2E24               	decfsz	??_read_Uin& (0+255),f,c
  5431  0028F6  D7FC               	bra	u3027
  5432                           
  5433                           ;MPPT.c: 43: ADCON0bits.GO=1;
  5434  0028F8  82C2               	bsf	4034,1,c	;volatile
  5435                           
  5436                           ;MPPT.c: 44: _delay((unsigned long)((100)*(64000000/4000.0)));
  5437  0028FA  0E09               	movlw	9
  5438  0028FC  6E25               	movwf	(??_read_Uin+1)& (0+255),c
  5439  0028FE  0E1E               	movlw	30
  5440  002900  6E24               	movwf	??_read_Uin& (0+255),c
  5441  002902  0EE4               	movlw	228
  5442  002904                     u3037:
  5443  002904  2EE8               	decfsz	wreg,f,c
  5444  002906  D7FE               	bra	u3037
  5445  002908  2E24               	decfsz	??_read_Uin& (0+255),f,c
  5446  00290A  D7FC               	bra	u3037
  5447  00290C  2E25               	decfsz	(??_read_Uin+1)& (0+255),f,c
  5448  00290E  D7FA               	bra	u3037
  5449  002910  D000               	nop2	
  5450                           
  5451                           ;MPPT.c: 45: rez_adc_U=ADRESH;
  5452  002912  50C4               	movf	4036,w,c	;volatile
  5453  002914  EC0F  F018         	call	___lbtoft
  5454  002918  C009  F052         	movff	?___lbtoft,_rez_adc_U
  5455  00291C  C00A  F053         	movff	?___lbtoft+1,_rez_adc_U+1
  5456  002920  C00B  F054         	movff	?___lbtoft+2,_rez_adc_U+2
  5457                           
  5458                           ;MPPT.c: 46: tens=rez_adc_U*0.01953125;
  5459  002924  C052  F015         	movff	_rez_adc_U,___ftmul@f1
  5460  002928  C053  F016         	movff	_rez_adc_U+1,___ftmul@f1+1
  5461  00292C  C054  F017         	movff	_rez_adc_U+2,___ftmul@f1+2
  5462  002930  0E00               	movlw	0
  5463  002932  6E18               	movwf	___ftmul@f2,c
  5464  002934  0EA0               	movlw	160
  5465  002936  6E19               	movwf	___ftmul@f2+1,c
  5466  002938  0E3C               	movlw	60
  5467  00293A  6E1A               	movwf	___ftmul@f2+2,c
  5468  00293C  EC9F  F012         	call	___ftmul	;wreg free
  5469  002940  C015  F04F         	movff	?___ftmul,_tens
  5470  002944  C016  F050         	movff	?___ftmul+1,_tens+1
  5471  002948  C017  F051         	movff	?___ftmul+2,_tens+2
  5472                           
  5473                           ;MPPT.c: 47: Uin=tens/0.2;
  5474  00294C  C04F  F009         	movff	_tens,___ftdiv@f1
  5475  002950  C050  F00A         	movff	_tens+1,___ftdiv@f1+1
  5476  002954  C051  F00B         	movff	_tens+2,___ftdiv@f1+2
  5477  002958  0ECD               	movlw	205
  5478  00295A  6E0C               	movwf	___ftdiv@f2,c
  5479  00295C  0E4C               	movlw	76
  5480  00295E  6E0D               	movwf	___ftdiv@f2+1,c
  5481  002960  0E3E               	movlw	62
  5482  002962  6E0E               	movwf	___ftdiv@f2+2,c
  5483  002964  EC19  F013         	call	___ftdiv	;wreg free
  5484  002968  C009  F06B         	movff	?___ftdiv,_Uin
  5485  00296C  C00A  F06C         	movff	?___ftdiv+1,_Uin+1
  5486  002970  C00B  F06D         	movff	?___ftdiv+2,_Uin+2
  5487  002974  0012               	return		;funcret
  5488  002976                     __end_of_read_Uin:
  5489                           	opt stack 0
  5490                           tblptru	equ	0xFF8
  5491                           tblptrh	equ	0xFF7
  5492                           tblptrl	equ	0xFF6
  5493                           tablat	equ	0xFF5
  5494                           prodh	equ	0xFF4
  5495                           prodl	equ	0xFF3
  5496                           postinc0	equ	0xFEE
  5497                           wreg	equ	0xFE8
  5498                           indf2	equ	0xFDF
  5499                           postinc2	equ	0xFDE
  5500                           postdec2	equ	0xFDD
  5501                           fsr2h	equ	0xFDA
  5502                           fsr2l	equ	0xFD9
  5503                           status	equ	0xFD8
  5504                           
  5505 ;; *************** function ___ftdiv *****************
  5506 ;; Defined at:
  5507 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;  f1              3    8[COMRAM] float 
  5510 ;;  f2              3   11[COMRAM] float 
  5511 ;; Auto vars:     Size  Location     Type
  5512 ;;  f3              3   18[COMRAM] float 
  5513 ;;  sign            1   22[COMRAM] unsigned char 
  5514 ;;  exp             1   21[COMRAM] unsigned char 
  5515 ;;  cntr            1   17[COMRAM] unsigned char 
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  3    8[COMRAM] float 
  5518 ;; Registers used:
  5519 ;;		wreg, status,2, status,0, cstack
  5520 ;; Tracked objects:
  5521 ;;		On entry : 0/0
  5522 ;;		On exit  : 0/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5525 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5526 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;Total ram usage:       15 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; Hardware stack levels required when called:    1
  5532 ;; This function calls:
  5533 ;;		___ftpack
  5534 ;; This function is called by:
  5535 ;;		_read_Uout
  5536 ;;		_read_Uin
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           	psect	text19
  5541  002632                     __ptext19:
  5542                           	opt stack 0
  5543  002632                     ___ftdiv:
  5544                           	opt stack 28
  5545                           
  5546                           ;incstack = 0
  5547  002632  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  5548  002636  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5549  002638  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5550  00263A  340A               	rlcf	___ftdiv@f1+1,w,c
  5551  00263C  360F               	rlcf	??___ftdiv& (0+255),f,c
  5552  00263E  E301               	bnc	u2321
  5553  002640  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5554  002642                     u2321:
  5555  002642  500F               	movf	??___ftdiv,w,c
  5556  002644  6E16               	movwf	___ftdiv@exp,c
  5557  002646  5016               	movf	___ftdiv@exp,w,c
  5558  002648  A4D8               	btfss	status,2,c
  5559  00264A  D007               	goto	l791
  5560  00264C  0E00               	movlw	0
  5561  00264E  6E09               	movwf	?___ftdiv,c
  5562  002650  0E00               	movlw	0
  5563  002652  6E0A               	movwf	?___ftdiv+1,c
  5564  002654  0E00               	movlw	0
  5565  002656  6E0B               	movwf	?___ftdiv+2,c
  5566  002658  0012               	return	
  5567  00265A                     l791:
  5568  00265A  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  5569  00265E  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5570  002660  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5571  002662  340D               	rlcf	___ftdiv@f2+1,w,c
  5572  002664  360F               	rlcf	??___ftdiv& (0+255),f,c
  5573  002666  E301               	bnc	u2341
  5574  002668  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5575  00266A                     u2341:
  5576  00266A  500F               	movf	??___ftdiv,w,c
  5577  00266C  6E17               	movwf	___ftdiv@sign,c
  5578  00266E  5017               	movf	___ftdiv@sign,w,c
  5579  002670  A4D8               	btfss	status,2,c
  5580  002672  D007               	goto	l793
  5581  002674  0E00               	movlw	0
  5582  002676  6E09               	movwf	?___ftdiv,c
  5583  002678  0E00               	movlw	0
  5584  00267A  6E0A               	movwf	?___ftdiv+1,c
  5585  00267C  0E00               	movlw	0
  5586  00267E  6E0B               	movwf	?___ftdiv+2,c
  5587  002680  0012               	return	
  5588  002682                     l793:
  5589  002682  0E00               	movlw	0
  5590  002684  6E13               	movwf	___ftdiv@f3,c
  5591  002686  0E00               	movlw	0
  5592  002688  6E14               	movwf	___ftdiv@f3+1,c
  5593  00268A  0E00               	movlw	0
  5594  00268C  6E15               	movwf	___ftdiv@f3+2,c
  5595  00268E  5017               	movf	___ftdiv@sign,w,c
  5596  002690  0F89               	addlw	137
  5597  002692  5E16               	subwf	___ftdiv@exp,f,c
  5598  002694  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  5599  002698  500E               	movf	___ftdiv@f2+2,w,c
  5600  00269A  1A17               	xorwf	___ftdiv@sign,f,c
  5601  00269C  0E80               	movlw	128
  5602  00269E  1617               	andwf	___ftdiv@sign,f,c
  5603  0026A0  8E0A               	bsf	___ftdiv@f1+1,7,c
  5604  0026A2  0EFF               	movlw	255
  5605  0026A4  1609               	andwf	___ftdiv@f1,f,c
  5606  0026A6  0EFF               	movlw	255
  5607  0026A8  160A               	andwf	___ftdiv@f1+1,f,c
  5608  0026AA  0E00               	movlw	0
  5609  0026AC  160B               	andwf	___ftdiv@f1+2,f,c
  5610  0026AE  8E0D               	bsf	___ftdiv@f2+1,7,c
  5611  0026B0  0EFF               	movlw	255
  5612  0026B2  160C               	andwf	___ftdiv@f2,f,c
  5613  0026B4  0EFF               	movlw	255
  5614  0026B6  160D               	andwf	___ftdiv@f2+1,f,c
  5615  0026B8  0E00               	movlw	0
  5616  0026BA  160E               	andwf	___ftdiv@f2+2,f,c
  5617  0026BC  0E18               	movlw	24
  5618  0026BE  6E12               	movwf	___ftdiv@cntr,c
  5619  0026C0  90D8               	bcf	status,0,c
  5620  0026C2  3613               	rlcf	___ftdiv@f3,f,c
  5621  0026C4  3614               	rlcf	___ftdiv@f3+1,f,c
  5622  0026C6  3615               	rlcf	___ftdiv@f3+2,f,c
  5623  0026C8  500C               	movf	___ftdiv@f2,w,c
  5624  0026CA  5C09               	subwf	___ftdiv@f1,w,c
  5625  0026CC  500D               	movf	___ftdiv@f2+1,w,c
  5626  0026CE  580A               	subwfb	___ftdiv@f1+1,w,c
  5627  0026D0  500E               	movf	___ftdiv@f2+2,w,c
  5628  0026D2  580B               	subwfb	___ftdiv@f1+2,w,c
  5629  0026D4  A0D8               	btfss	status,0,c
  5630  0026D6  D007               	goto	l795
  5631  0026D8  500C               	movf	___ftdiv@f2,w,c
  5632  0026DA  5E09               	subwf	___ftdiv@f1,f,c
  5633  0026DC  500D               	movf	___ftdiv@f2+1,w,c
  5634  0026DE  5A0A               	subwfb	___ftdiv@f1+1,f,c
  5635  0026E0  500E               	movf	___ftdiv@f2+2,w,c
  5636  0026E2  5A0B               	subwfb	___ftdiv@f1+2,f,c
  5637  0026E4  8013               	bsf	___ftdiv@f3,0,c
  5638  0026E6                     l795:
  5639  0026E6  90D8               	bcf	status,0,c
  5640  0026E8  3609               	rlcf	___ftdiv@f1,f,c
  5641  0026EA  360A               	rlcf	___ftdiv@f1+1,f,c
  5642  0026EC  360B               	rlcf	___ftdiv@f1+2,f,c
  5643  0026EE  2E12               	decfsz	___ftdiv@cntr,f,c
  5644  0026F0  D7E7               	goto	l794
  5645  0026F2  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  5646  0026F6  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5647  0026FA  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5648  0026FE  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  5649  002702  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  5650  002706  EC8C  F013         	call	___ftpack	;wreg free
  5651  00270A  C001  F009         	movff	?___ftpack,?___ftdiv
  5652  00270E  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  5653  002712  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  5654  002716  0012               	return	
  5655  002718                     __end_of___ftdiv:
  5656                           	opt stack 0
  5657                           tblptru	equ	0xFF8
  5658                           tblptrh	equ	0xFF7
  5659                           tblptrl	equ	0xFF6
  5660                           tablat	equ	0xFF5
  5661                           prodh	equ	0xFF4
  5662                           prodl	equ	0xFF3
  5663                           postinc0	equ	0xFEE
  5664                           wreg	equ	0xFE8
  5665                           indf2	equ	0xFDF
  5666                           postinc2	equ	0xFDE
  5667                           postdec2	equ	0xFDD
  5668                           fsr2h	equ	0xFDA
  5669                           fsr2l	equ	0xFD9
  5670                           status	equ	0xFD8
  5671                           
  5672 ;; *************** function _read_Iout *****************
  5673 ;; Defined at:
  5674 ;;		line 15 in file "MPPT.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;		None
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;		None
  5679 ;; Return value:  Size  Location     Type
  5680 ;;                  1    wreg      void 
  5681 ;; Registers used:
  5682 ;;		wreg, status,2, status,0, cstack
  5683 ;; Tracked objects:
  5684 ;;		On entry : 0/0
  5685 ;;		On exit  : 0/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;Total ram usage:        2 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    2
  5695 ;; This function calls:
  5696 ;;		___ftmul
  5697 ;;		___lbtoft
  5698 ;; This function is called by:
  5699 ;;		_main
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           	psect	text20
  5704  002B6E                     __ptext20:
  5705                           	opt stack 0
  5706  002B6E                     _read_Iout:
  5707                           	opt stack 28
  5708                           
  5709                           ;MPPT.c: 17: ADCON0=0b00001011;
  5710                           
  5711                           ;incstack = 0
  5712  002B6E  0E0B               	movlw	11
  5713  002B70  6EC2               	movwf	4034,c	;volatile
  5714                           
  5715                           ;MPPT.c: 18: _delay((unsigned long)((10)*(64000000/4000.0)));
  5716  002B72  0ED0               	movlw	208
  5717  002B74  6E24               	movwf	??_read_Iout& (0+255),c
  5718  002B76  0ECA               	movlw	202
  5719  002B78                     u3047:
  5720  002B78  2EE8               	decfsz	wreg,f,c
  5721  002B7A  D7FE               	bra	u3047
  5722  002B7C  2E24               	decfsz	??_read_Iout& (0+255),f,c
  5723  002B7E  D7FC               	bra	u3047
  5724                           
  5725                           ;MPPT.c: 19: ADCON0bits.GO=1;
  5726  002B80  82C2               	bsf	4034,1,c	;volatile
  5727                           
  5728                           ;MPPT.c: 20: _delay((unsigned long)((100)*(64000000/4000.0)));
  5729  002B82  0E09               	movlw	9
  5730  002B84  6E25               	movwf	(??_read_Iout+1)& (0+255),c
  5731  002B86  0E1E               	movlw	30
  5732  002B88  6E24               	movwf	??_read_Iout& (0+255),c
  5733  002B8A  0EE4               	movlw	228
  5734  002B8C                     u3057:
  5735  002B8C  2EE8               	decfsz	wreg,f,c
  5736  002B8E  D7FE               	bra	u3057
  5737  002B90  2E24               	decfsz	??_read_Iout& (0+255),f,c
  5738  002B92  D7FC               	bra	u3057
  5739  002B94  2E25               	decfsz	(??_read_Iout+1)& (0+255),f,c
  5740  002B96  D7FA               	bra	u3057
  5741  002B98  D000               	nop2	
  5742                           
  5743                           ;MPPT.c: 21: rez_adc_A=ADRESH;
  5744  002B9A  50C4               	movf	4036,w,c	;volatile
  5745  002B9C  EC0F  F018         	call	___lbtoft
  5746  002BA0  C009  F055         	movff	?___lbtoft,_rez_adc_A
  5747  002BA4  C00A  F056         	movff	?___lbtoft+1,_rez_adc_A+1
  5748  002BA8  C00B  F057         	movff	?___lbtoft+2,_rez_adc_A+2
  5749                           
  5750                           ;MPPT.c: 22: tens_A=rez_adc_A*0.0181372549019608;
  5751  002BAC  C055  F015         	movff	_rez_adc_A,___ftmul@f1
  5752  002BB0  C056  F016         	movff	_rez_adc_A+1,___ftmul@f1+1
  5753  002BB4  C057  F017         	movff	_rez_adc_A+2,___ftmul@f1+2
  5754  002BB8  0E95               	movlw	149
  5755  002BBA  6E18               	movwf	___ftmul@f2,c
  5756  002BBC  0E94               	movlw	148
  5757  002BBE  6E19               	movwf	___ftmul@f2+1,c
  5758  002BC0  0E3C               	movlw	60
  5759  002BC2  6E1A               	movwf	___ftmul@f2+2,c
  5760  002BC4  EC9F  F012         	call	___ftmul	;wreg free
  5761  002BC8  C015  F074         	movff	?___ftmul,_tens_A
  5762  002BCC  C016  F075         	movff	?___ftmul+1,_tens_A+1
  5763  002BD0  C017  F076         	movff	?___ftmul+2,_tens_A+2
  5764                           
  5765                           ;MPPT.c: 23: Iout=tens_A;
  5766  002BD4  C074  F071         	movff	_tens_A,_Iout
  5767  002BD8  C075  F072         	movff	_tens_A+1,_Iout+1
  5768  002BDC  C076  F073         	movff	_tens_A+2,_Iout+2
  5769  002BE0  0012               	return		;funcret
  5770  002BE2                     __end_of_read_Iout:
  5771                           	opt stack 0
  5772                           tblptru	equ	0xFF8
  5773                           tblptrh	equ	0xFF7
  5774                           tblptrl	equ	0xFF6
  5775                           tablat	equ	0xFF5
  5776                           prodh	equ	0xFF4
  5777                           prodl	equ	0xFF3
  5778                           postinc0	equ	0xFEE
  5779                           wreg	equ	0xFE8
  5780                           indf2	equ	0xFDF
  5781                           postinc2	equ	0xFDE
  5782                           postdec2	equ	0xFDD
  5783                           fsr2h	equ	0xFDA
  5784                           fsr2l	equ	0xFD9
  5785                           status	equ	0xFD8
  5786                           
  5787 ;; *************** function ___lbtoft *****************
  5788 ;; Defined at:
  5789 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbtoft.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;  c               1    wreg     unsigned char 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  c               1   11[COMRAM] unsigned char 
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  3    8[COMRAM] float 
  5796 ;; Registers used:
  5797 ;;		wreg, status,2, status,0, cstack
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5803 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5806 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;Total ram usage:        4 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:    1
  5810 ;; This function calls:
  5811 ;;		___ftpack
  5812 ;; This function is called by:
  5813 ;;		_read_Iout
  5814 ;;		_read_Uout
  5815 ;;		_read_Uin
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text21
  5820  00301E                     __ptext21:
  5821                           	opt stack 0
  5822  00301E                     ___lbtoft:
  5823                           	opt stack 28
  5824                           
  5825                           ;incstack = 0
  5826                           ;___lbtoft@c stored from wreg
  5827  00301E  6E0C               	movwf	___lbtoft@c,c
  5828  003020  500C               	movf	___lbtoft@c,w,c
  5829  003022  6E01               	movwf	___ftpack@arg,c
  5830  003024  6A02               	clrf	___ftpack@arg+1,c
  5831  003026  6A03               	clrf	___ftpack@arg+2,c
  5832  003028  0E8E               	movlw	142
  5833  00302A  6E04               	movwf	___ftpack@exp,c
  5834  00302C  0E00               	movlw	0
  5835  00302E  6E05               	movwf	___ftpack@sign,c
  5836  003030  EC8C  F013         	call	___ftpack	;wreg free
  5837  003034  C001  F009         	movff	?___ftpack,?___lbtoft
  5838  003038  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  5839  00303C  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  5840  003040  0012               	return	
  5841  003042                     __end_of___lbtoft:
  5842                           	opt stack 0
  5843                           tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           postinc0	equ	0xFEE
  5850                           wreg	equ	0xFE8
  5851                           indf2	equ	0xFDF
  5852                           postinc2	equ	0xFDE
  5853                           postdec2	equ	0xFDD
  5854                           fsr2h	equ	0xFDA
  5855                           fsr2l	equ	0xFD9
  5856                           status	equ	0xFD8
  5857                           
  5858 ;; *************** function ___ftmul *****************
  5859 ;; Defined at:
  5860 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;  f1              3   20[COMRAM] float 
  5863 ;;  f2              3   23[COMRAM] float 
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  5866 ;;  sign            1   34[COMRAM] unsigned char 
  5867 ;;  cntr            1   33[COMRAM] unsigned char 
  5868 ;;  exp             1   29[COMRAM] unsigned char 
  5869 ;; Return value:  Size  Location     Type
  5870 ;;                  3   20[COMRAM] float 
  5871 ;; Registers used:
  5872 ;;		wreg, status,2, status,0, cstack
  5873 ;; Tracked objects:
  5874 ;;		On entry : 0/0
  5875 ;;		On exit  : 0/0
  5876 ;;		Unchanged: 0/0
  5877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5878 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5881 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;Total ram usage:       15 bytes
  5883 ;; Hardware stack levels used:    1
  5884 ;; Hardware stack levels required when called:    1
  5885 ;; This function calls:
  5886 ;;		___ftpack
  5887 ;; This function is called by:
  5888 ;;		_main
  5889 ;;		_read_Iout
  5890 ;;		_read_Uout
  5891 ;;		_read_Uin
  5892 ;;		_fround
  5893 ;;		_scale
  5894 ;;		_sprintf
  5895 ;;		_buck_boost
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           	psect	text22
  5900  00253E                     __ptext22:
  5901                           	opt stack 0
  5902  00253E                     ___ftmul:
  5903                           	opt stack 27
  5904                           
  5905                           ;incstack = 0
  5906  00253E  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  5907  002542  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5908  002544  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5909  002546  3416               	rlcf	___ftmul@f1+1,w,c
  5910  002548  361B               	rlcf	??___ftmul& (0+255),f,c
  5911  00254A  E301               	bnc	u1801
  5912  00254C  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5913  00254E                     u1801:
  5914  00254E  501B               	movf	??___ftmul,w,c
  5915  002550  6E1E               	movwf	___ftmul@exp,c
  5916  002552  501E               	movf	___ftmul@exp,w,c
  5917  002554  A4D8               	btfss	status,2,c
  5918  002556  D007               	goto	l823
  5919  002558  0E00               	movlw	0
  5920  00255A  6E15               	movwf	?___ftmul,c
  5921  00255C  0E00               	movlw	0
  5922  00255E  6E16               	movwf	?___ftmul+1,c
  5923  002560  0E00               	movlw	0
  5924  002562  6E17               	movwf	?___ftmul+2,c
  5925  002564  0012               	return	
  5926  002566                     l823:
  5927  002566  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  5928  00256A  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5929  00256C  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5930  00256E  3419               	rlcf	___ftmul@f2+1,w,c
  5931  002570  361B               	rlcf	??___ftmul& (0+255),f,c
  5932  002572  E301               	bnc	u1821
  5933  002574  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5934  002576                     u1821:
  5935  002576  501B               	movf	??___ftmul,w,c
  5936  002578  6E23               	movwf	___ftmul@sign,c
  5937  00257A  5023               	movf	___ftmul@sign,w,c
  5938  00257C  A4D8               	btfss	status,2,c
  5939  00257E  D007               	goto	l825
  5940  002580  0E00               	movlw	0
  5941  002582  6E15               	movwf	?___ftmul,c
  5942  002584  0E00               	movlw	0
  5943  002586  6E16               	movwf	?___ftmul+1,c
  5944  002588  0E00               	movlw	0
  5945  00258A  6E17               	movwf	?___ftmul+2,c
  5946  00258C  0012               	return	
  5947  00258E                     l825:
  5948  00258E  5023               	movf	___ftmul@sign,w,c
  5949  002590  0F7B               	addlw	123
  5950  002592  261E               	addwf	___ftmul@exp,f,c
  5951  002594  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  5952  002598  501A               	movf	___ftmul@f2+2,w,c
  5953  00259A  1A23               	xorwf	___ftmul@sign,f,c
  5954  00259C  0E80               	movlw	128
  5955  00259E  1623               	andwf	___ftmul@sign,f,c
  5956  0025A0  8E16               	bsf	___ftmul@f1+1,7,c
  5957  0025A2  8E19               	bsf	___ftmul@f2+1,7,c
  5958  0025A4  0EFF               	movlw	255
  5959  0025A6  1618               	andwf	___ftmul@f2,f,c
  5960  0025A8  0EFF               	movlw	255
  5961  0025AA  1619               	andwf	___ftmul@f2+1,f,c
  5962  0025AC  0E00               	movlw	0
  5963  0025AE  161A               	andwf	___ftmul@f2+2,f,c
  5964  0025B0  0E00               	movlw	0
  5965  0025B2  6E1F               	movwf	___ftmul@f3_as_product,c
  5966  0025B4  0E00               	movlw	0
  5967  0025B6  6E20               	movwf	___ftmul@f3_as_product+1,c
  5968  0025B8  0E00               	movlw	0
  5969  0025BA  6E21               	movwf	___ftmul@f3_as_product+2,c
  5970  0025BC  0E07               	movlw	7
  5971  0025BE  6E22               	movwf	___ftmul@cntr,c
  5972  0025C0  A015               	btfss	___ftmul@f1,0,c
  5973  0025C2  D006               	goto	l827
  5974  0025C4  5018               	movf	___ftmul@f2,w,c
  5975  0025C6  261F               	addwf	___ftmul@f3_as_product,f,c
  5976  0025C8  5019               	movf	___ftmul@f2+1,w,c
  5977  0025CA  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5978  0025CC  501A               	movf	___ftmul@f2+2,w,c
  5979  0025CE  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5980  0025D0                     l827:
  5981  0025D0  90D8               	bcf	status,0,c
  5982  0025D2  3217               	rrcf	___ftmul@f1+2,f,c
  5983  0025D4  3216               	rrcf	___ftmul@f1+1,f,c
  5984  0025D6  3215               	rrcf	___ftmul@f1,f,c
  5985  0025D8  90D8               	bcf	status,0,c
  5986  0025DA  3618               	rlcf	___ftmul@f2,f,c
  5987  0025DC  3619               	rlcf	___ftmul@f2+1,f,c
  5988  0025DE  361A               	rlcf	___ftmul@f2+2,f,c
  5989  0025E0  2E22               	decfsz	___ftmul@cntr,f,c
  5990  0025E2  D7EE               	goto	l826
  5991  0025E4  0E09               	movlw	9
  5992  0025E6  6E22               	movwf	___ftmul@cntr,c
  5993  0025E8  A015               	btfss	___ftmul@f1,0,c
  5994  0025EA  D006               	goto	l830
  5995  0025EC  5018               	movf	___ftmul@f2,w,c
  5996  0025EE  261F               	addwf	___ftmul@f3_as_product,f,c
  5997  0025F0  5019               	movf	___ftmul@f2+1,w,c
  5998  0025F2  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5999  0025F4  501A               	movf	___ftmul@f2+2,w,c
  6000  0025F6  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  6001  0025F8                     l830:
  6002  0025F8  90D8               	bcf	status,0,c
  6003  0025FA  3217               	rrcf	___ftmul@f1+2,f,c
  6004  0025FC  3216               	rrcf	___ftmul@f1+1,f,c
  6005  0025FE  3215               	rrcf	___ftmul@f1,f,c
  6006  002600  90D8               	bcf	status,0,c
  6007  002602  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  6008  002604  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  6009  002606  321F               	rrcf	___ftmul@f3_as_product,f,c
  6010  002608  2E22               	decfsz	___ftmul@cntr,f,c
  6011  00260A  D7EE               	goto	l829
  6012  00260C  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6013  002610  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6014  002614  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6015  002618  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  6016  00261C  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  6017  002620  EC8C  F013         	call	___ftpack	;wreg free
  6018  002624  C001  F015         	movff	?___ftpack,?___ftmul
  6019  002628  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  6020  00262C  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  6021  002630  0012               	return	
  6022  002632                     __end_of___ftmul:
  6023                           	opt stack 0
  6024                           tblptru	equ	0xFF8
  6025                           tblptrh	equ	0xFF7
  6026                           tblptrl	equ	0xFF6
  6027                           tablat	equ	0xFF5
  6028                           prodh	equ	0xFF4
  6029                           prodl	equ	0xFF3
  6030                           postinc0	equ	0xFEE
  6031                           wreg	equ	0xFE8
  6032                           indf2	equ	0xFDF
  6033                           postinc2	equ	0xFDE
  6034                           postdec2	equ	0xFDD
  6035                           fsr2h	equ	0xFDA
  6036                           fsr2l	equ	0xFD9
  6037                           status	equ	0xFD8
  6038                           
  6039 ;; *************** function ___ftpack *****************
  6040 ;; Defined at:
  6041 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;  arg             3    0[COMRAM] unsigned um
  6044 ;;  exp             1    3[COMRAM] unsigned char 
  6045 ;;  sign            1    4[COMRAM] unsigned char 
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;		None
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  3    0[COMRAM] float 
  6050 ;; Registers used:
  6051 ;;		wreg, status,2, status,0
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6057 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6059 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;Total ram usage:        8 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; This function calls:
  6064 ;;		Nothing
  6065 ;; This function is called by:
  6066 ;;		___ftadd
  6067 ;;		___ftdiv
  6068 ;;		___ftmul
  6069 ;;		___lbtoft
  6070 ;;		___lltoft
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text23
  6075  002718                     __ptext23:
  6076                           	opt stack 0
  6077  002718                     ___ftpack:
  6078                           	opt stack 27
  6079                           
  6080                           ;incstack = 0
  6081  002718  5004               	movf	___ftpack@exp,w,c
  6082  00271A  B4D8               	btfsc	status,2,c
  6083  00271C  D005               	goto	u1520
  6084  00271E  5001               	movf	___ftpack@arg,w,c
  6085  002720  1002               	iorwf	___ftpack@arg+1,w,c
  6086  002722  1003               	iorwf	___ftpack@arg+2,w,c
  6087  002724  A4D8               	btfss	status,2,c
  6088  002726  D00C               	goto	l727
  6089  002728                     u1520:
  6090  002728  0E00               	movlw	0
  6091  00272A  6E01               	movwf	?___ftpack,c
  6092  00272C  0E00               	movlw	0
  6093  00272E  6E02               	movwf	?___ftpack+1,c
  6094  002730  0E00               	movlw	0
  6095  002732  6E03               	movwf	?___ftpack+2,c
  6096  002734  0012               	return	
  6097  002736  2A04               	incf	___ftpack@exp,f,c
  6098  002738  90D8               	bcf	status,0,c
  6099  00273A  3203               	rrcf	___ftpack@arg+2,f,c
  6100  00273C  3202               	rrcf	___ftpack@arg+1,f,c
  6101  00273E  3201               	rrcf	___ftpack@arg,f,c
  6102  002740                     l727:
  6103  002740  0E00               	movlw	0
  6104  002742  1401               	andwf	___ftpack@arg,w,c
  6105  002744  6E06               	movwf	??___ftpack& (0+255),c
  6106  002746  0E00               	movlw	0
  6107  002748  1402               	andwf	___ftpack@arg+1,w,c
  6108  00274A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6109  00274C  0EFE               	movlw	254
  6110  00274E  1403               	andwf	___ftpack@arg+2,w,c
  6111  002750  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6112  002752  5006               	movf	??___ftpack,w,c
  6113  002754  1007               	iorwf	??___ftpack+1,w,c
  6114  002756  1008               	iorwf	??___ftpack+2,w,c
  6115  002758  B4D8               	btfsc	status,2,c
  6116  00275A  D00C               	goto	l730
  6117  00275C  D7EC               	goto	l728
  6118  00275E  2A04               	incf	___ftpack@exp,f,c
  6119  002760  0E01               	movlw	1
  6120  002762  2601               	addwf	___ftpack@arg,f,c
  6121  002764  0E00               	movlw	0
  6122  002766  2202               	addwfc	___ftpack@arg+1,f,c
  6123  002768  0E00               	movlw	0
  6124  00276A  2203               	addwfc	___ftpack@arg+2,f,c
  6125  00276C  90D8               	bcf	status,0,c
  6126  00276E  3203               	rrcf	___ftpack@arg+2,f,c
  6127  002770  3202               	rrcf	___ftpack@arg+1,f,c
  6128  002772  3201               	rrcf	___ftpack@arg,f,c
  6129  002774                     l730:
  6130  002774  0E00               	movlw	0
  6131  002776  1401               	andwf	___ftpack@arg,w,c
  6132  002778  6E06               	movwf	??___ftpack& (0+255),c
  6133  00277A  0E00               	movlw	0
  6134  00277C  1402               	andwf	___ftpack@arg+1,w,c
  6135  00277E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6136  002780  0EFF               	movlw	255
  6137  002782  1403               	andwf	___ftpack@arg+2,w,c
  6138  002784  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6139  002786  5006               	movf	??___ftpack,w,c
  6140  002788  1007               	iorwf	??___ftpack+1,w,c
  6141  00278A  1008               	iorwf	??___ftpack+2,w,c
  6142  00278C  B4D8               	btfsc	status,2,c
  6143  00278E  D006               	goto	l733
  6144  002790  D7E6               	goto	l731
  6145  002792  0604               	decf	___ftpack@exp,f,c
  6146  002794  90D8               	bcf	status,0,c
  6147  002796  3601               	rlcf	___ftpack@arg,f,c
  6148  002798  3602               	rlcf	___ftpack@arg+1,f,c
  6149  00279A  3603               	rlcf	___ftpack@arg+2,f,c
  6150  00279C                     l733:
  6151  00279C  BE02               	btfsc	___ftpack@arg+1,7,c
  6152  00279E  D003               	goto	u1560
  6153  0027A0  0E02               	movlw	2
  6154  0027A2  6004               	cpfslt	___ftpack@exp,c
  6155  0027A4  D7F6               	goto	l734
  6156  0027A6                     u1560:
  6157  0027A6  A004               	btfss	___ftpack@exp,0,c
  6158  0027A8  9E02               	bcf	___ftpack@arg+1,7,c
  6159  0027AA  90D8               	bcf	status,0,c
  6160  0027AC  3204               	rrcf	___ftpack@exp,f,c
  6161  0027AE  5004               	movf	___ftpack@exp,w,c
  6162  0027B0  1203               	iorwf	___ftpack@arg+2,f,c
  6163  0027B2  5005               	movf	___ftpack@sign,w,c
  6164  0027B4  A4D8               	btfss	status,2,c
  6165  0027B6  8E03               	bsf	___ftpack@arg+2,7,c
  6166  0027B8  C001  F001         	movff	___ftpack@arg,?___ftpack
  6167  0027BC  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6168  0027C0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6169  0027C4  0012               	return	
  6170  0027C6                     __end_of___ftpack:
  6171                           	opt stack 0
  6172                           tblptru	equ	0xFF8
  6173                           tblptrh	equ	0xFF7
  6174                           tblptrl	equ	0xFF6
  6175                           tablat	equ	0xFF5
  6176                           prodh	equ	0xFF4
  6177                           prodl	equ	0xFF3
  6178                           postinc0	equ	0xFEE
  6179                           wreg	equ	0xFE8
  6180                           indf2	equ	0xFDF
  6181                           postinc2	equ	0xFDE
  6182                           postdec2	equ	0xFDD
  6183                           fsr2h	equ	0xFDA
  6184                           fsr2l	equ	0xFD9
  6185                           status	equ	0xFD8
  6186                           
  6187 ;; *************** function _pwm_config *****************
  6188 ;; Defined at:
  6189 ;;		line 46 in file "config.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;		None
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  1    wreg      void 
  6196 ;; Registers used:
  6197 ;;		wreg, status,2
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;Total ram usage:        0 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; This function calls:
  6210 ;;		Nothing
  6211 ;; This function is called by:
  6212 ;;		_main
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           	psect	text24
  6217  002FAC                     __ptext24:
  6218                           	opt stack 0
  6219  002FAC                     _pwm_config:
  6220                           	opt stack 30
  6221                           
  6222                           ;config.c: 48: CCPTMRS0=0b00000000;
  6223                           
  6224                           ;incstack = 0
  6225  002FAC  0E00               	movlw	0
  6226  002FAE  010F               	movlb	15	; () banked
  6227  002FB0  6F49               	movwf	73,b	;volatile
  6228                           
  6229                           ;config.c: 49: CCP2CON=0b00001100;
  6230  002FB2  0E0C               	movlw	12
  6231  002FB4  6E66               	movwf	3942,c	;volatile
  6232                           
  6233                           ;config.c: 50: CCP1CON=0b00001100;
  6234  002FB6  0E0C               	movlw	12
  6235  002FB8  6EBD               	movwf	4029,c	;volatile
  6236                           
  6237                           ;config.c: 51: T2CON=0b01111101;
  6238  002FBA  0E7D               	movlw	125
  6239  002FBC  6EBA               	movwf	4026,c	;volatile
  6240                           
  6241                           ;config.c: 52: PR2=160;
  6242  002FBE  0EA0               	movlw	160
  6243  002FC0  6EBB               	movwf	4027,c	;volatile
  6244                           
  6245                           ;config.c: 54: CCPR2L=128;
  6246  002FC2  0E80               	movlw	128
  6247  002FC4  6E67               	movwf	3943,c	;volatile
  6248                           
  6249                           ;config.c: 55: CCPR1L=64;
  6250  002FC6  0E40               	movlw	64
  6251  002FC8  6EBE               	movwf	4030,c	;volatile
  6252                           
  6253                           ;config.c: 56: CCP3CON=0b00001100;
  6254  002FCA  0E0C               	movlw	12
  6255  002FCC  6F5D               	movwf	93,b	;volatile
  6256                           
  6257                           ;config.c: 57: CCPR3L=128;
  6258  002FCE  0E80               	movlw	128
  6259  002FD0  6F5E               	movwf	94,b	;volatile
  6260                           
  6261                           ; BSR set to: 15
  6262  002FD2  0012               	return		;funcret
  6263  002FD4                     __end_of_pwm_config:
  6264                           	opt stack 0
  6265                           tblptru	equ	0xFF8
  6266                           tblptrh	equ	0xFF7
  6267                           tblptrl	equ	0xFF6
  6268                           tablat	equ	0xFF5
  6269                           prodh	equ	0xFF4
  6270                           prodl	equ	0xFF3
  6271                           postinc0	equ	0xFEE
  6272                           wreg	equ	0xFE8
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280 ;; *************** function _init_io_display *****************
  6281 ;; Defined at:
  6282 ;;		line 88 in file "config.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;		None
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;		None
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      void 
  6289 ;; Registers used:
  6290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;Total ram usage:        2 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    5
  6303 ;; This function calls:
  6304 ;;		_Cursor_Off
  6305 ;;		_I2C_Master_Init
  6306 ;;		_Lcd_Clear
  6307 ;;		_Lcd_Init
  6308 ;;		_Lcd_Set_Cursor
  6309 ;;		_Lcd_Write_String
  6310 ;; This function is called by:
  6311 ;;		_main
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           	psect	text25
  6316  002C52                     __ptext25:
  6317                           	opt stack 0
  6318  002C52                     _init_io_display:
  6319                           	opt stack 25
  6320                           
  6321                           ;config.c: 90: TRISCbits.TRISC3=1;
  6322                           
  6323                           ; BSR set to: 15
  6324                           ;incstack = 0
  6325  002C52  8694               	bsf	3988,3,c	;volatile
  6326                           
  6327                           ;config.c: 91: TRISCbits.TRISC4=1;
  6328  002C54  8894               	bsf	3988,4,c	;volatile
  6329                           
  6330                           ;config.c: 92: I2C_Master_Init(100000);
  6331  002C56  0EA0               	movlw	160
  6332  002C58  6E0E               	movwf	I2C_Master_Init@c,c
  6333  002C5A  0E86               	movlw	134
  6334  002C5C  6E0F               	movwf	I2C_Master_Init@c+1,c
  6335  002C5E  0E01               	movlw	1
  6336  002C60  6E10               	movwf	I2C_Master_Init@c+2,c
  6337  002C62  0E00               	movlw	0
  6338  002C64  6E11               	movwf	I2C_Master_Init@c+3,c
  6339  002C66  ECC0  F016         	call	_I2C_Master_Init	;wreg free
  6340                           
  6341                           ;config.c: 93: _delay((unsigned long)((100)*(64000000/4000.0)));
  6342  002C6A  0E09               	movlw	9
  6343  002C6C  6E17               	movwf	(??_init_io_display+1)& (0+255),c
  6344  002C6E  0E1E               	movlw	30
  6345  002C70  6E16               	movwf	??_init_io_display& (0+255),c
  6346  002C72  0EE4               	movlw	228
  6347  002C74                     u3067:
  6348  002C74  2EE8               	decfsz	wreg,f,c
  6349  002C76  D7FE               	bra	u3067
  6350  002C78  2E16               	decfsz	??_init_io_display& (0+255),f,c
  6351  002C7A  D7FC               	bra	u3067
  6352  002C7C  2E17               	decfsz	(??_init_io_display+1)& (0+255),f,c
  6353  002C7E  D7FA               	bra	u3067
  6354  002C80  D000               	nop2	
  6355                           
  6356                           ;config.c: 94: Lcd_Init();
  6357  002C82  EC3E  F015         	call	_Lcd_Init	;wreg free
  6358                           
  6359                           ;config.c: 95: Lcd_Clear();
  6360  002C86  EC57  F018         	call	_Lcd_Clear	;wreg free
  6361                           
  6362                           ;config.c: 96: Cursor_Off();
  6363  002C8A  EC5E  F018         	call	_Cursor_Off	;wreg free
  6364                           
  6365                           ;config.c: 97: Lcd_Set_Cursor(1,1);
  6366  002C8E  0E01               	movlw	1
  6367  002C90  6E0B               	movwf	Lcd_Set_Cursor@b,c
  6368  002C92  0E01               	movlw	1
  6369  002C94  EC43  F017         	call	_Lcd_Set_Cursor
  6370                           
  6371                           ;config.c: 98: Lcd_Write_String("Test");
  6372  002C98  0E77               	movlw	low STR_9
  6373  002C9A  6E08               	movwf	Lcd_Write_String@a,c
  6374  002C9C  0E10               	movlw	high STR_9
  6375  002C9E  6E09               	movwf	Lcd_Write_String@a+1,c
  6376  002CA0  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  6377                           
  6378                           ;config.c: 99: _delay((unsigned long)((100)*(64000000/4000.0)));
  6379  002CA4  0E09               	movlw	9
  6380  002CA6  6E17               	movwf	(??_init_io_display+1)& (0+255),c
  6381  002CA8  0E1E               	movlw	30
  6382  002CAA  6E16               	movwf	??_init_io_display& (0+255),c
  6383  002CAC  0EE4               	movlw	228
  6384  002CAE                     u3077:
  6385  002CAE  2EE8               	decfsz	wreg,f,c
  6386  002CB0  D7FE               	bra	u3077
  6387  002CB2  2E16               	decfsz	??_init_io_display& (0+255),f,c
  6388  002CB4  D7FC               	bra	u3077
  6389  002CB6  2E17               	decfsz	(??_init_io_display+1)& (0+255),f,c
  6390  002CB8  D7FA               	bra	u3077
  6391  002CBA  D000               	nop2	
  6392  002CBC  0012               	return		;funcret
  6393  002CBE                     __end_of_init_io_display:
  6394                           	opt stack 0
  6395                           tblptru	equ	0xFF8
  6396                           tblptrh	equ	0xFF7
  6397                           tblptrl	equ	0xFF6
  6398                           tablat	equ	0xFF5
  6399                           prodh	equ	0xFF4
  6400                           prodl	equ	0xFF3
  6401                           postinc0	equ	0xFEE
  6402                           wreg	equ	0xFE8
  6403                           indf2	equ	0xFDF
  6404                           postinc2	equ	0xFDE
  6405                           postdec2	equ	0xFDD
  6406                           fsr2h	equ	0xFDA
  6407                           fsr2l	equ	0xFD9
  6408                           status	equ	0xFD8
  6409                           
  6410 ;; *************** function _Lcd_Write_String *****************
  6411 ;; Defined at:
  6412 ;;		line 115 in file "i2c_display.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;  a               2    7[COMRAM] PTR unsigned char 
  6415 ;;		 -> STR_17(3), str_A(8), STR_15(3), STR_14(3), 
  6416 ;;		 -> STR_12(4), str_V(8), STR_10(3), STR_9(5), 
  6417 ;;		 -> STR_8(3), STR_6(4), STR_5(3), main@str_A(8), 
  6418 ;;		 -> STR_3(3), main@str_V(8), STR_1(3), 
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;  i               2   11[COMRAM] int 
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  1    wreg      void 
  6423 ;; Registers used:
  6424 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6430 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;Total ram usage:        6 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    4
  6437 ;; This function calls:
  6438 ;;		_Lcd_Write_Char
  6439 ;; This function is called by:
  6440 ;;		_main
  6441 ;;		_init_io_display
  6442 ;;		_write_Uout
  6443 ;;		_write_Uin
  6444 ;;		_write_Iout
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           	psect	text26
  6449  002AF8                     __ptext26:
  6450                           	opt stack 0
  6451  002AF8                     _Lcd_Write_String:
  6452                           	opt stack 25
  6453                           
  6454                           ;i2c_display.c: 117: int i;
  6455                           ;i2c_display.c: 118: for(i=0;a[i]!='\0';i++)
  6456                           
  6457                           ;incstack = 0
  6458  002AF8  0E00               	movlw	0
  6459  002AFA  6E0D               	movwf	Lcd_Write_String@i+1,c
  6460  002AFC  0E00               	movlw	0
  6461  002AFE  6E0C               	movwf	Lcd_Write_String@i,c
  6462  002B00  D01B               	goto	l298
  6463  002B02                     
  6464                           ;i2c_display.c: 119: Lcd_Write_Char(a[i]);
  6465  002B02  500C               	movf	Lcd_Write_String@i,w,c
  6466  002B04  2408               	addwf	Lcd_Write_String@a,w,c
  6467  002B06  6E0A               	movwf	??_Lcd_Write_String& (0+255),c
  6468  002B08  500D               	movf	Lcd_Write_String@i+1,w,c
  6469  002B0A  2009               	addwfc	Lcd_Write_String@a+1,w,c
  6470  002B0C  6E0B               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  6471  002B0E  C00A  FFF6         	movff	??_Lcd_Write_String,tblptrl
  6472  002B12  C00B  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  6473  002B16  0E00               	movlw	low (__smallconst shr (0+16))
  6474  002B18  6EF8               	movwf	tblptru,c
  6475  002B1A  0E0F               	movlw	(high __ramtop+-1)
  6476  002B1C  64F7               	cpfsgt	tblptrh,c
  6477  002B1E  D003               	bra	u2037
  6478  002B20  0008               	tblrd		*
  6479  002B22  50F5               	movf	tablat,w,c
  6480  002B24  D005               	bra	u2030
  6481  002B26                     u2037:
  6482  002B26  CFF6 FFE9          	movff	tblptrl,fsr0l
  6483  002B2A  CFF7 FFEA          	movff	tblptrh,fsr0h
  6484  002B2E  50EF               	movf	indf0,w,c
  6485  002B30                     u2030:
  6486  002B30  ECED  F016         	call	_Lcd_Write_Char
  6487  002B34  4A0C               	infsnz	Lcd_Write_String@i,f,c
  6488  002B36  2A0D               	incf	Lcd_Write_String@i+1,f,c
  6489  002B38                     l298:
  6490  002B38  500C               	movf	Lcd_Write_String@i,w,c
  6491  002B3A  2408               	addwf	Lcd_Write_String@a,w,c
  6492  002B3C  6E0A               	movwf	??_Lcd_Write_String& (0+255),c
  6493  002B3E  500D               	movf	Lcd_Write_String@i+1,w,c
  6494  002B40  2009               	addwfc	Lcd_Write_String@a+1,w,c
  6495  002B42  6E0B               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  6496  002B44  C00A  FFF6         	movff	??_Lcd_Write_String,tblptrl
  6497  002B48  C00B  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  6498  002B4C  0E00               	movlw	low (__smallconst shr (0+16))
  6499  002B4E  6EF8               	movwf	tblptru,c
  6500  002B50  0E0F               	movlw	(high __ramtop+-1)
  6501  002B52  64F7               	cpfsgt	tblptrh,c
  6502  002B54  D003               	bra	u2047
  6503  002B56  0008               	tblrd		*
  6504  002B58  50F5               	movf	tablat,w,c
  6505  002B5A  D005               	bra	u2040
  6506  002B5C                     u2047:
  6507  002B5C  CFF6 FFE9          	movff	tblptrl,fsr0l
  6508  002B60  CFF7 FFEA          	movff	tblptrh,fsr0h
  6509  002B64  50EF               	movf	indf0,w,c
  6510  002B66                     u2040:
  6511  002B66  0900               	iorlw	0
  6512  002B68  B4D8               	btfsc	status,2,c
  6513  002B6A  0012               	return	
  6514  002B6C  D7CA               	goto	l299
  6515  002B6E                     __end_of_Lcd_Write_String:
  6516                           	opt stack 0
  6517                           tblptru	equ	0xFF8
  6518                           tblptrh	equ	0xFF7
  6519                           tblptrl	equ	0xFF6
  6520                           tablat	equ	0xFF5
  6521                           prodh	equ	0xFF4
  6522                           prodl	equ	0xFF3
  6523                           indf0	equ	0xFEF
  6524                           postinc0	equ	0xFEE
  6525                           fsr0h	equ	0xFEA
  6526                           fsr0l	equ	0xFE9
  6527                           wreg	equ	0xFE8
  6528                           indf2	equ	0xFDF
  6529                           postinc2	equ	0xFDE
  6530                           postdec2	equ	0xFDD
  6531                           fsr2h	equ	0xFDA
  6532                           fsr2l	equ	0xFD9
  6533                           status	equ	0xFD8
  6534                           
  6535 ;; *************** function _Lcd_Write_Char *****************
  6536 ;; Defined at:
  6537 ;;		line 91 in file "i2c_display.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;  a               1    wreg     unsigned char 
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;  a               1    4[COMRAM] unsigned char 
  6542 ;;  temp            1    6[COMRAM] unsigned char 
  6543 ;;  y               1    5[COMRAM] unsigned char 
  6544 ;; Return value:  Size  Location     Type
  6545 ;;                  1    wreg      void 
  6546 ;; Registers used:
  6547 ;;		wreg, status,2, status,0, cstack
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6554 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;Total ram usage:        3 bytes
  6558 ;; Hardware stack levels used:    1
  6559 ;; Hardware stack levels required when called:    3
  6560 ;; This function calls:
  6561 ;;		_Lcd_Port
  6562 ;; This function is called by:
  6563 ;;		_Lcd_Write_String
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           	psect	text27
  6568  002DDA                     __ptext27:
  6569                           	opt stack 0
  6570  002DDA                     _Lcd_Write_Char:
  6571                           	opt stack 25
  6572                           
  6573                           ;incstack = 0
  6574                           ;Lcd_Write_Char@a stored from wreg
  6575  002DDA  6E05               	movwf	Lcd_Write_Char@a,c
  6576                           
  6577                           ;i2c_display.c: 93: char temp,y;
  6578                           ;i2c_display.c: 94: temp = a&0x0F;
  6579  002DDC  5005               	movf	Lcd_Write_Char@a,w,c
  6580  002DDE  0B0F               	andlw	15
  6581  002DE0  6E07               	movwf	Lcd_Write_Char@temp,c
  6582                           
  6583                           ;i2c_display.c: 95: temp=temp<<4;
  6584  002DE2  3807               	swapf	Lcd_Write_Char@temp,w,c
  6585  002DE4  0BF0               	andlw	240
  6586  002DE6  6E07               	movwf	Lcd_Write_Char@temp,c
  6587                           
  6588                           ;i2c_display.c: 96: y = a&0xF0;
  6589  002DE8  5005               	movf	Lcd_Write_Char@a,w,c
  6590  002DEA  0BF0               	andlw	240
  6591  002DEC  6E06               	movwf	Lcd_Write_Char@y,c
  6592                           
  6593                           ;i2c_display.c: 99: Lcd_Port(0x00 | 0x01 | 0x00 | 0x00);
  6594  002DEE  0E01               	movlw	1
  6595  002DF0  EC21  F018         	call	_Lcd_Port
  6596                           
  6597                           ;i2c_display.c: 100: Lcd_Port(y);
  6598  002DF4  5006               	movf	Lcd_Write_Char@y,w,c
  6599  002DF6  EC21  F018         	call	_Lcd_Port
  6600                           
  6601                           ;i2c_display.c: 102: Lcd_Port(y | 0x01 | 0x04 | 0x00);
  6602  002DFA  5006               	movf	Lcd_Write_Char@y,w,c
  6603  002DFC  0905               	iorlw	5
  6604  002DFE  EC21  F018         	call	_Lcd_Port
  6605                           
  6606                           ;i2c_display.c: 103: _delay((unsigned long)((40)*(64000000/4000000.0)));
  6607  002E02  0ED5               	movlw	213
  6608  002E04                     u3087:
  6609  002E04  2EE8               	decfsz	wreg,f,c
  6610  002E06  D7FE               	bra	u3087
  6611  002E08  F000               	nop	
  6612                           
  6613                           ;i2c_display.c: 105: Lcd_Port(y | 0x01 | 0x00 | 0x00);
  6614  002E0A  5006               	movf	Lcd_Write_Char@y,w,c
  6615  002E0C  0901               	iorlw	1
  6616  002E0E  EC21  F018         	call	_Lcd_Port
  6617                           
  6618                           ;i2c_display.c: 106: Lcd_Port(temp);
  6619  002E12  5007               	movf	Lcd_Write_Char@temp,w,c
  6620  002E14  EC21  F018         	call	_Lcd_Port
  6621                           
  6622                           ;i2c_display.c: 109: Lcd_Port(temp | 0x01 | 0x04 | 0x00);
  6623  002E18  5007               	movf	Lcd_Write_Char@temp,w,c
  6624  002E1A  0905               	iorlw	5
  6625  002E1C  EC21  F018         	call	_Lcd_Port
  6626                           
  6627                           ;i2c_display.c: 110: _delay((unsigned long)((40)*(64000000/4000000.0)));
  6628  002E20  0ED5               	movlw	213
  6629  002E22                     u3097:
  6630  002E22  2EE8               	decfsz	wreg,f,c
  6631  002E24  D7FE               	bra	u3097
  6632  002E26  F000               	nop	
  6633                           
  6634                           ;i2c_display.c: 112: Lcd_Port(temp | 0x01 | 0x00 | 0x00);
  6635  002E28  5007               	movf	Lcd_Write_Char@temp,w,c
  6636  002E2A  0901               	iorlw	1
  6637  002E2C  EC21  F018         	call	_Lcd_Port
  6638  002E30  0012               	return		;funcret
  6639  002E32                     __end_of_Lcd_Write_Char:
  6640                           	opt stack 0
  6641                           tblptru	equ	0xFF8
  6642                           tblptrh	equ	0xFF7
  6643                           tblptrl	equ	0xFF6
  6644                           tablat	equ	0xFF5
  6645                           prodh	equ	0xFF4
  6646                           prodl	equ	0xFF3
  6647                           indf0	equ	0xFEF
  6648                           postinc0	equ	0xFEE
  6649                           fsr0h	equ	0xFEA
  6650                           fsr0l	equ	0xFE9
  6651                           wreg	equ	0xFE8
  6652                           indf2	equ	0xFDF
  6653                           postinc2	equ	0xFDE
  6654                           postdec2	equ	0xFDD
  6655                           fsr2h	equ	0xFDA
  6656                           fsr2l	equ	0xFD9
  6657                           status	equ	0xFD8
  6658                           
  6659 ;; *************** function _Lcd_Set_Cursor *****************
  6660 ;; Defined at:
  6661 ;;		line 51 in file "i2c_display.c"
  6662 ;; Parameters:    Size  Location     Type
  6663 ;;  a               1    wreg     unsigned char 
  6664 ;;  b               1   10[COMRAM] unsigned char 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  a               1   11[COMRAM] unsigned char 
  6667 ;;  temp            1   14[COMRAM] unsigned char 
  6668 ;;  y               1   13[COMRAM] unsigned char 
  6669 ;;  z               1   12[COMRAM] unsigned char 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  1    wreg      void 
  6672 ;; Registers used:
  6673 ;;		wreg, status,2, status,0, cstack
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6679 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6682 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;Total ram usage:        5 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    4
  6686 ;; This function calls:
  6687 ;;		_Lcd_Cmd
  6688 ;; This function is called by:
  6689 ;;		_main
  6690 ;;		_init_io_display
  6691 ;;		_write_Uout
  6692 ;;		_write_Uin
  6693 ;;		_write_Iout
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           	psect	text28
  6698  002E86                     __ptext28:
  6699                           	opt stack 0
  6700  002E86                     _Lcd_Set_Cursor:
  6701                           	opt stack 25
  6702                           
  6703                           ;incstack = 0
  6704                           ;Lcd_Set_Cursor@a stored from wreg
  6705  002E86  6E0C               	movwf	Lcd_Set_Cursor@a,c
  6706                           
  6707                           ;i2c_display.c: 53: char temp,z,y;
  6708                           ;i2c_display.c: 54: if(a == 1)
  6709  002E88  040C               	decf	Lcd_Set_Cursor@a,w,c
  6710  002E8A  A4D8               	btfss	status,2,c
  6711  002E8C  D010               	goto	l286
  6712                           
  6713                           ;i2c_display.c: 55: {
  6714                           ;i2c_display.c: 56: temp = 0x80 + b - 1;
  6715  002E8E  500B               	movf	Lcd_Set_Cursor@b,w,c
  6716  002E90  0F7F               	addlw	127
  6717  002E92  6E0F               	movwf	Lcd_Set_Cursor@temp,c
  6718                           
  6719                           ;i2c_display.c: 57: z = temp>>4;
  6720  002E94  380F               	swapf	Lcd_Set_Cursor@temp,w,c
  6721  002E96  0B0F               	andlw	15
  6722  002E98  6E0D               	movwf	Lcd_Set_Cursor@z,c
  6723                           
  6724                           ;i2c_display.c: 58: y = temp & 0x0F;
  6725  002E9A  500F               	movf	Lcd_Set_Cursor@temp,w,c
  6726  002E9C  0B0F               	andlw	15
  6727  002E9E  6E0E               	movwf	Lcd_Set_Cursor@y,c
  6728                           
  6729                           ;i2c_display.c: 59: Lcd_Cmd(z);
  6730  002EA0  500D               	movf	Lcd_Set_Cursor@z,w,c
  6731  002EA2  EC6B  F017         	call	_Lcd_Cmd
  6732                           
  6733                           ;i2c_display.c: 60: Lcd_Cmd(y);
  6734  002EA6  500E               	movf	Lcd_Set_Cursor@y,w,c
  6735  002EA8  EC6B  F017         	call	_Lcd_Cmd
  6736                           
  6737                           ;i2c_display.c: 61: }
  6738  002EAC  0012               	return	
  6739  002EAE                     l286:
  6740                           
  6741                           ;i2c_display.c: 62: else if(a == 2)
  6742  002EAE  0E02               	movlw	2
  6743  002EB0  180C               	xorwf	Lcd_Set_Cursor@a,w,c
  6744  002EB2  A4D8               	btfss	status,2,c
  6745  002EB4  0012               	return	
  6746                           
  6747                           ;i2c_display.c: 63: {
  6748                           ;i2c_display.c: 64: temp = 0xC0 + b - 1;
  6749  002EB6  500B               	movf	Lcd_Set_Cursor@b,w,c
  6750  002EB8  0FBF               	addlw	191
  6751  002EBA  6E0F               	movwf	Lcd_Set_Cursor@temp,c
  6752                           
  6753                           ;i2c_display.c: 65: z = temp>>4;
  6754  002EBC  380F               	swapf	Lcd_Set_Cursor@temp,w,c
  6755  002EBE  0B0F               	andlw	15
  6756  002EC0  6E0D               	movwf	Lcd_Set_Cursor@z,c
  6757                           
  6758                           ;i2c_display.c: 66: y = temp & 0x0F;
  6759  002EC2  500F               	movf	Lcd_Set_Cursor@temp,w,c
  6760  002EC4  0B0F               	andlw	15
  6761  002EC6  6E0E               	movwf	Lcd_Set_Cursor@y,c
  6762                           
  6763                           ;i2c_display.c: 67: Lcd_Cmd(z);
  6764  002EC8  500D               	movf	Lcd_Set_Cursor@z,w,c
  6765  002ECA  EC6B  F017         	call	_Lcd_Cmd
  6766                           
  6767                           ;i2c_display.c: 68: Lcd_Cmd(y);
  6768  002ECE  500E               	movf	Lcd_Set_Cursor@y,w,c
  6769  002ED0  EC6B  F017         	call	_Lcd_Cmd
  6770  002ED4  0012               	return	
  6771  002ED6                     __end_of_Lcd_Set_Cursor:
  6772                           	opt stack 0
  6773                           tblptru	equ	0xFF8
  6774                           tblptrh	equ	0xFF7
  6775                           tblptrl	equ	0xFF6
  6776                           tablat	equ	0xFF5
  6777                           prodh	equ	0xFF4
  6778                           prodl	equ	0xFF3
  6779                           indf0	equ	0xFEF
  6780                           postinc0	equ	0xFEE
  6781                           fsr0h	equ	0xFEA
  6782                           fsr0l	equ	0xFE9
  6783                           wreg	equ	0xFE8
  6784                           indf2	equ	0xFDF
  6785                           postinc2	equ	0xFDE
  6786                           postdec2	equ	0xFDD
  6787                           fsr2h	equ	0xFDA
  6788                           fsr2l	equ	0xFD9
  6789                           status	equ	0xFD8
  6790                           
  6791 ;; *************** function _Lcd_Init *****************
  6792 ;; Defined at:
  6793 ;;		line 72 in file "i2c_display.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;		None
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;		None
  6798 ;; Return value:  Size  Location     Type
  6799 ;;                  1    wreg      void 
  6800 ;; Registers used:
  6801 ;;		wreg, status,2, status,0, cstack
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6809 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6810 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6811 ;;Total ram usage:        2 bytes
  6812 ;; Hardware stack levels used:    1
  6813 ;; Hardware stack levels required when called:    4
  6814 ;; This function calls:
  6815 ;;		_Lcd_Cmd
  6816 ;;		_Lcd_Port
  6817 ;; This function is called by:
  6818 ;;		_init_io_display
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text29
  6823  002A7C                     __ptext29:
  6824                           	opt stack 0
  6825  002A7C                     _Lcd_Init:
  6826                           	opt stack 25
  6827                           
  6828                           ;i2c_display.c: 74: Lcd_Port(0x00);
  6829                           
  6830                           ;incstack = 0
  6831  002A7C  0E00               	movlw	0
  6832  002A7E  EC21  F018         	call	_Lcd_Port
  6833                           
  6834                           ;i2c_display.c: 75: _delay((unsigned long)((20)*(64000000/4000.0)));
  6835  002A82  0E02               	movlw	2
  6836  002A84  6E0C               	movwf	(??_Lcd_Init+1)& (0+255),c
  6837  002A86  0EA0               	movlw	160
  6838  002A88  6E0B               	movwf	??_Lcd_Init& (0+255),c
  6839  002A8A  0E92               	movlw	146
  6840  002A8C                     u3107:
  6841  002A8C  2EE8               	decfsz	wreg,f,c
  6842  002A8E  D7FE               	bra	u3107
  6843  002A90  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  6844  002A92  D7FC               	bra	u3107
  6845  002A94  2E0C               	decfsz	(??_Lcd_Init+1)& (0+255),f,c
  6846  002A96  D7FA               	bra	u3107
  6847  002A98  D000               	nop2	
  6848                           
  6849                           ;i2c_display.c: 76: Lcd_Cmd(0x03);
  6850  002A9A  0E03               	movlw	3
  6851  002A9C  EC6B  F017         	call	_Lcd_Cmd
  6852                           
  6853                           ;i2c_display.c: 77: _delay((unsigned long)((5)*(64000000/4000.0)));
  6854  002AA0  0E68               	movlw	104
  6855  002AA2  6E0B               	movwf	??_Lcd_Init& (0+255),c
  6856  002AA4  0EE4               	movlw	228
  6857  002AA6                     u3117:
  6858  002AA6  2EE8               	decfsz	wreg,f,c
  6859  002AA8  D7FE               	bra	u3117
  6860  002AAA  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  6861  002AAC  D7FC               	bra	u3117
  6862  002AAE  D000               	nop2	
  6863                           
  6864                           ;i2c_display.c: 78: Lcd_Cmd(0x03);
  6865  002AB0  0E03               	movlw	3
  6866  002AB2  EC6B  F017         	call	_Lcd_Cmd
  6867                           
  6868                           ;i2c_display.c: 79: _delay((unsigned long)((11)*(64000000/4000.0)));
  6869  002AB6  0EE5               	movlw	229
  6870  002AB8  6E0B               	movwf	??_Lcd_Init& (0+255),c
  6871  002ABA  0E91               	movlw	145
  6872  002ABC                     u3127:
  6873  002ABC  2EE8               	decfsz	wreg,f,c
  6874  002ABE  D7FE               	bra	u3127
  6875  002AC0  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  6876  002AC2  D7FC               	bra	u3127
  6877  002AC4  F000               	nop	
  6878                           
  6879                           ;i2c_display.c: 80: Lcd_Cmd(0x03);
  6880  002AC6  0E03               	movlw	3
  6881  002AC8  EC6B  F017         	call	_Lcd_Cmd
  6882                           
  6883                           ;i2c_display.c: 82: Lcd_Cmd(0x02);
  6884  002ACC  0E02               	movlw	2
  6885  002ACE  EC6B  F017         	call	_Lcd_Cmd
  6886                           
  6887                           ;i2c_display.c: 83: Lcd_Cmd(0x02);
  6888  002AD2  0E02               	movlw	2
  6889  002AD4  EC6B  F017         	call	_Lcd_Cmd
  6890                           
  6891                           ;i2c_display.c: 84: Lcd_Cmd(0x08);
  6892  002AD8  0E08               	movlw	8
  6893  002ADA  EC6B  F017         	call	_Lcd_Cmd
  6894                           
  6895                           ;i2c_display.c: 85: Lcd_Cmd(0x00);
  6896  002ADE  0E00               	movlw	0
  6897  002AE0  EC6B  F017         	call	_Lcd_Cmd
  6898                           
  6899                           ;i2c_display.c: 86: Lcd_Cmd(0x0C);
  6900  002AE4  0E0C               	movlw	12
  6901  002AE6  EC6B  F017         	call	_Lcd_Cmd
  6902                           
  6903                           ;i2c_display.c: 87: Lcd_Cmd(0x00);
  6904  002AEA  0E00               	movlw	0
  6905  002AEC  EC6B  F017         	call	_Lcd_Cmd
  6906                           
  6907                           ;i2c_display.c: 88: Lcd_Cmd(0x06);
  6908  002AF0  0E06               	movlw	6
  6909  002AF2  EC6B  F017         	call	_Lcd_Cmd
  6910  002AF6  0012               	return		;funcret
  6911  002AF8                     __end_of_Lcd_Init:
  6912                           	opt stack 0
  6913                           tblptru	equ	0xFF8
  6914                           tblptrh	equ	0xFF7
  6915                           tblptrl	equ	0xFF6
  6916                           tablat	equ	0xFF5
  6917                           prodh	equ	0xFF4
  6918                           prodl	equ	0xFF3
  6919                           indf0	equ	0xFEF
  6920                           postinc0	equ	0xFEE
  6921                           fsr0h	equ	0xFEA
  6922                           fsr0l	equ	0xFE9
  6923                           wreg	equ	0xFE8
  6924                           indf2	equ	0xFDF
  6925                           postinc2	equ	0xFDE
  6926                           postdec2	equ	0xFDD
  6927                           fsr2h	equ	0xFDA
  6928                           fsr2l	equ	0xFD9
  6929                           status	equ	0xFD8
  6930                           
  6931 ;; *************** function _Lcd_Clear *****************
  6932 ;; Defined at:
  6933 ;;		line 45 in file "i2c_display.c"
  6934 ;; Parameters:    Size  Location     Type
  6935 ;;		None
  6936 ;; Auto vars:     Size  Location     Type
  6937 ;;		None
  6938 ;; Return value:  Size  Location     Type
  6939 ;;                  1    wreg      void 
  6940 ;; Registers used:
  6941 ;;		wreg, status,2, status,0, cstack
  6942 ;; Tracked objects:
  6943 ;;		On entry : 0/0
  6944 ;;		On exit  : 0/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;Total ram usage:        0 bytes
  6952 ;; Hardware stack levels used:    1
  6953 ;; Hardware stack levels required when called:    4
  6954 ;; This function calls:
  6955 ;;		_Lcd_Cmd
  6956 ;; This function is called by:
  6957 ;;		_main
  6958 ;;		_init_io_display
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           	psect	text30
  6963  0030AE                     __ptext30:
  6964                           	opt stack 0
  6965  0030AE                     _Lcd_Clear:
  6966                           	opt stack 25
  6967                           
  6968                           ;i2c_display.c: 47: Lcd_Cmd(0);
  6969                           
  6970                           ;incstack = 0
  6971  0030AE  0E00               	movlw	0
  6972  0030B0  EC6B  F017         	call	_Lcd_Cmd
  6973                           
  6974                           ;i2c_display.c: 48: Lcd_Cmd(1);
  6975  0030B4  0E01               	movlw	1
  6976  0030B6  EC6B  F017         	call	_Lcd_Cmd
  6977  0030BA  0012               	return		;funcret
  6978  0030BC                     __end_of_Lcd_Clear:
  6979                           	opt stack 0
  6980                           tblptru	equ	0xFF8
  6981                           tblptrh	equ	0xFF7
  6982                           tblptrl	equ	0xFF6
  6983                           tablat	equ	0xFF5
  6984                           prodh	equ	0xFF4
  6985                           prodl	equ	0xFF3
  6986                           indf0	equ	0xFEF
  6987                           postinc0	equ	0xFEE
  6988                           fsr0h	equ	0xFEA
  6989                           fsr0l	equ	0xFE9
  6990                           wreg	equ	0xFE8
  6991                           indf2	equ	0xFDF
  6992                           postinc2	equ	0xFDE
  6993                           postdec2	equ	0xFDD
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function _I2C_Master_Init *****************
  6999 ;; Defined at:
  7000 ;;		line 166 in file "i2c_display.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  c               4   13[COMRAM] const unsigned long 
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;		None
  7005 ;; Return value:  Size  Location     Type
  7006 ;;                  1    wreg      void 
  7007 ;; Registers used:
  7008 ;;		wreg, status,2, status,0, cstack
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7014 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;Total ram usage:        8 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    1
  7021 ;; This function calls:
  7022 ;;		___lldiv
  7023 ;; This function is called by:
  7024 ;;		_init_io_display
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           	psect	text31
  7029  002D80                     __ptext31:
  7030                           	opt stack 0
  7031  002D80                     _I2C_Master_Init:
  7032                           	opt stack 28
  7033                           
  7034                           ;i2c_display.c: 168: SSP1CON1 = 0b00101000;
  7035                           
  7036                           ;incstack = 0
  7037  002D80  0E28               	movlw	40
  7038  002D82  6EC6               	movwf	4038,c	;volatile
  7039                           
  7040                           ;i2c_display.c: 169: SSP1CON2 = 0x00;
  7041  002D84  0E00               	movlw	0
  7042  002D86  6EC5               	movwf	4037,c	;volatile
  7043                           
  7044                           ;i2c_display.c: 170: SSP1ADD = (64000000/(4*c))-1;
  7045  002D88  0E00               	movlw	0
  7046  002D8A  6E01               	movwf	___lldiv@dividend,c
  7047  002D8C  0E90               	movlw	144
  7048  002D8E  6E02               	movwf	___lldiv@dividend+1,c
  7049  002D90  0ED0               	movlw	208
  7050  002D92  6E03               	movwf	___lldiv@dividend+2,c
  7051  002D94  0E03               	movlw	3
  7052  002D96  6E04               	movwf	___lldiv@dividend+3,c
  7053  002D98  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7054  002D9C  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7055  002DA0  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7056  002DA4  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7057  002DA8  0E02               	movlw	2
  7058  002DAA                     u2065:
  7059  002DAA  90D8               	bcf	status,0,c
  7060  002DAC  3612               	rlcf	??_I2C_Master_Init,f,c
  7061  002DAE  3613               	rlcf	??_I2C_Master_Init+1,f,c
  7062  002DB0  3614               	rlcf	??_I2C_Master_Init+2,f,c
  7063  002DB2  3615               	rlcf	??_I2C_Master_Init+3,f,c
  7064  002DB4  2EE8               	decfsz	wreg,f,c
  7065  002DB6  D7F9               	goto	u2065
  7066  002DB8  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  7067  002DBC  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7068  002DC0  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7069  002DC4  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7070  002DC8  ECFD  F014         	call	___lldiv	;wreg free
  7071  002DCC  0401               	decf	?___lldiv,w,c
  7072  002DCE  6EC8               	movwf	4040,c	;volatile
  7073                           
  7074                           ;i2c_display.c: 171: SSP1STAT = 0x00;
  7075  002DD0  0E00               	movlw	0
  7076  002DD2  6EC7               	movwf	4039,c	;volatile
  7077                           
  7078                           ;i2c_display.c: 172: TRISCbits.TRISC3=1;
  7079  002DD4  8694               	bsf	3988,3,c	;volatile
  7080                           
  7081                           ;i2c_display.c: 173: TRISCbits.TRISC4=1;
  7082  002DD6  8894               	bsf	3988,4,c	;volatile
  7083  002DD8  0012               	return		;funcret
  7084  002DDA                     __end_of_I2C_Master_Init:
  7085                           	opt stack 0
  7086                           tblptru	equ	0xFF8
  7087                           tblptrh	equ	0xFF7
  7088                           tblptrl	equ	0xFF6
  7089                           tablat	equ	0xFF5
  7090                           prodh	equ	0xFF4
  7091                           prodl	equ	0xFF3
  7092                           indf0	equ	0xFEF
  7093                           postinc0	equ	0xFEE
  7094                           fsr0h	equ	0xFEA
  7095                           fsr0l	equ	0xFE9
  7096                           wreg	equ	0xFE8
  7097                           indf2	equ	0xFDF
  7098                           postinc2	equ	0xFDE
  7099                           postdec2	equ	0xFDD
  7100                           fsr2h	equ	0xFDA
  7101                           fsr2l	equ	0xFD9
  7102                           status	equ	0xFD8
  7103                           
  7104 ;; *************** function ___lldiv *****************
  7105 ;; Defined at:
  7106 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;  dividend        4    0[COMRAM] unsigned long 
  7109 ;;  divisor         4    4[COMRAM] unsigned long 
  7110 ;; Auto vars:     Size  Location     Type
  7111 ;;  quotient        4    8[COMRAM] unsigned long 
  7112 ;;  counter         1   12[COMRAM] unsigned char 
  7113 ;; Return value:  Size  Location     Type
  7114 ;;                  4    0[COMRAM] unsigned long 
  7115 ;; Registers used:
  7116 ;;		wreg, status,2, status,0
  7117 ;; Tracked objects:
  7118 ;;		On entry : 0/0
  7119 ;;		On exit  : 0/0
  7120 ;;		Unchanged: 0/0
  7121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7122 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7123 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;Total ram usage:       13 bytes
  7127 ;; Hardware stack levels used:    1
  7128 ;; This function calls:
  7129 ;;		Nothing
  7130 ;; This function is called by:
  7131 ;;		_I2C_Master_Init
  7132 ;;		_sprintf
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136                           	psect	text32
  7137  0029FA                     __ptext32:
  7138                           	opt stack 0
  7139  0029FA                     ___lldiv:
  7140                           	opt stack 29
  7141                           
  7142                           ;incstack = 0
  7143  0029FA  0E00               	movlw	0
  7144  0029FC  6E09               	movwf	___lldiv@quotient,c
  7145  0029FE  0E00               	movlw	0
  7146  002A00  6E0A               	movwf	___lldiv@quotient+1,c
  7147  002A02  0E00               	movlw	0
  7148  002A04  6E0B               	movwf	___lldiv@quotient+2,c
  7149  002A06  0E00               	movlw	0
  7150  002A08  6E0C               	movwf	___lldiv@quotient+3,c
  7151  002A0A  5005               	movf	___lldiv@divisor,w,c
  7152  002A0C  1006               	iorwf	___lldiv@divisor+1,w,c
  7153  002A0E  1007               	iorwf	___lldiv@divisor+2,w,c
  7154  002A10  1008               	iorwf	___lldiv@divisor+3,w,c
  7155  002A12  B4D8               	btfsc	status,2,c
  7156  002A14  D02A               	goto	l890
  7157  002A16  0E01               	movlw	1
  7158  002A18  6E0D               	movwf	___lldiv@counter,c
  7159  002A1A  D006               	goto	l885
  7160  002A1C  90D8               	bcf	status,0,c
  7161  002A1E  3605               	rlcf	___lldiv@divisor,f,c
  7162  002A20  3606               	rlcf	___lldiv@divisor+1,f,c
  7163  002A22  3607               	rlcf	___lldiv@divisor+2,f,c
  7164  002A24  3608               	rlcf	___lldiv@divisor+3,f,c
  7165  002A26  2A0D               	incf	___lldiv@counter,f,c
  7166  002A28                     l885:
  7167  002A28  AE08               	btfss	___lldiv@divisor+3,7,c
  7168  002A2A  D7F8               	goto	l886
  7169  002A2C                     u1990:
  7170  002A2C  90D8               	bcf	status,0,c
  7171  002A2E  3609               	rlcf	___lldiv@quotient,f,c
  7172  002A30  360A               	rlcf	___lldiv@quotient+1,f,c
  7173  002A32  360B               	rlcf	___lldiv@quotient+2,f,c
  7174  002A34  360C               	rlcf	___lldiv@quotient+3,f,c
  7175  002A36  5005               	movf	___lldiv@divisor,w,c
  7176  002A38  5C01               	subwf	___lldiv@dividend,w,c
  7177  002A3A  5006               	movf	___lldiv@divisor+1,w,c
  7178  002A3C  5802               	subwfb	___lldiv@dividend+1,w,c
  7179  002A3E  5007               	movf	___lldiv@divisor+2,w,c
  7180  002A40  5803               	subwfb	___lldiv@dividend+2,w,c
  7181  002A42  5008               	movf	___lldiv@divisor+3,w,c
  7182  002A44  5804               	subwfb	___lldiv@dividend+3,w,c
  7183  002A46  A0D8               	btfss	status,0,c
  7184  002A48  D009               	goto	l889
  7185  002A4A  5005               	movf	___lldiv@divisor,w,c
  7186  002A4C  5E01               	subwf	___lldiv@dividend,f,c
  7187  002A4E  5006               	movf	___lldiv@divisor+1,w,c
  7188  002A50  5A02               	subwfb	___lldiv@dividend+1,f,c
  7189  002A52  5007               	movf	___lldiv@divisor+2,w,c
  7190  002A54  5A03               	subwfb	___lldiv@dividend+2,f,c
  7191  002A56  5008               	movf	___lldiv@divisor+3,w,c
  7192  002A58  5A04               	subwfb	___lldiv@dividend+3,f,c
  7193  002A5A  8009               	bsf	___lldiv@quotient,0,c
  7194  002A5C                     l889:
  7195  002A5C  90D8               	bcf	status,0,c
  7196  002A5E  3208               	rrcf	___lldiv@divisor+3,f,c
  7197  002A60  3207               	rrcf	___lldiv@divisor+2,f,c
  7198  002A62  3206               	rrcf	___lldiv@divisor+1,f,c
  7199  002A64  3205               	rrcf	___lldiv@divisor,f,c
  7200  002A66  2E0D               	decfsz	___lldiv@counter,f,c
  7201  002A68  D7E1               	goto	u1990
  7202  002A6A                     l890:
  7203  002A6A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  7204  002A6E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  7205  002A72  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  7206  002A76  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  7207  002A7A  0012               	return		;funcret
  7208  002A7C                     __end_of___lldiv:
  7209                           	opt stack 0
  7210                           tblptru	equ	0xFF8
  7211                           tblptrh	equ	0xFF7
  7212                           tblptrl	equ	0xFF6
  7213                           tablat	equ	0xFF5
  7214                           prodh	equ	0xFF4
  7215                           prodl	equ	0xFF3
  7216                           indf0	equ	0xFEF
  7217                           postinc0	equ	0xFEE
  7218                           fsr0h	equ	0xFEA
  7219                           fsr0l	equ	0xFE9
  7220                           wreg	equ	0xFE8
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           fsr2h	equ	0xFDA
  7225                           fsr2l	equ	0xFD9
  7226                           status	equ	0xFD8
  7227                           
  7228 ;; *************** function _Cursor_Off *****************
  7229 ;; Defined at:
  7230 ;;		line 140 in file "i2c_display.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;		None
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;		None
  7235 ;; Return value:  Size  Location     Type
  7236 ;;                  1    wreg      void 
  7237 ;; Registers used:
  7238 ;;		wreg, status,2, status,0, cstack
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;Total ram usage:        0 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:    4
  7251 ;; This function calls:
  7252 ;;		_Lcd_Cmd
  7253 ;; This function is called by:
  7254 ;;		_init_io_display
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           	psect	text33
  7259  0030BC                     __ptext33:
  7260                           	opt stack 0
  7261  0030BC                     _Cursor_Off:
  7262                           	opt stack 25
  7263                           
  7264                           ;i2c_display.c: 142: Lcd_Cmd(0x00);
  7265                           
  7266                           ;incstack = 0
  7267  0030BC  0E00               	movlw	0
  7268  0030BE  EC6B  F017         	call	_Lcd_Cmd
  7269                           
  7270                           ;i2c_display.c: 143: Lcd_Cmd(0x0C);
  7271  0030C2  0E0C               	movlw	12
  7272  0030C4  EC6B  F017         	call	_Lcd_Cmd
  7273  0030C8  0012               	return		;funcret
  7274  0030CA                     __end_of_Cursor_Off:
  7275                           	opt stack 0
  7276                           tblptru	equ	0xFF8
  7277                           tblptrh	equ	0xFF7
  7278                           tblptrl	equ	0xFF6
  7279                           tablat	equ	0xFF5
  7280                           prodh	equ	0xFF4
  7281                           prodl	equ	0xFF3
  7282                           indf0	equ	0xFEF
  7283                           postinc0	equ	0xFEE
  7284                           fsr0h	equ	0xFEA
  7285                           fsr0l	equ	0xFE9
  7286                           wreg	equ	0xFE8
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           postdec2	equ	0xFDD
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function _Lcd_Cmd *****************
  7295 ;; Defined at:
  7296 ;;		line 26 in file "i2c_display.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  a               1    wreg     unsigned char 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  a               1    9[COMRAM] unsigned char 
  7301 ;;  buff            2    7[COMRAM] int 
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  1    wreg      void 
  7304 ;; Registers used:
  7305 ;;		wreg, status,2, status,0, cstack
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7312 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7315 ;;Total ram usage:        6 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; Hardware stack levels required when called:    3
  7318 ;; This function calls:
  7319 ;;		_Lcd_Port
  7320 ;; This function is called by:
  7321 ;;		_Lcd_Clear
  7322 ;;		_Lcd_Set_Cursor
  7323 ;;		_Lcd_Init
  7324 ;;		_Cursor_Off
  7325 ;;		_Lcd_Shift_Right
  7326 ;;		_Lcd_Shift_Left
  7327 ;;		_Cursor_On
  7328 ;;		_Cursor_Left
  7329 ;;		_Cursor_Right
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text34
  7334  002ED6                     __ptext34:
  7335                           	opt stack 0
  7336  002ED6                     _Lcd_Cmd:
  7337                           	opt stack 25
  7338                           
  7339                           ;incstack = 0
  7340                           ;Lcd_Cmd@a stored from wreg
  7341  002ED6  6E0A               	movwf	Lcd_Cmd@a,c
  7342                           
  7343                           ;i2c_display.c: 28: int buff;
  7344                           ;i2c_display.c: 29: a=a<<4;
  7345  002ED8  380A               	swapf	Lcd_Cmd@a,w,c
  7346  002EDA  0BF0               	andlw	240
  7347  002EDC  6E0A               	movwf	Lcd_Cmd@a,c
  7348                           
  7349                           ;i2c_display.c: 32: Lcd_Port(0x00 || 0x00 || 0x00 || 0x00);
  7350  002EDE  0E01               	movlw	1
  7351  002EE0  6E07               	movwf	_Lcd_Cmd$736,c
  7352  002EE2  0E00               	movlw	0
  7353  002EE4  6E07               	movwf	_Lcd_Cmd$736,c
  7354  002EE6  5007               	movf	_Lcd_Cmd$736,w,c
  7355  002EE8  EC21  F018         	call	_Lcd_Port
  7356                           
  7357                           ;i2c_display.c: 34: Lcd_Port(a);
  7358  002EEC  500A               	movf	Lcd_Cmd@a,w,c
  7359  002EEE  EC21  F018         	call	_Lcd_Port
  7360                           
  7361                           ;i2c_display.c: 37: buff=a | 0x00 | 0x04 | 0x00;
  7362  002EF2  0E04               	movlw	4
  7363  002EF4  C00A  F005         	movff	Lcd_Cmd@a,??_Lcd_Cmd
  7364  002EF8  6A06               	clrf	(??_Lcd_Cmd+1)& (0+255),c
  7365  002EFA  1005               	iorwf	??_Lcd_Cmd,w,c
  7366  002EFC  6E08               	movwf	Lcd_Cmd@buff,c
  7367  002EFE  5006               	movf	??_Lcd_Cmd+1,w,c
  7368  002F00  6E09               	movwf	Lcd_Cmd@buff+1,c
  7369                           
  7370                           ;i2c_display.c: 38: Lcd_Port(buff);
  7371  002F02  5008               	movf	Lcd_Cmd@buff,w,c
  7372  002F04  EC21  F018         	call	_Lcd_Port
  7373                           
  7374                           ;i2c_display.c: 39: _delay((unsigned long)((4)*(64000000/4000.0)));
  7375  002F08  0E54               	movlw	84
  7376  002F0A  6E05               	movwf	??_Lcd_Cmd& (0+255),c
  7377  002F0C  0E1C               	movlw	28
  7378  002F0E                     u3137:
  7379  002F0E  2EE8               	decfsz	wreg,f,c
  7380  002F10  D7FE               	bra	u3137
  7381  002F12  2E05               	decfsz	??_Lcd_Cmd& (0+255),f,c
  7382  002F14  D7FC               	bra	u3137
  7383  002F16  D000               	nop2	
  7384                           
  7385                           ;i2c_display.c: 41: buff=a | 0x00 | 0x00 | 0x00;
  7386  002F18  C00A  F008         	movff	Lcd_Cmd@a,Lcd_Cmd@buff
  7387  002F1C  6A09               	clrf	Lcd_Cmd@buff+1,c
  7388                           
  7389                           ;i2c_display.c: 42: Lcd_Port(buff);
  7390  002F1E  5008               	movf	Lcd_Cmd@buff,w,c
  7391  002F20  EC21  F018         	call	_Lcd_Port
  7392  002F24  0012               	return		;funcret
  7393  002F26                     __end_of_Lcd_Cmd:
  7394                           	opt stack 0
  7395                           tblptru	equ	0xFF8
  7396                           tblptrh	equ	0xFF7
  7397                           tblptrl	equ	0xFF6
  7398                           tablat	equ	0xFF5
  7399                           prodh	equ	0xFF4
  7400                           prodl	equ	0xFF3
  7401                           indf0	equ	0xFEF
  7402                           postinc0	equ	0xFEE
  7403                           fsr0h	equ	0xFEA
  7404                           fsr0l	equ	0xFE9
  7405                           wreg	equ	0xFE8
  7406                           indf2	equ	0xFDF
  7407                           postinc2	equ	0xFDE
  7408                           postdec2	equ	0xFDD
  7409                           fsr2h	equ	0xFDA
  7410                           fsr2l	equ	0xFD9
  7411                           status	equ	0xFD8
  7412                           
  7413 ;; *************** function _Lcd_Port *****************
  7414 ;; Defined at:
  7415 ;;		line 20 in file "i2c_display.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;  data            1    wreg     unsigned char 
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;  data            1    3[COMRAM] unsigned char 
  7420 ;; Return value:  Size  Location     Type
  7421 ;;                  1    wreg      void 
  7422 ;; Registers used:
  7423 ;;		wreg, status,2, status,0, cstack
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;Total ram usage:        1 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:    2
  7436 ;; This function calls:
  7437 ;;		_I2C_Master_Start
  7438 ;;		_I2C_Master_Stop
  7439 ;;		_I2C_Write_Display
  7440 ;; This function is called by:
  7441 ;;		_Lcd_Cmd
  7442 ;;		_Lcd_Init
  7443 ;;		_Lcd_Write_Char
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           	psect	text35
  7448  003042                     __ptext35:
  7449                           	opt stack 0
  7450  003042                     _Lcd_Port:
  7451                           	opt stack 25
  7452                           
  7453                           ;incstack = 0
  7454                           ;Lcd_Port@data stored from wreg
  7455  003042  6E04               	movwf	Lcd_Port@data,c
  7456  003044  EC6E  F018         	call	_I2C_Master_Start	;wreg free
  7457                           
  7458                           ;i2c_display.c: 22: I2C_Write_Display(0x70);
  7459  003048  0E00               	movlw	0
  7460  00304A  6E03               	movwf	I2C_Write_Display@d+1,c
  7461  00304C  0E70               	movlw	112
  7462  00304E  6E02               	movwf	I2C_Write_Display@d,c
  7463  003050  EC65  F018         	call	_I2C_Write_Display	;wreg free
  7464                           
  7465                           ;i2c_display.c: 23: I2C_Write_Display(data);
  7466  003054  C004  F002         	movff	Lcd_Port@data,I2C_Write_Display@d
  7467  003058  6A03               	clrf	I2C_Write_Display@d+1,c
  7468  00305A  EC65  F018         	call	_I2C_Write_Display	;wreg free
  7469                           
  7470                           ;i2c_display.c: 24: I2C_Master_Stop();
  7471  00305E  EC6A  F018         	call	_I2C_Master_Stop	;wreg free
  7472  003062  0012               	return		;funcret
  7473  003064                     __end_of_Lcd_Port:
  7474                           	opt stack 0
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           indf0	equ	0xFEF
  7482                           postinc0	equ	0xFEE
  7483                           fsr0h	equ	0xFEA
  7484                           fsr0l	equ	0xFE9
  7485                           wreg	equ	0xFE8
  7486                           indf2	equ	0xFDF
  7487                           postinc2	equ	0xFDE
  7488                           postdec2	equ	0xFDD
  7489                           fsr2h	equ	0xFDA
  7490                           fsr2l	equ	0xFD9
  7491                           status	equ	0xFD8
  7492                           
  7493 ;; *************** function _I2C_Write_Display *****************
  7494 ;; Defined at:
  7495 ;;		line 207 in file "i2c_display.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;  d               2    1[COMRAM] unsigned int 
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;		None
  7500 ;; Return value:  Size  Location     Type
  7501 ;;                  1    wreg      void 
  7502 ;; Registers used:
  7503 ;;		wreg, status,2, status,0, cstack
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7509 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;Total ram usage:        2 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; Hardware stack levels required when called:    1
  7516 ;; This function calls:
  7517 ;;		_I2C_Master_Wait
  7518 ;; This function is called by:
  7519 ;;		_Lcd_Port
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           	psect	text36
  7524  0030CA                     __ptext36:
  7525                           	opt stack 0
  7526  0030CA                     _I2C_Write_Display:
  7527                           	opt stack 25
  7528                           
  7529                           ;i2c_display.c: 209: I2C_Master_Wait();
  7530                           
  7531                           ;incstack = 0
  7532  0030CA  EC4E  F018         	call	_I2C_Master_Wait	;wreg free
  7533                           
  7534                           ;i2c_display.c: 210: SSP1BUF = d;
  7535  0030CE  C002  FFC9         	movff	I2C_Write_Display@d,4041	;volatile
  7536  0030D2  0012               	return		;funcret
  7537  0030D4                     __end_of_I2C_Write_Display:
  7538                           	opt stack 0
  7539                           tblptru	equ	0xFF8
  7540                           tblptrh	equ	0xFF7
  7541                           tblptrl	equ	0xFF6
  7542                           tablat	equ	0xFF5
  7543                           prodh	equ	0xFF4
  7544                           prodl	equ	0xFF3
  7545                           indf0	equ	0xFEF
  7546                           postinc0	equ	0xFEE
  7547                           fsr0h	equ	0xFEA
  7548                           fsr0l	equ	0xFE9
  7549                           wreg	equ	0xFE8
  7550                           indf2	equ	0xFDF
  7551                           postinc2	equ	0xFDE
  7552                           postdec2	equ	0xFDD
  7553                           fsr2h	equ	0xFDA
  7554                           fsr2l	equ	0xFD9
  7555                           status	equ	0xFD8
  7556                           
  7557 ;; *************** function _I2C_Master_Stop *****************
  7558 ;; Defined at:
  7559 ;;		line 195 in file "i2c_display.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;		None
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;		None
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  1    wreg      void 
  7566 ;; Registers used:
  7567 ;;		wreg, status,2, status,0, cstack
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;Total ram usage:        0 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; Hardware stack levels required when called:    1
  7580 ;; This function calls:
  7581 ;;		_I2C_Master_Wait
  7582 ;; This function is called by:
  7583 ;;		_Lcd_Port
  7584 ;; This function uses a non-reentrant model
  7585 ;;
  7586                           
  7587                           	psect	text37
  7588  0030D4                     __ptext37:
  7589                           	opt stack 0
  7590  0030D4                     _I2C_Master_Stop:
  7591                           	opt stack 25
  7592                           
  7593                           ;i2c_display.c: 197: I2C_Master_Wait();
  7594                           
  7595                           ;incstack = 0
  7596  0030D4  EC4E  F018         	call	_I2C_Master_Wait	;wreg free
  7597                           
  7598                           ;i2c_display.c: 198: SSP1CON2bits.PEN = 1;
  7599  0030D8  84C5               	bsf	4037,2,c	;volatile
  7600  0030DA  0012               	return		;funcret
  7601  0030DC                     __end_of_I2C_Master_Stop:
  7602                           	opt stack 0
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           prodh	equ	0xFF4
  7608                           prodl	equ	0xFF3
  7609                           indf0	equ	0xFEF
  7610                           postinc0	equ	0xFEE
  7611                           fsr0h	equ	0xFEA
  7612                           fsr0l	equ	0xFE9
  7613                           wreg	equ	0xFE8
  7614                           indf2	equ	0xFDF
  7615                           postinc2	equ	0xFDE
  7616                           postdec2	equ	0xFDD
  7617                           fsr2h	equ	0xFDA
  7618                           fsr2l	equ	0xFD9
  7619                           status	equ	0xFD8
  7620                           
  7621 ;; *************** function _I2C_Master_Start *****************
  7622 ;; Defined at:
  7623 ;;		line 183 in file "i2c_display.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;		None
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;		None
  7628 ;; Return value:  Size  Location     Type
  7629 ;;                  1    wreg      void 
  7630 ;; Registers used:
  7631 ;;		wreg, status,2, status,0, cstack
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7641 ;;Total ram usage:        0 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    1
  7644 ;; This function calls:
  7645 ;;		_I2C_Master_Wait
  7646 ;; This function is called by:
  7647 ;;		_Lcd_Port
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           	psect	text38
  7652  0030DC                     __ptext38:
  7653                           	opt stack 0
  7654  0030DC                     _I2C_Master_Start:
  7655                           	opt stack 25
  7656                           
  7657                           ;i2c_display.c: 185: I2C_Master_Wait();
  7658                           
  7659                           ;incstack = 0
  7660  0030DC  EC4E  F018         	call	_I2C_Master_Wait	;wreg free
  7661                           
  7662                           ;i2c_display.c: 186: SSP1CON2bits.SEN = 1;
  7663  0030E0  80C5               	bsf	4037,0,c	;volatile
  7664  0030E2  0012               	return		;funcret
  7665  0030E4                     __end_of_I2C_Master_Start:
  7666                           	opt stack 0
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           prodh	equ	0xFF4
  7672                           prodl	equ	0xFF3
  7673                           indf0	equ	0xFEF
  7674                           postinc0	equ	0xFEE
  7675                           fsr0h	equ	0xFEA
  7676                           fsr0l	equ	0xFE9
  7677                           wreg	equ	0xFE8
  7678                           indf2	equ	0xFDF
  7679                           postinc2	equ	0xFDE
  7680                           postdec2	equ	0xFDD
  7681                           fsr2h	equ	0xFDA
  7682                           fsr2l	equ	0xFD9
  7683                           status	equ	0xFD8
  7684                           
  7685 ;; *************** function _I2C_Master_Wait *****************
  7686 ;; Defined at:
  7687 ;;		line 176 in file "i2c_display.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;		None
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;		None
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      void 
  7694 ;; Registers used:
  7695 ;;		wreg, status,2, status,0
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7704 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7705 ;;Total ram usage:        1 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; This function calls:
  7708 ;;		Nothing
  7709 ;; This function is called by:
  7710 ;;		_I2C_Master_Start
  7711 ;;		_I2C_Master_Stop
  7712 ;;		_I2C_Write_Display
  7713 ;;		_I2C_Master_RepeatedStart
  7714 ;;		_I2C_Master_Write
  7715 ;;		_I2C_Master_Read
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719                           	psect	text39
  7720  00309C                     __ptext39:
  7721                           	opt stack 0
  7722  00309C                     _I2C_Master_Wait:
  7723                           	opt stack 25
  7724                           
  7725                           ;i2c_display.c: 178: while ((SSP1STAT & 0x04) || (SSP1CON2 & 0x1F));
  7726                           
  7727                           ;incstack = 0
  7728  00309C  B4C7               	btfsc	4039,2,c	;volatile
  7729  00309E  D7FE               	goto	_I2C_Master_Wait
  7730  0030A0  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  7731  0030A4  0E1F               	movlw	31
  7732  0030A6  1601               	andwf	??_I2C_Master_Wait,f,c
  7733  0030A8  B4D8               	btfsc	status,2,c
  7734  0030AA  0012               	return	
  7735  0030AC  D7F7               	goto	_I2C_Master_Wait
  7736  0030AE                     __end_of_I2C_Master_Wait:
  7737                           	opt stack 0
  7738                           tblptru	equ	0xFF8
  7739                           tblptrh	equ	0xFF7
  7740                           tblptrl	equ	0xFF6
  7741                           tablat	equ	0xFF5
  7742                           prodh	equ	0xFF4
  7743                           prodl	equ	0xFF3
  7744                           indf0	equ	0xFEF
  7745                           postinc0	equ	0xFEE
  7746                           fsr0h	equ	0xFEA
  7747                           fsr0l	equ	0xFE9
  7748                           wreg	equ	0xFE8
  7749                           indf2	equ	0xFDF
  7750                           postinc2	equ	0xFDE
  7751                           postdec2	equ	0xFDD
  7752                           fsr2h	equ	0xFDA
  7753                           fsr2l	equ	0xFD9
  7754                           status	equ	0xFD8
  7755                           
  7756 ;; *************** function _config *****************
  7757 ;; Defined at:
  7758 ;;		line 7 in file "config.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;		None
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;		None
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      void 
  7765 ;; Registers used:
  7766 ;;		wreg, status,2
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;Total ram usage:        0 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; This function calls:
  7779 ;;		Nothing
  7780 ;; This function is called by:
  7781 ;;		_main
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           	psect	text40
  7786  002E32                     __ptext40:
  7787                           	opt stack 0
  7788  002E32                     _config:
  7789                           	opt stack 30
  7790                           
  7791                           ;config.c: 9: TRISA=0Xff;
  7792                           
  7793                           ;incstack = 0
  7794  002E32  6892               	setf	3986,c	;volatile
  7795                           
  7796                           ;config.c: 10: TRISB=0X00;
  7797  002E34  0E00               	movlw	0
  7798  002E36  6E93               	movwf	3987,c	;volatile
  7799                           
  7800                           ;config.c: 11: TRISC=0X00;
  7801  002E38  0E00               	movlw	0
  7802  002E3A  6E94               	movwf	3988,c	;volatile
  7803                           
  7804                           ;config.c: 12: TRISD=0X00;
  7805  002E3C  0E00               	movlw	0
  7806  002E3E  6E95               	movwf	3989,c	;volatile
  7807                           
  7808                           ;config.c: 13: TRISE=0Xff;
  7809  002E40  6896               	setf	3990,c	;volatile
  7810                           
  7811                           ;config.c: 15: PORTA=0X00;
  7812  002E42  0E00               	movlw	0
  7813  002E44  6E80               	movwf	3968,c	;volatile
  7814                           
  7815                           ;config.c: 16: PORTB=0X00;
  7816  002E46  0E00               	movlw	0
  7817  002E48  6E81               	movwf	3969,c	;volatile
  7818                           
  7819                           ;config.c: 17: PORTC=0X00;
  7820  002E4A  0E00               	movlw	0
  7821  002E4C  6E82               	movwf	3970,c	;volatile
  7822                           
  7823                           ;config.c: 18: PORTD=0X00;
  7824  002E4E  0E00               	movlw	0
  7825  002E50  6E83               	movwf	3971,c	;volatile
  7826                           
  7827                           ;config.c: 19: PORTE=0X00;
  7828  002E52  0E00               	movlw	0
  7829  002E54  6E84               	movwf	3972,c	;volatile
  7830                           
  7831                           ;config.c: 21: LATA=0X00;
  7832  002E56  0E00               	movlw	0
  7833  002E58  6E89               	movwf	3977,c	;volatile
  7834                           
  7835                           ;config.c: 22: LATB=0X00;
  7836  002E5A  0E00               	movlw	0
  7837  002E5C  6E8A               	movwf	3978,c	;volatile
  7838                           
  7839                           ;config.c: 23: LATC=0X00;
  7840  002E5E  0E00               	movlw	0
  7841  002E60  6E8B               	movwf	3979,c	;volatile
  7842                           
  7843                           ;config.c: 24: LATD=0X00;
  7844  002E62  0E00               	movlw	0
  7845  002E64  6E8C               	movwf	3980,c	;volatile
  7846                           
  7847                           ;config.c: 25: LATE=0X00;
  7848  002E66  0E00               	movlw	0
  7849  002E68  6E8D               	movwf	3981,c	;volatile
  7850                           
  7851                           ;config.c: 27: ANSELA=0Xff;
  7852  002E6A  010F               	movlb	15	; () banked
  7853  002E6C  6938               	setf	56,b	;volatile
  7854                           
  7855                           ;config.c: 28: ANSELB=0X00;
  7856  002E6E  0E00               	movlw	0
  7857  002E70  6F39               	movwf	57,b	;volatile
  7858                           
  7859                           ;config.c: 29: ANSELC=0X00;
  7860  002E72  0E00               	movlw	0
  7861  002E74  6F3A               	movwf	58,b	;volatile
  7862                           
  7863                           ;config.c: 30: ANSELD=0X00;
  7864  002E76  0E00               	movlw	0
  7865  002E78  6F3B               	movwf	59,b	;volatile
  7866                           
  7867                           ;config.c: 31: ANSELE=0X00;
  7868  002E7A  0E00               	movlw	0
  7869  002E7C  6F3C               	movwf	60,b	;volatile
  7870                           
  7871                           ;config.c: 33: OSCCON=0b01110100;
  7872  002E7E  0E74               	movlw	116
  7873  002E80  6ED3               	movwf	4051,c	;volatile
  7874                           
  7875                           ; BSR set to: 15
  7876                           ;config.c: 34: OSCTUNEbits.PLLEN=1;
  7877  002E82  8C9B               	bsf	3995,6,c	;volatile
  7878                           
  7879                           ; BSR set to: 15
  7880  002E84  0012               	return		;funcret
  7881  002E86                     __end_of_config:
  7882                           	opt stack 0
  7883                           tblptru	equ	0xFF8
  7884                           tblptrh	equ	0xFF7
  7885                           tblptrl	equ	0xFF6
  7886                           tablat	equ	0xFF5
  7887                           prodh	equ	0xFF4
  7888                           prodl	equ	0xFF3
  7889                           indf0	equ	0xFEF
  7890                           postinc0	equ	0xFEE
  7891                           fsr0h	equ	0xFEA
  7892                           fsr0l	equ	0xFE9
  7893                           wreg	equ	0xFE8
  7894                           indf2	equ	0xFDF
  7895                           postinc2	equ	0xFDE
  7896                           postdec2	equ	0xFDD
  7897                           fsr2h	equ	0xFDA
  7898                           fsr2l	equ	0xFD9
  7899                           status	equ	0xFD8
  7900                           
  7901 ;; *************** function _adc_config *****************
  7902 ;; Defined at:
  7903 ;;		line 62 in file "config.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;		None
  7906 ;; Auto vars:     Size  Location     Type
  7907 ;;		None
  7908 ;; Return value:  Size  Location     Type
  7909 ;;                  1    wreg      void 
  7910 ;; Registers used:
  7911 ;;		wreg, status,2
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7921 ;;Total ram usage:        0 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; This function calls:
  7924 ;;		Nothing
  7925 ;; This function is called by:
  7926 ;;		_main
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           	psect	text41
  7931  003082                     __ptext41:
  7932                           	opt stack 0
  7933  003082                     _adc_config:
  7934                           	opt stack 30
  7935                           
  7936                           ; BSR set to: 15
  7937                           ;incstack = 0
  7938  003082  8092               	bsf	3986,0,c	;volatile
  7939                           
  7940                           ;config.c: 64: ANSELAbits.ANSA0=1;
  7941  003084  010F               	movlb	15	; () banked
  7942  003086  8138               	bsf	56,0,b	;volatile
  7943                           
  7944                           ;config.c: 65: TRISAbits.RA1=1;
  7945  003088  8292               	bsf	3986,1,c	;volatile
  7946                           
  7947                           ;config.c: 66: ANSELAbits.ANSA1=1;
  7948  00308A  8338               	bsf	56,1,b	;volatile
  7949                           
  7950                           ; BSR set to: 15
  7951                           ;config.c: 69: ADCON0=0b00000011;
  7952  00308C  0E03               	movlw	3
  7953  00308E  6EC2               	movwf	4034,c	;volatile
  7954                           
  7955                           ;config.c: 70: ADCON1=0b10000000;
  7956  003090  0E80               	movlw	128
  7957  003092  6EC1               	movwf	4033,c	;volatile
  7958                           
  7959                           ;config.c: 71: ADCON2=0b00111110;
  7960  003094  0E3E               	movlw	62
  7961  003096  6EC0               	movwf	4032,c	;volatile
  7962                           
  7963                           ; BSR set to: 15
  7964                           ;config.c: 72: ADCON2bits.ADFM=0;
  7965  003098  9EC0               	bcf	4032,7,c	;volatile
  7966                           
  7967                           ; BSR set to: 15
  7968  00309A  0012               	return		;funcret
  7969  00309C                     __end_of_adc_config:
  7970                           	opt stack 0
  7971                           tblptru	equ	0xFF8
  7972                           tblptrh	equ	0xFF7
  7973                           tblptrl	equ	0xFF6
  7974                           tablat	equ	0xFF5
  7975                           prodh	equ	0xFF4
  7976                           prodl	equ	0xFF3
  7977                           indf0	equ	0xFEF
  7978                           postinc0	equ	0xFEE
  7979                           fsr0h	equ	0xFEA
  7980                           fsr0l	equ	0xFE9
  7981                           wreg	equ	0xFE8
  7982                           indf2	equ	0xFDF
  7983                           postinc2	equ	0xFDE
  7984                           postdec2	equ	0xFDD
  7985                           fsr2h	equ	0xFDA
  7986                           fsr2l	equ	0xFD9
  7987                           status	equ	0xFD8
  7988                           tblptru	equ	0xFF8
  7989                           tblptrh	equ	0xFF7
  7990                           tblptrl	equ	0xFF6
  7991                           tablat	equ	0xFF5
  7992                           prodh	equ	0xFF4
  7993                           prodl	equ	0xFF3
  7994                           indf0	equ	0xFEF
  7995                           postinc0	equ	0xFEE
  7996                           fsr0h	equ	0xFEA
  7997                           fsr0l	equ	0xFE9
  7998                           wreg	equ	0xFE8
  7999                           indf2	equ	0xFDF
  8000                           postinc2	equ	0xFDE
  8001                           postdec2	equ	0xFDD
  8002                           fsr2h	equ	0xFDA
  8003                           fsr2l	equ	0xFD9
  8004                           status	equ	0xFD8
  8005                           
  8006                           	psect	rparam
  8007  0000                     tblptru	equ	0xFF8
  8008                           tblptrh	equ	0xFF7
  8009                           tblptrl	equ	0xFF6
  8010                           tablat	equ	0xFF5
  8011                           prodh	equ	0xFF4
  8012                           prodl	equ	0xFF3
  8013                           indf0	equ	0xFEF
  8014                           postinc0	equ	0xFEE
  8015                           fsr0h	equ	0xFEA
  8016                           fsr0l	equ	0xFE9
  8017                           wreg	equ	0xFE8
  8018                           indf2	equ	0xFDF
  8019                           postinc2	equ	0xFDE
  8020                           postdec2	equ	0xFDD
  8021                           fsr2h	equ	0xFDA
  8022                           fsr2l	equ	0xFD9
  8023                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    118
    Data        2
    BSS         178
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      95
    BANK0           160     63     142
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_16(CODE[5]), STR_13(CODE[5]), STR_11(CODE[5]), STR_7(CODE[5]), 
		 -> STR_4(CODE[5]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> str_A(BANK0[8]), str_V(BANK0[8]), main@str_A(BANK0[8]), main@str_V(BANK0[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 8
		 -> STR_17(CODE[3]), str_A(BANK0[8]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_12(CODE[4]), str_V(BANK0[8]), STR_10(CODE[3]), STR_9(CODE[5]), 
		 -> STR_8(CODE[3]), STR_6(CODE[4]), STR_5(CODE[3]), main@str_A(BANK0[8]), 
		 -> STR_3(CODE[3]), main@str_V(BANK0[8]), STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _read_Uout->___ftmul
    _read_Uin->___ftmul
    ___ftdiv->___ftpack
    _read_Iout->___ftmul
    ___lbtoft->___ftpack
    ___ftmul->___wmul
    _init_io_display->_I2C_Master_Init
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _Cursor_Off->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _Lcd_Port->_I2C_Write_Display
    _I2C_Write_Display->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                84    84      0  101151
                                             76 COMRAM     2     2      0
                                             23 BANK0     40    40      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                             ___ftge
                            ___ftmul
                         _adc_config
                             _config
                    _init_io_display
                         _pwm_config
                          _read_Iout
                           _read_Uin
                          _read_Uout
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   52893
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12667
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   12469
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     632
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _read_Uout                                            2     2      0   11739
                                             35 COMRAM     2     2      0
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (1) _read_Uin                                             2     2      0   11739
                                             35 COMRAM     2     2      0
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3215
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_Iout                                            2     2      0    8524
                                             35 COMRAM     2     2      0
                            ___ftmul
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2527
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5997
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _pwm_config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_io_display                                      2     2      0    5369
                                             21 COMRAM     2     2      0
                         _Cursor_Off
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2    1779
                                              7 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     397
                                              4 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1    1613
                                             10 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     551
                                             10 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     355
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     716
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _Cursor_Off                                           0     0      0     355
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              6     6      0     355
                                              4 COMRAM     6     6      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     196
                                              3 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                  _I2C_Write_Display
 ---------------------------------------------------------------------------------
 (5) _I2C_Write_Display                                    2     0      2     174
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   ___ftge
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _adc_config
   _config
   _init_io_display
     _Cursor_Off
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _I2C_Master_Init
       ___lldiv
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
   _pwm_config
   _read_Iout
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lbtoft
       ___ftpack
   _read_Uin
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lbtoft
       ___ftpack
   _read_Uout
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lbtoft
       ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4E      5F       1      100.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     141      12        0.0%
DATA                 0      0     141       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Mar 12 20:13:02 2019

                         _b 0089                           _c 0058                           _d 0087  
                        l65 1E30                ___awdiv@sign 000C                          _nt 008B  
       ___wmul@multiplicand 0011                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                ___ftadd@exp1 0039  
              ___ftadd@exp2 0038                ___ftadd@sign 0037          I2C_Write_Display@d 0002  
                       l421 1CE8                         l431 197E                         l424 1DB4  
                       l432 1ACE                         l440 112C                         l441 1116  
                       l434 1B7E                         l442 10DE                         l427 19A2  
                       l451 16FC                         l428 18CE                         l460 13DE  
                       l452 1176                         l701 240E                         l453 11B8  
                       l445 113E                         l286 2EAE                         l702 23FE  
                       l438 109E                         l463 1386                         l455 124A  
                       l439 10B4                         l480 1578                         l456 12B0  
                       l448 113A                         l801 2248                         l481 157C  
                       l449 1162                         l298 2B38                         l730 2774  
                       l802 2282                         l490 1730                         l482 159E  
                       l474 1534                         l458 12D6                         l299 2B02  
                       l731 275E                         l707 2432                         l811 230A  
                       l803 22AA                         l483 16D0                         l475 14A0  
                       l459 1316                         l900 2D12                         l708 2426  
                       l812 22FE                         l492 1750                         l484 15EE  
                       l733 279C                         l805 22E6                         l493 1774  
                       l477 1554                         l469 1444                         l734 2792  
                       l830 25F8                         l806 22D6                         l670 29D8  
                       l486 16F2                         l478 153E                         l727 2740  
                       l823 2566                         l671 29E2                         l663 298A  
                       l487 16DC                         l728 2736                         l816 27F6  
                       l840 2F82                         l672 29F0                         l664 299A  
                       l680 2C10                         l825 258E                         l817 2826  
                       l489 1714                         l826 25C0                         l834 3010  
                       l762 20C0                         l906 2D36                         l666 29B8  
                       l827 25D0                         l907 2D2A                         l667 29B0  
                       l683 2C30                         l772 211C                         l852 2510  
                       l844 2476                         l684 2C3A                         l676 2BF6  
                       l829 25E8                         l781 215A                         l773 2112  
                       l853 2504                         l685 2C48                         l677 2C02  
                       l782 2150                         l758 2096                         l846 24EC  
                       l791 265A                         l767 2126                         l855 252C  
                       l847 24DC                         l695 2340                         l679 2C18  
                       l784 217E                         l793 2682                         l785 219A  
                       l697 235E                         l890 2A6A                         l794 26C0  
                       l786 21CA                         l698 23A0                         l795 26E6  
                       l699 23D0                         l859 307A                         l885 2A28  
                       l886 2A1C                         l895 2CDC                         l799 221C  
                       l896 2CD0                         l889 2A5C                         l899 2D04  
              __CFG_CPB$OFF 000000                         _PR2 000FBB                __CFG_CPD$OFF 000000  
                       _Uin 006B                         _dir 0099                         _cnt 005E  
                       _dty 007F                         _str 0140                ___awmod@sign 0006  
                       wreg 000FE8                __CFG_LVP$OFF 000000                ___ftdiv@cntr 0012  
              ___ftdiv@sign 0017                        l2428 2852                        l3324 153E  
                      l3276 1360                        l3268 1316                        l3296 1448  
                      l3386 1770                        STR_1 1088                        STR_2 107C  
                      STR_3 1085                        STR_4 107C                        STR_5 108B  
                      STR_6 1081                        STR_7 107C                        STR_8 108E  
                      STR_9 1077                        u2030 2B30                        u2040 2B66  
                      u2037 2B26                        _LATA 000F89                        u2310 2438  
                      _LATB 000F8A                        u2047 2B5C                        u3007 2860  
                      _LATC 000F8B                        u1520 2728                        u2240 2310  
                      _LATD 000F8C                        u2065 2DAA                        u2321 2642  
                      u3017 2874                        u1601 2068                        u2161 2200  
                      _LATE 000F8D                        u3107 2A8C                        u3027 28F0  
                      u3117 2AA6                        u2341 266A                        u3037 2904  
                      u2421 245A                        u2181 222C                        u1630 2088  
                      u2510 2CE0                        u3127 2ABC                        u3047 2B78  
                      u1560 27A6                        u2440 2494                        u3137 2F0E  
                      u1801 254E                        u3057 2B8C                        u1730 212E  
                      u2610 11F0                        u3067 2C74                        u1660 20B2  
                      u3077 2CAE                        u1821 2576                        u2445 248C  
                      u3087 2E04                        u1591 2054                        u2615 11E6  
                      u1760 2162                        u2480 2516                        u3097 2E22  
                      u1690 20F0                        u2730 1480                        u2650 12E8  
                      u2660 1328                        u1950 2C1C                        u2760 1562  
                      u1890 29BC                        u2770 1572                        u2690 1360  
                      u2860 178C                        u1990 2A2C                        u2947 1E94  
                      u2957 1EB0                        u2967 1F2E                        u2977 1F4A  
                      u2987 1FC8                        u2997 1FE4                        _Iout 0071  
                      _Uout 006E                        _adcn 0083                        _adcp 0085  
                      _data 0077           ?_Lcd_Write_String 0008                        _buck 007D  
                      _main 1DF4                ___ftpack@arg 0001                        _pasi 009B  
              ___ftpack@exp 0004                        _tens 004F                        fsr0h 000FEA  
                      indf0 000FEF                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr2l 000FD9               __CFG_BORV$190 000000  
                      _type 0081                        prodh 000FF4                        prodl 000FF3  
                      start 0000          ??_Lcd_Write_String 000A               __CFG_IESO$OFF 000000  
              _sprintf$1558 00AF             __end_of_Lcd_Cmd 2F26                ___ftmul@cntr 0022  
              ___param_bank 000000                ___ftmul@sign 0023                ___fttol@exp1 0039  
              ___fttol@lval 0035            ?_I2C_Master_Init 000E            ?_I2C_Master_Wait 0001  
          ?_I2C_Master_Stop 0001                       ?_main 0001             __end_of___awdiv 29FA  
           __end_of___ftadd 21F0             __end_of___awmod 2C52             __end_of___ftdiv 2718  
           __end_of___ftneg 301E             __end_of___lldiv 2A7C             __end_of___ftmul 2632  
           ___awdiv@divisor 0009             __end_of___llmod 2D24             __end_of___ftsub 2FAC  
           __end_of___fttol 253E                       _T2CON 000FBA             ___awdiv@counter 000B  
                     _PORTA 000F80                       _PORTB 000F81                       _PORTC 000F82  
                     _PORTD 000F83                       _PORTE 000F84     __size_of_Lcd_Set_Cursor 0050  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       _TRISE 000F96                       _UQEnd 005C  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000                ___lltoft@exp 0011              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000             __end_of_dpowers 1029  
                     _boost 007B                       _scale 179A             __end_of_isdigit 3082  
        __CFG_MCLRE$EXTMCLR 000000               ___ftpack@sign 0005                       _str_A 009F  
                     _str_P 0060                       _start 0091                       _str_V 00A7  
                     main@c 00E7              __CFG_BOREN$OFF 000000                       tablat 000FF5  
                     status 000FD8             __end_of_sprintf 179A              __CFG_HFOFST$ON 000000  
            __CFG_PBADEN$ON 000000            __end_of_Lcd_Init 2AF8            __end_of_Lcd_Port 3064  
               _Lcd_Cmd$736 0007             __initialization 2F26                __end_of_main 2044  
                _Cursor_Off 30BC                      ??_main 004D               ___fttol@sign1 0034  
        __size_of_Lcd_Clear 000E               __activetblptr 000002              __CFG_PLLCFG$ON 000000  
      __size_of__tdiv_to_l_ 0132           ?_I2C_Master_Start 0001          ??_I2C_Master_Start 0002  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADCON2 000FC0  
          ___llmod@dividend 0001                      ?_scale 0024                      _ADRESH 000FC4  
                    _CCPR1L 000FBE                      _CCPR2L 000F67                      _CCPR3L 000F5E  
          ___awdiv@dividend 0007                      _ANSELA 000F38                      _ANSELB 000F39  
                    _ANSELC 000F3A                      _ANSELD 000F3B                      _ANSELE 000F3C  
          __end_of___ftpack 27C6            __end_of___lbtoft 3042            __end_of___lltoft 2D80  
            __CFG_WDTEN$OFF 000000                      _OSCCON 000FD3                   ??_Lcd_Cmd 0005  
   __size_of_Lcd_Write_Char 0058                      _SSPBUF 000FC9                      _URBuff 0100  
            __CFG_XINST$OFF 000000            __end_of__powers_ 1050                      ___ftge 27C6  
                    ___wmul 2FD4                   ??___awdiv 000B                   ??___ftadd 0034  
                 ??___awmod 0005                   ??___ftdiv 000F                   ??___ftneg 0004  
                 ??___lldiv 0009                   ??___ftmul 001B                   ??___llmod 0009  
                 ??___ftsub 0040                   ??___fttol 002F                      _config 2E32  
                    _curent 0068            __end_of_read_Uin 2976                      _fround 1BA2  
                    clear_0 2F44                      clear_1 2F50                      clear_2 2F5C  
          ___awdiv@quotient 000D             ___awmod@divisor 0003                      _tens_A 0074  
           ___awmod@counter 0005             _init_io_display 2C52       ___ftmul@f3_as_product 001F  
              __pdataCOMRAM 005E                   ??_isdigit 0001                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                 ??_sprintf 0047             Lcd_Set_Cursor@a 000C             Lcd_Set_Cursor@b 000B  
           Lcd_Set_Cursor@y 000E             Lcd_Set_Cursor@z 000D                  __accesstop 0060  
   __end_of__initialization 2F62                  ___ftadd@f1 002E                  ___ftadd@f2 0031  
                ___ftge@ff1 0001                  ___ftge@ff2 0004           __end_of_Lcd_Clear 30BC  
             ___rparam_used 000001                  ___ftdiv@f1 0009                  ___ftdiv@f2 000C  
                ___ftdiv@f3 0013                  ___ftneg@f1 0001                  ___lbtoft@c 000C  
                ___ftmul@f1 0015                  ___ftmul@f2 0018                  ___ftsub@f1 003A  
                ___ftsub@f2 003D                  ___fttol@f1 002B              __pcstackCOMRAM 0001  
                _adc_config 3082                  ___lltoft@c 0009               __end_of_scale 1BA2  
               ?_Cursor_Off 0001              _Lcd_Set_Cursor 2E86                  __div_to_l_ 2322  
                 ?_Lcd_Init 0001                   ?_Lcd_Port 0001             __div_to_l_@exp1 000C  
           __div_to_l_@cntr 000B                     ??_scale 0027             __div_to_l_@quot 0007  
                __pbssBANK0 0060                  __pbssBANK1 0100          __size_of_read_Iout 0074  
             __div_to_l_@f1 0001               __div_to_l_@f2 0004          __size_of_read_Uout 0090  
        __CFG_CCP2MX$PORTC1 000000     __end_of_init_io_display 2CBE                     ?___ftge 0001  
                   ?___wmul 000F          __CFG_CCP3MX$PORTB5 000000                     ?_config 0001  
                   _CCP1CON 000FBD           _I2C_Write_Display 30CA                     _CCP2CON 000F66  
                   _CCP3CON 000F5D                     ?_fround 0024   __size_of_Lcd_Write_String 0076  
                 ?___ftpack 0001                   ?___lbtoft 0009      __end_of_Lcd_Set_Cursor 2ED6  
                 ?___lltoft 0009          ?_I2C_Write_Display 0002                  _directie_2 0095  
         __CFG_PRICLKEN$OFF 000000         ??_I2C_Write_Display 0004                  ??_Lcd_Init 000B  
                   _SSP1ADD 000FC8                     _SSP1BUF 000FC9                  ??_Lcd_Port 0004  
                   _UQFront 005D              _Lcd_Write_Char 2DDA                     _Lcd_Cmd 2ED6  
       __size_of_Cursor_Off 000E                   ?_read_Uin 0001                  _go_stepper 0093  
           __CFG_PWRTEN$OFF 000000           __end_of__npowers_ 1077                     __Hparam 0000  
                _scale$1557 0027                     __Lparam 0000   __end_of_I2C_Write_Display 30D4  
               ?_adc_config 0001             __size_of___ftge 0090                     ___awdiv 2976  
                   ___ftadd 2044                     ___awmod 2BE2                     ___ftdiv 2632  
                   ___ftneg 2FFA                     ___lldiv 29FA             __size_of___wmul 0026  
                   ___ftmul 253E                     ___llmod 2CBE                     ___ftsub 2F6C  
                   ___fttol 244A                __psmallconst 1000             __size_of_config 0054  
           __CFG_STVREN$OFF 000000                     __pcinit 2F26                  ??___ftpack 0006  
                ??___lbtoft 000C             __size_of_fround 0252                     __ramtop 1000  
           ?_Lcd_Set_Cursor 000B                  ??___lltoft 000D                     __ptext0 1DF4  
                   __ptext1 1092                     __ptext2 179A                     __ptext3 3064  
                   __ptext4 1BA2                     __ptext5 2FD4                     __ptext6 2BE2  
                   __ptext7 2976                     __ptext8 21F0                     __ptext9 2322  
               ?__div_to_l_ 0001                     _dpowers 1001           __end_of_read_Iout 2BE2  
                   _dty_car 0079                     _isdigit 3064           __end_of_read_Uout 28E6  
                _duty_boost 005A            ___awmod@dividend 0001                     _nr_pasi 0097  
  __size_of_I2C_Master_Init 005A    __size_of_I2C_Master_Wait 0012    __size_of_I2C_Master_Stop 0008  
                   main@Uin 00E4                     _sprintf 1092                     main@dty 00C9  
    __end_of_Lcd_Write_Char 2E32        end_of_initialization 2F62                  ??_read_Uin 0024  
             __Lmediumconst 0000   __size_of_I2C_Master_Start 0008             ___lldiv@divisor 0005  
           ___lldiv@counter 000D            I2C_Master_Init@c 000E            ?_init_io_display 0001  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
            __tdiv_to_l_@f1 0001              __tdiv_to_l_@f2 0004               ??__tdiv_to_l_ 0007  
                 _TRISAbits 000F92                   _TRISCbits 000F94                   _TRISDbits 000F95  
                _pwm_config 2FAC             ?_Lcd_Write_Char 0001         __size_of_adc_config 001A  
         Lcd_Write_String@a 0008           Lcd_Write_String@i 000C                 ___ftdiv@exp 0016  
                main@curent 00DB         __size_of__div_to_l_ 0128                 ___ftmul@exp 001E  
                 _Lcd_Clear 30AE  __size_of_I2C_Write_Display 000A              __end_of___ftge 2856  
              ??_Cursor_Off 000B              __end_of___wmul 2FFA            _Lcd_Write_String 2AF8  
             __pidataCOMRAM 30E4              __end_of_config 2E86              __end_of_fround 1DF4  
       start_initialization 2F26         __end_of__tdiv_to_l_ 2322           __size_of_Lcd_Init 007C  
         __size_of_Lcd_Port 0022           ??_I2C_Master_Init 0012           ??_I2C_Master_Wait 0001  
         ??_I2C_Master_Stop 0002          __end_of_Cursor_Off 30CA             ___llmod@divisor 0005  
           ___llmod@counter 0009                  ?_Lcd_Clear 0001                    ??___ftge 0007  
                  ??___wmul 0013                    ??_config 0001             Lcd_Write_Char@a 0005  
           Lcd_Write_Char@y 0006                    ??_fround 0027               sprintf@tmpval 00BC  
                fround@prec 002D           __size_of___ftpack 00AE           __size_of___lbtoft 0024  
         __size_of___lltoft 005C                 __pbssCOMRAM 004F               __pcstackBANK0 00AF  
               ?_pwm_config 0001                _isdigit$1172 0002                    ?_Lcd_Cmd 0001  
               sprintf@flag 00B4                 sprintf@fval 00C2                 sprintf@prec 00C0  
          _I2C_Master_Start 30DC           __size_of_read_Uin 0090            ??_Lcd_Set_Cursor 000C  
              ??_adc_config 0001                    ?___awdiv 0007                    ?___ftadd 002E  
                  ?___awmod 0001                    ?___ftdiv 0009                    ?___ftneg 0001  
                  ?___lldiv 0001                    ?___ftmul 0015                    ?___llmod 0001  
                  ?___ftsub 003A                   __npowers_ 1050                    ?___fttol 002B  
               __tdiv_to_l_ 21F0                ??__div_to_l_ 0007                 __smallconst 1000  
                  ?_isdigit 0001                    _CCPTMRS0 000F49                   _read_Iout 2B6E  
                 _read_Uout 2856                    ?_sprintf 0040              __size_of_scale 0408  
        __end_of_adc_config 309C                   _duty_buck 009D              ___wmul@product 0013  
                  _LATDbits 000F8C                    _PIE1bits 000F9D                   _rez_adc_A 0055  
                 _rez_adc_U 0052                    Lcd_Cmd@a 000A          __end_of__div_to_l_ 244A  
               ??_Lcd_Clear 000B            __CFG_WDTPS$32768 000000         __size_of_pwm_config 0028  
                  _SSP1CON1 000FC6                    _SSP1CON2 000FC5                    _SSP1STAT 000FC7  
                _ADCON0bits 000FC2                  _ADCON2bits 000FC0           ___wmul@multiplier 000F  
                 main@Power 00C6            ??_Lcd_Write_Char 0005                   main@str_A 00CB  
                 main@str_V 00D3                    _Lcd_Init 2A7C                    _Lcd_Port 3042  
                ?_read_Iout 0001                  ?_read_Uout 0001    __end_of_Lcd_Write_String 2B6E  
          __size_of_Lcd_Cmd 0050                Lcd_Port@data 0004                    __Hrparam 0000  
                  __Lrparam 0000           __CFG_P2BMX$PORTD2 000000            __size_of___awdiv 0084  
          __size_of___ftadd 01AC            __size_of___awmod 0070            __size_of___ftdiv 00E6  
          __size_of___ftneg 0024            __size_of___lldiv 0082            __size_of___ftmul 00F4  
          __size_of___llmod 0066            __size_of___ftsub 0040            __size_of___fttol 00F4  
                  ___ftpack 2718                    ___lbtoft 301E                 _fround$1555 002A  
               _fround$1556 0027                    ___lltoft 2D24                  _ANSELAbits 000F38  
  __size_of_init_io_display 006C                  sprintf@exp 00BA                  sprintf@val 00B6  
           _I2C_Master_Init 2D80             _I2C_Master_Wait 309C             _I2C_Master_Stop 30D4  
          __size_of_isdigit 001E                    __ptext10 2D24                    __ptext11 2CBE  
                  __ptext20 2B6E                    __ptext12 244A                    __ptext21 301E  
                  __ptext13 2F6C                    __ptext30 30AE                    __ptext22 253E  
                  __ptext14 2044                    __ptext31 2D80                    __ptext23 2718  
                  __ptext15 2FFA                    __ptext40 2E32                    __ptext32 29FA  
                  __ptext24 2FAC                    __ptext16 27C6                    __ptext41 3082  
                  __ptext33 30BC                    __ptext25 2C52                    __ptext17 2856  
                  __ptext34 2ED6                    __ptext26 2AF8                    __ptext18 28E6  
                  __ptext35 3042                    __ptext27 2DDA                    __ptext19 2632  
                  __ptext36 30CA                    __ptext28 2E86                    __ptext37 30D4  
                  __ptext29 2A7C                    __ptext38 30DC                    __ptext39 309C  
              _SSP1CON2bits 000FC5                    __powers_ 1029            __size_of_sprintf 0708  
               Lcd_Cmd@buff 0008                    _read_Uin 28E6               __size_of_main 0250  
                  _pasi_int 008F                    _sel_pasi 008D                    main@Iout 00DE  
                  main@Uout 00E1                    main@tens 00E9                    main@port 00EC  
  __end_of_I2C_Master_Start 30E4                 _OSCTUNEbits 000F9B                  _INTCONbits 000FF2  
              ??_pwm_config 0001                    isdigit@c 0003                 ??_read_Iout 0024  
                  scale@scl 002A                 ??_read_Uout 0024          Lcd_Write_Char@temp 0007  
                 sprintf@ap 00B2            __tdiv_to_l_@exp1 000F                   sprintf@sp 0040  
          __tdiv_to_l_@cntr 000E            __tdiv_to_l_@quot 000A            ___lldiv@dividend 0001  
        __end_of_pwm_config 2FD4     __end_of_I2C_Master_Init 2DDA     __end_of_I2C_Master_Wait 30AE  
   __end_of_I2C_Master_Stop 30DC          Lcd_Set_Cursor@temp 000F                ?__tdiv_to_l_ 0001  
                  sprintf@c 00C5                    sprintf@f 0042            ___lldiv@quotient 0009  
         __CFG_T3CMX$PORTC0 000000           ??_init_io_display 0016           __CFG_FOSC$INTIO67 000000  
