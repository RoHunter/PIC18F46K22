

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Mar 12 21:00:05 2019

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57  0000                     
    58                           ; Version 1.44
    59                           ; Generated 14/09/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F46K22 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	idataCOMRAM
    94  00305A                     __pidataCOMRAM:
    95                           	opt stack 0
    96                           
    97                           ;initializer for _cnt
    98  00305A  0001               	dw	1
    99                           
   100                           	psect	smallconst
   101  001000                     __psmallconst:
   102                           	opt stack 0
   103  001000  00                 	db	0
   104  001001                     _dpowers:
   105                           	opt stack 0
   106  001001  0001               	dw	1
   107  001003  0000               	dw	0
   108  001005  000A               	dw	10
   109  001007  0000               	dw	0
   110  001009  0064               	dw	100
   111  00100B  0000               	dw	0
   112  00100D  03E8               	dw	1000
   113  00100F  0000               	dw	0
   114  001011  2710               	dw	10000
   115  001013  0000               	dw	0
   116  001015  86A0               	dw	34464
   117  001017  0001               	dw	1
   118  001019  4240               	dw	16960
   119  00101B  000F               	dw	15
   120  00101D  9680               	dw	38528
   121  00101F  0098               	dw	152
   122  001021  E100               	dw	57600
   123  001023  05F5               	dw	1525
   124  001025  CA00               	dw	51712
   125  001027  3B9A               	dw	15258
   126  001029                     __end_of_dpowers:
   127                           	opt stack 0
   128  001029                     __powers_:
   129                           	opt stack 0
   130  001029  00                 	db	0
   131  00102A  80                 	db	128
   132  00102B  3F                 	db	63
   133  00102C  00                 	db	0
   134  00102D  20                 	db	32
   135  00102E  41                 	db	65
   136  00102F  00                 	db	0
   137  001030  C8                 	db	200
   138  001031  42                 	db	66
   139  001032  00                 	db	0
   140  001033  7A                 	db	122
   141  001034  44                 	db	68
   142  001035  40                 	db	64
   143  001036  1C                 	db	28
   144  001037  46                 	db	70
   145  001038  50                 	db	80
   146  001039  C3                 	db	195
   147  00103A  47                 	db	71
   148  00103B  24                 	db	36
   149  00103C  74                 	db	116
   150  00103D  49                 	db	73
   151  00103E  97                 	db	151
   152  00103F  18                 	db	24
   153  001040  4B                 	db	75
   154  001041  BC                 	db	188
   155  001042  BE                 	db	190
   156  001043  4C                 	db	76
   157  001044  6B                 	db	107
   158  001045  6E                 	db	110
   159  001046  4E                 	db	78
   160  001047  03                 	db	3
   161  001048  15                 	db	21
   162  001049  50                 	db	80
   163  00104A  79                 	db	121
   164  00104B  AD                 	db	173
   165  00104C  60                 	db	96
   166  00104D  F3                 	db	243
   167  00104E  49                 	db	73
   168  00104F  71                 	db	113
   169  001050                     __end_of__powers_:
   170                           	opt stack 0
   171  001050                     __npowers_:
   172                           	opt stack 0
   173  001050  00                 	db	0
   174  001051  80                 	db	128
   175  001052  3F                 	db	63
   176  001053  CD                 	db	205
   177  001054  CC                 	db	204
   178  001055  3D                 	db	61
   179  001056  D7                 	db	215
   180  001057  23                 	db	35
   181  001058  3C                 	db	60
   182  001059  12                 	db	18
   183  00105A  83                 	db	131
   184  00105B  3A                 	db	58
   185  00105C  B7                 	db	183
   186  00105D  D1                 	db	209
   187  00105E  38                 	db	56
   188  00105F  C6                 	db	198
   189  001060  27                 	db	39
   190  001061  37                 	db	55
   191  001062  38                 	db	56
   192  001063  86                 	db	134
   193  001064  35                 	db	53
   194  001065  C0                 	db	192
   195  001066  D6                 	db	214
   196  001067  33                 	db	51
   197  001068  CC                 	db	204
   198  001069  2B                 	db	43
   199  00106A  32                 	db	50
   200  00106B  70                 	db	112
   201  00106C  89                 	db	137
   202  00106D  30                 	db	48
   203  00106E  E7                 	db	231
   204  00106F  DB                 	db	219
   205  001070  2E                 	db	46
   206  001071  E5                 	db	229
   207  001072  3C                 	db	60
   208  001073  1E                 	db	30
   209  001074  42                 	db	66
   210  001075  A2                 	db	162
   211  001076  0D                 	db	13
   212  001077                     __end_of__npowers_:
   213                           	opt stack 0
   214  0000                     _ANSELAbits	set	3896
   215  0000                     _CCPR3L	set	3934
   216  0000                     _CCP3CON	set	3933
   217  0000                     _CCPTMRS0	set	3913
   218  0000                     _ANSELE	set	3900
   219  0000                     _ANSELD	set	3899
   220  0000                     _ANSELC	set	3898
   221  0000                     _ANSELB	set	3897
   222  0000                     _ANSELA	set	3896
   223  0000                     _ADCON0bits	set	4034
   224  0000                     _SSPBUF	set	4041
   225  0000                     _SSP1BUF	set	4041
   226  0000                     _SSP1CON2bits	set	4037
   227  0000                     _SSP1STAT	set	4039
   228  0000                     _SSP1ADD	set	4040
   229  0000                     _SSP1CON2	set	4037
   230  0000                     _SSP1CON1	set	4038
   231  0000                     _LATDbits	set	3980
   232  0000                     _PIE1bits	set	3997
   233  0000                     _INTCONbits	set	4082
   234  0000                     _TRISCbits	set	3988
   235  0000                     _ADCON2bits	set	4032
   236  0000                     _ADCON2	set	4032
   237  0000                     _ADCON1	set	4033
   238  0000                     _ADCON0	set	4034
   239  0000                     _TRISAbits	set	3986
   240  0000                     _CCPR1L	set	4030
   241  0000                     _CCPR2L	set	3943
   242  0000                     _PR2	set	4027
   243  0000                     _T2CON	set	4026
   244  0000                     _CCP1CON	set	4029
   245  0000                     _CCP2CON	set	3942
   246  0000                     _OSCTUNEbits	set	3995
   247  0000                     _OSCCON	set	4051
   248  0000                     _LATE	set	3981
   249  0000                     _LATD	set	3980
   250  0000                     _LATC	set	3979
   251  0000                     _LATB	set	3978
   252  0000                     _LATA	set	3977
   253  0000                     _PORTE	set	3972
   254  0000                     _PORTD	set	3971
   255  0000                     _PORTC	set	3970
   256  0000                     _PORTB	set	3969
   257  0000                     _PORTA	set	3968
   258  0000                     _TRISE	set	3990
   259  0000                     _TRISD	set	3989
   260  0000                     _TRISC	set	3988
   261  0000                     _TRISB	set	3987
   262  0000                     _TRISA	set	3986
   263  0000                     _ADRESH	set	4036
   264  001077                     STR_3:
   265                           
   266                           ; BSR set to: 15
   267  001077  25                 	db	37
   268  001078  2E                 	db	46
   269  001079  32                 	db	50	;'2'
   270  00107A  66                 	db	102	;'f'
   271  00107B  00                 	db	0
   272  00107C                     STR_1:
   273                           
   274                           ; BSR set to: 15
   275  00107C  54                 	db	84	;'T'
   276  00107D  65                 	db	101	;'e'
   277  00107E  73                 	db	115	;'s'
   278  00107F  74                 	db	116	;'t'
   279  001080  00                 	db	0
   280  001081                     STR_7:
   281                           
   282                           ; BSR set to: 15
   283  001081  55                 	db	85	;'U'
   284  001082  69                 	db	105	;'i'
   285  001083  3D                 	db	61	;'='
   286  001084  00                 	db	0
   287  001085                     STR_2:
   288                           
   289                           ; BSR set to: 15
   290  001085  49                 	db	73	;'I'
   291  001086  3D                 	db	61	;'='
   292  001087  00                 	db	0
   293  001088                     STR_5:
   294                           
   295                           ; BSR set to: 15
   296  001088  55                 	db	85	;'U'
   297  001089  3D                 	db	61	;'='
   298  00108A  00                 	db	0
   299  00108B                     STR_4:
   300                           
   301                           ; BSR set to: 15
   302  00108B  20                 	db	32
   303  00108C  41                 	db	65	;'A'
   304  00108D  00                 	db	0
   305  00108E                     STR_9:
   306                           
   307                           ; BSR set to: 15
   308  00108E  20                 	db	32
   309  00108F  56                 	db	86	;'V'
   310  001090  00                 	db	0
   311  0000                     
   312                           ; #config settings
   313  001091  00                 	db	0	; dummy byte at the end
   314  0000                     
   315                           	psect	cinit
   316  002EE8                     __pcinit:
   317                           	opt stack 0
   318  002EE8                     start_initialization:
   319                           	opt stack 0
   320  002EE8                     __initialization:
   321                           	opt stack 0
   322                           
   323                           ; Initialize objects allocated to COMRAM (2 bytes)
   324                           ; load TBLPTR registers with __pidataCOMRAM
   325  002EE8  0E5A               	movlw	low __pidataCOMRAM
   326  002EEA  6EF6               	movwf	tblptrl,c
   327  002EEC  0E30               	movlw	high __pidataCOMRAM
   328  002EEE  6EF7               	movwf	tblptrh,c
   329  002EF0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   330  002EF2  6EF8               	movwf	tblptru,c
   331  002EF4  0009               	tblrd		*+	;fetch initializer
   332  002EF6  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   333  002EFA  0009               	tblrd		*+	;fetch initializer
   334  002EFC  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
   335                           
   336                           ; Clear objects allocated to BANK0 (123 bytes)
   337  002F00  EE00  F060         	lfsr	0,__pbssBANK0
   338  002F04  0E7B               	movlw	123
   339  002F06                     clear_0:
   340  002F06  6AEE               	clrf	postinc0,c
   341  002F08  06E8               	decf	wreg,f,c
   342  002F0A  E1FD               	bnz	clear_0
   343                           
   344                           ; Clear objects allocated to COMRAM (10 bytes)
   345  002F0C  EE00  F053         	lfsr	0,__pbssCOMRAM
   346  002F10  0E0A               	movlw	10
   347  002F12                     clear_1:
   348  002F12  6AEE               	clrf	postinc0,c
   349  002F14  06E8               	decf	wreg,f,c
   350  002F16  E1FD               	bnz	clear_1
   351  002F18                     end_of_initialization:
   352                           	opt stack 0
   353  002F18                     __end_of__initialization:
   354                           	opt stack 0
   355  002F18  0E00               	movlw	low (__Lmediumconst shr (0+16))
   356  002F1A  6EF8               	movwf	tblptru,c
   357  002F1C  0100               	movlb	0
   358  002F1E  EF46  F013         	goto	_main	;jump to C main() function
   359                           tblptru	equ	0xFF8
   360                           tblptrh	equ	0xFF7
   361                           tblptrl	equ	0xFF6
   362                           tablat	equ	0xFF5
   363                           postinc0	equ	0xFEE
   364                           wreg	equ	0xFE8
   365                           
   366                           	psect	bssCOMRAM
   367  000053                     __pbssCOMRAM:
   368                           	opt stack 0
   369  000053                     _tens:
   370                           	opt stack 0
   371  000053                     	ds	3
   372  000056                     _rez_adc_U:
   373                           	opt stack 0
   374  000056                     	ds	3
   375  000059                     _c:
   376                           	opt stack 0
   377  000059                     	ds	2
   378  00005B                     _UQEnd:
   379                           	opt stack 0
   380  00005B                     	ds	1
   381  00005C                     _UQFront:
   382                           	opt stack 0
   383  00005C                     	ds	1
   384                           tblptru	equ	0xFF8
   385                           tblptrh	equ	0xFF7
   386                           tblptrl	equ	0xFF6
   387                           tablat	equ	0xFF5
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           
   391                           	psect	dataCOMRAM
   392  00005D                     __pdataCOMRAM:
   393                           	opt stack 0
   394  00005D                     _cnt:
   395                           	opt stack 0
   396  00005D                     	ds	2
   397                           tblptru	equ	0xFF8
   398                           tblptrh	equ	0xFF7
   399                           tblptrl	equ	0xFF6
   400                           tablat	equ	0xFF5
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           
   404                           	psect	bssBANK0
   405  000060                     __pbssBANK0:
   406                           	opt stack 0
   407  000060                     _URBuff:
   408                           	opt stack 0
   409  000060                     	ds	64
   410  0000A0                     _str_P:
   411                           	opt stack 0
   412  0000A0                     	ds	8
   413  0000A8                     _Uin:
   414                           	opt stack 0
   415  0000A8                     	ds	3
   416  0000AB                     _Uout:
   417                           	opt stack 0
   418  0000AB                     	ds	3
   419  0000AE                     _Iout:
   420                           	opt stack 0
   421  0000AE                     	ds	3
   422  0000B1                     _tens_A:
   423                           	opt stack 0
   424  0000B1                     	ds	3
   425  0000B4                     _rez_adc_A:
   426                           	opt stack 0
   427  0000B4                     	ds	3
   428  0000B7                     _data:
   429                           	opt stack 0
   430  0000B7                     	ds	2
   431  0000B9                     _dty_car:
   432                           	opt stack 0
   433  0000B9                     	ds	2
   434  0000BB                     _boost:
   435                           	opt stack 0
   436  0000BB                     	ds	2
   437  0000BD                     _buck:
   438                           	opt stack 0
   439  0000BD                     	ds	2
   440  0000BF                     _dty:
   441                           	opt stack 0
   442  0000BF                     	ds	2
   443  0000C1                     _type:
   444                           	opt stack 0
   445  0000C1                     	ds	2
   446  0000C3                     _adcn:
   447                           	opt stack 0
   448  0000C3                     	ds	2
   449  0000C5                     _adcp:
   450                           	opt stack 0
   451  0000C5                     	ds	2
   452  0000C7                     _d:
   453                           	opt stack 0
   454  0000C7                     	ds	2
   455  0000C9                     _b:
   456                           	opt stack 0
   457  0000C9                     	ds	2
   458  0000CB                     _str_A:
   459                           	opt stack 0
   460  0000CB                     	ds	8
   461  0000D3                     _str_V:
   462                           	opt stack 0
   463  0000D3                     	ds	8
   464                           tblptru	equ	0xFF8
   465                           tblptrh	equ	0xFF7
   466                           tblptrl	equ	0xFF6
   467                           tablat	equ	0xFF5
   468                           postinc0	equ	0xFEE
   469                           wreg	equ	0xFE8
   470                           
   471                           	psect	cstackBANK0
   472  0000DB                     __pcstackBANK0:
   473                           	opt stack 0
   474  0000DB                     _sprintf$1430:
   475                           	opt stack 0
   476                           
   477                           ; 3 bytes @ 0x0
   478  0000DB                     	ds	3
   479  0000DE                     sprintf@ap:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x3
   483  0000DE                     	ds	2
   484  0000E0                     sprintf@flag:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x5
   488  0000E0                     	ds	2
   489  0000E2                     sprintf@val:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0x7
   493  0000E2                     	ds	4
   494  0000E6                     sprintf@exp:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0xB
   498  0000E6                     	ds	2
   499  0000E8                     sprintf@tmpval:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0xD
   503  0000E8                     	ds	4
   504  0000EC                     sprintf@prec:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x11
   508  0000EC                     	ds	2
   509  0000EE                     sprintf@fval:
   510                           	opt stack 0
   511                           
   512                           ; 3 bytes @ 0x13
   513  0000EE                     	ds	3
   514  0000F1                     sprintf@c:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x16
   518  0000F1                     	ds	1
   519                           tblptru	equ	0xFF8
   520                           tblptrh	equ	0xFF7
   521                           tblptrl	equ	0xFF6
   522                           tablat	equ	0xFF5
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           
   526                           	psect	cstackCOMRAM
   527  000001                     __pcstackCOMRAM:
   528                           	opt stack 0
   529  000001                     ??_isdigit:
   530  000001                     ??_I2C_Master_Wait:
   531  000001                     ?___awmod:
   532                           	opt stack 0
   533  000001                     ?___ftpack:
   534                           	opt stack 0
   535  000001                     ?___ftneg:
   536                           	opt stack 0
   537  000001                     ?__tdiv_to_l_:
   538                           	opt stack 0
   539  000001                     ?__div_to_l_:
   540                           	opt stack 0
   541  000001                     ?___lldiv:
   542                           	opt stack 0
   543  000001                     ?___llmod:
   544                           	opt stack 0
   545  000001                     ___awmod@dividend:
   546                           	opt stack 0
   547  000001                     __div_to_l_@f1:
   548                           	opt stack 0
   549  000001                     ___ftpack@arg:
   550                           	opt stack 0
   551  000001                     __tdiv_to_l_@f1:
   552                           	opt stack 0
   553  000001                     ___ftge@ff1:
   554                           	opt stack 0
   555  000001                     ___ftneg@f1:
   556                           	opt stack 0
   557  000001                     ___lldiv@dividend:
   558                           	opt stack 0
   559  000001                     ___llmod@dividend:
   560                           	opt stack 0
   561                           
   562                           ; 4 bytes @ 0x0
   563  000001                     	ds	1
   564  000002                     _isdigit$1053:
   565                           	opt stack 0
   566  000002                     I2C_Write_Display@d:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x1
   570  000002                     	ds	1
   571  000003                     isdigit@c:
   572                           	opt stack 0
   573  000003                     ___awmod@divisor:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x2
   577  000003                     	ds	1
   578  000004                     Lcd_Port@data:
   579                           	opt stack 0
   580  000004                     ___ftpack@exp:
   581                           	opt stack 0
   582  000004                     __div_to_l_@f2:
   583                           	opt stack 0
   584  000004                     __tdiv_to_l_@f2:
   585                           	opt stack 0
   586  000004                     ___ftge@ff2:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0x3
   590  000004                     	ds	1
   591  000005                     ??_Lcd_Cmd:
   592  000005                     Lcd_Write_Char@a:
   593                           	opt stack 0
   594  000005                     ___awmod@counter:
   595                           	opt stack 0
   596  000005                     ___ftpack@sign:
   597                           	opt stack 0
   598  000005                     ___lldiv@divisor:
   599                           	opt stack 0
   600  000005                     ___llmod@divisor:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x4
   604  000005                     	ds	1
   605  000006                     ??___ftpack:
   606  000006                     Lcd_Write_Char@y:
   607                           	opt stack 0
   608  000006                     ___awmod@sign:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x5
   612  000006                     	ds	1
   613  000007                     ??__tdiv_to_l_:
   614  000007                     ??___ftge:
   615  000007                     ?___awdiv:
   616                           	opt stack 0
   617  000007                     _Lcd_Cmd$617:
   618                           	opt stack 0
   619  000007                     Lcd_Write_Char@temp:
   620                           	opt stack 0
   621  000007                     ___awdiv@dividend:
   622                           	opt stack 0
   623  000007                     __div_to_l_@quot:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x6
   627  000007                     	ds	1
   628  000008                     Lcd_Cmd@buff:
   629                           	opt stack 0
   630  000008                     Lcd_Write_String@a:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x7
   634  000008                     	ds	1
   635  000009                     ?___ftdiv:
   636                           	opt stack 0
   637  000009                     ?___lbtoft:
   638                           	opt stack 0
   639  000009                     ?___lltoft:
   640                           	opt stack 0
   641  000009                     ___llmod@counter:
   642                           	opt stack 0
   643  000009                     ___awdiv@divisor:
   644                           	opt stack 0
   645  000009                     ___ftdiv@f1:
   646                           	opt stack 0
   647  000009                     ___lldiv@quotient:
   648                           	opt stack 0
   649  000009                     ___lltoft@c:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0x8
   653  000009                     	ds	1
   654  00000A                     ??_Lcd_Write_String:
   655  00000A                     Lcd_Cmd@a:
   656                           	opt stack 0
   657  00000A                     __tdiv_to_l_@quot:
   658                           	opt stack 0
   659                           
   660                           ; 4 bytes @ 0x9
   661  00000A                     	ds	1
   662  00000B                     ??_Lcd_Init:
   663  00000B                     Lcd_Set_Cursor@b:
   664                           	opt stack 0
   665  00000B                     ___awdiv@counter:
   666                           	opt stack 0
   667  00000B                     __div_to_l_@cntr:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0xA
   671  00000B                     	ds	1
   672  00000C                     Lcd_Set_Cursor@a:
   673                           	opt stack 0
   674  00000C                     ___awdiv@sign:
   675                           	opt stack 0
   676  00000C                     __div_to_l_@exp1:
   677                           	opt stack 0
   678  00000C                     ___lbtoft@c:
   679                           	opt stack 0
   680  00000C                     Lcd_Write_String@i:
   681                           	opt stack 0
   682  00000C                     ___ftdiv@f2:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0xB
   686  00000C                     	ds	1
   687  00000D                     ??___lltoft:
   688  00000D                     Lcd_Set_Cursor@z:
   689                           	opt stack 0
   690  00000D                     ___lldiv@counter:
   691                           	opt stack 0
   692  00000D                     ___awdiv@quotient:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0xC
   696  00000D                     	ds	1
   697  00000E                     Lcd_Set_Cursor@y:
   698                           	opt stack 0
   699  00000E                     __tdiv_to_l_@cntr:
   700                           	opt stack 0
   701  00000E                     I2C_Master_Init@c:
   702                           	opt stack 0
   703                           
   704                           ; 4 bytes @ 0xD
   705  00000E                     	ds	1
   706  00000F                     ??___ftdiv:
   707  00000F                     ?___wmul:
   708                           	opt stack 0
   709  00000F                     Lcd_Set_Cursor@temp:
   710                           	opt stack 0
   711  00000F                     __tdiv_to_l_@exp1:
   712                           	opt stack 0
   713  00000F                     ___wmul@multiplier:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0xE
   717  00000F                     	ds	2
   718  000011                     ___lltoft@exp:
   719                           	opt stack 0
   720  000011                     ___wmul@multiplicand:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x10
   724  000011                     	ds	1
   725  000012                     ??_I2C_Master_Init:
   726  000012                     ___ftdiv@cntr:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x11
   730  000012                     	ds	1
   731  000013                     ___wmul@product:
   732                           	opt stack 0
   733  000013                     ___ftdiv@f3:
   734                           	opt stack 0
   735                           
   736                           ; 3 bytes @ 0x12
   737  000013                     	ds	2
   738  000015                     ?___ftmul:
   739                           	opt stack 0
   740  000015                     ___ftmul@f1:
   741                           	opt stack 0
   742                           
   743                           ; 3 bytes @ 0x14
   744  000015                     	ds	1
   745  000016                     ??_init_io_display:
   746  000016                     ___ftdiv@exp:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x15
   750  000016                     	ds	1
   751  000017                     ___ftdiv@sign:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x16
   755  000017                     	ds	1
   756  000018                     ___ftmul@f2:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0x17
   760  000018                     	ds	3
   761  00001B                     ??___ftmul:
   762                           
   763                           ; 1 bytes @ 0x1A
   764  00001B                     	ds	3
   765  00001E                     ___ftmul@exp:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x1D
   769  00001E                     	ds	1
   770  00001F                     ___ftmul@f3_as_product:
   771                           	opt stack 0
   772                           
   773                           ; 3 bytes @ 0x1E
   774  00001F                     	ds	3
   775  000022                     ___ftmul@cntr:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x21
   779  000022                     	ds	1
   780  000023                     ___ftmul@sign:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x22
   784  000023                     	ds	1
   785  000024                     ?_fround:
   786                           	opt stack 0
   787  000024                     ?_scale:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x23
   791  000024                     	ds	3
   792  000027                     _fround$1428:
   793                           	opt stack 0
   794  000027                     _scale$1429:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x26
   798  000027                     	ds	3
   799  00002A                     scale@scl:
   800                           	opt stack 0
   801  00002A                     _fround$1427:
   802                           	opt stack 0
   803                           
   804                           ; 3 bytes @ 0x29
   805  00002A                     	ds	1
   806  00002B                     ?___fttol:
   807                           	opt stack 0
   808  00002B                     ___fttol@f1:
   809                           	opt stack 0
   810                           
   811                           ; 3 bytes @ 0x2A
   812  00002B                     	ds	2
   813  00002D                     fround@prec:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x2C
   817  00002D                     	ds	1
   818  00002E                     ?___ftadd:
   819                           	opt stack 0
   820  00002E                     ___ftadd@f1:
   821                           	opt stack 0
   822                           
   823                           ; 3 bytes @ 0x2D
   824  00002E                     	ds	1
   825  00002F                     ??___fttol:
   826                           
   827                           ; 1 bytes @ 0x2E
   828  00002F                     	ds	2
   829  000031                     ___ftadd@f2:
   830                           	opt stack 0
   831                           
   832                           ; 3 bytes @ 0x30
   833  000031                     	ds	3
   834  000034                     ??___ftadd:
   835  000034                     ___fttol@sign1:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x33
   839  000034                     	ds	1
   840  000035                     ___fttol@lval:
   841                           	opt stack 0
   842                           
   843                           ; 4 bytes @ 0x34
   844  000035                     	ds	2
   845  000037                     ___ftadd@sign:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x36
   849  000037                     	ds	1
   850  000038                     ___ftadd@exp2:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x37
   854  000038                     	ds	1
   855  000039                     ___ftadd@exp1:
   856                           	opt stack 0
   857  000039                     ___fttol@exp1:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x38
   861  000039                     	ds	1
   862  00003A                     ?___ftsub:
   863                           	opt stack 0
   864  00003A                     ___ftsub@f1:
   865                           	opt stack 0
   866                           
   867                           ; 3 bytes @ 0x39
   868  00003A                     	ds	3
   869  00003D                     ___ftsub@f2:
   870                           	opt stack 0
   871                           
   872                           ; 3 bytes @ 0x3C
   873  00003D                     	ds	3
   874  000040                     ?_sprintf:
   875                           	opt stack 0
   876  000040                     sprintf@sp:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x3F
   880  000040                     	ds	2
   881  000042                     sprintf@f:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x41
   885  000042                     	ds	5
   886  000047                     ??_sprintf:
   887                           
   888                           ; 1 bytes @ 0x46
   889  000047                     	ds	6
   890  00004D                     ??_read_Uout:
   891  00004D                     ??_read_Iout:
   892  00004D                     ??_read_Uin:
   893                           
   894                           ; 1 bytes @ 0x4C
   895  00004D                     	ds	2
   896  00004F                     ??_main:
   897                           
   898                           ; 1 bytes @ 0x4E
   899  00004F                     	ds	2
   900  000051                     main@port:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x50
   904  000051                     	ds	2
   905                           tblptru	equ	0xFF8
   906                           tblptrh	equ	0xFF7
   907                           tblptrl	equ	0xFF6
   908                           tablat	equ	0xFF5
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           
   912 ;;
   913 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   914 ;;
   915 ;; *************** function _main *****************
   916 ;; Defined at:
   917 ;;		line 13 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  port            2   80[COMRAM] int 
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   932 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   933 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   934 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   935 ;;Total ram usage:        4 bytes
   936 ;; Hardware stack levels required when called:    6
   937 ;; This function calls:
   938 ;;		_Lcd_Clear
   939 ;;		_adc_config
   940 ;;		_config
   941 ;;		_init_io_display
   942 ;;		_pwm_config
   943 ;;		_read_Iout
   944 ;;		_read_Uin
   945 ;;		_read_Uout
   946 ;; This function is called by:
   947 ;;		Startup code after reset
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text0
   952  00268C                     __ptext0:
   953                           	opt stack 0
   954  00268C                     _main:
   955                           	opt stack 25
   956                           
   957                           ;main.c: 16: config();
   958                           
   959                           ;incstack = 0
   960  00268C  ECDA  F016         	call	_config	;wreg free
   961                           
   962                           ;main.c: 17: pwm_config();
   963  002690  EC91  F017         	call	_pwm_config	;wreg free
   964                           
   965                           ;main.c: 18: adc_config();
   966  002694  ECFC  F017         	call	_adc_config	;wreg free
   967                           
   968                           ;main.c: 19: init_io_display();
   969  002698  ECEA  F015         	call	_init_io_display	;wreg free
   970                           
   971                           ;main.c: 20: int port;
   972                           ;main.c: 21: Lcd_Clear();
   973  00269C  EC12  F018         	call	_Lcd_Clear	;wreg free
   974  0026A0                     
   975                           ;main.c: 30: {
   976                           ;main.c: 31: read_Uout();
   977  0026A0  ECD8  F012         	call	_read_Uout	;wreg free
   978                           
   979                           ;main.c: 32: port=1;
   980  0026A4  0E00               	movlw	0
   981  0026A6  6E52               	movwf	main@port+1,c
   982  0026A8  0E01               	movlw	1
   983  0026AA  6E51               	movwf	main@port,c
   984                           
   985                           ;main.c: 33: _delay((unsigned long)((100)*(64000000/4000.0)));
   986  0026AC  0E09               	movlw	9
   987  0026AE  6E50               	movwf	(??_main+1)& (0+255),c
   988  0026B0  0E1E               	movlw	30
   989  0026B2  6E4F               	movwf	??_main& (0+255),c
   990  0026B4  0EE4               	movlw	228
   991  0026B6                     u2927:
   992  0026B6  2EE8               	decfsz	wreg,f,c
   993  0026B8  D7FE               	bra	u2927
   994  0026BA  2E4F               	decfsz	??_main& (0+255),f,c
   995  0026BC  D7FC               	bra	u2927
   996  0026BE  2E50               	decfsz	(??_main+1)& (0+255),f,c
   997  0026C0  D7FA               	bra	u2927
   998  0026C2  D000               	nop2	
   999                           
  1000                           ;main.c: 34: ADRESH=0X00;
  1001  0026C4  0E00               	movlw	0
  1002  0026C6  6EC4               	movwf	4036,c	;volatile
  1003                           
  1004                           ;main.c: 35: _delay((unsigned long)((100)*(64000000/4000.0)));
  1005  0026C8  0E09               	movlw	9
  1006  0026CA  6E50               	movwf	(??_main+1)& (0+255),c
  1007  0026CC  0E1E               	movlw	30
  1008  0026CE  6E4F               	movwf	??_main& (0+255),c
  1009  0026D0  0EE4               	movlw	228
  1010  0026D2                     u2937:
  1011  0026D2  2EE8               	decfsz	wreg,f,c
  1012  0026D4  D7FE               	bra	u2937
  1013  0026D6  2E4F               	decfsz	??_main& (0+255),f,c
  1014  0026D8  D7FC               	bra	u2937
  1015  0026DA  2E50               	decfsz	(??_main+1)& (0+255),f,c
  1016  0026DC  D7FA               	bra	u2937
  1017  0026DE  D000               	nop2	
  1018                           
  1019                           ;main.c: 39: {
  1020                           ;main.c: 40: read_Iout();
  1021  0026E0  ECB1  F013         	call	_read_Iout	;wreg free
  1022                           
  1023                           ;main.c: 41: port=2;
  1024  0026E4  0E00               	movlw	0
  1025  0026E6  6E52               	movwf	main@port+1,c
  1026  0026E8  0E02               	movlw	2
  1027  0026EA  6E51               	movwf	main@port,c
  1028                           
  1029                           ;main.c: 42: _delay((unsigned long)((100)*(64000000/4000.0)));
  1030  0026EC  0E09               	movlw	9
  1031  0026EE  6E50               	movwf	(??_main+1)& (0+255),c
  1032  0026F0  0E1E               	movlw	30
  1033  0026F2  6E4F               	movwf	??_main& (0+255),c
  1034  0026F4  0EE4               	movlw	228
  1035  0026F6                     u2947:
  1036  0026F6  2EE8               	decfsz	wreg,f,c
  1037  0026F8  D7FE               	bra	u2947
  1038  0026FA  2E4F               	decfsz	??_main& (0+255),f,c
  1039  0026FC  D7FC               	bra	u2947
  1040  0026FE  2E50               	decfsz	(??_main+1)& (0+255),f,c
  1041  002700  D7FA               	bra	u2947
  1042  002702  D000               	nop2	
  1043                           
  1044                           ;main.c: 43: ADRESH=0X00;
  1045  002704  0E00               	movlw	0
  1046  002706  6EC4               	movwf	4036,c	;volatile
  1047                           
  1048                           ;main.c: 44: _delay((unsigned long)((100)*(64000000/4000.0)));
  1049  002708  0E09               	movlw	9
  1050  00270A  6E50               	movwf	(??_main+1)& (0+255),c
  1051  00270C  0E1E               	movlw	30
  1052  00270E  6E4F               	movwf	??_main& (0+255),c
  1053  002710  0EE4               	movlw	228
  1054  002712                     u2957:
  1055  002712  2EE8               	decfsz	wreg,f,c
  1056  002714  D7FE               	bra	u2957
  1057  002716  2E4F               	decfsz	??_main& (0+255),f,c
  1058  002718  D7FC               	bra	u2957
  1059  00271A  2E50               	decfsz	(??_main+1)& (0+255),f,c
  1060  00271C  D7FA               	bra	u2957
  1061  00271E  D000               	nop2	
  1062                           
  1063                           ;main.c: 48: {
  1064                           ;main.c: 49: read_Uin();
  1065  002720  ECF1  F011         	call	_read_Uin	;wreg free
  1066                           
  1067                           ;main.c: 50: port=0;
  1068  002724  0E00               	movlw	0
  1069  002726  6E52               	movwf	main@port+1,c
  1070  002728  0E00               	movlw	0
  1071  00272A  6E51               	movwf	main@port,c
  1072                           
  1073                           ;main.c: 51: _delay((unsigned long)((100)*(64000000/4000.0)));
  1074  00272C  0E09               	movlw	9
  1075  00272E  6E50               	movwf	(??_main+1)& (0+255),c
  1076  002730  0E1E               	movlw	30
  1077  002732  6E4F               	movwf	??_main& (0+255),c
  1078  002734  0EE4               	movlw	228
  1079  002736                     u2967:
  1080  002736  2EE8               	decfsz	wreg,f,c
  1081  002738  D7FE               	bra	u2967
  1082  00273A  2E4F               	decfsz	??_main& (0+255),f,c
  1083  00273C  D7FC               	bra	u2967
  1084  00273E  2E50               	decfsz	(??_main+1)& (0+255),f,c
  1085  002740  D7FA               	bra	u2967
  1086  002742  D000               	nop2	
  1087                           
  1088                           ;main.c: 52: ADRESH=0X00;
  1089  002744  0E00               	movlw	0
  1090  002746  6EC4               	movwf	4036,c	;volatile
  1091                           
  1092                           ;main.c: 53: _delay((unsigned long)((100)*(64000000/4000.0)));
  1093  002748  0E09               	movlw	9
  1094  00274A  6E50               	movwf	(??_main+1)& (0+255),c
  1095  00274C  0E1E               	movlw	30
  1096  00274E  6E4F               	movwf	??_main& (0+255),c
  1097  002750  0EE4               	movlw	228
  1098  002752                     u2977:
  1099  002752  2EE8               	decfsz	wreg,f,c
  1100  002754  D7FE               	bra	u2977
  1101  002756  2E4F               	decfsz	??_main& (0+255),f,c
  1102  002758  D7FC               	bra	u2977
  1103  00275A  2E50               	decfsz	(??_main+1)& (0+255),f,c
  1104  00275C  D7FA               	bra	u2977
  1105  00275E  D000               	nop2	
  1106  002760  D79F               	goto	l25
  1107  002762                     __end_of_main:
  1108                           	opt stack 0
  1109                           tblptru	equ	0xFF8
  1110                           tblptrh	equ	0xFF7
  1111                           tblptrl	equ	0xFF6
  1112                           tablat	equ	0xFF5
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           
  1116 ;; *************** function _read_Uout *****************
  1117 ;; Defined at:
  1118 ;;		line 36 in file "MPPT.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;		None
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;		None
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      void 
  1125 ;; Registers used:
  1126 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1134 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1136 ;;Total ram usage:        2 bytes
  1137 ;; Hardware stack levels used:    1
  1138 ;; Hardware stack levels required when called:    5
  1139 ;; This function calls:
  1140 ;;		_Lcd_Set_Cursor
  1141 ;;		_Lcd_Write_String
  1142 ;;		___ftdiv
  1143 ;;		___ftmul
  1144 ;;		___lbtoft
  1145 ;;		_sprintf
  1146 ;; This function is called by:
  1147 ;;		_main
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           	psect	text1
  1152  0025B0                     __ptext1:
  1153                           	opt stack 0
  1154  0025B0                     _read_Uout:
  1155                           	opt stack 25
  1156                           
  1157                           ;MPPT.c: 38: ADCON0=0b00000111;
  1158                           
  1159                           ;incstack = 0
  1160  0025B0  0E07               	movlw	7
  1161  0025B2  6EC2               	movwf	4034,c	;volatile
  1162                           
  1163                           ;MPPT.c: 39: _delay((unsigned long)((10)*(64000000/4000.0)));
  1164  0025B4  0ED0               	movlw	208
  1165  0025B6  6E4D               	movwf	??_read_Uout& (0+255),c
  1166  0025B8  0ECA               	movlw	202
  1167  0025BA                     u2987:
  1168  0025BA  2EE8               	decfsz	wreg,f,c
  1169  0025BC  D7FE               	bra	u2987
  1170  0025BE  2E4D               	decfsz	??_read_Uout& (0+255),f,c
  1171  0025C0  D7FC               	bra	u2987
  1172                           
  1173                           ;MPPT.c: 40: ADCON0bits.GO=1;
  1174  0025C2  82C2               	bsf	4034,1,c	;volatile
  1175                           
  1176                           ;MPPT.c: 41: _delay((unsigned long)((100)*(64000000/4000.0)));
  1177  0025C4  0E09               	movlw	9
  1178  0025C6  6E4E               	movwf	(??_read_Uout+1)& (0+255),c
  1179  0025C8  0E1E               	movlw	30
  1180  0025CA  6E4D               	movwf	??_read_Uout& (0+255),c
  1181  0025CC  0EE4               	movlw	228
  1182  0025CE                     u2997:
  1183  0025CE  2EE8               	decfsz	wreg,f,c
  1184  0025D0  D7FE               	bra	u2997
  1185  0025D2  2E4D               	decfsz	??_read_Uout& (0+255),f,c
  1186  0025D4  D7FC               	bra	u2997
  1187  0025D6  2E4E               	decfsz	(??_read_Uout+1)& (0+255),f,c
  1188  0025D8  D7FA               	bra	u2997
  1189  0025DA  D000               	nop2	
  1190                           
  1191                           ;MPPT.c: 42: rez_adc_U=ADRESH;
  1192  0025DC  50C4               	movf	4036,w,c	;volatile
  1193  0025DE  ECCA  F017         	call	___lbtoft
  1194  0025E2  C009  F056         	movff	?___lbtoft,_rez_adc_U
  1195  0025E6  C00A  F057         	movff	?___lbtoft+1,_rez_adc_U+1
  1196  0025EA  C00B  F058         	movff	?___lbtoft+2,_rez_adc_U+2
  1197                           
  1198                           ;MPPT.c: 43: tens=rez_adc_U*0.01953125;
  1199  0025EE  C056  F015         	movff	_rez_adc_U,___ftmul@f1
  1200  0025F2  C057  F016         	movff	_rez_adc_U+1,___ftmul@f1+1
  1201  0025F6  C058  F017         	movff	_rez_adc_U+2,___ftmul@f1+2
  1202  0025FA  0E00               	movlw	0
  1203  0025FC  6E18               	movwf	___ftmul@f2,c
  1204  0025FE  0EA0               	movlw	160
  1205  002600  6E19               	movwf	___ftmul@f2+1,c
  1206  002602  0E3C               	movlw	60
  1207  002604  6E1A               	movwf	___ftmul@f2+2,c
  1208  002606  ECFD  F010         	call	___ftmul	;wreg free
  1209  00260A  C015  F053         	movff	?___ftmul,_tens
  1210  00260E  C016  F054         	movff	?___ftmul+1,_tens+1
  1211  002612  C017  F055         	movff	?___ftmul+2,_tens+2
  1212                           
  1213                           ;MPPT.c: 44: Uout=tens/0.25;
  1214  002616  C053  F009         	movff	_tens,___ftdiv@f1
  1215  00261A  C054  F00A         	movff	_tens+1,___ftdiv@f1+1
  1216  00261E  C055  F00B         	movff	_tens+2,___ftdiv@f1+2
  1217  002622  0E00               	movlw	0
  1218  002624  6E0C               	movwf	___ftdiv@f2,c
  1219  002626  0E80               	movlw	128
  1220  002628  6E0D               	movwf	___ftdiv@f2+1,c
  1221  00262A  0E3E               	movlw	62
  1222  00262C  6E0E               	movwf	___ftdiv@f2+2,c
  1223  00262E  EC65  F012         	call	___ftdiv	;wreg free
  1224  002632  C009  F0AB         	movff	?___ftdiv,_Uout
  1225  002636  C00A  F0AC         	movff	?___ftdiv+1,_Uout+1
  1226  00263A  C00B  F0AD         	movff	?___ftdiv+2,_Uout+2
  1227                           
  1228                           ;MPPT.c: 45: Lcd_Set_Cursor(1,1);
  1229  00263E  0E01               	movlw	1
  1230  002640  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1231  002642  0E01               	movlw	1
  1232  002644  EC04  F017         	call	_Lcd_Set_Cursor
  1233                           
  1234                           ;MPPT.c: 46: Lcd_Write_String("U=");
  1235  002648  0E88               	movlw	low STR_5
  1236  00264A  6E08               	movwf	Lcd_Write_String@a,c
  1237  00264C  0E10               	movlw	high STR_5
  1238  00264E  6E09               	movwf	Lcd_Write_String@a+1,c
  1239  002650  EC77  F015         	call	_Lcd_Write_String	;wreg free
  1240                           
  1241                           ;MPPT.c: 47: sprintf(str_V, "%.2f", Uout);
  1242  002654  0ED3               	movlw	low _str_V
  1243  002656  6E40               	movwf	sprintf@sp,c
  1244  002658  0E00               	movlw	high _str_V
  1245  00265A  6E41               	movwf	sprintf@sp+1,c
  1246  00265C  0E77               	movlw	low STR_3
  1247  00265E  6E42               	movwf	sprintf@f,c
  1248  002660  0E10               	movlw	high STR_3
  1249  002662  6E43               	movwf	sprintf@f+1,c
  1250  002664  C0AB  F044         	movff	_Uout,?_sprintf+4
  1251  002668  C0AC  F045         	movff	_Uout+1,?_sprintf+5
  1252  00266C  C0AD  F046         	movff	_Uout+2,?_sprintf+6
  1253  002670  EC49  F008         	call	_sprintf	;wreg free
  1254                           
  1255                           ;MPPT.c: 48: Lcd_Set_Cursor(1,3);
  1256  002674  0E03               	movlw	3
  1257  002676  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1258  002678  0E01               	movlw	1
  1259  00267A  EC04  F017         	call	_Lcd_Set_Cursor
  1260                           
  1261                           ;MPPT.c: 49: Lcd_Write_String(str_V);
  1262  00267E  0ED3               	movlw	low _str_V
  1263  002680  6E08               	movwf	Lcd_Write_String@a,c
  1264  002682  0E00               	movlw	high _str_V
  1265  002684  6E09               	movwf	Lcd_Write_String@a+1,c
  1266  002686  EC77  F015         	call	_Lcd_Write_String	;wreg free
  1267  00268A  0012               	return		;funcret
  1268  00268C                     __end_of_read_Uout:
  1269                           	opt stack 0
  1270                           tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           postinc0	equ	0xFEE
  1275                           wreg	equ	0xFE8
  1276                           
  1277 ;; *************** function _read_Uin *****************
  1278 ;; Defined at:
  1279 ;;		line 51 in file "MPPT.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1295 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1296 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1297 ;;Total ram usage:        2 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    5
  1300 ;; This function calls:
  1301 ;;		_Lcd_Set_Cursor
  1302 ;;		_Lcd_Write_String
  1303 ;;		___ftdiv
  1304 ;;		___ftmul
  1305 ;;		___lbtoft
  1306 ;;		_sprintf
  1307 ;; This function is called by:
  1308 ;;		_main
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text2
  1313  0023E2                     __ptext2:
  1314                           	opt stack 0
  1315  0023E2                     _read_Uin:
  1316                           	opt stack 25
  1317                           
  1318                           ;MPPT.c: 53: ADCON0=0b00001111;
  1319                           
  1320                           ;incstack = 0
  1321  0023E2  0E0F               	movlw	15
  1322  0023E4  6EC2               	movwf	4034,c	;volatile
  1323                           
  1324                           ;MPPT.c: 54: _delay((unsigned long)((10)*(64000000/4000.0)));
  1325  0023E6  0ED0               	movlw	208
  1326  0023E8  6E4D               	movwf	??_read_Uin& (0+255),c
  1327  0023EA  0ECA               	movlw	202
  1328  0023EC                     u3007:
  1329  0023EC  2EE8               	decfsz	wreg,f,c
  1330  0023EE  D7FE               	bra	u3007
  1331  0023F0  2E4D               	decfsz	??_read_Uin& (0+255),f,c
  1332  0023F2  D7FC               	bra	u3007
  1333                           
  1334                           ;MPPT.c: 55: ADCON0bits.GO=1;
  1335  0023F4  82C2               	bsf	4034,1,c	;volatile
  1336                           
  1337                           ;MPPT.c: 56: _delay((unsigned long)((100)*(64000000/4000.0)));
  1338  0023F6  0E09               	movlw	9
  1339  0023F8  6E4E               	movwf	(??_read_Uin+1)& (0+255),c
  1340  0023FA  0E1E               	movlw	30
  1341  0023FC  6E4D               	movwf	??_read_Uin& (0+255),c
  1342  0023FE  0EE4               	movlw	228
  1343  002400                     u3017:
  1344  002400  2EE8               	decfsz	wreg,f,c
  1345  002402  D7FE               	bra	u3017
  1346  002404  2E4D               	decfsz	??_read_Uin& (0+255),f,c
  1347  002406  D7FC               	bra	u3017
  1348  002408  2E4E               	decfsz	(??_read_Uin+1)& (0+255),f,c
  1349  00240A  D7FA               	bra	u3017
  1350  00240C  D000               	nop2	
  1351                           
  1352                           ;MPPT.c: 57: rez_adc_U=ADRESH;
  1353  00240E  50C4               	movf	4036,w,c	;volatile
  1354  002410  ECCA  F017         	call	___lbtoft
  1355  002414  C009  F056         	movff	?___lbtoft,_rez_adc_U
  1356  002418  C00A  F057         	movff	?___lbtoft+1,_rez_adc_U+1
  1357  00241C  C00B  F058         	movff	?___lbtoft+2,_rez_adc_U+2
  1358                           
  1359                           ;MPPT.c: 58: tens=rez_adc_U*0.01953125;
  1360  002420  C056  F015         	movff	_rez_adc_U,___ftmul@f1
  1361  002424  C057  F016         	movff	_rez_adc_U+1,___ftmul@f1+1
  1362  002428  C058  F017         	movff	_rez_adc_U+2,___ftmul@f1+2
  1363  00242C  0E00               	movlw	0
  1364  00242E  6E18               	movwf	___ftmul@f2,c
  1365  002430  0EA0               	movlw	160
  1366  002432  6E19               	movwf	___ftmul@f2+1,c
  1367  002434  0E3C               	movlw	60
  1368  002436  6E1A               	movwf	___ftmul@f2+2,c
  1369  002438  ECFD  F010         	call	___ftmul	;wreg free
  1370  00243C  C015  F053         	movff	?___ftmul,_tens
  1371  002440  C016  F054         	movff	?___ftmul+1,_tens+1
  1372  002444  C017  F055         	movff	?___ftmul+2,_tens+2
  1373                           
  1374                           ;MPPT.c: 59: Uin=tens/0.2;
  1375  002448  C053  F009         	movff	_tens,___ftdiv@f1
  1376  00244C  C054  F00A         	movff	_tens+1,___ftdiv@f1+1
  1377  002450  C055  F00B         	movff	_tens+2,___ftdiv@f1+2
  1378  002454  0ECD               	movlw	205
  1379  002456  6E0C               	movwf	___ftdiv@f2,c
  1380  002458  0E4C               	movlw	76
  1381  00245A  6E0D               	movwf	___ftdiv@f2+1,c
  1382  00245C  0E3E               	movlw	62
  1383  00245E  6E0E               	movwf	___ftdiv@f2+2,c
  1384  002460  EC65  F012         	call	___ftdiv	;wreg free
  1385  002464  C009  F0A8         	movff	?___ftdiv,_Uin
  1386  002468  C00A  F0A9         	movff	?___ftdiv+1,_Uin+1
  1387  00246C  C00B  F0AA         	movff	?___ftdiv+2,_Uin+2
  1388                           
  1389                           ;MPPT.c: 60: Lcd_Set_Cursor(1,9);
  1390  002470  0E09               	movlw	9
  1391  002472  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1392  002474  0E01               	movlw	1
  1393  002476  EC04  F017         	call	_Lcd_Set_Cursor
  1394                           
  1395                           ;MPPT.c: 61: Lcd_Write_String("Ui=");
  1396  00247A  0E81               	movlw	low STR_7
  1397  00247C  6E08               	movwf	Lcd_Write_String@a,c
  1398  00247E  0E10               	movlw	high STR_7
  1399  002480  6E09               	movwf	Lcd_Write_String@a+1,c
  1400  002482  EC77  F015         	call	_Lcd_Write_String	;wreg free
  1401                           
  1402                           ;MPPT.c: 62: sprintf(str_V, "%.2f", Uin);
  1403  002486  0ED3               	movlw	low _str_V
  1404  002488  6E40               	movwf	sprintf@sp,c
  1405  00248A  0E00               	movlw	high _str_V
  1406  00248C  6E41               	movwf	sprintf@sp+1,c
  1407  00248E  0E77               	movlw	low STR_3
  1408  002490  6E42               	movwf	sprintf@f,c
  1409  002492  0E10               	movlw	high STR_3
  1410  002494  6E43               	movwf	sprintf@f+1,c
  1411  002496  C0A8  F044         	movff	_Uin,?_sprintf+4
  1412  00249A  C0A9  F045         	movff	_Uin+1,?_sprintf+5
  1413  00249E  C0AA  F046         	movff	_Uin+2,?_sprintf+6
  1414  0024A2  EC49  F008         	call	_sprintf	;wreg free
  1415                           
  1416                           ;MPPT.c: 63: Lcd_Set_Cursor(1,12);
  1417  0024A6  0E0C               	movlw	12
  1418  0024A8  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1419  0024AA  0E01               	movlw	1
  1420  0024AC  EC04  F017         	call	_Lcd_Set_Cursor
  1421                           
  1422                           ;MPPT.c: 64: Lcd_Write_String(str_V);
  1423  0024B0  0ED3               	movlw	low _str_V
  1424  0024B2  6E08               	movwf	Lcd_Write_String@a,c
  1425  0024B4  0E00               	movlw	high _str_V
  1426  0024B6  6E09               	movwf	Lcd_Write_String@a+1,c
  1427  0024B8  EC77  F015         	call	_Lcd_Write_String	;wreg free
  1428                           
  1429                           ;MPPT.c: 65: Lcd_Write_String(" V");
  1430  0024BC  0E8E               	movlw	low STR_9
  1431  0024BE  6E08               	movwf	Lcd_Write_String@a,c
  1432  0024C0  0E10               	movlw	high STR_9
  1433  0024C2  6E09               	movwf	Lcd_Write_String@a+1,c
  1434  0024C4  EC77  F015         	call	_Lcd_Write_String	;wreg free
  1435  0024C8  0012               	return		;funcret
  1436  0024CA                     __end_of_read_Uin:
  1437                           	opt stack 0
  1438                           tblptru	equ	0xFF8
  1439                           tblptrh	equ	0xFF7
  1440                           tblptrl	equ	0xFF6
  1441                           tablat	equ	0xFF5
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           
  1445 ;; *************** function ___ftdiv *****************
  1446 ;; Defined at:
  1447 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;  f1              3    8[COMRAM] float 
  1450 ;;  f2              3   11[COMRAM] float 
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;  f3              3   18[COMRAM] float 
  1453 ;;  sign            1   22[COMRAM] unsigned char 
  1454 ;;  exp             1   21[COMRAM] unsigned char 
  1455 ;;  cntr            1   17[COMRAM] unsigned char 
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  3    8[COMRAM] float 
  1458 ;; Registers used:
  1459 ;;		wreg, status,2, status,0, cstack
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1465 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1468 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;Total ram usage:       15 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; Hardware stack levels required when called:    1
  1472 ;; This function calls:
  1473 ;;		___ftpack
  1474 ;; This function is called by:
  1475 ;;		_read_Uout
  1476 ;;		_read_Uin
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text3
  1481  0024CA                     __ptext3:
  1482                           	opt stack 0
  1483  0024CA                     ___ftdiv:
  1484                           	opt stack 28
  1485                           
  1486                           ;incstack = 0
  1487  0024CA  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  1488  0024CE  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  1489  0024D0  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  1490  0024D2  340A               	rlcf	___ftdiv@f1+1,w,c
  1491  0024D4  360F               	rlcf	??___ftdiv& (0+255),f,c
  1492  0024D6  E301               	bnc	u2811
  1493  0024D8  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  1494  0024DA                     u2811:
  1495  0024DA  500F               	movf	??___ftdiv,w,c
  1496  0024DC  6E16               	movwf	___ftdiv@exp,c
  1497  0024DE  5016               	movf	___ftdiv@exp,w,c
  1498  0024E0  A4D8               	btfss	status,2,c
  1499  0024E2  D007               	goto	l737
  1500  0024E4  0E00               	movlw	0
  1501  0024E6  6E09               	movwf	?___ftdiv,c
  1502  0024E8  0E00               	movlw	0
  1503  0024EA  6E0A               	movwf	?___ftdiv+1,c
  1504  0024EC  0E00               	movlw	0
  1505  0024EE  6E0B               	movwf	?___ftdiv+2,c
  1506  0024F0  0012               	return	
  1507  0024F2                     l737:
  1508  0024F2  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  1509  0024F6  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  1510  0024F8  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  1511  0024FA  340D               	rlcf	___ftdiv@f2+1,w,c
  1512  0024FC  360F               	rlcf	??___ftdiv& (0+255),f,c
  1513  0024FE  E301               	bnc	u2831
  1514  002500  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  1515  002502                     u2831:
  1516  002502  500F               	movf	??___ftdiv,w,c
  1517  002504  6E17               	movwf	___ftdiv@sign,c
  1518  002506  5017               	movf	___ftdiv@sign,w,c
  1519  002508  A4D8               	btfss	status,2,c
  1520  00250A  D007               	goto	l739
  1521  00250C  0E00               	movlw	0
  1522  00250E  6E09               	movwf	?___ftdiv,c
  1523  002510  0E00               	movlw	0
  1524  002512  6E0A               	movwf	?___ftdiv+1,c
  1525  002514  0E00               	movlw	0
  1526  002516  6E0B               	movwf	?___ftdiv+2,c
  1527  002518  0012               	return	
  1528  00251A                     l739:
  1529  00251A  0E00               	movlw	0
  1530  00251C  6E13               	movwf	___ftdiv@f3,c
  1531  00251E  0E00               	movlw	0
  1532  002520  6E14               	movwf	___ftdiv@f3+1,c
  1533  002522  0E00               	movlw	0
  1534  002524  6E15               	movwf	___ftdiv@f3+2,c
  1535  002526  5017               	movf	___ftdiv@sign,w,c
  1536  002528  0F89               	addlw	137
  1537  00252A  5E16               	subwf	___ftdiv@exp,f,c
  1538  00252C  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  1539  002530  500E               	movf	___ftdiv@f2+2,w,c
  1540  002532  1A17               	xorwf	___ftdiv@sign,f,c
  1541  002534  0E80               	movlw	128
  1542  002536  1617               	andwf	___ftdiv@sign,f,c
  1543  002538  8E0A               	bsf	___ftdiv@f1+1,7,c
  1544  00253A  0EFF               	movlw	255
  1545  00253C  1609               	andwf	___ftdiv@f1,f,c
  1546  00253E  0EFF               	movlw	255
  1547  002540  160A               	andwf	___ftdiv@f1+1,f,c
  1548  002542  0E00               	movlw	0
  1549  002544  160B               	andwf	___ftdiv@f1+2,f,c
  1550  002546  8E0D               	bsf	___ftdiv@f2+1,7,c
  1551  002548  0EFF               	movlw	255
  1552  00254A  160C               	andwf	___ftdiv@f2,f,c
  1553  00254C  0EFF               	movlw	255
  1554  00254E  160D               	andwf	___ftdiv@f2+1,f,c
  1555  002550  0E00               	movlw	0
  1556  002552  160E               	andwf	___ftdiv@f2+2,f,c
  1557  002554  0E18               	movlw	24
  1558  002556  6E12               	movwf	___ftdiv@cntr,c
  1559  002558  90D8               	bcf	status,0,c
  1560  00255A  3613               	rlcf	___ftdiv@f3,f,c
  1561  00255C  3614               	rlcf	___ftdiv@f3+1,f,c
  1562  00255E  3615               	rlcf	___ftdiv@f3+2,f,c
  1563  002560  500C               	movf	___ftdiv@f2,w,c
  1564  002562  5C09               	subwf	___ftdiv@f1,w,c
  1565  002564  500D               	movf	___ftdiv@f2+1,w,c
  1566  002566  580A               	subwfb	___ftdiv@f1+1,w,c
  1567  002568  500E               	movf	___ftdiv@f2+2,w,c
  1568  00256A  580B               	subwfb	___ftdiv@f1+2,w,c
  1569  00256C  A0D8               	btfss	status,0,c
  1570  00256E  D007               	goto	l741
  1571  002570  500C               	movf	___ftdiv@f2,w,c
  1572  002572  5E09               	subwf	___ftdiv@f1,f,c
  1573  002574  500D               	movf	___ftdiv@f2+1,w,c
  1574  002576  5A0A               	subwfb	___ftdiv@f1+1,f,c
  1575  002578  500E               	movf	___ftdiv@f2+2,w,c
  1576  00257A  5A0B               	subwfb	___ftdiv@f1+2,f,c
  1577  00257C  8013               	bsf	___ftdiv@f3,0,c
  1578  00257E                     l741:
  1579  00257E  90D8               	bcf	status,0,c
  1580  002580  3609               	rlcf	___ftdiv@f1,f,c
  1581  002582  360A               	rlcf	___ftdiv@f1+1,f,c
  1582  002584  360B               	rlcf	___ftdiv@f1+2,f,c
  1583  002586  2E12               	decfsz	___ftdiv@cntr,f,c
  1584  002588  D7E7               	goto	l740
  1585  00258A  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  1586  00258E  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  1587  002592  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  1588  002596  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  1589  00259A  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  1590  00259E  EC17  F014         	call	___ftpack	;wreg free
  1591  0025A2  C001  F009         	movff	?___ftpack,?___ftdiv
  1592  0025A6  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  1593  0025AA  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  1594  0025AE  0012               	return	
  1595  0025B0                     __end_of___ftdiv:
  1596                           	opt stack 0
  1597                           tblptru	equ	0xFF8
  1598                           tblptrh	equ	0xFF7
  1599                           tblptrl	equ	0xFF6
  1600                           tablat	equ	0xFF5
  1601                           postinc0	equ	0xFEE
  1602                           wreg	equ	0xFE8
  1603                           status	equ	0xFD8
  1604                           
  1605 ;; *************** function _read_Iout *****************
  1606 ;; Defined at:
  1607 ;;		line 17 in file "MPPT.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;		None
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;		None
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      void 
  1614 ;; Registers used:
  1615 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1625 ;;Total ram usage:        2 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; Hardware stack levels required when called:    5
  1628 ;; This function calls:
  1629 ;;		_Lcd_Set_Cursor
  1630 ;;		_Lcd_Write_String
  1631 ;;		___ftmul
  1632 ;;		___lbtoft
  1633 ;;		_sprintf
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text4
  1640  002762                     __ptext4:
  1641                           	opt stack 0
  1642  002762                     _read_Iout:
  1643                           	opt stack 25
  1644                           
  1645                           ;MPPT.c: 19: ADCON0=0b00001011;
  1646                           
  1647                           ;incstack = 0
  1648  002762  0E0B               	movlw	11
  1649  002764  6EC2               	movwf	4034,c	;volatile
  1650                           
  1651                           ;MPPT.c: 20: _delay((unsigned long)((10)*(64000000/4000.0)));
  1652  002766  0ED0               	movlw	208
  1653  002768  6E4D               	movwf	??_read_Iout& (0+255),c
  1654  00276A  0ECA               	movlw	202
  1655  00276C                     u3027:
  1656  00276C  2EE8               	decfsz	wreg,f,c
  1657  00276E  D7FE               	bra	u3027
  1658  002770  2E4D               	decfsz	??_read_Iout& (0+255),f,c
  1659  002772  D7FC               	bra	u3027
  1660                           
  1661                           ;MPPT.c: 21: ADCON0bits.GO=1;
  1662  002774  82C2               	bsf	4034,1,c	;volatile
  1663                           
  1664                           ;MPPT.c: 22: _delay((unsigned long)((100)*(64000000/4000.0)));
  1665  002776  0E09               	movlw	9
  1666  002778  6E4E               	movwf	(??_read_Iout+1)& (0+255),c
  1667  00277A  0E1E               	movlw	30
  1668  00277C  6E4D               	movwf	??_read_Iout& (0+255),c
  1669  00277E  0EE4               	movlw	228
  1670  002780                     u3037:
  1671  002780  2EE8               	decfsz	wreg,f,c
  1672  002782  D7FE               	bra	u3037
  1673  002784  2E4D               	decfsz	??_read_Iout& (0+255),f,c
  1674  002786  D7FC               	bra	u3037
  1675  002788  2E4E               	decfsz	(??_read_Iout+1)& (0+255),f,c
  1676  00278A  D7FA               	bra	u3037
  1677  00278C  D000               	nop2	
  1678                           
  1679                           ;MPPT.c: 23: rez_adc_A=ADRESH;
  1680  00278E  50C4               	movf	4036,w,c	;volatile
  1681  002790  ECCA  F017         	call	___lbtoft
  1682  002794  C009  F0B4         	movff	?___lbtoft,_rez_adc_A
  1683  002798  C00A  F0B5         	movff	?___lbtoft+1,_rez_adc_A+1
  1684  00279C  C00B  F0B6         	movff	?___lbtoft+2,_rez_adc_A+2
  1685                           
  1686                           ;MPPT.c: 24: tens_A=rez_adc_A*0.0181372549019608;
  1687  0027A0  C0B4  F015         	movff	_rez_adc_A,___ftmul@f1
  1688  0027A4  C0B5  F016         	movff	_rez_adc_A+1,___ftmul@f1+1
  1689  0027A8  C0B6  F017         	movff	_rez_adc_A+2,___ftmul@f1+2
  1690  0027AC  0E95               	movlw	149
  1691  0027AE  6E18               	movwf	___ftmul@f2,c
  1692  0027B0  0E94               	movlw	148
  1693  0027B2  6E19               	movwf	___ftmul@f2+1,c
  1694  0027B4  0E3C               	movlw	60
  1695  0027B6  6E1A               	movwf	___ftmul@f2+2,c
  1696  0027B8  ECFD  F010         	call	___ftmul	;wreg free
  1697  0027BC  C015  F0B1         	movff	?___ftmul,_tens_A
  1698  0027C0  C016  F0B2         	movff	?___ftmul+1,_tens_A+1
  1699  0027C4  C017  F0B3         	movff	?___ftmul+2,_tens_A+2
  1700                           
  1701                           ;MPPT.c: 25: Iout=tens_A;
  1702  0027C8  C0B1  F0AE         	movff	_tens_A,_Iout
  1703  0027CC  C0B2  F0AF         	movff	_tens_A+1,_Iout+1
  1704  0027D0  C0B3  F0B0         	movff	_tens_A+2,_Iout+2
  1705                           
  1706                           ;MPPT.c: 26: Lcd_Set_Cursor(2,1);
  1707  0027D4  0E01               	movlw	1
  1708  0027D6  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1709  0027D8  0E02               	movlw	2
  1710  0027DA  EC04  F017         	call	_Lcd_Set_Cursor
  1711                           
  1712                           ;MPPT.c: 27: Lcd_Write_String("I=");
  1713  0027DE  0E85               	movlw	low STR_2
  1714  0027E0  6E08               	movwf	Lcd_Write_String@a,c
  1715  0027E2  0E10               	movlw	high STR_2
  1716  0027E4  6E09               	movwf	Lcd_Write_String@a+1,c
  1717  0027E6  EC77  F015         	call	_Lcd_Write_String	;wreg free
  1718                           
  1719                           ;MPPT.c: 28: sprintf(str_A, "%.2f", Iout);
  1720  0027EA  0ECB               	movlw	low _str_A
  1721  0027EC  6E40               	movwf	sprintf@sp,c
  1722  0027EE  0E00               	movlw	high _str_A
  1723  0027F0  6E41               	movwf	sprintf@sp+1,c
  1724  0027F2  0E77               	movlw	low STR_3
  1725  0027F4  6E42               	movwf	sprintf@f,c
  1726  0027F6  0E10               	movlw	high STR_3
  1727  0027F8  6E43               	movwf	sprintf@f+1,c
  1728  0027FA  C0AE  F044         	movff	_Iout,?_sprintf+4
  1729  0027FE  C0AF  F045         	movff	_Iout+1,?_sprintf+5
  1730  002802  C0B0  F046         	movff	_Iout+2,?_sprintf+6
  1731  002806  EC49  F008         	call	_sprintf	;wreg free
  1732                           
  1733                           ;MPPT.c: 29: Lcd_Set_Cursor(2,3);
  1734  00280A  0E03               	movlw	3
  1735  00280C  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1736  00280E  0E02               	movlw	2
  1737  002810  EC04  F017         	call	_Lcd_Set_Cursor
  1738                           
  1739                           ;MPPT.c: 30: Lcd_Write_String(str_A);
  1740  002814  0ECB               	movlw	low _str_A
  1741  002816  6E08               	movwf	Lcd_Write_String@a,c
  1742  002818  0E00               	movlw	high _str_A
  1743  00281A  6E09               	movwf	Lcd_Write_String@a+1,c
  1744  00281C  EC77  F015         	call	_Lcd_Write_String	;wreg free
  1745                           
  1746                           ;MPPT.c: 31: Lcd_Write_String(" A");
  1747  002820  0E8B               	movlw	low STR_4
  1748  002822  6E08               	movwf	Lcd_Write_String@a,c
  1749  002824  0E10               	movlw	high STR_4
  1750  002826  6E09               	movwf	Lcd_Write_String@a+1,c
  1751  002828  EC77  F015         	call	_Lcd_Write_String	;wreg free
  1752  00282C  0012               	return		;funcret
  1753  00282E                     __end_of_read_Iout:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           postinc0	equ	0xFEE
  1760                           wreg	equ	0xFE8
  1761                           status	equ	0xFD8
  1762                           
  1763 ;; *************** function _sprintf *****************
  1764 ;; Defined at:
  1765 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1768 ;;		 -> str_V(8), str_A(8), 
  1769 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1770 ;;		 -> STR_8(5), STR_6(5), STR_3(5), 
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;  tmpval          4   13[BANK0 ] struct .
  1773 ;;  val             4    7[BANK0 ] unsigned long 
  1774 ;;  fval            3   19[BANK0 ] unsigned long 
  1775 ;;  cp              3    0        PTR const unsigned char 
  1776 ;;  prec            2   17[BANK0 ] int 
  1777 ;;  exp             2   11[BANK0 ] int 
  1778 ;;  flag            2    5[BANK0 ] unsigned short 
  1779 ;;  ap              2    3[BANK0 ] PTR void [1]
  1780 ;;		 -> ?_sprintf(2), 
  1781 ;;  len             2    0        unsigned int 
  1782 ;;  width           2    0        int 
  1783 ;;  c               1   22[BANK0 ] char 
  1784 ;;  d               1    0        unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  2   63[COMRAM] int 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1794 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Totals:        13      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;Total ram usage:       36 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    3
  1801 ;; This function calls:
  1802 ;;		___awdiv
  1803 ;;		___ftadd
  1804 ;;		___ftge
  1805 ;;		___ftmul
  1806 ;;		___ftneg
  1807 ;;		___ftsub
  1808 ;;		___fttol
  1809 ;;		___lldiv
  1810 ;;		___llmod
  1811 ;;		___lltoft
  1812 ;;		___wmul
  1813 ;;		__div_to_l_
  1814 ;;		__tdiv_to_l_
  1815 ;;		_fround
  1816 ;;		_isdigit
  1817 ;;		_scale
  1818 ;; This function is called by:
  1819 ;;		_read_Iout
  1820 ;;		_read_Uout
  1821 ;;		_read_Uin
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text5
  1826  001092                     __ptext5:
  1827                           	opt stack 0
  1828  001092                     _sprintf:
  1829                           	opt stack 26
  1830                           
  1831                           ;doprnt.c: 494: va_list ap;
  1832                           ;doprnt.c: 499: signed char c;
  1833                           ;doprnt.c: 501: int width;
  1834                           ;doprnt.c: 504: int prec;
  1835                           ;doprnt.c: 508: unsigned short flag;
  1836                           ;doprnt.c: 515: char d;
  1837                           ;doprnt.c: 516: double fval;
  1838                           ;doprnt.c: 517: int exp;
  1839                           ;doprnt.c: 523: union {
  1840                           ;doprnt.c: 524: unsigned long vd;
  1841                           ;doprnt.c: 525: double integ;
  1842                           ;doprnt.c: 526: } tmpval;
  1843                           ;doprnt.c: 528: unsigned long val;
  1844                           ;doprnt.c: 529: unsigned len;
  1845                           ;doprnt.c: 530: const char * cp;
  1846                           ;doprnt.c: 533: *ap = __va_start();
  1847                           
  1848                           ;incstack = 0
  1849  001092  0E44               	movlw	low (?_sprintf+4)
  1850  001094  0100               	movlb	0	; () banked
  1851  001096  6FDE               	movwf	sprintf@ap& (0+255),b
  1852  001098  0E00               	movlw	high (?_sprintf+4)
  1853  00109A  6FDF               	movwf	(sprintf@ap+1)& (0+255),b
  1854                           
  1855                           ;doprnt.c: 536: while(c = *f++) {
  1856  00109C  D36B               	goto	l439
  1857  00109E                     
  1858                           ; BSR set to: 0
  1859                           ;doprnt.c: 538: if(c != '%')
  1860                           
  1861                           ; BSR set to: 0
  1862  00109E  0E25               	movlw	37
  1863  0010A0  19F1               	xorwf	sprintf@c& (0+255),w,b
  1864  0010A2  B4D8               	btfsc	status,2,c
  1865  0010A4  D007               	goto	l385
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;doprnt.c: 540: {
  1869                           ;doprnt.c: 541: ((*sp++ = (c)));
  1870  0010A6  C040  FFD9         	movff	sprintf@sp,fsr2l
  1871  0010AA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1872  0010AE  C0F1  FFDF         	movff	sprintf@c,indf2
  1873  0010B2  D35E               	goto	l3178
  1874  0010B4                     l385:
  1875                           
  1876                           ; BSR set to: 0
  1877                           ;doprnt.c: 543: }
  1878                           ;doprnt.c: 548: flag = 0;
  1879                           
  1880                           ; BSR set to: 0
  1881  0010B4  0E00               	movlw	0
  1882  0010B6  6FE1               	movwf	(sprintf@flag+1)& (0+255),b
  1883  0010B8  0E00               	movlw	0
  1884  0010BA  6FE0               	movwf	sprintf@flag& (0+255),b
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;doprnt.c: 611: if(*f == '.') {
  1888  0010BC  C042  FFF6         	movff	sprintf@f,tblptrl
  1889  0010C0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1890  0010C4                     	if	0	;tblptru may be non-zero
  1891  0010C4                     	endif
  1892  0010C4                     	if	0	;tblptru may be non-zero
  1893  0010C4                     	endif
  1894  0010C4  0008               	tblrd		*
  1895  0010C6  50F5               	movf	tablat,w,c
  1896  0010C8  0A2E               	xorlw	46
  1897  0010CA  A4D8               	btfss	status,2,c
  1898  0010CC  D02F               	goto	l386
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;doprnt.c: 612: flag |= 0x4000;
  1902  0010CE  8DE1               	bsf	(sprintf@flag+1)& (0+255),6,b
  1903                           
  1904                           ;doprnt.c: 613: f++;
  1905  0010D0  4A42               	infsnz	sprintf@f,f,c
  1906  0010D2  2A43               	incf	sprintf@f+1,f,c
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;doprnt.c: 620: {
  1910                           ;doprnt.c: 621: prec = 0;
  1911  0010D4  0E00               	movlw	0
  1912  0010D6  6FED               	movwf	(sprintf@prec+1)& (0+255),b
  1913  0010D8  0E00               	movlw	0
  1914  0010DA  6FEC               	movwf	sprintf@prec& (0+255),b
  1915                           
  1916                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1917  0010DC  D01C               	goto	l387
  1918  0010DE                     
  1919                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1920                           
  1921                           ; BSR set to: 0
  1922  0010DE  C0EC  F00F         	movff	sprintf@prec,___wmul@multiplier
  1923  0010E2  C0ED  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1924  0010E6  0E00               	movlw	0
  1925  0010E8  6E12               	movwf	___wmul@multiplicand+1,c
  1926  0010EA  0E0A               	movlw	10
  1927  0010EC  6E11               	movwf	___wmul@multiplicand,c
  1928  0010EE  ECA5  F017         	call	___wmul	;wreg free
  1929  0010F2  C042  FFF6         	movff	sprintf@f,tblptrl
  1930  0010F6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1931  0010FA                     	if	0	;tblptru may be non-zero
  1932  0010FA                     	endif
  1933  0010FA                     	if	0	;tblptru may be non-zero
  1934  0010FA                     	endif
  1935  0010FA  0008               	tblrd		*
  1936  0010FC  50F5               	movf	tablat,w,c
  1937  0010FE  260F               	addwf	?___wmul,f,c
  1938  001100  0E00               	movlw	0
  1939  001102  2210               	addwfc	?___wmul+1,f,c
  1940  001104  0ED0               	movlw	208
  1941  001106  240F               	addwf	?___wmul,w,c
  1942  001108  0100               	movlb	0	; () banked
  1943  00110A  6FEC               	movwf	sprintf@prec& (0+255),b
  1944  00110C  0EFF               	movlw	255
  1945  00110E  2010               	addwfc	?___wmul+1,w,c
  1946  001110  6FED               	movwf	(sprintf@prec+1)& (0+255),b
  1947                           
  1948                           ; BSR set to: 0
  1949  001112  4A42               	infsnz	sprintf@f,f,c
  1950  001114  2A43               	incf	sprintf@f+1,f,c
  1951  001116                     l387:
  1952                           
  1953                           ; BSR set to: 0
  1954                           
  1955                           ; BSR set to: 0
  1956  001116  C042  FFF6         	movff	sprintf@f,tblptrl
  1957  00111A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1958  00111E                     	if	0	;tblptru may be non-zero
  1959  00111E                     	endif
  1960  00111E                     	if	0	;tblptru may be non-zero
  1961  00111E                     	endif
  1962  00111E  0008               	tblrd		*
  1963  001120  50F5               	movf	tablat,w,c
  1964  001122  ECED  F017         	call	_isdigit
  1965  001126  A0D8               	btfss	status,0,c
  1966  001128  D00A               	goto	l391
  1967  00112A  D7D9               	goto	l388
  1968  00112C                     l386:
  1969                           
  1970                           ;doprnt.c: 626: prec = 0;
  1971  00112C  0E00               	movlw	0
  1972  00112E  0100               	movlb	0	; () banked
  1973  001130  6FED               	movwf	(sprintf@prec+1)& (0+255),b
  1974  001132  0E00               	movlw	0
  1975  001134  6FEC               	movwf	sprintf@prec& (0+255),b
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;doprnt.c: 628: flag |= 0x1000;
  1979  001136  89E1               	bsf	(sprintf@flag+1)& (0+255),4,b
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;doprnt.c: 630: }
  1983                           ;doprnt.c: 635: switch(c = *f++) {
  1984  001138  D002               	goto	l391
  1985  00113A                     
  1986                           ; BSR set to: 0
  1987                           ;doprnt.c: 663: flag |= 0x400;
  1988                           
  1989                           ; BSR set to: 0
  1990  00113A  85E1               	bsf	(sprintf@flag+1)& (0+255),2,b
  1991                           
  1992                           ;doprnt.c: 664: break;
  1993  00113C  D012               	goto	l395
  1994  00113E                     l391:
  1995                           
  1996                           ; BSR set to: 0
  1997  00113E  C042  FFF6         	movff	sprintf@f,tblptrl
  1998  001142  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1999  001146  4A42               	infsnz	sprintf@f,f,c
  2000  001148  2A43               	incf	sprintf@f+1,f,c
  2001  00114A                     	if	0	;tblptru may be non-zero
  2002  00114A                     	endif
  2003  00114A                     	if	0	;tblptru may be non-zero
  2004  00114A                     	endif
  2005  00114A  0008               	tblrd		*
  2006  00114C  CFF5 F0F1          	movff	tablat,sprintf@c
  2007  001150  0100               	movlb	0	; () banked
  2008  001152  51F1               	movf	sprintf@c& (0+255),w,b
  2009                           
  2010                           ; Switch size 1, requested type "space"
  2011                           ; Number of cases is 2, Range of values is 0 to 102
  2012                           ; switch strategies available:
  2013                           ; Name         Instructions Cycles
  2014                           ; simple_byte            7     4 (average)
  2015                           ;	Chosen strategy is simple_byte
  2016  001154  0A00               	xorlw	0	; case 0
  2017  001156  B4D8               	btfsc	status,2,c
  2018  001158  D319               	goto	u2800
  2019  00115A  0A66               	xorlw	102	; case 102
  2020  00115C  B4D8               	btfsc	status,2,c
  2021  00115E  D7ED               	goto	l394
  2022  001160  D309               	goto	l439
  2023  001162                     l395:
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;doprnt.c: 825: if(flag & (0x700)) {
  2027                           
  2028                           ; BSR set to: 0
  2029  001162  0E07               	movlw	7
  2030  001164  15E1               	andwf	(sprintf@flag+1)& (0+255),w,b
  2031  001166  B4D8               	btfsc	status,2,c
  2032  001168  D2C9               	goto	l397
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;doprnt.c: 827: if(flag & 0x1000)
  2036  00116A  A9E1               	btfss	(sprintf@flag+1)& (0+255),4,b
  2037  00116C  D004               	goto	l398
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;doprnt.c: 829: prec = 6;
  2041  00116E  0E00               	movlw	0
  2042  001170  6FED               	movwf	(sprintf@prec+1)& (0+255),b
  2043  001172  0E06               	movlw	6
  2044  001174  6FEC               	movwf	sprintf@prec& (0+255),b
  2045  001176                     l398:
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2049                           
  2050                           ; BSR set to: 0
  2051  001176  C0DE  FFD9         	movff	sprintf@ap,fsr2l
  2052  00117A  C0DF  FFDA         	movff	sprintf@ap+1,fsr2h
  2053  00117E  CFDE F0EE          	movff	postinc2,sprintf@fval
  2054  001182  CFDE F0EF          	movff	postinc2,sprintf@fval+1
  2055  001186  CFDD F0F0          	movff	postdec2,sprintf@fval+2
  2056                           
  2057                           ; BSR set to: 0
  2058  00118A  0E03               	movlw	3
  2059  00118C  27DE               	addwf	sprintf@ap& (0+255),f,b
  2060  00118E  0E00               	movlw	0
  2061  001190  23DF               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;doprnt.c: 831: if(fval < 0.0) {
  2065  001192  AFF0               	btfss	(sprintf@fval+2)& (0+255),7,b
  2066  001194  D011               	goto	l399
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;doprnt.c: 832: fval = -fval;
  2070  001196  C0EE  F001         	movff	sprintf@fval,___ftneg@f1
  2071  00119A  C0EF  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  2072  00119E  C0F0  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  2073  0011A2  ECB8  F017         	call	___ftneg	;wreg free
  2074  0011A6  C001  F0EE         	movff	?___ftneg,sprintf@fval
  2075  0011AA  C002  F0EF         	movff	?___ftneg+1,sprintf@fval+1
  2076  0011AE  C003  F0F0         	movff	?___ftneg+2,sprintf@fval+2
  2077                           
  2078                           ;doprnt.c: 833: flag |= 0x03;
  2079  0011B2  0E03               	movlw	3
  2080  0011B4  0100               	movlb	0	; () banked
  2081  0011B6  13E0               	iorwf	sprintf@flag& (0+255),f,b
  2082  0011B8                     l399:
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;doprnt.c: 834: }
  2086                           ;doprnt.c: 835: exp = 0;
  2087                           
  2088                           ; BSR set to: 0
  2089  0011B8  0E00               	movlw	0
  2090  0011BA  6FE7               	movwf	(sprintf@exp+1)& (0+255),b
  2091  0011BC  0E00               	movlw	0
  2092  0011BE  6FE6               	movwf	sprintf@exp& (0+255),b
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;doprnt.c: 836: if( fval!=0) {
  2096  0011C0  51EE               	movf	sprintf@fval& (0+255),w,b
  2097  0011C2  11EF               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2098  0011C4  11F0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2099  0011C6  B4D8               	btfsc	status,2,c
  2100  0011C8  D086               	goto	l404
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2104  0011CA  0E82               	movlw	130
  2105  0011CC  6E47               	movwf	??_sprintf& (0+255),c
  2106  0011CE  0EFF               	movlw	255
  2107  0011D0  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2108  0011D2  C0EE  F049         	movff	sprintf@fval,??_sprintf+2
  2109  0011D6  C0EF  F04A         	movff	sprintf@fval+1,??_sprintf+3
  2110  0011DA  C0F0  F04B         	movff	sprintf@fval+2,??_sprintf+4
  2111  0011DE  C0F1  F04C         	movff	sprintf@fval+3,??_sprintf+5
  2112  0011E2  0E10               	movlw	16
  2113  0011E4  D005               	goto	u2550
  2114  0011E6                     u2555:
  2115  0011E6  90D8               	bcf	status,0,c
  2116  0011E8  324C               	rrcf	??_sprintf+5,f,c
  2117  0011EA  324B               	rrcf	??_sprintf+4,f,c
  2118  0011EC  324A               	rrcf	??_sprintf+3,f,c
  2119  0011EE  3249               	rrcf	??_sprintf+2,f,c
  2120  0011F0                     u2550:
  2121  0011F0  2EE8               	decfsz	wreg,f,c
  2122  0011F2  D7F9               	goto	u2555
  2123  0011F4  5049               	movf	??_sprintf+2,w,c
  2124  0011F6  2447               	addwf	??_sprintf,w,c
  2125  0011F8  6FE6               	movwf	sprintf@exp& (0+255),b
  2126  0011FA  0E00               	movlw	0
  2127  0011FC  2048               	addwfc	??_sprintf+1,w,c
  2128  0011FE  6FE7               	movwf	(sprintf@exp+1)& (0+255),b
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;doprnt.c: 838: exp--;
  2132  001200  07E6               	decf	sprintf@exp& (0+255),f,b
  2133  001202  A0D8               	btfss	status,0,c
  2134  001204  07E7               	decf	(sprintf@exp+1)& (0+255),f,b
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;doprnt.c: 839: exp *= 3;
  2138  001206  C0E6  F00F         	movff	sprintf@exp,___wmul@multiplier
  2139  00120A  C0E7  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  2140  00120E  0E00               	movlw	0
  2141  001210  6E12               	movwf	___wmul@multiplicand+1,c
  2142  001212  0E03               	movlw	3
  2143  001214  6E11               	movwf	___wmul@multiplicand,c
  2144  001216  ECA5  F017         	call	___wmul	;wreg free
  2145  00121A  C00F  F0E6         	movff	?___wmul,sprintf@exp
  2146  00121E  C010  F0E7         	movff	?___wmul+1,sprintf@exp+1
  2147                           
  2148                           ;doprnt.c: 840: exp /= 10;
  2149  001222  C0E6  F007         	movff	sprintf@exp,___awdiv@dividend
  2150  001226  C0E7  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2151  00122A  0E00               	movlw	0
  2152  00122C  6E0A               	movwf	___awdiv@divisor+1,c
  2153  00122E  0E0A               	movlw	10
  2154  001230  6E09               	movwf	___awdiv@divisor,c
  2155  001232  ECB6  F014         	call	___awdiv	;wreg free
  2156  001236  C007  F0E6         	movff	?___awdiv,sprintf@exp
  2157  00123A  C008  F0E7         	movff	?___awdiv+1,sprintf@exp+1
  2158                           
  2159                           ;doprnt.c: 841: if(exp < 0)
  2160  00123E  0100               	movlb	0	; () banked
  2161  001240  AFE7               	btfss	(sprintf@exp+1)& (0+255),7,b
  2162  001242  D003               	goto	l401
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;doprnt.c: 842: exp--;
  2166  001244  07E6               	decf	sprintf@exp& (0+255),f,b
  2167  001246  A0D8               	btfss	status,0,c
  2168  001248  07E7               	decf	(sprintf@exp+1)& (0+255),f,b
  2169  00124A                     l401:
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2173                           
  2174                           ; BSR set to: 0
  2175  00124A  51E6               	movf	sprintf@exp& (0+255),w,b
  2176  00124C  0800               	sublw	0
  2177  00124E  ECCD  F00B         	call	_scale
  2178  001252  C024  F0E8         	movff	?_scale,sprintf@tmpval
  2179  001256  C025  F0E9         	movff	?_scale+1,sprintf@tmpval+1
  2180  00125A  C026  F0EA         	movff	?_scale+2,sprintf@tmpval+2
  2181                           
  2182                           ;doprnt.c: 847: tmpval.integ *= fval;
  2183  00125E  C0E8  F015         	movff	sprintf@tmpval,___ftmul@f1
  2184  001262  C0E9  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2185  001266  C0EA  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2186  00126A  C0EE  F018         	movff	sprintf@fval,___ftmul@f2
  2187  00126E  C0EF  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2188  001272  C0F0  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2189  001276  ECFD  F010         	call	___ftmul	;wreg free
  2190  00127A  C015  F0E8         	movff	?___ftmul,sprintf@tmpval
  2191  00127E  C016  F0E9         	movff	?___ftmul+1,sprintf@tmpval+1
  2192  001282  C017  F0EA         	movff	?___ftmul+2,sprintf@tmpval+2
  2193                           
  2194                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2195  001286  C0E8  F001         	movff	sprintf@tmpval,___ftge@ff1
  2196  00128A  C0E9  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2197  00128E  C0EA  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2198  001292  0E00               	movlw	0
  2199  001294  6E04               	movwf	___ftge@ff2,c
  2200  001296  0E80               	movlw	128
  2201  001298  6E05               	movwf	___ftge@ff2+1,c
  2202  00129A  0E3F               	movlw	63
  2203  00129C  6E06               	movwf	___ftge@ff2+2,c
  2204  00129E  EC6E  F014         	call	___ftge	;wreg free
  2205  0012A2  B0D8               	btfsc	status,0,c
  2206  0012A4  D005               	goto	l402
  2207                           
  2208                           ;doprnt.c: 849: exp--;
  2209  0012A6  0100               	movlb	0	; () banked
  2210  0012A8  07E6               	decf	sprintf@exp& (0+255),f,b
  2211  0012AA  A0D8               	btfss	status,0,c
  2212  0012AC  07E7               	decf	(sprintf@exp+1)& (0+255),f,b
  2213  0012AE  D013               	goto	l404
  2214  0012B0                     l402:
  2215                           
  2216                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2217                           
  2218                           ; BSR set to: 0
  2219  0012B0  C0E8  F001         	movff	sprintf@tmpval,___ftge@ff1
  2220  0012B4  C0E9  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2221  0012B8  C0EA  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2222  0012BC  0E00               	movlw	0
  2223  0012BE  6E04               	movwf	___ftge@ff2,c
  2224  0012C0  0E20               	movlw	32
  2225  0012C2  6E05               	movwf	___ftge@ff2+1,c
  2226  0012C4  0E41               	movlw	65
  2227  0012C6  6E06               	movwf	___ftge@ff2+2,c
  2228  0012C8  EC6E  F014         	call	___ftge	;wreg free
  2229  0012CC  A0D8               	btfss	status,0,c
  2230  0012CE  D003               	goto	l404
  2231                           
  2232                           ;doprnt.c: 851: exp++;
  2233  0012D0  0100               	movlb	0	; () banked
  2234  0012D2  4BE6               	infsnz	sprintf@exp& (0+255),f,b
  2235  0012D4  2BE7               	incf	(sprintf@exp+1)& (0+255),f,b
  2236  0012D6                     l404:
  2237                           
  2238                           ;doprnt.c: 852: }
  2239                           ;doprnt.c: 1112: if(prec <= 12)
  2240                           
  2241                           ; BSR set to: 0
  2242                           
  2243                           ; BSR set to: 0
  2244                           
  2245                           ; BSR set to: 0
  2246  0012D6  0100               	movlb	0	; () banked
  2247  0012D8  BFED               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2248  0012DA  D006               	goto	u2590
  2249  0012DC  51ED               	movf	(sprintf@prec+1)& (0+255),w,b
  2250  0012DE  E11B               	bnz	l3060
  2251  0012E0  0E0D               	movlw	13
  2252  0012E2  5DEC               	subwf	sprintf@prec& (0+255),w,b
  2253  0012E4  B0D8               	btfsc	status,0,c
  2254  0012E6  D017               	goto	l405
  2255  0012E8                     u2590:
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;doprnt.c: 1113: fval += fround(prec);
  2259  0012E8  C0EE  F02E         	movff	sprintf@fval,___ftadd@f1
  2260  0012EC  C0EF  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  2261  0012F0  C0F0  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  2262  0012F4  51EC               	movf	sprintf@prec& (0+255),w,b
  2263  0012F6  ECD1  F00D         	call	_fround
  2264  0012FA  C024  F031         	movff	?_fround,___ftadd@f2
  2265  0012FE  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2266  001302  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2267  001306  ECFA  F00E         	call	___ftadd	;wreg free
  2268  00130A  C02E  F0EE         	movff	?___ftadd,sprintf@fval
  2269  00130E  C02F  F0EF         	movff	?___ftadd+1,sprintf@fval+1
  2270  001312  C030  F0F0         	movff	?___ftadd+2,sprintf@fval+2
  2271  001316                     l405:
  2272  001316                     l3060:
  2273                           
  2274                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2275  001316  0100               	movlb	0	; () banked
  2276  001318  BFE7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2277  00131A  D006               	goto	u2600
  2278  00131C  51E7               	movf	(sprintf@exp+1)& (0+255),w,b
  2279  00131E  E120               	bnz	l3068
  2280  001320  0E0A               	movlw	10
  2281  001322  5DE6               	subwf	sprintf@exp& (0+255),w,b
  2282  001324  B0D8               	btfsc	status,0,c
  2283  001326  D01C               	goto	u2630
  2284  001328                     u2600:
  2285                           
  2286                           ; BSR set to: 0
  2287  001328  51EE               	movf	sprintf@fval& (0+255),w,b
  2288  00132A  11EF               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2289  00132C  11F0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2290  00132E  B4D8               	btfsc	status,2,c
  2291  001330  D056               	goto	l406
  2292                           
  2293                           ; BSR set to: 0
  2294  001332  C0EE  F02B         	movff	sprintf@fval,___fttol@f1
  2295  001336  C0EF  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2296  00133A  C0F0  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2297  00133E  EC77  F011         	call	___fttol	;wreg free
  2298  001342  502B               	movf	?___fttol,w,c
  2299  001344  102C               	iorwf	?___fttol+1,w,c
  2300  001346  102D               	iorwf	?___fttol+2,w,c
  2301  001348  102E               	iorwf	?___fttol+3,w,c
  2302  00134A  A4D8               	btfss	status,2,c
  2303  00134C  D048               	goto	l406
  2304  00134E  0100               	movlb	0	; () banked
  2305  001350  BFE7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2306  001352  D045               	goto	l406
  2307  001354  51E7               	movf	(sprintf@exp+1)& (0+255),w,b
  2308  001356  E104               	bnz	l3068
  2309  001358  0E02               	movlw	2
  2310  00135A  5DE6               	subwf	sprintf@exp& (0+255),w,b
  2311  00135C  A0D8               	btfss	status,0,c
  2312  00135E  D03F               	goto	l406
  2313  001360                     u2630:
  2314  001360                     l3068:
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2318  001360  C0E8  F001         	movff	sprintf@tmpval,___ftge@ff1
  2319  001364  C0E9  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2320  001368  C0EA  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2321  00136C  0E70               	movlw	112
  2322  00136E  6E04               	movwf	___ftge@ff2,c
  2323  001370  0E89               	movlw	137
  2324  001372  6E05               	movwf	___ftge@ff2+1,c
  2325  001374  0E40               	movlw	64
  2326  001376  6E06               	movwf	___ftge@ff2+2,c
  2327  001378  EC6E  F014         	call	___ftge	;wreg free
  2328  00137C  B0D8               	btfsc	status,0,c
  2329  00137E  D003               	goto	l409
  2330                           
  2331                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2332  001380  0100               	movlb	0	; () banked
  2333  001382  0EF7               	movlw	247
  2334  001384  D002               	goto	L1
  2335  001386                     l409:
  2336                           
  2337                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2338                           
  2339                           ; BSR set to: 0
  2340  001386  0100               	movlb	0	; () banked
  2341  001388  0EF8               	movlw	248
  2342  00138A                     L1:
  2343  00138A  27E6               	addwf	sprintf@exp& (0+255),f,b
  2344  00138C  0EFF               	movlw	255
  2345  00138E  23E7               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;doprnt.c: 1124: }
  2349                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2350                           
  2351                           ; BSR set to: 0
  2352  001390  51E6               	movf	sprintf@exp& (0+255),w,b
  2353  001392  ECCD  F00B         	call	_scale
  2354  001396  C024  F0E8         	movff	?_scale,sprintf@tmpval
  2355  00139A  C025  F0E9         	movff	?_scale+1,sprintf@tmpval+1
  2356  00139E  C026  F0EA         	movff	?_scale+2,sprintf@tmpval+2
  2357                           
  2358                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2359  0013A2  C0EE  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2360  0013A6  C0EF  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2361  0013AA  C0F0  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2362  0013AE  C0E8  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2363  0013B2  C0E9  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2364  0013B6  C0EA  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2365  0013BA  ECD0  F00F         	call	__tdiv_to_l_	;wreg free
  2366  0013BE  C001  F0E2         	movff	?__tdiv_to_l_,sprintf@val
  2367  0013C2  C002  F0E3         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2368  0013C6  C003  F0E4         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2369  0013CA  C004  F0E5         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2370                           
  2371                           ;doprnt.c: 1129: fval = 0.0;
  2372  0013CE  0E00               	movlw	0
  2373  0013D0  0100               	movlb	0	; () banked
  2374  0013D2  6FEE               	movwf	sprintf@fval& (0+255),b
  2375  0013D4  0E00               	movlw	0
  2376  0013D6  6FEF               	movwf	(sprintf@fval+1)& (0+255),b
  2377  0013D8  0E00               	movlw	0
  2378  0013DA  6FF0               	movwf	(sprintf@fval+2)& (0+255),b
  2379                           
  2380                           ;doprnt.c: 1130: } else {
  2381  0013DC  D033               	goto	l415
  2382  0013DE                     l406:
  2383                           
  2384                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2385                           
  2386                           ; BSR set to: 0
  2387  0013DE  C0EE  F02B         	movff	sprintf@fval,___fttol@f1
  2388  0013E2  C0EF  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2389  0013E6  C0F0  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2390  0013EA  EC77  F011         	call	___fttol	;wreg free
  2391  0013EE  C02B  F0E2         	movff	?___fttol,sprintf@val
  2392  0013F2  C02C  F0E3         	movff	?___fttol+1,sprintf@val+1
  2393  0013F6  C02D  F0E4         	movff	?___fttol+2,sprintf@val+2
  2394  0013FA  C02E  F0E5         	movff	?___fttol+3,sprintf@val+3
  2395                           
  2396                           ;doprnt.c: 1132: fval -= (double)val;
  2397  0013FE  C0EE  F03A         	movff	sprintf@fval,___ftsub@f1
  2398  001402  C0EF  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2399  001406  C0F0  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2400  00140A  C0E2  F009         	movff	sprintf@val,___lltoft@c
  2401  00140E  C0E3  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2402  001412  C0E4  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2403  001416  C0E5  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2404  00141A  EC53  F016         	call	___lltoft	;wreg free
  2405  00141E  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2406  001422  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2407  001426  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2408  00142A  EC54  F017         	call	___ftsub	;wreg free
  2409  00142E  C03A  F0EE         	movff	?___ftsub,sprintf@fval
  2410  001432  C03B  F0EF         	movff	?___ftsub+1,sprintf@fval+1
  2411  001436  C03C  F0F0         	movff	?___ftsub+2,sprintf@fval+2
  2412                           
  2413                           ;doprnt.c: 1133: exp = 0;
  2414  00143A  0E00               	movlw	0
  2415  00143C  0100               	movlb	0	; () banked
  2416  00143E  6FE7               	movwf	(sprintf@exp+1)& (0+255),b
  2417  001440  0E00               	movlw	0
  2418  001442  6FE6               	movwf	sprintf@exp& (0+255),b
  2419  001444                     l415:
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;doprnt.c: 1134: }
  2423                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2424                           
  2425                           ; BSR set to: 0
  2426  001444  0E01               	movlw	1
  2427  001446  6FF1               	movwf	sprintf@c& (0+255),b
  2428  001448                     l3088:
  2429                           
  2430                           ; BSR set to: 0
  2431  001448  0E0A               	movlw	10
  2432  00144A  19F1               	xorwf	sprintf@c& (0+255),w,b
  2433  00144C  B4D8               	btfsc	status,2,c
  2434  00144E  D018               	goto	u2670
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;doprnt.c: 1137: if(val < dpowers[c])
  2438                           
  2439                           ; BSR set to: 0
  2440                           
  2441                           ; BSR set to: 0
  2442  001450  51F1               	movf	sprintf@c& (0+255),w,b
  2443  001452  0D04               	mullw	4
  2444  001454  0E01               	movlw	low _dpowers
  2445  001456  24F3               	addwf	prodl,w,c
  2446  001458  6EF6               	movwf	tblptrl,c
  2447  00145A  0E10               	movlw	high _dpowers
  2448  00145C  20F4               	addwfc	prodh,w,c
  2449  00145E  6EF7               	movwf	tblptrh,c
  2450  001460                     	if	0	;There are less than 3 active tblptr bytes
  2451  001460                     	endif
  2452  001460  0009               	tblrd		*+
  2453  001462  50F5               	movf	tablat,w,c
  2454  001464  5DE2               	subwf	sprintf@val& (0+255),w,b
  2455  001466  0009               	tblrd		*+
  2456  001468  50F5               	movf	tablat,w,c
  2457  00146A  59E3               	subwfb	(sprintf@val+1)& (0+255),w,b
  2458  00146C  0009               	tblrd		*+
  2459  00146E  50F5               	movf	tablat,w,c
  2460  001470  59E4               	subwfb	(sprintf@val+2)& (0+255),w,b
  2461  001472  0009               	tblrd		*+
  2462  001474  50F5               	movf	tablat,w,c
  2463  001476  59E5               	subwfb	(sprintf@val+3)& (0+255),w,b
  2464  001478  A0D8               	btfss	status,0,c
  2465  00147A  D002               	goto	u2670
  2466                           
  2467                           ; BSR set to: 0
  2468                           
  2469                           ; BSR set to: 0
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;doprnt.c: 1138: break;
  2473  00147C  2BF1               	incf	sprintf@c& (0+255),f,b
  2474  00147E  D7E4               	goto	l3088
  2475  001480                     u2670:
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;doprnt.c: 1175: {
  2479                           ;doprnt.c: 1188: if(flag & 0x03)
  2480                           
  2481                           ; BSR set to: 0
  2482  001480  0E03               	movlw	3
  2483  001482  15E0               	andwf	sprintf@flag& (0+255),w,b
  2484  001484  6E47               	movwf	??_sprintf& (0+255),c
  2485  001486  0E00               	movlw	0
  2486  001488  15E1               	andwf	(sprintf@flag+1)& (0+255),w,b
  2487  00148A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2488  00148C  5047               	movf	??_sprintf,w,c
  2489  00148E  1048               	iorwf	??_sprintf+1,w,c
  2490  001490  B4D8               	btfsc	status,2,c
  2491  001492  D050               	goto	l420
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2495  001494  C040  FFD9         	movff	sprintf@sp,fsr2l
  2496  001498  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2497  00149C  0E2D               	movlw	45
  2498  00149E  D047               	goto	L2
  2499  0014A0                     
  2500                           ; BSR set to: 0
  2501                           ;doprnt.c: 1200: {
  2502                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2503                           
  2504                           ; BSR set to: 0
  2505  0014A0  C0E2  F001         	movff	sprintf@val,___lldiv@dividend
  2506  0014A4  C0E3  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2507  0014A8  C0E4  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2508  0014AC  C0E5  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2509  0014B0  51F1               	movf	sprintf@c& (0+255),w,b
  2510  0014B2  0D04               	mullw	4
  2511  0014B4  0E01               	movlw	low _dpowers
  2512  0014B6  24F3               	addwf	prodl,w,c
  2513  0014B8  6EF6               	movwf	tblptrl,c
  2514  0014BA  0E10               	movlw	high _dpowers
  2515  0014BC  20F4               	addwfc	prodh,w,c
  2516  0014BE  6EF7               	movwf	tblptrh,c
  2517  0014C0                     	if	0	;There are less than 3 active tblptr bytes
  2518  0014C0                     	endif
  2519  0014C0  0009               	tblrd		*+
  2520  0014C2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2521  0014C6  0009               	tblrd		*+
  2522  0014C8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2523  0014CC  0009               	tblrd		*+
  2524  0014CE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2525  0014D2  000A               	tblrd		*-
  2526  0014D4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2527  0014D8  ECF8  F014         	call	___lldiv	;wreg free
  2528  0014DC  C001  F0E8         	movff	?___lldiv,sprintf@tmpval
  2529  0014E0  C002  F0E9         	movff	?___lldiv+1,sprintf@tmpval+1
  2530  0014E4  C003  F0EA         	movff	?___lldiv+2,sprintf@tmpval+2
  2531  0014E8  C004  F0EB         	movff	?___lldiv+3,sprintf@tmpval+3
  2532                           
  2533                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2534  0014EC  C0E8  F001         	movff	sprintf@tmpval,___llmod@dividend
  2535  0014F0  C0E9  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2536  0014F4  C0EA  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2537  0014F8  C0EB  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2538  0014FC  0E0A               	movlw	10
  2539  0014FE  6E05               	movwf	___llmod@divisor,c
  2540  001500  0E00               	movlw	0
  2541  001502  6E06               	movwf	___llmod@divisor+1,c
  2542  001504  0E00               	movlw	0
  2543  001506  6E07               	movwf	___llmod@divisor+2,c
  2544  001508  0E00               	movlw	0
  2545  00150A  6E08               	movwf	___llmod@divisor+3,c
  2546  00150C  EC20  F016         	call	___llmod	;wreg free
  2547  001510  C001  F0E8         	movff	?___llmod,sprintf@tmpval
  2548  001514  C002  F0E9         	movff	?___llmod+1,sprintf@tmpval+1
  2549  001518  C003  F0EA         	movff	?___llmod+2,sprintf@tmpval+2
  2550  00151C  C004  F0EB         	movff	?___llmod+3,sprintf@tmpval+3
  2551                           
  2552                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2553  001520  0100               	movlb	0	; () banked
  2554  001522  51E8               	movf	sprintf@tmpval& (0+255),w,b
  2555  001524  0F30               	addlw	48
  2556  001526  C040  FFD9         	movff	sprintf@sp,fsr2l
  2557  00152A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2558  00152E                     L2:
  2559  00152E  6EDF               	movwf	indf2,c
  2560                           
  2561                           ; BSR set to: 0
  2562  001530  4A40               	infsnz	sprintf@sp,f,c
  2563  001532  2A41               	incf	sprintf@sp+1,f,c
  2564  001534                     l420:
  2565                           
  2566                           ; BSR set to: 0
  2567                           
  2568                           ; BSR set to: 0
  2569  001534  07F1               	decf	sprintf@c& (0+255),f,b
  2570  001536  29F1               	incf	sprintf@c& (0+255),w,b
  2571  001538  B4D8               	btfsc	status,2,c
  2572  00153A  D00C               	goto	l423
  2573  00153C  D7B1               	goto	l421
  2574  00153E                     l3116:
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2578  00153E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2579  001542  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2580  001546  0E30               	movlw	48
  2581  001548  6EDF               	movwf	indf2,c
  2582                           
  2583                           ; BSR set to: 0
  2584  00154A  4A40               	infsnz	sprintf@sp,f,c
  2585  00154C  2A41               	incf	sprintf@sp+1,f,c
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;doprnt.c: 1209: exp--;
  2589  00154E  07E6               	decf	sprintf@exp& (0+255),f,b
  2590  001550  A0D8               	btfss	status,0,c
  2591  001552  07E7               	decf	(sprintf@exp+1)& (0+255),f,b
  2592  001554                     l423:
  2593                           
  2594                           ; BSR set to: 0
  2595                           
  2596                           ; BSR set to: 0
  2597  001554  BFE7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2598  001556  D005               	goto	u2700
  2599  001558  51E7               	movf	(sprintf@exp+1)& (0+255),w,b
  2600  00155A  E1F1               	bnz	l3116
  2601  00155C  05E6               	decf	sprintf@exp& (0+255),w,b
  2602  00155E  B0D8               	btfsc	status,0,c
  2603  001560  D7EE               	goto	l424
  2604  001562                     u2700:
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;doprnt.c: 1210: }
  2608                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2609                           
  2610                           ; BSR set to: 0
  2611  001562  BFED               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2612  001564  D009               	goto	l426
  2613  001566  51ED               	movf	(sprintf@prec+1)& (0+255),w,b
  2614  001568  E104               	bnz	u2710
  2615  00156A  0E09               	movlw	9
  2616  00156C  5DEC               	subwf	sprintf@prec& (0+255),w,b
  2617  00156E  A0D8               	btfss	status,0,c
  2618  001570  D003               	goto	l426
  2619  001572                     u2710:
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2623  001572  0E08               	movlw	8
  2624  001574  6FF1               	movwf	sprintf@c& (0+255),b
  2625  001576  D002               	goto	l427
  2626  001578                     l426:
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;doprnt.c: 1213: else
  2630                           ;doprnt.c: 1214: c = prec;
  2631  001578  C0EC  F0F1         	movff	sprintf@prec,sprintf@c
  2632  00157C                     l427:
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;doprnt.c: 1215: prec -= c;
  2636                           
  2637                           ; BSR set to: 0
  2638  00157C  51F1               	movf	sprintf@c& (0+255),w,b
  2639  00157E  5FEC               	subwf	sprintf@prec& (0+255),f,b
  2640  001580  0E00               	movlw	0
  2641  001582  BFF1               	btfsc	sprintf@c& (0+255),7,b
  2642  001584  0EFF               	movlw	255
  2643  001586  5BED               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;doprnt.c: 1219: if(c)
  2647  001588  51F1               	movf	sprintf@c& (0+255),w,b
  2648  00158A  B4D8               	btfsc	status,2,c
  2649  00158C  D008               	goto	l428
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2653  00158E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2654  001592  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2655  001596  0E2E               	movlw	46
  2656  001598  6EDF               	movwf	indf2,c
  2657                           
  2658                           ; BSR set to: 0
  2659  00159A  4A40               	infsnz	sprintf@sp,f,c
  2660  00159C  2A41               	incf	sprintf@sp+1,f,c
  2661  00159E                     l428:
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2665                           
  2666                           ; BSR set to: 0
  2667  00159E  51F1               	movf	sprintf@c& (0+255),w,b
  2668  0015A0  ECCD  F00B         	call	_scale
  2669  0015A4  C024  F0DB         	movff	?_scale,_sprintf$1430
  2670  0015A8  C025  F0DC         	movff	?_scale+1,_sprintf$1430+1
  2671  0015AC  C026  F0DD         	movff	?_scale+2,_sprintf$1430+2
  2672                           
  2673                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2674  0015B0  C0EE  F018         	movff	sprintf@fval,___ftmul@f2
  2675  0015B4  C0EF  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2676  0015B8  C0F0  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2677  0015BC  C0DB  F015         	movff	_sprintf$1430,___ftmul@f1
  2678  0015C0  C0DC  F016         	movff	_sprintf$1430+1,___ftmul@f1+1
  2679  0015C4  C0DD  F017         	movff	_sprintf$1430+2,___ftmul@f1+2
  2680  0015C8  ECFD  F010         	call	___ftmul	;wreg free
  2681  0015CC  C015  F02B         	movff	?___ftmul,___fttol@f1
  2682  0015D0  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2683  0015D4  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2684  0015D8  EC77  F011         	call	___fttol	;wreg free
  2685  0015DC  C02B  F0E2         	movff	?___fttol,sprintf@val
  2686  0015E0  C02C  F0E3         	movff	?___fttol+1,sprintf@val+1
  2687  0015E4  C02D  F0E4         	movff	?___fttol+2,sprintf@val+2
  2688  0015E8  C02E  F0E5         	movff	?___fttol+3,sprintf@val+3
  2689                           
  2690                           ;doprnt.c: 1228: while(c--) {
  2691  0015EC  D071               	goto	l429
  2692  0015EE                     
  2693                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2694  0015EE  C0E2  F001         	movff	sprintf@val,___lldiv@dividend
  2695  0015F2  C0E3  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2696  0015F6  C0E4  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2697  0015FA  C0E5  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2698  0015FE  0100               	movlb	0	; () banked
  2699  001600  51F1               	movf	sprintf@c& (0+255),w,b
  2700  001602  0D04               	mullw	4
  2701  001604  0E01               	movlw	low _dpowers
  2702  001606  24F3               	addwf	prodl,w,c
  2703  001608  6EF6               	movwf	tblptrl,c
  2704  00160A  0E10               	movlw	high _dpowers
  2705  00160C  20F4               	addwfc	prodh,w,c
  2706  00160E  6EF7               	movwf	tblptrh,c
  2707  001610                     	if	0	;There are less than 3 active tblptr bytes
  2708  001610                     	endif
  2709  001610  0009               	tblrd		*+
  2710  001612  CFF5 F005          	movff	tablat,___lldiv@divisor
  2711  001616  0009               	tblrd		*+
  2712  001618  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2713  00161C  0009               	tblrd		*+
  2714  00161E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2715  001622  000A               	tblrd		*-
  2716  001624  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2717  001628  ECF8  F014         	call	___lldiv	;wreg free
  2718  00162C  C001  F0E8         	movff	?___lldiv,sprintf@tmpval
  2719  001630  C002  F0E9         	movff	?___lldiv+1,sprintf@tmpval+1
  2720  001634  C003  F0EA         	movff	?___lldiv+2,sprintf@tmpval+2
  2721  001638  C004  F0EB         	movff	?___lldiv+3,sprintf@tmpval+3
  2722                           
  2723                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2724  00163C  C0E8  F001         	movff	sprintf@tmpval,___llmod@dividend
  2725  001640  C0E9  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2726  001644  C0EA  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2727  001648  C0EB  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2728  00164C  0E0A               	movlw	10
  2729  00164E  6E05               	movwf	___llmod@divisor,c
  2730  001650  0E00               	movlw	0
  2731  001652  6E06               	movwf	___llmod@divisor+1,c
  2732  001654  0E00               	movlw	0
  2733  001656  6E07               	movwf	___llmod@divisor+2,c
  2734  001658  0E00               	movlw	0
  2735  00165A  6E08               	movwf	___llmod@divisor+3,c
  2736  00165C  EC20  F016         	call	___llmod	;wreg free
  2737  001660  C001  F0E8         	movff	?___llmod,sprintf@tmpval
  2738  001664  C002  F0E9         	movff	?___llmod+1,sprintf@tmpval+1
  2739  001668  C003  F0EA         	movff	?___llmod+2,sprintf@tmpval+2
  2740  00166C  C004  F0EB         	movff	?___llmod+3,sprintf@tmpval+3
  2741                           
  2742                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2743  001670  0100               	movlb	0	; () banked
  2744  001672  51E8               	movf	sprintf@tmpval& (0+255),w,b
  2745  001674  0F30               	addlw	48
  2746  001676  C040  FFD9         	movff	sprintf@sp,fsr2l
  2747  00167A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2748  00167E  6EDF               	movwf	indf2,c
  2749                           
  2750                           ; BSR set to: 0
  2751  001680  4A40               	infsnz	sprintf@sp,f,c
  2752  001682  2A41               	incf	sprintf@sp+1,f,c
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;doprnt.c: 1232: val %= dpowers[c];
  2756  001684  C0E2  F001         	movff	sprintf@val,___llmod@dividend
  2757  001688  C0E3  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2758  00168C  C0E4  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2759  001690  C0E5  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2760  001694  51F1               	movf	sprintf@c& (0+255),w,b
  2761  001696  0D04               	mullw	4
  2762  001698  0E01               	movlw	low _dpowers
  2763  00169A  24F3               	addwf	prodl,w,c
  2764  00169C  6EF6               	movwf	tblptrl,c
  2765  00169E  0E10               	movlw	high _dpowers
  2766  0016A0  20F4               	addwfc	prodh,w,c
  2767  0016A2  6EF7               	movwf	tblptrh,c
  2768  0016A4                     	if	0	;There are less than 3 active tblptr bytes
  2769  0016A4                     	endif
  2770  0016A4  0009               	tblrd		*+
  2771  0016A6  CFF5 F005          	movff	tablat,___llmod@divisor
  2772  0016AA  0009               	tblrd		*+
  2773  0016AC  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2774  0016B0  0009               	tblrd		*+
  2775  0016B2  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2776  0016B6  000A               	tblrd		*-
  2777  0016B8  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2778  0016BC  EC20  F016         	call	___llmod	;wreg free
  2779  0016C0  C001  F0E2         	movff	?___llmod,sprintf@val
  2780  0016C4  C002  F0E3         	movff	?___llmod+1,sprintf@val+1
  2781  0016C8  C003  F0E4         	movff	?___llmod+2,sprintf@val+2
  2782  0016CC  C004  F0E5         	movff	?___llmod+3,sprintf@val+3
  2783  0016D0                     l429:
  2784  0016D0  0100               	movlb	0	; () banked
  2785  0016D2  07F1               	decf	sprintf@c& (0+255),f,b
  2786  0016D4  29F1               	incf	sprintf@c& (0+255),w,b
  2787  0016D6  B4D8               	btfsc	status,2,c
  2788  0016D8  D00C               	goto	l432
  2789  0016DA  D789               	goto	l430
  2790  0016DC                     
  2791                           ; BSR set to: 0
  2792                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2793                           
  2794                           ; BSR set to: 0
  2795  0016DC  C040  FFD9         	movff	sprintf@sp,fsr2l
  2796  0016E0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2797  0016E4  0E30               	movlw	48
  2798  0016E6  6EDF               	movwf	indf2,c
  2799                           
  2800                           ; BSR set to: 0
  2801  0016E8  4A40               	infsnz	sprintf@sp,f,c
  2802  0016EA  2A41               	incf	sprintf@sp+1,f,c
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;doprnt.c: 1237: prec--;
  2806  0016EC  07EC               	decf	sprintf@prec& (0+255),f,b
  2807  0016EE  A0D8               	btfss	status,0,c
  2808  0016F0  07ED               	decf	(sprintf@prec+1)& (0+255),f,b
  2809  0016F2                     l432:
  2810                           
  2811                           ; BSR set to: 0
  2812                           
  2813                           ; BSR set to: 0
  2814  0016F2  51EC               	movf	sprintf@prec& (0+255),w,b
  2815  0016F4  11ED               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2816  0016F6  B4D8               	btfsc	status,2,c
  2817  0016F8  D03D               	goto	l439
  2818  0016FA  D7F0               	goto	l433
  2819  0016FC                     l397:
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;doprnt.c: 1246: }
  2823                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2824                           
  2825                           ; BSR set to: 0
  2826  0016FC  51EC               	movf	sprintf@prec& (0+255),w,b
  2827  0016FE  11ED               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2828  001700  A4D8               	btfss	status,2,c
  2829  001702  D008               	goto	l435
  2830                           
  2831                           ; BSR set to: 0
  2832  001704  51E2               	movf	sprintf@val& (0+255),w,b
  2833  001706  11E3               	iorwf	(sprintf@val+1)& (0+255),w,b
  2834  001708  11E4               	iorwf	(sprintf@val+2)& (0+255),w,b
  2835  00170A  11E5               	iorwf	(sprintf@val+3)& (0+255),w,b
  2836  00170C  A4D8               	btfss	status,2,c
  2837  00170E  D002               	goto	l435
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;doprnt.c: 1291: prec++;
  2841  001710  4BEC               	infsnz	sprintf@prec& (0+255),f,b
  2842  001712  2BED               	incf	(sprintf@prec+1)& (0+255),f,b
  2843  001714                     l435:
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;doprnt.c: 1339: if(c < prec)
  2847                           
  2848                           ; BSR set to: 0
  2849  001714  0E80               	movlw	128
  2850  001716  BFF1               	btfsc	sprintf@c& (0+255),7,b
  2851  001718  0E7F               	movlw	127
  2852  00171A  6E47               	movwf	??_sprintf& (0+255),c
  2853  00171C  51EC               	movf	sprintf@prec& (0+255),w,b
  2854  00171E  5DF1               	subwf	sprintf@c& (0+255),w,b
  2855  001720  51ED               	movf	(sprintf@prec+1)& (0+255),w,b
  2856  001722  0A80               	xorlw	128
  2857  001724  5847               	subwfb	??_sprintf& (0+255),w,c
  2858  001726  B0D8               	btfsc	status,0,c
  2859  001728  D003               	goto	l436
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;doprnt.c: 1340: c = prec;
  2863  00172A  C0EC  F0F1         	movff	sprintf@prec,sprintf@c
  2864  00172E  D010               	goto	l438
  2865  001730                     l436:
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;doprnt.c: 1341: else if(prec < c)
  2869                           
  2870                           ; BSR set to: 0
  2871  001730  51ED               	movf	(sprintf@prec+1)& (0+255),w,b
  2872  001732  0A80               	xorlw	128
  2873  001734  6E47               	movwf	??_sprintf& (0+255),c
  2874  001736  51F1               	movf	sprintf@c& (0+255),w,b
  2875  001738  5DEC               	subwf	sprintf@prec& (0+255),w,b
  2876  00173A  0E80               	movlw	128
  2877  00173C  BFF1               	btfsc	sprintf@c& (0+255),7,b
  2878  00173E  0E7F               	movlw	127
  2879  001740  5847               	subwfb	??_sprintf& (0+255),w,c
  2880  001742  B0D8               	btfsc	status,0,c
  2881  001744  D005               	goto	l438
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;doprnt.c: 1342: prec = c;
  2885  001746  51F1               	movf	sprintf@c& (0+255),w,b
  2886  001748  6FEC               	movwf	sprintf@prec& (0+255),b
  2887  00174A  6BED               	clrf	(sprintf@prec+1)& (0+255),b
  2888  00174C  BFEC               	btfsc	sprintf@prec& (0+255),7,b
  2889  00174E  07ED               	decf	(sprintf@prec+1)& (0+255),f,b
  2890  001750                     l438:
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;doprnt.c: 1422: {
  2894                           ;doprnt.c: 1438: if(flag & 0x03)
  2895                           
  2896                           ; BSR set to: 0
  2897                           
  2898                           ; BSR set to: 0
  2899  001750  0E03               	movlw	3
  2900  001752  15E0               	andwf	sprintf@flag& (0+255),w,b
  2901  001754  6E47               	movwf	??_sprintf& (0+255),c
  2902  001756  0E00               	movlw	0
  2903  001758  15E1               	andwf	(sprintf@flag+1)& (0+255),w,b
  2904  00175A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2905  00175C  5047               	movf	??_sprintf,w,c
  2906  00175E  1048               	iorwf	??_sprintf+1,w,c
  2907  001760  B4D8               	btfsc	status,2,c
  2908  001762  D008               	goto	l439
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2912  001764  C040  FFD9         	movff	sprintf@sp,fsr2l
  2913  001768  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2914  00176C  0E2D               	movlw	45
  2915  00176E  6EDF               	movwf	indf2,c
  2916  001770                     l3178:
  2917                           
  2918                           ; BSR set to: 0
  2919  001770  4A40               	infsnz	sprintf@sp,f,c
  2920  001772  2A41               	incf	sprintf@sp+1,f,c
  2921  001774                     l439:
  2922                           
  2923                           ; BSR set to: 0
  2924                           
  2925                           ; BSR set to: 0
  2926                           
  2927                           ; BSR set to: 0
  2928  001774  C042  FFF6         	movff	sprintf@f,tblptrl
  2929  001778  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2930  00177C  4A42               	infsnz	sprintf@f,f,c
  2931  00177E  2A43               	incf	sprintf@f+1,f,c
  2932  001780                     	if	0	;tblptru may be non-zero
  2933  001780                     	endif
  2934  001780                     	if	0	;tblptru may be non-zero
  2935  001780                     	endif
  2936  001780  0008               	tblrd		*
  2937  001782  CFF5 F0F1          	movff	tablat,sprintf@c
  2938  001786  51F1               	movf	sprintf@c& (0+255),w,b
  2939  001788  A4D8               	btfss	status,2,c
  2940  00178A  D489               	goto	l384
  2941  00178C                     u2800:
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;doprnt.c: 1538: *sp = 0;
  2945                           
  2946                           ; BSR set to: 0
  2947                           
  2948                           ;doprnt.c: 1469: }
  2949                           ;doprnt.c: 1533: }
  2950                           ;doprnt.c: 1535: alldone:
  2951                           
  2952                           ; BSR set to: 0
  2953  00178C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2954  001790  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2955  001794  0E00               	movlw	0
  2956  001796  6EDF               	movwf	indf2,c
  2957  001798  0012               	return	
  2958  00179A                     __end_of_sprintf:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           prodh	equ	0xFF4
  2965                           prodl	equ	0xFF3
  2966                           postinc0	equ	0xFEE
  2967                           wreg	equ	0xFE8
  2968                           indf2	equ	0xFDF
  2969                           postinc2	equ	0xFDE
  2970                           postdec2	equ	0xFDD
  2971                           fsr2h	equ	0xFDA
  2972                           fsr2l	equ	0xFD9
  2973                           status	equ	0xFD8
  2974                           
  2975 ;; *************** function _scale *****************
  2976 ;; Defined at:
  2977 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;  scl             1    wreg     char 
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  scl             1   41[COMRAM] char 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  3   35[COMRAM] char 
  2984 ;; Registers used:
  2985 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2991 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;Total ram usage:        7 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    2
  2998 ;; This function calls:
  2999 ;;		___awdiv
  3000 ;;		___awmod
  3001 ;;		___ftmul
  3002 ;;		___wmul
  3003 ;; This function is called by:
  3004 ;;		_sprintf
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text6
  3009  00179A                     __ptext6:
  3010                           	opt stack 0
  3011  00179A                     _scale:
  3012                           	opt stack 26
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;incstack = 0
  3016                           ;scale@scl stored from wreg
  3017  00179A  6E2A               	movwf	scale@scl,c
  3018                           
  3019                           ;doprnt.c: 428: if(scl < 0) {
  3020  00179C  AE2A               	btfss	scale@scl,7,c
  3021  00179E  D101               	goto	l373
  3022                           
  3023                           ;doprnt.c: 429: scl = -scl;
  3024  0017A0  6C2A               	negf	scale@scl,c
  3025                           
  3026                           ;doprnt.c: 430: if(scl>=110)
  3027  0017A2  502A               	movf	scale@scl,w,c
  3028  0017A4  0A80               	xorlw	128
  3029  0017A6  0F12               	addlw	-238
  3030  0017A8  A0D8               	btfss	status,0,c
  3031  0017AA  D091               	goto	l374
  3032                           
  3033                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3034  0017AC  0E00               	movlw	0
  3035  0017AE  6E12               	movwf	___wmul@multiplicand+1,c
  3036  0017B0  0E03               	movlw	3
  3037  0017B2  6E11               	movwf	___wmul@multiplicand,c
  3038  0017B4  0E00               	movlw	0
  3039  0017B6  6E0A               	movwf	___awdiv@divisor+1,c
  3040  0017B8  0E0A               	movlw	10
  3041  0017BA  6E09               	movwf	___awdiv@divisor,c
  3042  0017BC  0E00               	movlw	0
  3043  0017BE  6E04               	movwf	___awmod@divisor+1,c
  3044  0017C0  0E64               	movlw	100
  3045  0017C2  6E03               	movwf	___awmod@divisor,c
  3046  0017C4  502A               	movf	scale@scl,w,c
  3047  0017C6  6E01               	movwf	___awmod@dividend,c
  3048  0017C8  6A02               	clrf	___awmod@dividend+1,c
  3049  0017CA  BE01               	btfsc	___awmod@dividend,7,c
  3050  0017CC  0602               	decf	___awmod@dividend+1,f,c
  3051  0017CE  ECB2  F015         	call	___awmod	;wreg free
  3052  0017D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  3053  0017D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3054  0017DA  ECB6  F014         	call	___awdiv	;wreg free
  3055  0017DE  0E09               	movlw	9
  3056  0017E0  2407               	addwf	?___awdiv,w,c
  3057  0017E2  6E0F               	movwf	___wmul@multiplier,c
  3058  0017E4  0E00               	movlw	0
  3059  0017E6  2008               	addwfc	?___awdiv+1,w,c
  3060  0017E8  6E10               	movwf	___wmul@multiplier+1,c
  3061  0017EA  ECA5  F017         	call	___wmul	;wreg free
  3062  0017EE  0E50               	movlw	low __npowers_
  3063  0017F0  240F               	addwf	?___wmul,w,c
  3064  0017F2  6EF6               	movwf	tblptrl,c
  3065  0017F4  0E10               	movlw	high __npowers_
  3066  0017F6  2010               	addwfc	?___wmul+1,w,c
  3067  0017F8  6EF7               	movwf	tblptrh,c
  3068  0017FA                     	if	0	;There are less than 3 active tblptr bytes
  3069  0017FA                     	endif
  3070  0017FA  0009               	tblrd		*+
  3071  0017FC  CFF5 F018          	movff	tablat,___ftmul@f2
  3072  001800  0009               	tblrd		*+
  3073  001802  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3074  001806  000A               	tblrd		*-
  3075  001808  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3076  00180C  0E00               	movlw	0
  3077  00180E  6E0A               	movwf	___awdiv@divisor+1,c
  3078  001810  0E64               	movlw	100
  3079  001812  6E09               	movwf	___awdiv@divisor,c
  3080  001814  502A               	movf	scale@scl,w,c
  3081  001816  6E07               	movwf	___awdiv@dividend,c
  3082  001818  6A08               	clrf	___awdiv@dividend+1,c
  3083  00181A  BE07               	btfsc	___awdiv@dividend,7,c
  3084  00181C  0608               	decf	___awdiv@dividend+1,f,c
  3085  00181E  ECB6  F014         	call	___awdiv	;wreg free
  3086  001822  0E12               	movlw	18
  3087  001824  2407               	addwf	?___awdiv,w,c
  3088  001826  6E0F               	movwf	___wmul@multiplier,c
  3089  001828  0E00               	movlw	0
  3090  00182A  2008               	addwfc	?___awdiv+1,w,c
  3091  00182C  6E10               	movwf	___wmul@multiplier+1,c
  3092  00182E  0E00               	movlw	0
  3093  001830  6E12               	movwf	___wmul@multiplicand+1,c
  3094  001832  0E03               	movlw	3
  3095  001834  6E11               	movwf	___wmul@multiplicand,c
  3096  001836  ECA5  F017         	call	___wmul	;wreg free
  3097  00183A  0E50               	movlw	low __npowers_
  3098  00183C  240F               	addwf	?___wmul,w,c
  3099  00183E  6EF6               	movwf	tblptrl,c
  3100  001840  0E10               	movlw	high __npowers_
  3101  001842  2010               	addwfc	?___wmul+1,w,c
  3102  001844  6EF7               	movwf	tblptrh,c
  3103  001846                     	if	0	;There are less than 3 active tblptr bytes
  3104  001846                     	endif
  3105  001846  0009               	tblrd		*+
  3106  001848  CFF5 F015          	movff	tablat,___ftmul@f1
  3107  00184C  0009               	tblrd		*+
  3108  00184E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3109  001852  000A               	tblrd		*-
  3110  001854  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3111  001858  ECFD  F010         	call	___ftmul	;wreg free
  3112  00185C  C015  F027         	movff	?___ftmul,_scale$1429
  3113  001860  C016  F028         	movff	?___ftmul+1,_scale$1429+1
  3114  001864  C017  F029         	movff	?___ftmul+2,_scale$1429+2
  3115                           
  3116                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3117  001868  C027  F015         	movff	_scale$1429,___ftmul@f1
  3118  00186C  C028  F016         	movff	_scale$1429+1,___ftmul@f1+1
  3119  001870  C029  F017         	movff	_scale$1429+2,___ftmul@f1+2
  3120  001874  0E00               	movlw	0
  3121  001876  6E12               	movwf	___wmul@multiplicand+1,c
  3122  001878  0E03               	movlw	3
  3123  00187A  6E11               	movwf	___wmul@multiplicand,c
  3124  00187C  0E00               	movlw	0
  3125  00187E  6E04               	movwf	___awmod@divisor+1,c
  3126  001880  0E0A               	movlw	10
  3127  001882  6E03               	movwf	___awmod@divisor,c
  3128  001884  502A               	movf	scale@scl,w,c
  3129  001886  6E01               	movwf	___awmod@dividend,c
  3130  001888  6A02               	clrf	___awmod@dividend+1,c
  3131  00188A  BE01               	btfsc	___awmod@dividend,7,c
  3132  00188C  0602               	decf	___awmod@dividend+1,f,c
  3133  00188E  ECB2  F015         	call	___awmod	;wreg free
  3134  001892  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3135  001896  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3136  00189A  ECA5  F017         	call	___wmul	;wreg free
  3137  00189E  0E50               	movlw	low __npowers_
  3138  0018A0  240F               	addwf	?___wmul,w,c
  3139  0018A2  6EF6               	movwf	tblptrl,c
  3140  0018A4  0E10               	movlw	high __npowers_
  3141  0018A6  2010               	addwfc	?___wmul+1,w,c
  3142  0018A8  6EF7               	movwf	tblptrh,c
  3143  0018AA                     	if	0	;There are less than 3 active tblptr bytes
  3144  0018AA                     	endif
  3145  0018AA  0009               	tblrd		*+
  3146  0018AC  CFF5 F018          	movff	tablat,___ftmul@f2
  3147  0018B0  0009               	tblrd		*+
  3148  0018B2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3149  0018B6  000A               	tblrd		*-
  3150  0018B8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3151  0018BC  ECFD  F010         	call	___ftmul	;wreg free
  3152  0018C0  C015  F024         	movff	?___ftmul,?_scale
  3153  0018C4  C016  F025         	movff	?___ftmul+1,?_scale+1
  3154  0018C8  C017  F026         	movff	?___ftmul+2,?_scale+2
  3155  0018CC  0012               	return	
  3156  0018CE                     l374:
  3157                           
  3158                           ;doprnt.c: 432: else if(scl > 10)
  3159  0018CE  502A               	movf	scale@scl,w,c
  3160  0018D0  0A80               	xorlw	128
  3161  0018D2  0F75               	addlw	-139
  3162  0018D4  A0D8               	btfss	status,0,c
  3163  0018D6  D053               	goto	l377
  3164                           
  3165                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3166  0018D8  0E00               	movlw	0
  3167  0018DA  6E0A               	movwf	___awdiv@divisor+1,c
  3168  0018DC  0E0A               	movlw	10
  3169  0018DE  6E09               	movwf	___awdiv@divisor,c
  3170  0018E0  502A               	movf	scale@scl,w,c
  3171  0018E2  6E07               	movwf	___awdiv@dividend,c
  3172  0018E4  6A08               	clrf	___awdiv@dividend+1,c
  3173  0018E6  BE07               	btfsc	___awdiv@dividend,7,c
  3174  0018E8  0608               	decf	___awdiv@dividend+1,f,c
  3175  0018EA  ECB6  F014         	call	___awdiv	;wreg free
  3176  0018EE  0E09               	movlw	9
  3177  0018F0  2407               	addwf	?___awdiv,w,c
  3178  0018F2  6E0F               	movwf	___wmul@multiplier,c
  3179  0018F4  0E00               	movlw	0
  3180  0018F6  2008               	addwfc	?___awdiv+1,w,c
  3181  0018F8  6E10               	movwf	___wmul@multiplier+1,c
  3182  0018FA  0E00               	movlw	0
  3183  0018FC  6E12               	movwf	___wmul@multiplicand+1,c
  3184  0018FE  0E03               	movlw	3
  3185  001900  6E11               	movwf	___wmul@multiplicand,c
  3186  001902  ECA5  F017         	call	___wmul	;wreg free
  3187  001906  0E50               	movlw	low __npowers_
  3188  001908  240F               	addwf	?___wmul,w,c
  3189  00190A  6EF6               	movwf	tblptrl,c
  3190  00190C  0E10               	movlw	high __npowers_
  3191  00190E  2010               	addwfc	?___wmul+1,w,c
  3192  001910  6EF7               	movwf	tblptrh,c
  3193  001912                     	if	0	;There are less than 3 active tblptr bytes
  3194  001912                     	endif
  3195  001912  0009               	tblrd		*+
  3196  001914  CFF5 F015          	movff	tablat,___ftmul@f1
  3197  001918  0009               	tblrd		*+
  3198  00191A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3199  00191E  000A               	tblrd		*-
  3200  001920  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3201  001924  0E00               	movlw	0
  3202  001926  6E12               	movwf	___wmul@multiplicand+1,c
  3203  001928  0E03               	movlw	3
  3204  00192A  6E11               	movwf	___wmul@multiplicand,c
  3205  00192C  0E00               	movlw	0
  3206  00192E  6E04               	movwf	___awmod@divisor+1,c
  3207  001930  0E0A               	movlw	10
  3208  001932  6E03               	movwf	___awmod@divisor,c
  3209  001934  502A               	movf	scale@scl,w,c
  3210  001936  6E01               	movwf	___awmod@dividend,c
  3211  001938  6A02               	clrf	___awmod@dividend+1,c
  3212  00193A  BE01               	btfsc	___awmod@dividend,7,c
  3213  00193C  0602               	decf	___awmod@dividend+1,f,c
  3214  00193E  ECB2  F015         	call	___awmod	;wreg free
  3215  001942  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3216  001946  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3217  00194A  ECA5  F017         	call	___wmul	;wreg free
  3218  00194E  0E50               	movlw	low __npowers_
  3219  001950  240F               	addwf	?___wmul,w,c
  3220  001952  6EF6               	movwf	tblptrl,c
  3221  001954  0E10               	movlw	high __npowers_
  3222  001956  2010               	addwfc	?___wmul+1,w,c
  3223  001958  6EF7               	movwf	tblptrh,c
  3224  00195A                     	if	0	;There are less than 3 active tblptr bytes
  3225  00195A                     	endif
  3226  00195A  0009               	tblrd		*+
  3227  00195C  CFF5 F018          	movff	tablat,___ftmul@f2
  3228  001960  0009               	tblrd		*+
  3229  001962  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3230  001966  000A               	tblrd		*-
  3231  001968  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3232  00196C  ECFD  F010         	call	___ftmul	;wreg free
  3233  001970  C015  F024         	movff	?___ftmul,?_scale
  3234  001974  C016  F025         	movff	?___ftmul+1,?_scale+1
  3235  001978  C017  F026         	movff	?___ftmul+2,?_scale+2
  3236  00197C  0012               	return	
  3237  00197E                     l377:
  3238                           
  3239                           ;doprnt.c: 434: return _npowers_[scl];
  3240  00197E  502A               	movf	scale@scl,w,c
  3241  001980  0D03               	mullw	3
  3242  001982  0E50               	movlw	low __npowers_
  3243  001984  24F3               	addwf	prodl,w,c
  3244  001986  6EF6               	movwf	tblptrl,c
  3245  001988  0E10               	movlw	high __npowers_
  3246  00198A  20F4               	addwfc	prodh,w,c
  3247  00198C  6EF7               	movwf	tblptrh,c
  3248  00198E                     	if	0	;There are less than 3 active tblptr bytes
  3249  00198E                     	endif
  3250  00198E  0009               	tblrd		*+
  3251  001990  CFF5 F024          	movff	tablat,?_scale
  3252  001994  0009               	tblrd		*+
  3253  001996  CFF5 F025          	movff	tablat,?_scale+1
  3254  00199A  000A               	tblrd		*-
  3255  00199C  CFF5 F026          	movff	tablat,?_scale+2
  3256  0019A0  0012               	return	
  3257  0019A2                     l373:
  3258                           
  3259                           ;doprnt.c: 435: }
  3260                           ;doprnt.c: 436: if(scl>=110)
  3261  0019A2  502A               	movf	scale@scl,w,c
  3262  0019A4  0A80               	xorlw	128
  3263  0019A6  0F12               	addlw	-238
  3264  0019A8  A0D8               	btfss	status,0,c
  3265  0019AA  D091               	goto	l378
  3266                           
  3267                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3268  0019AC  0E00               	movlw	0
  3269  0019AE  6E12               	movwf	___wmul@multiplicand+1,c
  3270  0019B0  0E03               	movlw	3
  3271  0019B2  6E11               	movwf	___wmul@multiplicand,c
  3272  0019B4  0E00               	movlw	0
  3273  0019B6  6E0A               	movwf	___awdiv@divisor+1,c
  3274  0019B8  0E0A               	movlw	10
  3275  0019BA  6E09               	movwf	___awdiv@divisor,c
  3276  0019BC  0E00               	movlw	0
  3277  0019BE  6E04               	movwf	___awmod@divisor+1,c
  3278  0019C0  0E64               	movlw	100
  3279  0019C2  6E03               	movwf	___awmod@divisor,c
  3280  0019C4  502A               	movf	scale@scl,w,c
  3281  0019C6  6E01               	movwf	___awmod@dividend,c
  3282  0019C8  6A02               	clrf	___awmod@dividend+1,c
  3283  0019CA  BE01               	btfsc	___awmod@dividend,7,c
  3284  0019CC  0602               	decf	___awmod@dividend+1,f,c
  3285  0019CE  ECB2  F015         	call	___awmod	;wreg free
  3286  0019D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  3287  0019D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3288  0019DA  ECB6  F014         	call	___awdiv	;wreg free
  3289  0019DE  0E09               	movlw	9
  3290  0019E0  2407               	addwf	?___awdiv,w,c
  3291  0019E2  6E0F               	movwf	___wmul@multiplier,c
  3292  0019E4  0E00               	movlw	0
  3293  0019E6  2008               	addwfc	?___awdiv+1,w,c
  3294  0019E8  6E10               	movwf	___wmul@multiplier+1,c
  3295  0019EA  ECA5  F017         	call	___wmul	;wreg free
  3296  0019EE  0E29               	movlw	low __powers_
  3297  0019F0  240F               	addwf	?___wmul,w,c
  3298  0019F2  6EF6               	movwf	tblptrl,c
  3299  0019F4  0E10               	movlw	high __powers_
  3300  0019F6  2010               	addwfc	?___wmul+1,w,c
  3301  0019F8  6EF7               	movwf	tblptrh,c
  3302  0019FA                     	if	0	;There are less than 3 active tblptr bytes
  3303  0019FA                     	endif
  3304  0019FA  0009               	tblrd		*+
  3305  0019FC  CFF5 F018          	movff	tablat,___ftmul@f2
  3306  001A00  0009               	tblrd		*+
  3307  001A02  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3308  001A06  000A               	tblrd		*-
  3309  001A08  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3310  001A0C  0E00               	movlw	0
  3311  001A0E  6E0A               	movwf	___awdiv@divisor+1,c
  3312  001A10  0E64               	movlw	100
  3313  001A12  6E09               	movwf	___awdiv@divisor,c
  3314  001A14  502A               	movf	scale@scl,w,c
  3315  001A16  6E07               	movwf	___awdiv@dividend,c
  3316  001A18  6A08               	clrf	___awdiv@dividend+1,c
  3317  001A1A  BE07               	btfsc	___awdiv@dividend,7,c
  3318  001A1C  0608               	decf	___awdiv@dividend+1,f,c
  3319  001A1E  ECB6  F014         	call	___awdiv	;wreg free
  3320  001A22  0E12               	movlw	18
  3321  001A24  2407               	addwf	?___awdiv,w,c
  3322  001A26  6E0F               	movwf	___wmul@multiplier,c
  3323  001A28  0E00               	movlw	0
  3324  001A2A  2008               	addwfc	?___awdiv+1,w,c
  3325  001A2C  6E10               	movwf	___wmul@multiplier+1,c
  3326  001A2E  0E00               	movlw	0
  3327  001A30  6E12               	movwf	___wmul@multiplicand+1,c
  3328  001A32  0E03               	movlw	3
  3329  001A34  6E11               	movwf	___wmul@multiplicand,c
  3330  001A36  ECA5  F017         	call	___wmul	;wreg free
  3331  001A3A  0E29               	movlw	low __powers_
  3332  001A3C  240F               	addwf	?___wmul,w,c
  3333  001A3E  6EF6               	movwf	tblptrl,c
  3334  001A40  0E10               	movlw	high __powers_
  3335  001A42  2010               	addwfc	?___wmul+1,w,c
  3336  001A44  6EF7               	movwf	tblptrh,c
  3337  001A46                     	if	0	;There are less than 3 active tblptr bytes
  3338  001A46                     	endif
  3339  001A46  0009               	tblrd		*+
  3340  001A48  CFF5 F015          	movff	tablat,___ftmul@f1
  3341  001A4C  0009               	tblrd		*+
  3342  001A4E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3343  001A52  000A               	tblrd		*-
  3344  001A54  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3345  001A58  ECFD  F010         	call	___ftmul	;wreg free
  3346  001A5C  C015  F027         	movff	?___ftmul,_scale$1429
  3347  001A60  C016  F028         	movff	?___ftmul+1,_scale$1429+1
  3348  001A64  C017  F029         	movff	?___ftmul+2,_scale$1429+2
  3349                           
  3350                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3351  001A68  C027  F015         	movff	_scale$1429,___ftmul@f1
  3352  001A6C  C028  F016         	movff	_scale$1429+1,___ftmul@f1+1
  3353  001A70  C029  F017         	movff	_scale$1429+2,___ftmul@f1+2
  3354  001A74  0E00               	movlw	0
  3355  001A76  6E12               	movwf	___wmul@multiplicand+1,c
  3356  001A78  0E03               	movlw	3
  3357  001A7A  6E11               	movwf	___wmul@multiplicand,c
  3358  001A7C  0E00               	movlw	0
  3359  001A7E  6E04               	movwf	___awmod@divisor+1,c
  3360  001A80  0E0A               	movlw	10
  3361  001A82  6E03               	movwf	___awmod@divisor,c
  3362  001A84  502A               	movf	scale@scl,w,c
  3363  001A86  6E01               	movwf	___awmod@dividend,c
  3364  001A88  6A02               	clrf	___awmod@dividend+1,c
  3365  001A8A  BE01               	btfsc	___awmod@dividend,7,c
  3366  001A8C  0602               	decf	___awmod@dividend+1,f,c
  3367  001A8E  ECB2  F015         	call	___awmod	;wreg free
  3368  001A92  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3369  001A96  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3370  001A9A  ECA5  F017         	call	___wmul	;wreg free
  3371  001A9E  0E29               	movlw	low __powers_
  3372  001AA0  240F               	addwf	?___wmul,w,c
  3373  001AA2  6EF6               	movwf	tblptrl,c
  3374  001AA4  0E10               	movlw	high __powers_
  3375  001AA6  2010               	addwfc	?___wmul+1,w,c
  3376  001AA8  6EF7               	movwf	tblptrh,c
  3377  001AAA                     	if	0	;There are less than 3 active tblptr bytes
  3378  001AAA                     	endif
  3379  001AAA  0009               	tblrd		*+
  3380  001AAC  CFF5 F018          	movff	tablat,___ftmul@f2
  3381  001AB0  0009               	tblrd		*+
  3382  001AB2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3383  001AB6  000A               	tblrd		*-
  3384  001AB8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3385  001ABC  ECFD  F010         	call	___ftmul	;wreg free
  3386  001AC0  C015  F024         	movff	?___ftmul,?_scale
  3387  001AC4  C016  F025         	movff	?___ftmul+1,?_scale+1
  3388  001AC8  C017  F026         	movff	?___ftmul+2,?_scale+2
  3389  001ACC  0012               	return	
  3390  001ACE                     l378:
  3391                           
  3392                           ;doprnt.c: 438: else if(scl > 10)
  3393  001ACE  502A               	movf	scale@scl,w,c
  3394  001AD0  0A80               	xorlw	128
  3395  001AD2  0F75               	addlw	-139
  3396  001AD4  A0D8               	btfss	status,0,c
  3397  001AD6  D053               	goto	l380
  3398                           
  3399                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3400  001AD8  0E00               	movlw	0
  3401  001ADA  6E0A               	movwf	___awdiv@divisor+1,c
  3402  001ADC  0E0A               	movlw	10
  3403  001ADE  6E09               	movwf	___awdiv@divisor,c
  3404  001AE0  502A               	movf	scale@scl,w,c
  3405  001AE2  6E07               	movwf	___awdiv@dividend,c
  3406  001AE4  6A08               	clrf	___awdiv@dividend+1,c
  3407  001AE6  BE07               	btfsc	___awdiv@dividend,7,c
  3408  001AE8  0608               	decf	___awdiv@dividend+1,f,c
  3409  001AEA  ECB6  F014         	call	___awdiv	;wreg free
  3410  001AEE  0E09               	movlw	9
  3411  001AF0  2407               	addwf	?___awdiv,w,c
  3412  001AF2  6E0F               	movwf	___wmul@multiplier,c
  3413  001AF4  0E00               	movlw	0
  3414  001AF6  2008               	addwfc	?___awdiv+1,w,c
  3415  001AF8  6E10               	movwf	___wmul@multiplier+1,c
  3416  001AFA  0E00               	movlw	0
  3417  001AFC  6E12               	movwf	___wmul@multiplicand+1,c
  3418  001AFE  0E03               	movlw	3
  3419  001B00  6E11               	movwf	___wmul@multiplicand,c
  3420  001B02  ECA5  F017         	call	___wmul	;wreg free
  3421  001B06  0E29               	movlw	low __powers_
  3422  001B08  240F               	addwf	?___wmul,w,c
  3423  001B0A  6EF6               	movwf	tblptrl,c
  3424  001B0C  0E10               	movlw	high __powers_
  3425  001B0E  2010               	addwfc	?___wmul+1,w,c
  3426  001B10  6EF7               	movwf	tblptrh,c
  3427  001B12                     	if	0	;There are less than 3 active tblptr bytes
  3428  001B12                     	endif
  3429  001B12  0009               	tblrd		*+
  3430  001B14  CFF5 F015          	movff	tablat,___ftmul@f1
  3431  001B18  0009               	tblrd		*+
  3432  001B1A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3433  001B1E  000A               	tblrd		*-
  3434  001B20  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3435  001B24  0E00               	movlw	0
  3436  001B26  6E12               	movwf	___wmul@multiplicand+1,c
  3437  001B28  0E03               	movlw	3
  3438  001B2A  6E11               	movwf	___wmul@multiplicand,c
  3439  001B2C  0E00               	movlw	0
  3440  001B2E  6E04               	movwf	___awmod@divisor+1,c
  3441  001B30  0E0A               	movlw	10
  3442  001B32  6E03               	movwf	___awmod@divisor,c
  3443  001B34  502A               	movf	scale@scl,w,c
  3444  001B36  6E01               	movwf	___awmod@dividend,c
  3445  001B38  6A02               	clrf	___awmod@dividend+1,c
  3446  001B3A  BE01               	btfsc	___awmod@dividend,7,c
  3447  001B3C  0602               	decf	___awmod@dividend+1,f,c
  3448  001B3E  ECB2  F015         	call	___awmod	;wreg free
  3449  001B42  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3450  001B46  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3451  001B4A  ECA5  F017         	call	___wmul	;wreg free
  3452  001B4E  0E29               	movlw	low __powers_
  3453  001B50  240F               	addwf	?___wmul,w,c
  3454  001B52  6EF6               	movwf	tblptrl,c
  3455  001B54  0E10               	movlw	high __powers_
  3456  001B56  2010               	addwfc	?___wmul+1,w,c
  3457  001B58  6EF7               	movwf	tblptrh,c
  3458  001B5A                     	if	0	;There are less than 3 active tblptr bytes
  3459  001B5A                     	endif
  3460  001B5A  0009               	tblrd		*+
  3461  001B5C  CFF5 F018          	movff	tablat,___ftmul@f2
  3462  001B60  0009               	tblrd		*+
  3463  001B62  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3464  001B66  000A               	tblrd		*-
  3465  001B68  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3466  001B6C  ECFD  F010         	call	___ftmul	;wreg free
  3467  001B70  C015  F024         	movff	?___ftmul,?_scale
  3468  001B74  C016  F025         	movff	?___ftmul+1,?_scale+1
  3469  001B78  C017  F026         	movff	?___ftmul+2,?_scale+2
  3470  001B7C  0012               	return	
  3471  001B7E                     l380:
  3472                           
  3473                           ;doprnt.c: 440: return _powers_[scl];
  3474  001B7E  502A               	movf	scale@scl,w,c
  3475  001B80  0D03               	mullw	3
  3476  001B82  0E29               	movlw	low __powers_
  3477  001B84  24F3               	addwf	prodl,w,c
  3478  001B86  6EF6               	movwf	tblptrl,c
  3479  001B88  0E10               	movlw	high __powers_
  3480  001B8A  20F4               	addwfc	prodh,w,c
  3481  001B8C  6EF7               	movwf	tblptrh,c
  3482  001B8E                     	if	0	;There are less than 3 active tblptr bytes
  3483  001B8E                     	endif
  3484  001B8E  0009               	tblrd		*+
  3485  001B90  CFF5 F024          	movff	tablat,?_scale
  3486  001B94  0009               	tblrd		*+
  3487  001B96  CFF5 F025          	movff	tablat,?_scale+1
  3488  001B9A  000A               	tblrd		*-
  3489  001B9C  CFF5 F026          	movff	tablat,?_scale+2
  3490  001BA0  0012               	return	
  3491  001BA2                     __end_of_scale:
  3492                           	opt stack 0
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           postinc0	equ	0xFEE
  3500                           wreg	equ	0xFE8
  3501                           indf2	equ	0xFDF
  3502                           postinc2	equ	0xFDE
  3503                           postdec2	equ	0xFDD
  3504                           fsr2h	equ	0xFDA
  3505                           fsr2l	equ	0xFD9
  3506                           status	equ	0xFD8
  3507                           
  3508 ;; *************** function _isdigit *****************
  3509 ;; Defined at:
  3510 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  3511 ;; Parameters:    Size  Location     Type
  3512 ;;  c               1    wreg     unsigned char 
  3513 ;; Auto vars:     Size  Location     Type
  3514 ;;  c               1    2[COMRAM] unsigned char 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;		None               void
  3517 ;; Registers used:
  3518 ;;		wreg, status,2, status,0
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;Total ram usage:        3 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; This function calls:
  3531 ;;		Nothing
  3532 ;; This function is called by:
  3533 ;;		_sprintf
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	text7
  3538  002FDA                     __ptext7:
  3539                           	opt stack 0
  3540  002FDA                     _isdigit:
  3541                           	opt stack 28
  3542                           
  3543                           ;incstack = 0
  3544                           ;isdigit@c stored from wreg
  3545  002FDA  6E03               	movwf	isdigit@c,c
  3546  002FDC  0E00               	movlw	0
  3547  002FDE  6E02               	movwf	_isdigit$1053,c
  3548  002FE0  0E3A               	movlw	58
  3549  002FE2  6003               	cpfslt	isdigit@c,c
  3550  002FE4  D005               	goto	l805
  3551  002FE6  0E2F               	movlw	47
  3552  002FE8  6403               	cpfsgt	isdigit@c,c
  3553  002FEA  D002               	goto	l805
  3554  002FEC  0E01               	movlw	1
  3555  002FEE  6E02               	movwf	_isdigit$1053,c
  3556  002FF0                     l805:
  3557  002FF0  C002  F001         	movff	_isdigit$1053,??_isdigit
  3558  002FF4  3001               	rrcf	??_isdigit,w,c
  3559  002FF6  0012               	return	
  3560  002FF8                     __end_of_isdigit:
  3561                           	opt stack 0
  3562                           tblptru	equ	0xFF8
  3563                           tblptrh	equ	0xFF7
  3564                           tblptrl	equ	0xFF6
  3565                           tablat	equ	0xFF5
  3566                           prodh	equ	0xFF4
  3567                           prodl	equ	0xFF3
  3568                           postinc0	equ	0xFEE
  3569                           wreg	equ	0xFE8
  3570                           indf2	equ	0xFDF
  3571                           postinc2	equ	0xFDE
  3572                           postdec2	equ	0xFDD
  3573                           fsr2h	equ	0xFDA
  3574                           fsr2l	equ	0xFD9
  3575                           status	equ	0xFD8
  3576                           
  3577 ;; *************** function _fround *****************
  3578 ;; Defined at:
  3579 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  prec            1    wreg     unsigned char 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  prec            1   44[COMRAM] unsigned char 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  3   35[COMRAM] unsigned char 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3593 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;Total ram usage:       10 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    2
  3600 ;; This function calls:
  3601 ;;		___awdiv
  3602 ;;		___awmod
  3603 ;;		___ftmul
  3604 ;;		___wmul
  3605 ;; This function is called by:
  3606 ;;		_sprintf
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           	psect	text8
  3611  001BA2                     __ptext8:
  3612                           	opt stack 0
  3613  001BA2                     _fround:
  3614                           	opt stack 26
  3615                           
  3616                           ;incstack = 0
  3617                           ;fround@prec stored from wreg
  3618  001BA2  6E2D               	movwf	fround@prec,c
  3619                           
  3620                           ;doprnt.c: 413: if(prec>=110)
  3621  001BA4  0E6D               	movlw	109
  3622  001BA6  642D               	cpfsgt	fround@prec,c
  3623  001BA8  D09F               	goto	l367
  3624                           
  3625                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3626  001BAA  0E00               	movlw	0
  3627  001BAC  6E12               	movwf	___wmul@multiplicand+1,c
  3628  001BAE  0E03               	movlw	3
  3629  001BB0  6E11               	movwf	___wmul@multiplicand,c
  3630  001BB2  0E00               	movlw	0
  3631  001BB4  6E0A               	movwf	___awdiv@divisor+1,c
  3632  001BB6  0E0A               	movlw	10
  3633  001BB8  6E09               	movwf	___awdiv@divisor,c
  3634  001BBA  0E00               	movlw	0
  3635  001BBC  6E04               	movwf	___awmod@divisor+1,c
  3636  001BBE  0E64               	movlw	100
  3637  001BC0  6E03               	movwf	___awmod@divisor,c
  3638  001BC2  C02D  F001         	movff	fround@prec,___awmod@dividend
  3639  001BC6  6A02               	clrf	___awmod@dividend+1,c
  3640  001BC8  ECB2  F015         	call	___awmod	;wreg free
  3641  001BCC  C001  F007         	movff	?___awmod,___awdiv@dividend
  3642  001BD0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3643  001BD4  ECB6  F014         	call	___awdiv	;wreg free
  3644  001BD8  0E09               	movlw	9
  3645  001BDA  2407               	addwf	?___awdiv,w,c
  3646  001BDC  6E0F               	movwf	___wmul@multiplier,c
  3647  001BDE  0E00               	movlw	0
  3648  001BE0  2008               	addwfc	?___awdiv+1,w,c
  3649  001BE2  6E10               	movwf	___wmul@multiplier+1,c
  3650  001BE4  ECA5  F017         	call	___wmul	;wreg free
  3651  001BE8  0E50               	movlw	low __npowers_
  3652  001BEA  240F               	addwf	?___wmul,w,c
  3653  001BEC  6EF6               	movwf	tblptrl,c
  3654  001BEE  0E10               	movlw	high __npowers_
  3655  001BF0  2010               	addwfc	?___wmul+1,w,c
  3656  001BF2  6EF7               	movwf	tblptrh,c
  3657  001BF4                     	if	0	;There are less than 3 active tblptr bytes
  3658  001BF4                     	endif
  3659  001BF4  0009               	tblrd		*+
  3660  001BF6  CFF5 F018          	movff	tablat,___ftmul@f2
  3661  001BFA  0009               	tblrd		*+
  3662  001BFC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3663  001C00  000A               	tblrd		*-
  3664  001C02  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3665  001C06  0E00               	movlw	0
  3666  001C08  6E0A               	movwf	___awdiv@divisor+1,c
  3667  001C0A  0E64               	movlw	100
  3668  001C0C  6E09               	movwf	___awdiv@divisor,c
  3669  001C0E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3670  001C12  6A08               	clrf	___awdiv@dividend+1,c
  3671  001C14  ECB6  F014         	call	___awdiv	;wreg free
  3672  001C18  0E12               	movlw	18
  3673  001C1A  2407               	addwf	?___awdiv,w,c
  3674  001C1C  6E0F               	movwf	___wmul@multiplier,c
  3675  001C1E  0E00               	movlw	0
  3676  001C20  2008               	addwfc	?___awdiv+1,w,c
  3677  001C22  6E10               	movwf	___wmul@multiplier+1,c
  3678  001C24  0E00               	movlw	0
  3679  001C26  6E12               	movwf	___wmul@multiplicand+1,c
  3680  001C28  0E03               	movlw	3
  3681  001C2A  6E11               	movwf	___wmul@multiplicand,c
  3682  001C2C  ECA5  F017         	call	___wmul	;wreg free
  3683  001C30  0E50               	movlw	low __npowers_
  3684  001C32  240F               	addwf	?___wmul,w,c
  3685  001C34  6EF6               	movwf	tblptrl,c
  3686  001C36  0E10               	movlw	high __npowers_
  3687  001C38  2010               	addwfc	?___wmul+1,w,c
  3688  001C3A  6EF7               	movwf	tblptrh,c
  3689  001C3C                     	if	0	;There are less than 3 active tblptr bytes
  3690  001C3C                     	endif
  3691  001C3C  0009               	tblrd		*+
  3692  001C3E  CFF5 F015          	movff	tablat,___ftmul@f1
  3693  001C42  0009               	tblrd		*+
  3694  001C44  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3695  001C48  000A               	tblrd		*-
  3696  001C4A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3697  001C4E  ECFD  F010         	call	___ftmul	;wreg free
  3698  001C52  C015  F02A         	movff	?___ftmul,_fround$1427
  3699  001C56  C016  F02B         	movff	?___ftmul+1,_fround$1427+1
  3700  001C5A  C017  F02C         	movff	?___ftmul+2,_fround$1427+2
  3701                           
  3702                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3703  001C5E  0E00               	movlw	0
  3704  001C60  6E12               	movwf	___wmul@multiplicand+1,c
  3705  001C62  0E03               	movlw	3
  3706  001C64  6E11               	movwf	___wmul@multiplicand,c
  3707  001C66  0E00               	movlw	0
  3708  001C68  6E04               	movwf	___awmod@divisor+1,c
  3709  001C6A  0E0A               	movlw	10
  3710  001C6C  6E03               	movwf	___awmod@divisor,c
  3711  001C6E  C02D  F001         	movff	fround@prec,___awmod@dividend
  3712  001C72  6A02               	clrf	___awmod@dividend+1,c
  3713  001C74  ECB2  F015         	call	___awmod	;wreg free
  3714  001C78  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3715  001C7C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3716  001C80  ECA5  F017         	call	___wmul	;wreg free
  3717  001C84  0E50               	movlw	low __npowers_
  3718  001C86  240F               	addwf	?___wmul,w,c
  3719  001C88  6EF6               	movwf	tblptrl,c
  3720  001C8A  0E10               	movlw	high __npowers_
  3721  001C8C  2010               	addwfc	?___wmul+1,w,c
  3722  001C8E  6EF7               	movwf	tblptrh,c
  3723  001C90                     	if	0	;There are less than 3 active tblptr bytes
  3724  001C90                     	endif
  3725  001C90  0009               	tblrd		*+
  3726  001C92  CFF5 F018          	movff	tablat,___ftmul@f2
  3727  001C96  0009               	tblrd		*+
  3728  001C98  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3729  001C9C  000A               	tblrd		*-
  3730  001C9E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3731  001CA2  C02A  F015         	movff	_fround$1427,___ftmul@f1
  3732  001CA6  C02B  F016         	movff	_fround$1427+1,___ftmul@f1+1
  3733  001CAA  C02C  F017         	movff	_fround$1427+2,___ftmul@f1+2
  3734  001CAE  ECFD  F010         	call	___ftmul	;wreg free
  3735  001CB2  C015  F027         	movff	?___ftmul,_fround$1428
  3736  001CB6  C016  F028         	movff	?___ftmul+1,_fround$1428+1
  3737  001CBA  C017  F029         	movff	?___ftmul+2,_fround$1428+2
  3738                           
  3739                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3740  001CBE  C027  F015         	movff	_fround$1428,___ftmul@f1
  3741  001CC2  C028  F016         	movff	_fround$1428+1,___ftmul@f1+1
  3742  001CC6  C029  F017         	movff	_fround$1428+2,___ftmul@f1+2
  3743  001CCA  0E00               	movlw	0
  3744  001CCC  6E18               	movwf	___ftmul@f2,c
  3745  001CCE  0E00               	movlw	0
  3746  001CD0  6E19               	movwf	___ftmul@f2+1,c
  3747  001CD2  0E3F               	movlw	63
  3748  001CD4  6E1A               	movwf	___ftmul@f2+2,c
  3749  001CD6  ECFD  F010         	call	___ftmul	;wreg free
  3750  001CDA  C015  F024         	movff	?___ftmul,?_fround
  3751  001CDE  C016  F025         	movff	?___ftmul+1,?_fround+1
  3752  001CE2  C017  F026         	movff	?___ftmul+2,?_fround+2
  3753  001CE6  0012               	return	
  3754  001CE8                     l367:
  3755                           
  3756                           ;doprnt.c: 415: else if(prec > 10)
  3757  001CE8  0E0A               	movlw	10
  3758  001CEA  642D               	cpfsgt	fround@prec,c
  3759  001CEC  D063               	goto	l370
  3760                           
  3761                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3762  001CEE  0E00               	movlw	0
  3763  001CF0  6E12               	movwf	___wmul@multiplicand+1,c
  3764  001CF2  0E03               	movlw	3
  3765  001CF4  6E11               	movwf	___wmul@multiplicand,c
  3766  001CF6  0E00               	movlw	0
  3767  001CF8  6E04               	movwf	___awmod@divisor+1,c
  3768  001CFA  0E0A               	movlw	10
  3769  001CFC  6E03               	movwf	___awmod@divisor,c
  3770  001CFE  C02D  F001         	movff	fround@prec,___awmod@dividend
  3771  001D02  6A02               	clrf	___awmod@dividend+1,c
  3772  001D04  ECB2  F015         	call	___awmod	;wreg free
  3773  001D08  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3774  001D0C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3775  001D10  ECA5  F017         	call	___wmul	;wreg free
  3776  001D14  0E50               	movlw	low __npowers_
  3777  001D16  240F               	addwf	?___wmul,w,c
  3778  001D18  6EF6               	movwf	tblptrl,c
  3779  001D1A  0E10               	movlw	high __npowers_
  3780  001D1C  2010               	addwfc	?___wmul+1,w,c
  3781  001D1E  6EF7               	movwf	tblptrh,c
  3782  001D20                     	if	0	;There are less than 3 active tblptr bytes
  3783  001D20                     	endif
  3784  001D20  0009               	tblrd		*+
  3785  001D22  CFF5 F018          	movff	tablat,___ftmul@f2
  3786  001D26  0009               	tblrd		*+
  3787  001D28  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3788  001D2C  000A               	tblrd		*-
  3789  001D2E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3790  001D32  0E00               	movlw	0
  3791  001D34  6E0A               	movwf	___awdiv@divisor+1,c
  3792  001D36  0E0A               	movlw	10
  3793  001D38  6E09               	movwf	___awdiv@divisor,c
  3794  001D3A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3795  001D3E  6A08               	clrf	___awdiv@dividend+1,c
  3796  001D40  ECB6  F014         	call	___awdiv	;wreg free
  3797  001D44  0E09               	movlw	9
  3798  001D46  2407               	addwf	?___awdiv,w,c
  3799  001D48  6E0F               	movwf	___wmul@multiplier,c
  3800  001D4A  0E00               	movlw	0
  3801  001D4C  2008               	addwfc	?___awdiv+1,w,c
  3802  001D4E  6E10               	movwf	___wmul@multiplier+1,c
  3803  001D50  0E00               	movlw	0
  3804  001D52  6E12               	movwf	___wmul@multiplicand+1,c
  3805  001D54  0E03               	movlw	3
  3806  001D56  6E11               	movwf	___wmul@multiplicand,c
  3807  001D58  ECA5  F017         	call	___wmul	;wreg free
  3808  001D5C  0E50               	movlw	low __npowers_
  3809  001D5E  240F               	addwf	?___wmul,w,c
  3810  001D60  6EF6               	movwf	tblptrl,c
  3811  001D62  0E10               	movlw	high __npowers_
  3812  001D64  2010               	addwfc	?___wmul+1,w,c
  3813  001D66  6EF7               	movwf	tblptrh,c
  3814  001D68                     	if	0	;There are less than 3 active tblptr bytes
  3815  001D68                     	endif
  3816  001D68  0009               	tblrd		*+
  3817  001D6A  CFF5 F015          	movff	tablat,___ftmul@f1
  3818  001D6E  0009               	tblrd		*+
  3819  001D70  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3820  001D74  000A               	tblrd		*-
  3821  001D76  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3822  001D7A  ECFD  F010         	call	___ftmul	;wreg free
  3823  001D7E  C015  F02A         	movff	?___ftmul,_fround$1427
  3824  001D82  C016  F02B         	movff	?___ftmul+1,_fround$1427+1
  3825  001D86  C017  F02C         	movff	?___ftmul+2,_fround$1427+2
  3826                           
  3827                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3828  001D8A  C02A  F015         	movff	_fround$1427,___ftmul@f1
  3829  001D8E  C02B  F016         	movff	_fround$1427+1,___ftmul@f1+1
  3830  001D92  C02C  F017         	movff	_fround$1427+2,___ftmul@f1+2
  3831  001D96  0E00               	movlw	0
  3832  001D98  6E18               	movwf	___ftmul@f2,c
  3833  001D9A  0E00               	movlw	0
  3834  001D9C  6E19               	movwf	___ftmul@f2+1,c
  3835  001D9E  0E3F               	movlw	63
  3836  001DA0  6E1A               	movwf	___ftmul@f2+2,c
  3837  001DA2  ECFD  F010         	call	___ftmul	;wreg free
  3838  001DA6  C015  F024         	movff	?___ftmul,?_fround
  3839  001DAA  C016  F025         	movff	?___ftmul+1,?_fround+1
  3840  001DAE  C017  F026         	movff	?___ftmul+2,?_fround+2
  3841  001DB2  0012               	return	
  3842  001DB4                     l370:
  3843                           
  3844                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3845  001DB4  502D               	movf	fround@prec,w,c
  3846  001DB6  0D03               	mullw	3
  3847  001DB8  0E50               	movlw	low __npowers_
  3848  001DBA  24F3               	addwf	prodl,w,c
  3849  001DBC  6EF6               	movwf	tblptrl,c
  3850  001DBE  0E10               	movlw	high __npowers_
  3851  001DC0  20F4               	addwfc	prodh,w,c
  3852  001DC2  6EF7               	movwf	tblptrh,c
  3853  001DC4                     	if	0	;There are less than 3 active tblptr bytes
  3854  001DC4                     	endif
  3855  001DC4  0009               	tblrd		*+
  3856  001DC6  CFF5 F015          	movff	tablat,___ftmul@f1
  3857  001DCA  0009               	tblrd		*+
  3858  001DCC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3859  001DD0  000A               	tblrd		*-
  3860  001DD2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3861  001DD6  0E00               	movlw	0
  3862  001DD8  6E18               	movwf	___ftmul@f2,c
  3863  001DDA  0E00               	movlw	0
  3864  001DDC  6E19               	movwf	___ftmul@f2+1,c
  3865  001DDE  0E3F               	movlw	63
  3866  001DE0  6E1A               	movwf	___ftmul@f2+2,c
  3867  001DE2  ECFD  F010         	call	___ftmul	;wreg free
  3868  001DE6  C015  F024         	movff	?___ftmul,?_fround
  3869  001DEA  C016  F025         	movff	?___ftmul+1,?_fround+1
  3870  001DEE  C017  F026         	movff	?___ftmul+2,?_fround+2
  3871  001DF2  0012               	return	
  3872  001DF4                     __end_of_fround:
  3873                           	opt stack 0
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           prodh	equ	0xFF4
  3879                           prodl	equ	0xFF3
  3880                           postinc0	equ	0xFEE
  3881                           wreg	equ	0xFE8
  3882                           indf2	equ	0xFDF
  3883                           postinc2	equ	0xFDE
  3884                           postdec2	equ	0xFDD
  3885                           fsr2h	equ	0xFDA
  3886                           fsr2l	equ	0xFD9
  3887                           status	equ	0xFD8
  3888                           
  3889 ;; *************** function ___wmul *****************
  3890 ;; Defined at:
  3891 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;  multiplier      2   14[COMRAM] unsigned int 
  3894 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  product         2   18[COMRAM] unsigned int 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  2   14[COMRAM] unsigned int 
  3899 ;; Registers used:
  3900 ;;		wreg, status,2, status,0, prodl, prodh
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;Total ram usage:        6 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; This function calls:
  3913 ;;		Nothing
  3914 ;; This function is called by:
  3915 ;;		_fround
  3916 ;;		_scale
  3917 ;;		_sprintf
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           	psect	text9
  3922  002F4A                     __ptext9:
  3923                           	opt stack 0
  3924  002F4A                     ___wmul:
  3925                           	opt stack 27
  3926                           
  3927                           ;incstack = 0
  3928  002F4A  500F               	movf	___wmul@multiplier,w,c
  3929  002F4C  0211               	mulwf	___wmul@multiplicand,c
  3930  002F4E  CFF3 F013          	movff	prodl,___wmul@product
  3931  002F52  CFF4 F014          	movff	prodh,___wmul@product+1
  3932  002F56  500F               	movf	___wmul@multiplier,w,c
  3933  002F58  0212               	mulwf	___wmul@multiplicand+1,c
  3934  002F5A  50F3               	movf	prodl,w,c
  3935  002F5C  2614               	addwf	___wmul@product+1,f,c
  3936  002F5E  5010               	movf	___wmul@multiplier+1,w,c
  3937  002F60  0211               	mulwf	___wmul@multiplicand,c
  3938  002F62  50F3               	movf	prodl,w,c
  3939  002F64  2614               	addwf	___wmul@product+1,f,c
  3940  002F66  C013  F00F         	movff	___wmul@product,?___wmul
  3941  002F6A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3942  002F6E  0012               	return	
  3943  002F70                     __end_of___wmul:
  3944                           	opt stack 0
  3945                           tblptru	equ	0xFF8
  3946                           tblptrh	equ	0xFF7
  3947                           tblptrl	equ	0xFF6
  3948                           tablat	equ	0xFF5
  3949                           prodh	equ	0xFF4
  3950                           prodl	equ	0xFF3
  3951                           postinc0	equ	0xFEE
  3952                           wreg	equ	0xFE8
  3953                           indf2	equ	0xFDF
  3954                           postinc2	equ	0xFDE
  3955                           postdec2	equ	0xFDD
  3956                           fsr2h	equ	0xFDA
  3957                           fsr2l	equ	0xFD9
  3958                           status	equ	0xFD8
  3959                           
  3960 ;; *************** function ___ftmul *****************
  3961 ;; Defined at:
  3962 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  f1              3   20[COMRAM] float 
  3965 ;;  f2              3   23[COMRAM] float 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3968 ;;  sign            1   34[COMRAM] unsigned char 
  3969 ;;  cntr            1   33[COMRAM] unsigned char 
  3970 ;;  exp             1   29[COMRAM] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  3   20[COMRAM] float 
  3973 ;; Registers used:
  3974 ;;		wreg, status,2, status,0, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3980 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;Total ram usage:       15 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    1
  3987 ;; This function calls:
  3988 ;;		___ftpack
  3989 ;; This function is called by:
  3990 ;;		_read_Iout
  3991 ;;		_read_Uout
  3992 ;;		_read_Uin
  3993 ;;		_fround
  3994 ;;		_scale
  3995 ;;		_sprintf
  3996 ;;		_buck_boost
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           	psect	text10
  4001  0021FA                     __ptext10:
  4002                           	opt stack 0
  4003  0021FA                     ___ftmul:
  4004                           	opt stack 26
  4005                           
  4006                           ;incstack = 0
  4007  0021FA  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  4008  0021FE  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4009  002200  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4010  002202  3416               	rlcf	___ftmul@f1+1,w,c
  4011  002204  361B               	rlcf	??___ftmul& (0+255),f,c
  4012  002206  E301               	bnc	u1791
  4013  002208  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4014  00220A                     u1791:
  4015  00220A  501B               	movf	??___ftmul,w,c
  4016  00220C  6E1E               	movwf	___ftmul@exp,c
  4017  00220E  501E               	movf	___ftmul@exp,w,c
  4018  002210  A4D8               	btfss	status,2,c
  4019  002212  D007               	goto	l769
  4020  002214  0E00               	movlw	0
  4021  002216  6E15               	movwf	?___ftmul,c
  4022  002218  0E00               	movlw	0
  4023  00221A  6E16               	movwf	?___ftmul+1,c
  4024  00221C  0E00               	movlw	0
  4025  00221E  6E17               	movwf	?___ftmul+2,c
  4026  002220  0012               	return	
  4027  002222                     l769:
  4028  002222  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  4029  002226  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4030  002228  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4031  00222A  3419               	rlcf	___ftmul@f2+1,w,c
  4032  00222C  361B               	rlcf	??___ftmul& (0+255),f,c
  4033  00222E  E301               	bnc	u1811
  4034  002230  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4035  002232                     u1811:
  4036  002232  501B               	movf	??___ftmul,w,c
  4037  002234  6E23               	movwf	___ftmul@sign,c
  4038  002236  5023               	movf	___ftmul@sign,w,c
  4039  002238  A4D8               	btfss	status,2,c
  4040  00223A  D007               	goto	l771
  4041  00223C  0E00               	movlw	0
  4042  00223E  6E15               	movwf	?___ftmul,c
  4043  002240  0E00               	movlw	0
  4044  002242  6E16               	movwf	?___ftmul+1,c
  4045  002244  0E00               	movlw	0
  4046  002246  6E17               	movwf	?___ftmul+2,c
  4047  002248  0012               	return	
  4048  00224A                     l771:
  4049  00224A  5023               	movf	___ftmul@sign,w,c
  4050  00224C  0F7B               	addlw	123
  4051  00224E  261E               	addwf	___ftmul@exp,f,c
  4052  002250  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  4053  002254  501A               	movf	___ftmul@f2+2,w,c
  4054  002256  1A23               	xorwf	___ftmul@sign,f,c
  4055  002258  0E80               	movlw	128
  4056  00225A  1623               	andwf	___ftmul@sign,f,c
  4057  00225C  8E16               	bsf	___ftmul@f1+1,7,c
  4058  00225E  8E19               	bsf	___ftmul@f2+1,7,c
  4059  002260  0EFF               	movlw	255
  4060  002262  1618               	andwf	___ftmul@f2,f,c
  4061  002264  0EFF               	movlw	255
  4062  002266  1619               	andwf	___ftmul@f2+1,f,c
  4063  002268  0E00               	movlw	0
  4064  00226A  161A               	andwf	___ftmul@f2+2,f,c
  4065  00226C  0E00               	movlw	0
  4066  00226E  6E1F               	movwf	___ftmul@f3_as_product,c
  4067  002270  0E00               	movlw	0
  4068  002272  6E20               	movwf	___ftmul@f3_as_product+1,c
  4069  002274  0E00               	movlw	0
  4070  002276  6E21               	movwf	___ftmul@f3_as_product+2,c
  4071  002278  0E07               	movlw	7
  4072  00227A  6E22               	movwf	___ftmul@cntr,c
  4073  00227C  A015               	btfss	___ftmul@f1,0,c
  4074  00227E  D006               	goto	l773
  4075  002280  5018               	movf	___ftmul@f2,w,c
  4076  002282  261F               	addwf	___ftmul@f3_as_product,f,c
  4077  002284  5019               	movf	___ftmul@f2+1,w,c
  4078  002286  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4079  002288  501A               	movf	___ftmul@f2+2,w,c
  4080  00228A  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4081  00228C                     l773:
  4082  00228C  90D8               	bcf	status,0,c
  4083  00228E  3217               	rrcf	___ftmul@f1+2,f,c
  4084  002290  3216               	rrcf	___ftmul@f1+1,f,c
  4085  002292  3215               	rrcf	___ftmul@f1,f,c
  4086  002294  90D8               	bcf	status,0,c
  4087  002296  3618               	rlcf	___ftmul@f2,f,c
  4088  002298  3619               	rlcf	___ftmul@f2+1,f,c
  4089  00229A  361A               	rlcf	___ftmul@f2+2,f,c
  4090  00229C  2E22               	decfsz	___ftmul@cntr,f,c
  4091  00229E  D7EE               	goto	l772
  4092  0022A0  0E09               	movlw	9
  4093  0022A2  6E22               	movwf	___ftmul@cntr,c
  4094  0022A4  A015               	btfss	___ftmul@f1,0,c
  4095  0022A6  D006               	goto	l776
  4096  0022A8  5018               	movf	___ftmul@f2,w,c
  4097  0022AA  261F               	addwf	___ftmul@f3_as_product,f,c
  4098  0022AC  5019               	movf	___ftmul@f2+1,w,c
  4099  0022AE  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4100  0022B0  501A               	movf	___ftmul@f2+2,w,c
  4101  0022B2  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4102  0022B4                     l776:
  4103  0022B4  90D8               	bcf	status,0,c
  4104  0022B6  3217               	rrcf	___ftmul@f1+2,f,c
  4105  0022B8  3216               	rrcf	___ftmul@f1+1,f,c
  4106  0022BA  3215               	rrcf	___ftmul@f1,f,c
  4107  0022BC  90D8               	bcf	status,0,c
  4108  0022BE  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  4109  0022C0  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  4110  0022C2  321F               	rrcf	___ftmul@f3_as_product,f,c
  4111  0022C4  2E22               	decfsz	___ftmul@cntr,f,c
  4112  0022C6  D7EE               	goto	l775
  4113  0022C8  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4114  0022CC  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4115  0022D0  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4116  0022D4  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  4117  0022D8  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  4118  0022DC  EC17  F014         	call	___ftpack	;wreg free
  4119  0022E0  C001  F015         	movff	?___ftpack,?___ftmul
  4120  0022E4  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  4121  0022E8  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  4122  0022EC  0012               	return	
  4123  0022EE                     __end_of___ftmul:
  4124                           	opt stack 0
  4125                           tblptru	equ	0xFF8
  4126                           tblptrh	equ	0xFF7
  4127                           tblptrl	equ	0xFF6
  4128                           tablat	equ	0xFF5
  4129                           prodh	equ	0xFF4
  4130                           prodl	equ	0xFF3
  4131                           postinc0	equ	0xFEE
  4132                           wreg	equ	0xFE8
  4133                           indf2	equ	0xFDF
  4134                           postinc2	equ	0xFDE
  4135                           postdec2	equ	0xFDD
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function ___awmod *****************
  4141 ;; Defined at:
  4142 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;  dividend        2    0[COMRAM] int 
  4145 ;;  divisor         2    2[COMRAM] int 
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;  sign            1    5[COMRAM] unsigned char 
  4148 ;;  counter         1    4[COMRAM] unsigned char 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  2    0[COMRAM] int 
  4151 ;; Registers used:
  4152 ;;		wreg, status,2, status,0
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4158 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;Total ram usage:        6 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; This function calls:
  4165 ;;		Nothing
  4166 ;; This function is called by:
  4167 ;;		_fround
  4168 ;;		_scale
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           	psect	text11
  4173  002B64                     __ptext11:
  4174                           	opt stack 0
  4175  002B64                     ___awmod:
  4176                           	opt stack 27
  4177                           
  4178                           ;incstack = 0
  4179  002B64  0E00               	movlw	0
  4180  002B66  6E06               	movwf	___awmod@sign,c
  4181  002B68  AE02               	btfss	___awmod@dividend+1,7,c
  4182  002B6A  D006               	goto	l622
  4183  002B6C  6C01               	negf	___awmod@dividend,c
  4184  002B6E  1E02               	comf	___awmod@dividend+1,f,c
  4185  002B70  B0D8               	btfsc	status,0,c
  4186  002B72  2A02               	incf	___awmod@dividend+1,f,c
  4187  002B74  0E01               	movlw	1
  4188  002B76  6E06               	movwf	___awmod@sign,c
  4189  002B78                     l622:
  4190  002B78  AE04               	btfss	___awmod@divisor+1,7,c
  4191  002B7A  D004               	goto	l623
  4192  002B7C  6C03               	negf	___awmod@divisor,c
  4193  002B7E  1E04               	comf	___awmod@divisor+1,f,c
  4194  002B80  B0D8               	btfsc	status,0,c
  4195  002B82  2A04               	incf	___awmod@divisor+1,f,c
  4196  002B84                     l623:
  4197  002B84  5003               	movf	___awmod@divisor,w,c
  4198  002B86  1004               	iorwf	___awmod@divisor+1,w,c
  4199  002B88  B4D8               	btfsc	status,2,c
  4200  002B8A  D018               	goto	l630
  4201  002B8C  0E01               	movlw	1
  4202  002B8E  6E05               	movwf	___awmod@counter,c
  4203  002B90  D004               	goto	l625
  4204  002B92  90D8               	bcf	status,0,c
  4205  002B94  3603               	rlcf	___awmod@divisor,f,c
  4206  002B96  3604               	rlcf	___awmod@divisor+1,f,c
  4207  002B98  2A05               	incf	___awmod@counter,f,c
  4208  002B9A                     l625:
  4209  002B9A  AE04               	btfss	___awmod@divisor+1,7,c
  4210  002B9C  D7FA               	goto	l626
  4211  002B9E                     u1940:
  4212  002B9E  5003               	movf	___awmod@divisor,w,c
  4213  002BA0  5C01               	subwf	___awmod@dividend,w,c
  4214  002BA2  5004               	movf	___awmod@divisor+1,w,c
  4215  002BA4  5802               	subwfb	___awmod@dividend+1,w,c
  4216  002BA6  A0D8               	btfss	status,0,c
  4217  002BA8  D004               	goto	l629
  4218  002BAA  5003               	movf	___awmod@divisor,w,c
  4219  002BAC  5E01               	subwf	___awmod@dividend,f,c
  4220  002BAE  5004               	movf	___awmod@divisor+1,w,c
  4221  002BB0  5A02               	subwfb	___awmod@dividend+1,f,c
  4222  002BB2                     l629:
  4223  002BB2  90D8               	bcf	status,0,c
  4224  002BB4  3204               	rrcf	___awmod@divisor+1,f,c
  4225  002BB6  3203               	rrcf	___awmod@divisor,f,c
  4226  002BB8  2E05               	decfsz	___awmod@counter,f,c
  4227  002BBA  D7F1               	goto	u1940
  4228  002BBC                     l630:
  4229  002BBC  5006               	movf	___awmod@sign,w,c
  4230  002BBE  B4D8               	btfsc	status,2,c
  4231  002BC0  D004               	goto	l631
  4232  002BC2  6C01               	negf	___awmod@dividend,c
  4233  002BC4  1E02               	comf	___awmod@dividend+1,f,c
  4234  002BC6  B0D8               	btfsc	status,0,c
  4235  002BC8  2A02               	incf	___awmod@dividend+1,f,c
  4236  002BCA                     l631:
  4237  002BCA  C001  F001         	movff	___awmod@dividend,?___awmod
  4238  002BCE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4239  002BD2  0012               	return	
  4240  002BD4                     __end_of___awmod:
  4241                           	opt stack 0
  4242                           tblptru	equ	0xFF8
  4243                           tblptrh	equ	0xFF7
  4244                           tblptrl	equ	0xFF6
  4245                           tablat	equ	0xFF5
  4246                           prodh	equ	0xFF4
  4247                           prodl	equ	0xFF3
  4248                           postinc0	equ	0xFEE
  4249                           wreg	equ	0xFE8
  4250                           indf2	equ	0xFDF
  4251                           postinc2	equ	0xFDE
  4252                           postdec2	equ	0xFDD
  4253                           fsr2h	equ	0xFDA
  4254                           fsr2l	equ	0xFD9
  4255                           status	equ	0xFD8
  4256                           
  4257 ;; *************** function ___awdiv *****************
  4258 ;; Defined at:
  4259 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;  dividend        2    6[COMRAM] int 
  4262 ;;  divisor         2    8[COMRAM] int 
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;  quotient        2   12[COMRAM] int 
  4265 ;;  sign            1   11[COMRAM] unsigned char 
  4266 ;;  counter         1   10[COMRAM] unsigned char 
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  2    6[COMRAM] int 
  4269 ;; Registers used:
  4270 ;;		wreg, status,2, status,0
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4276 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4277 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;Total ram usage:        8 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; This function calls:
  4283 ;;		Nothing
  4284 ;; This function is called by:
  4285 ;;		_fround
  4286 ;;		_scale
  4287 ;;		_sprintf
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text12
  4292  00296C                     __ptext12:
  4293                           	opt stack 0
  4294  00296C                     ___awdiv:
  4295                           	opt stack 27
  4296                           
  4297                           ;incstack = 0
  4298  00296C  0E00               	movlw	0
  4299  00296E  6E0C               	movwf	___awdiv@sign,c
  4300  002970  AE0A               	btfss	___awdiv@divisor+1,7,c
  4301  002972  D006               	goto	l609
  4302  002974  6C09               	negf	___awdiv@divisor,c
  4303  002976  1E0A               	comf	___awdiv@divisor+1,f,c
  4304  002978  B0D8               	btfsc	status,0,c
  4305  00297A  2A0A               	incf	___awdiv@divisor+1,f,c
  4306  00297C  0E01               	movlw	1
  4307  00297E  6E0C               	movwf	___awdiv@sign,c
  4308  002980                     l609:
  4309  002980  AE08               	btfss	___awdiv@dividend+1,7,c
  4310  002982  D006               	goto	l610
  4311  002984  6C07               	negf	___awdiv@dividend,c
  4312  002986  1E08               	comf	___awdiv@dividend+1,f,c
  4313  002988  B0D8               	btfsc	status,0,c
  4314  00298A  2A08               	incf	___awdiv@dividend+1,f,c
  4315  00298C  0E01               	movlw	1
  4316  00298E  1A0C               	xorwf	___awdiv@sign,f,c
  4317  002990                     l610:
  4318  002990  0E00               	movlw	0
  4319  002992  6E0E               	movwf	___awdiv@quotient+1,c
  4320  002994  0E00               	movlw	0
  4321  002996  6E0D               	movwf	___awdiv@quotient,c
  4322  002998  5009               	movf	___awdiv@divisor,w,c
  4323  00299A  100A               	iorwf	___awdiv@divisor+1,w,c
  4324  00299C  B4D8               	btfsc	status,2,c
  4325  00299E  D01C               	goto	l617
  4326  0029A0  0E01               	movlw	1
  4327  0029A2  6E0B               	movwf	___awdiv@counter,c
  4328  0029A4  D004               	goto	l612
  4329  0029A6  90D8               	bcf	status,0,c
  4330  0029A8  3609               	rlcf	___awdiv@divisor,f,c
  4331  0029AA  360A               	rlcf	___awdiv@divisor+1,f,c
  4332  0029AC  2A0B               	incf	___awdiv@counter,f,c
  4333  0029AE                     l612:
  4334  0029AE  AE0A               	btfss	___awdiv@divisor+1,7,c
  4335  0029B0  D7FA               	goto	l613
  4336  0029B2                     u1880:
  4337  0029B2  90D8               	bcf	status,0,c
  4338  0029B4  360D               	rlcf	___awdiv@quotient,f,c
  4339  0029B6  360E               	rlcf	___awdiv@quotient+1,f,c
  4340  0029B8  5009               	movf	___awdiv@divisor,w,c
  4341  0029BA  5C07               	subwf	___awdiv@dividend,w,c
  4342  0029BC  500A               	movf	___awdiv@divisor+1,w,c
  4343  0029BE  5808               	subwfb	___awdiv@dividend+1,w,c
  4344  0029C0  A0D8               	btfss	status,0,c
  4345  0029C2  D005               	goto	l616
  4346  0029C4  5009               	movf	___awdiv@divisor,w,c
  4347  0029C6  5E07               	subwf	___awdiv@dividend,f,c
  4348  0029C8  500A               	movf	___awdiv@divisor+1,w,c
  4349  0029CA  5A08               	subwfb	___awdiv@dividend+1,f,c
  4350  0029CC  800D               	bsf	___awdiv@quotient,0,c
  4351  0029CE                     l616:
  4352  0029CE  90D8               	bcf	status,0,c
  4353  0029D0  320A               	rrcf	___awdiv@divisor+1,f,c
  4354  0029D2  3209               	rrcf	___awdiv@divisor,f,c
  4355  0029D4  2E0B               	decfsz	___awdiv@counter,f,c
  4356  0029D6  D7ED               	goto	u1880
  4357  0029D8                     l617:
  4358  0029D8  500C               	movf	___awdiv@sign,w,c
  4359  0029DA  B4D8               	btfsc	status,2,c
  4360  0029DC  D004               	goto	l618
  4361  0029DE  6C0D               	negf	___awdiv@quotient,c
  4362  0029E0  1E0E               	comf	___awdiv@quotient+1,f,c
  4363  0029E2  B0D8               	btfsc	status,0,c
  4364  0029E4  2A0E               	incf	___awdiv@quotient+1,f,c
  4365  0029E6                     l618:
  4366  0029E6  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4367  0029EA  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4368  0029EE  0012               	return	
  4369  0029F0                     __end_of___awdiv:
  4370                           	opt stack 0
  4371                           tblptru	equ	0xFF8
  4372                           tblptrh	equ	0xFF7
  4373                           tblptrl	equ	0xFF6
  4374                           tablat	equ	0xFF5
  4375                           prodh	equ	0xFF4
  4376                           prodl	equ	0xFF3
  4377                           postinc0	equ	0xFEE
  4378                           wreg	equ	0xFE8
  4379                           indf2	equ	0xFDF
  4380                           postinc2	equ	0xFDE
  4381                           postdec2	equ	0xFDD
  4382                           fsr2h	equ	0xFDA
  4383                           fsr2l	equ	0xFD9
  4384                           status	equ	0xFD8
  4385                           
  4386 ;; *************** function __tdiv_to_l_ *****************
  4387 ;; Defined at:
  4388 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  f1              3    0[COMRAM] float 
  4391 ;;  f2              3    3[COMRAM] float 
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;  quot            4    9[COMRAM] unsigned long 
  4394 ;;  exp1            1   14[COMRAM] unsigned char 
  4395 ;;  cntr            1   13[COMRAM] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  4    0[COMRAM] unsigned long 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4405 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;Total ram usage:       15 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_sprintf
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text13
  4419  001FA0                     __ptext13:
  4420                           	opt stack 0
  4421  001FA0                     __tdiv_to_l_:
  4422                           	opt stack 28
  4423                           
  4424                           ;incstack = 0
  4425  001FA0  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4426  001FA4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4427  001FA6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4428  001FA8  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4429  001FAA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4430  001FAC  E301               	bnc	u2061
  4431  001FAE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4432  001FB0                     u2061:
  4433  001FB0  5007               	movf	??__tdiv_to_l_,w,c
  4434  001FB2  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4435  001FB4  500F               	movf	__tdiv_to_l_@exp1,w,c
  4436  001FB6  A4D8               	btfss	status,2,c
  4437  001FB8  D009               	goto	l745
  4438  001FBA  0E00               	movlw	0
  4439  001FBC  6E01               	movwf	?__tdiv_to_l_,c
  4440  001FBE  0E00               	movlw	0
  4441  001FC0  6E02               	movwf	?__tdiv_to_l_+1,c
  4442  001FC2  0E00               	movlw	0
  4443  001FC4  6E03               	movwf	?__tdiv_to_l_+2,c
  4444  001FC6  0E00               	movlw	0
  4445  001FC8  6E04               	movwf	?__tdiv_to_l_+3,c
  4446  001FCA  0012               	return	
  4447  001FCC                     l745:
  4448  001FCC  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4449  001FD0  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4450  001FD2  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4451  001FD4  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4452  001FD6  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4453  001FD8  E301               	bnc	u2081
  4454  001FDA  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4455  001FDC                     u2081:
  4456  001FDC  5007               	movf	??__tdiv_to_l_,w,c
  4457  001FDE  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4458  001FE0  500E               	movf	__tdiv_to_l_@cntr,w,c
  4459  001FE2  A4D8               	btfss	status,2,c
  4460  001FE4  D009               	goto	l747
  4461  001FE6  0E00               	movlw	0
  4462  001FE8  6E01               	movwf	?__tdiv_to_l_,c
  4463  001FEA  0E00               	movlw	0
  4464  001FEC  6E02               	movwf	?__tdiv_to_l_+1,c
  4465  001FEE  0E00               	movlw	0
  4466  001FF0  6E03               	movwf	?__tdiv_to_l_+2,c
  4467  001FF2  0E00               	movlw	0
  4468  001FF4  6E04               	movwf	?__tdiv_to_l_+3,c
  4469  001FF6  0012               	return	
  4470  001FF8                     l747:
  4471  001FF8  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4472  001FFA  0EFF               	movlw	255
  4473  001FFC  1601               	andwf	__tdiv_to_l_@f1,f,c
  4474  001FFE  0EFF               	movlw	255
  4475  002000  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4476  002002  0E00               	movlw	0
  4477  002004  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4478  002006  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4479  002008  0EFF               	movlw	255
  4480  00200A  1604               	andwf	__tdiv_to_l_@f2,f,c
  4481  00200C  0EFF               	movlw	255
  4482  00200E  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4483  002010  0E00               	movlw	0
  4484  002012  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4485  002014  0E00               	movlw	0
  4486  002016  6E0A               	movwf	__tdiv_to_l_@quot,c
  4487  002018  0E00               	movlw	0
  4488  00201A  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4489  00201C  0E00               	movlw	0
  4490  00201E  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4491  002020  0E00               	movlw	0
  4492  002022  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4493  002024  0E7F               	movlw	127
  4494  002026  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4495  002028  500E               	movf	__tdiv_to_l_@cntr,w,c
  4496  00202A  0F98               	addlw	152
  4497  00202C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4498  00202E  0E18               	movlw	24
  4499  002030  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4500  002032                     l748:
  4501  002032  90D8               	bcf	status,0,c
  4502  002034  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4503  002036  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4504  002038  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4505  00203A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4506  00203C  5004               	movf	__tdiv_to_l_@f2,w,c
  4507  00203E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4508  002040  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4509  002042  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4510  002044  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4511  002046  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4512  002048  A0D8               	btfss	status,0,c
  4513  00204A  D007               	goto	l749
  4514  00204C  5004               	movf	__tdiv_to_l_@f2,w,c
  4515  00204E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4516  002050  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4517  002052  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4518  002054  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4519  002056  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4520  002058  800A               	bsf	__tdiv_to_l_@quot,0,c
  4521  00205A                     l749:
  4522  00205A  90D8               	bcf	status,0,c
  4523  00205C  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4524  00205E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4525  002060  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4526  002062  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4527  002064  D7E6               	goto	l748
  4528  002066  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4529  002068  D016               	goto	l751
  4530  00206A  500F               	movf	__tdiv_to_l_@exp1,w,c
  4531  00206C  0A80               	xorlw	128
  4532  00206E  0F97               	addlw	151
  4533  002070  B0D8               	btfsc	status,0,c
  4534  002072  D009               	goto	l752
  4535  002074  0E00               	movlw	0
  4536  002076  6E01               	movwf	?__tdiv_to_l_,c
  4537  002078  0E00               	movlw	0
  4538  00207A  6E02               	movwf	?__tdiv_to_l_+1,c
  4539  00207C  0E00               	movlw	0
  4540  00207E  6E03               	movwf	?__tdiv_to_l_+2,c
  4541  002080  0E00               	movlw	0
  4542  002082  6E04               	movwf	?__tdiv_to_l_+3,c
  4543  002084  0012               	return	
  4544  002086                     l752:
  4545  002086  90D8               	bcf	status,0,c
  4546  002088  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4547  00208A  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4548  00208C  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4549  00208E  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4550  002090  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4551  002092  D7F9               	goto	l752
  4552  002094  D015               	goto	u2140
  4553  002096                     l751:
  4554  002096  0E17               	movlw	23
  4555  002098  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4556  00209A  D00F               	goto	l757
  4557  00209C  0E00               	movlw	0
  4558  00209E  6E01               	movwf	?__tdiv_to_l_,c
  4559  0020A0  0E00               	movlw	0
  4560  0020A2  6E02               	movwf	?__tdiv_to_l_+1,c
  4561  0020A4  0E00               	movlw	0
  4562  0020A6  6E03               	movwf	?__tdiv_to_l_+2,c
  4563  0020A8  0E00               	movlw	0
  4564  0020AA  6E04               	movwf	?__tdiv_to_l_+3,c
  4565  0020AC  0012               	return	
  4566  0020AE  90D8               	bcf	status,0,c
  4567  0020B0  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4568  0020B2  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4569  0020B4  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4570  0020B6  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4571  0020B8  060F               	decf	__tdiv_to_l_@exp1,f,c
  4572  0020BA                     l757:
  4573  0020BA  500F               	movf	__tdiv_to_l_@exp1,w,c
  4574  0020BC  A4D8               	btfss	status,2,c
  4575  0020BE  D7F7               	goto	l758
  4576  0020C0                     u2140:
  4577  0020C0  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4578  0020C4  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4579  0020C8  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4580  0020CC  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4581  0020D0  0012               	return		;funcret
  4582  0020D2                     __end_of__tdiv_to_l_:
  4583                           	opt stack 0
  4584                           tblptru	equ	0xFF8
  4585                           tblptrh	equ	0xFF7
  4586                           tblptrl	equ	0xFF6
  4587                           tablat	equ	0xFF5
  4588                           prodh	equ	0xFF4
  4589                           prodl	equ	0xFF3
  4590                           postinc0	equ	0xFEE
  4591                           wreg	equ	0xFE8
  4592                           indf2	equ	0xFDF
  4593                           postinc2	equ	0xFDE
  4594                           postdec2	equ	0xFDD
  4595                           fsr2h	equ	0xFDA
  4596                           fsr2l	equ	0xFD9
  4597                           status	equ	0xFD8
  4598                           
  4599 ;; *************** function __div_to_l_ *****************
  4600 ;; Defined at:
  4601 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;  f1              3    0[COMRAM] unsigned long 
  4604 ;;  f2              3    3[COMRAM] unsigned long 
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;  quot            4    6[COMRAM] unsigned long 
  4607 ;;  exp1            1   11[COMRAM] unsigned char 
  4608 ;;  cntr            1   10[COMRAM] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  4    0[COMRAM] unsigned long 
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, status,0
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4618 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;Total ram usage:       12 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; This function calls:
  4625 ;;		Nothing
  4626 ;; This function is called by:
  4627 ;;		_sprintf
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           	psect	text14
  4632  0020D2                     __ptext14:
  4633                           	opt stack 0
  4634  0020D2                     __div_to_l_:
  4635                           	opt stack 28
  4636                           
  4637                           ;incstack = 0
  4638  0020D2  3403               	rlcf	__div_to_l_@f1+2,w,c
  4639  0020D4  3404               	rlcf	__div_to_l_@f1+3,w,c
  4640  0020D6  6E0C               	movwf	__div_to_l_@exp1,c
  4641  0020D8  500C               	movf	__div_to_l_@exp1,w,c
  4642  0020DA  A4D8               	btfss	status,2,c
  4643  0020DC  D009               	goto	l641
  4644  0020DE  0E00               	movlw	0
  4645  0020E0  6E01               	movwf	?__div_to_l_,c
  4646  0020E2  0E00               	movlw	0
  4647  0020E4  6E02               	movwf	?__div_to_l_+1,c
  4648  0020E6  0E00               	movlw	0
  4649  0020E8  6E03               	movwf	?__div_to_l_+2,c
  4650  0020EA  0E00               	movlw	0
  4651  0020EC  6E04               	movwf	?__div_to_l_+3,c
  4652  0020EE  0012               	return	
  4653  0020F0                     l641:
  4654  0020F0  3406               	rlcf	__div_to_l_@f2+2,w,c
  4655  0020F2  3407               	rlcf	__div_to_l_@f2+3,w,c
  4656  0020F4  6E0B               	movwf	__div_to_l_@cntr,c
  4657  0020F6  500B               	movf	__div_to_l_@cntr,w,c
  4658  0020F8  A4D8               	btfss	status,2,c
  4659  0020FA  D009               	goto	l643
  4660  0020FC  0E00               	movlw	0
  4661  0020FE  6E01               	movwf	?__div_to_l_,c
  4662  002100  0E00               	movlw	0
  4663  002102  6E02               	movwf	?__div_to_l_+1,c
  4664  002104  0E00               	movlw	0
  4665  002106  6E03               	movwf	?__div_to_l_+2,c
  4666  002108  0E00               	movlw	0
  4667  00210A  6E04               	movwf	?__div_to_l_+3,c
  4668  00210C  0012               	return	
  4669  00210E                     l643:
  4670  00210E  8E03               	bsf	__div_to_l_@f1+2,7,c
  4671  002110  0EFF               	movlw	255
  4672  002112  1601               	andwf	__div_to_l_@f1,f,c
  4673  002114  0EFF               	movlw	255
  4674  002116  1602               	andwf	__div_to_l_@f1+1,f,c
  4675  002118  0EFF               	movlw	255
  4676  00211A  1603               	andwf	__div_to_l_@f1+2,f,c
  4677  00211C  0E00               	movlw	0
  4678  00211E  1604               	andwf	__div_to_l_@f1+3,f,c
  4679  002120  8E06               	bsf	__div_to_l_@f2+2,7,c
  4680  002122  0EFF               	movlw	255
  4681  002124  1604               	andwf	__div_to_l_@f2,f,c
  4682  002126  0EFF               	movlw	255
  4683  002128  1605               	andwf	__div_to_l_@f2+1,f,c
  4684  00212A  0EFF               	movlw	255
  4685  00212C  1606               	andwf	__div_to_l_@f2+2,f,c
  4686  00212E  0E00               	movlw	0
  4687  002130  1607               	andwf	__div_to_l_@f2+3,f,c
  4688  002132  0E00               	movlw	0
  4689  002134  6E07               	movwf	__div_to_l_@quot,c
  4690  002136  0E00               	movlw	0
  4691  002138  6E08               	movwf	__div_to_l_@quot+1,c
  4692  00213A  0E00               	movlw	0
  4693  00213C  6E09               	movwf	__div_to_l_@quot+2,c
  4694  00213E  0E00               	movlw	0
  4695  002140  6E0A               	movwf	__div_to_l_@quot+3,c
  4696  002142  0E7F               	movlw	127
  4697  002144  5E0C               	subwf	__div_to_l_@exp1,f,c
  4698  002146  500B               	movf	__div_to_l_@cntr,w,c
  4699  002148  0FA0               	addlw	160
  4700  00214A  5E0C               	subwf	__div_to_l_@exp1,f,c
  4701  00214C  0E20               	movlw	32
  4702  00214E  6E0B               	movwf	__div_to_l_@cntr,c
  4703  002150  90D8               	bcf	status,0,c
  4704  002152  3607               	rlcf	__div_to_l_@quot,f,c
  4705  002154  3608               	rlcf	__div_to_l_@quot+1,f,c
  4706  002156  3609               	rlcf	__div_to_l_@quot+2,f,c
  4707  002158  360A               	rlcf	__div_to_l_@quot+3,f,c
  4708  00215A  5004               	movf	__div_to_l_@f2,w,c
  4709  00215C  5C01               	subwf	__div_to_l_@f1,w,c
  4710  00215E  5005               	movf	__div_to_l_@f2+1,w,c
  4711  002160  5802               	subwfb	__div_to_l_@f1+1,w,c
  4712  002162  5006               	movf	__div_to_l_@f2+2,w,c
  4713  002164  5803               	subwfb	__div_to_l_@f1+2,w,c
  4714  002166  5007               	movf	__div_to_l_@f2+3,w,c
  4715  002168  5804               	subwfb	__div_to_l_@f1+3,w,c
  4716  00216A  A0D8               	btfss	status,0,c
  4717  00216C  D009               	goto	l645
  4718  00216E  5004               	movf	__div_to_l_@f2,w,c
  4719  002170  5E01               	subwf	__div_to_l_@f1,f,c
  4720  002172  5005               	movf	__div_to_l_@f2+1,w,c
  4721  002174  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4722  002176  5006               	movf	__div_to_l_@f2+2,w,c
  4723  002178  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4724  00217A  5007               	movf	__div_to_l_@f2+3,w,c
  4725  00217C  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4726  00217E  8007               	bsf	__div_to_l_@quot,0,c
  4727  002180                     l645:
  4728  002180  90D8               	bcf	status,0,c
  4729  002182  3601               	rlcf	__div_to_l_@f1,f,c
  4730  002184  3602               	rlcf	__div_to_l_@f1+1,f,c
  4731  002186  3603               	rlcf	__div_to_l_@f1+2,f,c
  4732  002188  3604               	rlcf	__div_to_l_@f1+3,f,c
  4733  00218A  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4734  00218C  D7E1               	goto	l644
  4735  00218E  AE0C               	btfss	__div_to_l_@exp1,7,c
  4736  002190  D016               	goto	l647
  4737  002192  500C               	movf	__div_to_l_@exp1,w,c
  4738  002194  0A80               	xorlw	128
  4739  002196  0F9F               	addlw	159
  4740  002198  B0D8               	btfsc	status,0,c
  4741  00219A  D009               	goto	l648
  4742  00219C  0E00               	movlw	0
  4743  00219E  6E01               	movwf	?__div_to_l_,c
  4744  0021A0  0E00               	movlw	0
  4745  0021A2  6E02               	movwf	?__div_to_l_+1,c
  4746  0021A4  0E00               	movlw	0
  4747  0021A6  6E03               	movwf	?__div_to_l_+2,c
  4748  0021A8  0E00               	movlw	0
  4749  0021AA  6E04               	movwf	?__div_to_l_+3,c
  4750  0021AC  0012               	return	
  4751  0021AE                     l648:
  4752  0021AE  90D8               	bcf	status,0,c
  4753  0021B0  320A               	rrcf	__div_to_l_@quot+3,f,c
  4754  0021B2  3209               	rrcf	__div_to_l_@quot+2,f,c
  4755  0021B4  3208               	rrcf	__div_to_l_@quot+1,f,c
  4756  0021B6  3207               	rrcf	__div_to_l_@quot,f,c
  4757  0021B8  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4758  0021BA  D7F9               	goto	l648
  4759  0021BC  D015               	goto	u2210
  4760  0021BE                     l647:
  4761  0021BE  0E1F               	movlw	31
  4762  0021C0  640C               	cpfsgt	__div_to_l_@exp1,c
  4763  0021C2  D00F               	goto	l653
  4764  0021C4  0E00               	movlw	0
  4765  0021C6  6E01               	movwf	?__div_to_l_,c
  4766  0021C8  0E00               	movlw	0
  4767  0021CA  6E02               	movwf	?__div_to_l_+1,c
  4768  0021CC  0E00               	movlw	0
  4769  0021CE  6E03               	movwf	?__div_to_l_+2,c
  4770  0021D0  0E00               	movlw	0
  4771  0021D2  6E04               	movwf	?__div_to_l_+3,c
  4772  0021D4  0012               	return	
  4773  0021D6  90D8               	bcf	status,0,c
  4774  0021D8  3607               	rlcf	__div_to_l_@quot,f,c
  4775  0021DA  3608               	rlcf	__div_to_l_@quot+1,f,c
  4776  0021DC  3609               	rlcf	__div_to_l_@quot+2,f,c
  4777  0021DE  360A               	rlcf	__div_to_l_@quot+3,f,c
  4778  0021E0  060C               	decf	__div_to_l_@exp1,f,c
  4779  0021E2                     l653:
  4780  0021E2  500C               	movf	__div_to_l_@exp1,w,c
  4781  0021E4  A4D8               	btfss	status,2,c
  4782  0021E6  D7F7               	goto	l654
  4783  0021E8                     u2210:
  4784  0021E8  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4785  0021EC  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4786  0021F0  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4787  0021F4  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4788  0021F8  0012               	return		;funcret
  4789  0021FA                     __end_of__div_to_l_:
  4790                           	opt stack 0
  4791                           tblptru	equ	0xFF8
  4792                           tblptrh	equ	0xFF7
  4793                           tblptrl	equ	0xFF6
  4794                           tablat	equ	0xFF5
  4795                           prodh	equ	0xFF4
  4796                           prodl	equ	0xFF3
  4797                           postinc0	equ	0xFEE
  4798                           wreg	equ	0xFE8
  4799                           indf2	equ	0xFDF
  4800                           postinc2	equ	0xFDE
  4801                           postdec2	equ	0xFDD
  4802                           fsr2h	equ	0xFDA
  4803                           fsr2l	equ	0xFD9
  4804                           status	equ	0xFD8
  4805                           
  4806 ;; *************** function ___lltoft *****************
  4807 ;; Defined at:
  4808 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;  c               4    8[COMRAM] unsigned long 
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;  exp             1   16[COMRAM] unsigned char 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  3    8[COMRAM] float 
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4822 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;Total ram usage:        9 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    1
  4829 ;; This function calls:
  4830 ;;		___ftpack
  4831 ;; This function is called by:
  4832 ;;		_sprintf
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text15
  4837  002CA6                     __ptext15:
  4838                           	opt stack 0
  4839  002CA6                     ___lltoft:
  4840                           	opt stack 27
  4841                           
  4842                           ;incstack = 0
  4843  002CA6  0E8E               	movlw	142
  4844  002CA8  6E11               	movwf	___lltoft@exp,c
  4845  002CAA  D006               	goto	l852
  4846  002CAC  90D8               	bcf	status,0,c
  4847  002CAE  320C               	rrcf	___lltoft@c+3,f,c
  4848  002CB0  320B               	rrcf	___lltoft@c+2,f,c
  4849  002CB2  320A               	rrcf	___lltoft@c+1,f,c
  4850  002CB4  3209               	rrcf	___lltoft@c,f,c
  4851  002CB6  2A11               	incf	___lltoft@exp,f,c
  4852  002CB8                     l852:
  4853  002CB8  0E00               	movlw	0
  4854  002CBA  1409               	andwf	___lltoft@c,w,c
  4855  002CBC  6E0D               	movwf	??___lltoft& (0+255),c
  4856  002CBE  0E00               	movlw	0
  4857  002CC0  140A               	andwf	___lltoft@c+1,w,c
  4858  002CC2  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4859  002CC4  0E00               	movlw	0
  4860  002CC6  140B               	andwf	___lltoft@c+2,w,c
  4861  002CC8  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4862  002CCA  0EFF               	movlw	255
  4863  002CCC  140C               	andwf	___lltoft@c+3,w,c
  4864  002CCE  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4865  002CD0  500D               	movf	??___lltoft,w,c
  4866  002CD2  100E               	iorwf	??___lltoft+1,w,c
  4867  002CD4  100F               	iorwf	??___lltoft+2,w,c
  4868  002CD6  1010               	iorwf	??___lltoft+3,w,c
  4869  002CD8  A4D8               	btfss	status,2,c
  4870  002CDA  D7E8               	goto	l853
  4871  002CDC  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4872  002CE0  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4873  002CE4  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4874  002CE8  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4875  002CEC  0E00               	movlw	0
  4876  002CEE  6E05               	movwf	___ftpack@sign,c
  4877  002CF0  EC17  F014         	call	___ftpack	;wreg free
  4878  002CF4  C001  F009         	movff	?___ftpack,?___lltoft
  4879  002CF8  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4880  002CFC  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4881  002D00  0012               	return	
  4882  002D02                     __end_of___lltoft:
  4883                           	opt stack 0
  4884                           tblptru	equ	0xFF8
  4885                           tblptrh	equ	0xFF7
  4886                           tblptrl	equ	0xFF6
  4887                           tablat	equ	0xFF5
  4888                           prodh	equ	0xFF4
  4889                           prodl	equ	0xFF3
  4890                           postinc0	equ	0xFEE
  4891                           wreg	equ	0xFE8
  4892                           indf2	equ	0xFDF
  4893                           postinc2	equ	0xFDE
  4894                           postdec2	equ	0xFDD
  4895                           fsr2h	equ	0xFDA
  4896                           fsr2l	equ	0xFD9
  4897                           status	equ	0xFD8
  4898                           
  4899 ;; *************** function ___llmod *****************
  4900 ;; Defined at:
  4901 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;  dividend        4    0[COMRAM] unsigned long 
  4904 ;;  divisor         4    4[COMRAM] unsigned long 
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  counter         1    8[COMRAM] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  4    0[COMRAM] unsigned long 
  4909 ;; Registers used:
  4910 ;;		wreg, status,2, status,0
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4916 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;Total ram usage:        9 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; This function calls:
  4923 ;;		Nothing
  4924 ;; This function is called by:
  4925 ;;		_sprintf
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           	psect	text16
  4930  002C40                     __ptext16:
  4931                           	opt stack 0
  4932  002C40                     ___llmod:
  4933                           	opt stack 28
  4934                           
  4935                           ;incstack = 0
  4936  002C40  5005               	movf	___llmod@divisor,w,c
  4937  002C42  1006               	iorwf	___llmod@divisor+1,w,c
  4938  002C44  1007               	iorwf	___llmod@divisor+2,w,c
  4939  002C46  1008               	iorwf	___llmod@divisor+3,w,c
  4940  002C48  B4D8               	btfsc	status,2,c
  4941  002C4A  D024               	goto	l846
  4942  002C4C  0E01               	movlw	1
  4943  002C4E  6E09               	movwf	___llmod@counter,c
  4944  002C50  D006               	goto	l841
  4945  002C52  90D8               	bcf	status,0,c
  4946  002C54  3605               	rlcf	___llmod@divisor,f,c
  4947  002C56  3606               	rlcf	___llmod@divisor+1,f,c
  4948  002C58  3607               	rlcf	___llmod@divisor+2,f,c
  4949  002C5A  3608               	rlcf	___llmod@divisor+3,f,c
  4950  002C5C  2A09               	incf	___llmod@counter,f,c
  4951  002C5E                     l841:
  4952  002C5E  AE08               	btfss	___llmod@divisor+3,7,c
  4953  002C60  D7F8               	goto	l842
  4954  002C62                     u2390:
  4955  002C62  5005               	movf	___llmod@divisor,w,c
  4956  002C64  5C01               	subwf	___llmod@dividend,w,c
  4957  002C66  5006               	movf	___llmod@divisor+1,w,c
  4958  002C68  5802               	subwfb	___llmod@dividend+1,w,c
  4959  002C6A  5007               	movf	___llmod@divisor+2,w,c
  4960  002C6C  5803               	subwfb	___llmod@dividend+2,w,c
  4961  002C6E  5008               	movf	___llmod@divisor+3,w,c
  4962  002C70  5804               	subwfb	___llmod@dividend+3,w,c
  4963  002C72  A0D8               	btfss	status,0,c
  4964  002C74  D008               	goto	l845
  4965  002C76  5005               	movf	___llmod@divisor,w,c
  4966  002C78  5E01               	subwf	___llmod@dividend,f,c
  4967  002C7A  5006               	movf	___llmod@divisor+1,w,c
  4968  002C7C  5A02               	subwfb	___llmod@dividend+1,f,c
  4969  002C7E  5007               	movf	___llmod@divisor+2,w,c
  4970  002C80  5A03               	subwfb	___llmod@dividend+2,f,c
  4971  002C82  5008               	movf	___llmod@divisor+3,w,c
  4972  002C84  5A04               	subwfb	___llmod@dividend+3,f,c
  4973  002C86                     l845:
  4974  002C86  90D8               	bcf	status,0,c
  4975  002C88  3208               	rrcf	___llmod@divisor+3,f,c
  4976  002C8A  3207               	rrcf	___llmod@divisor+2,f,c
  4977  002C8C  3206               	rrcf	___llmod@divisor+1,f,c
  4978  002C8E  3205               	rrcf	___llmod@divisor,f,c
  4979  002C90  2E09               	decfsz	___llmod@counter,f,c
  4980  002C92  D7E7               	goto	u2390
  4981  002C94                     l846:
  4982  002C94  C001  F001         	movff	___llmod@dividend,?___llmod
  4983  002C98  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4984  002C9C  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4985  002CA0  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4986  002CA4  0012               	return		;funcret
  4987  002CA6                     __end_of___llmod:
  4988                           	opt stack 0
  4989                           tblptru	equ	0xFF8
  4990                           tblptrh	equ	0xFF7
  4991                           tblptrl	equ	0xFF6
  4992                           tablat	equ	0xFF5
  4993                           prodh	equ	0xFF4
  4994                           prodl	equ	0xFF3
  4995                           postinc0	equ	0xFEE
  4996                           wreg	equ	0xFE8
  4997                           indf2	equ	0xFDF
  4998                           postinc2	equ	0xFDE
  4999                           postdec2	equ	0xFDD
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function ___fttol *****************
  5005 ;; Defined at:
  5006 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  f1              3   42[COMRAM] float 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  lval            4   52[COMRAM] unsigned long 
  5011 ;;  exp1            1   56[COMRAM] unsigned char 
  5012 ;;  sign1           1   51[COMRAM] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  4   42[COMRAM] long 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5022 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;Total ram usage:       15 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; This function calls:
  5029 ;;		Nothing
  5030 ;; This function is called by:
  5031 ;;		_sprintf
  5032 ;;		_buck_boost
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text17
  5037  0022EE                     __ptext17:
  5038                           	opt stack 0
  5039  0022EE                     ___fttol:
  5040                           	opt stack 28
  5041                           
  5042                           ;incstack = 0
  5043  0022EE  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5044  0022F2  6A30               	clrf	(??___fttol+1)& (0+255),c
  5045  0022F4  6A31               	clrf	(??___fttol+2)& (0+255),c
  5046  0022F6  342C               	rlcf	___fttol@f1+1,w,c
  5047  0022F8  362F               	rlcf	??___fttol& (0+255),f,c
  5048  0022FA  E301               	bnc	u2271
  5049  0022FC  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5050  0022FE                     u2271:
  5051  0022FE  502F               	movf	??___fttol,w,c
  5052  002300  6E39               	movwf	___fttol@exp1,c
  5053  002302  5039               	movf	___fttol@exp1,w,c
  5054  002304  A4D8               	btfss	status,2,c
  5055  002306  D009               	goto	l790
  5056  002308  0E00               	movlw	0
  5057  00230A  6E2B               	movwf	?___fttol,c
  5058  00230C  0E00               	movlw	0
  5059  00230E  6E2C               	movwf	?___fttol+1,c
  5060  002310  0E00               	movlw	0
  5061  002312  6E2D               	movwf	?___fttol+2,c
  5062  002314  0E00               	movlw	0
  5063  002316  6E2E               	movwf	?___fttol+3,c
  5064  002318  0012               	return	
  5065  00231A                     l790:
  5066  00231A  0E17               	movlw	23
  5067  00231C  6E2F               	movwf	??___fttol& (0+255),c
  5068  00231E  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5069  002322  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5070  002326  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5071  00232A  282F               	incf	??___fttol,w,c
  5072  00232C  6E33               	movwf	(??___fttol+4)& (0+255),c
  5073  00232E  D004               	goto	u2290
  5074  002330                     u2295:
  5075  002330  90D8               	bcf	status,0,c
  5076  002332  3232               	rrcf	??___fttol+3,f,c
  5077  002334  3231               	rrcf	??___fttol+2,f,c
  5078  002336  3230               	rrcf	??___fttol+1,f,c
  5079  002338                     u2290:
  5080  002338  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5081  00233A  D7FA               	goto	u2295
  5082  00233C  5030               	movf	??___fttol+1,w,c
  5083  00233E  6E34               	movwf	___fttol@sign1,c
  5084  002340  8E2C               	bsf	___fttol@f1+1,7,c
  5085  002342  0EFF               	movlw	255
  5086  002344  162B               	andwf	___fttol@f1,f,c
  5087  002346  0EFF               	movlw	255
  5088  002348  162C               	andwf	___fttol@f1+1,f,c
  5089  00234A  0E00               	movlw	0
  5090  00234C  162D               	andwf	___fttol@f1+2,f,c
  5091  00234E  502B               	movf	___fttol@f1,w,c
  5092  002350  6E35               	movwf	___fttol@lval,c
  5093  002352  502C               	movf	___fttol@f1+1,w,c
  5094  002354  6E36               	movwf	___fttol@lval+1,c
  5095  002356  502D               	movf	___fttol@f1+2,w,c
  5096  002358  6E37               	movwf	___fttol@lval+2,c
  5097  00235A  6A38               	clrf	___fttol@lval+3,c
  5098  00235C  0E8E               	movlw	142
  5099  00235E  5E39               	subwf	___fttol@exp1,f,c
  5100  002360  AE39               	btfss	___fttol@exp1,7,c
  5101  002362  D016               	goto	l792
  5102  002364  5039               	movf	___fttol@exp1,w,c
  5103  002366  0A80               	xorlw	128
  5104  002368  0F8F               	addlw	143
  5105  00236A  B0D8               	btfsc	status,0,c
  5106  00236C  D009               	goto	l793
  5107  00236E  0E00               	movlw	0
  5108  002370  6E2B               	movwf	?___fttol,c
  5109  002372  0E00               	movlw	0
  5110  002374  6E2C               	movwf	?___fttol+1,c
  5111  002376  0E00               	movlw	0
  5112  002378  6E2D               	movwf	?___fttol+2,c
  5113  00237A  0E00               	movlw	0
  5114  00237C  6E2E               	movwf	?___fttol+3,c
  5115  00237E  0012               	return	
  5116  002380                     l793:
  5117  002380  90D8               	bcf	status,0,c
  5118  002382  3238               	rrcf	___fttol@lval+3,f,c
  5119  002384  3237               	rrcf	___fttol@lval+2,f,c
  5120  002386  3236               	rrcf	___fttol@lval+1,f,c
  5121  002388  3235               	rrcf	___fttol@lval,f,c
  5122  00238A  3E39               	incfsz	___fttol@exp1,f,c
  5123  00238C  D7F9               	goto	l793
  5124  00238E  D015               	goto	u2330
  5125  002390                     l792:
  5126  002390  0E17               	movlw	23
  5127  002392  6439               	cpfsgt	___fttol@exp1,c
  5128  002394  D00F               	goto	l798
  5129  002396  0E00               	movlw	0
  5130  002398  6E2B               	movwf	?___fttol,c
  5131  00239A  0E00               	movlw	0
  5132  00239C  6E2C               	movwf	?___fttol+1,c
  5133  00239E  0E00               	movlw	0
  5134  0023A0  6E2D               	movwf	?___fttol+2,c
  5135  0023A2  0E00               	movlw	0
  5136  0023A4  6E2E               	movwf	?___fttol+3,c
  5137  0023A6  0012               	return	
  5138  0023A8  90D8               	bcf	status,0,c
  5139  0023AA  3635               	rlcf	___fttol@lval,f,c
  5140  0023AC  3636               	rlcf	___fttol@lval+1,f,c
  5141  0023AE  3637               	rlcf	___fttol@lval+2,f,c
  5142  0023B0  3638               	rlcf	___fttol@lval+3,f,c
  5143  0023B2  0639               	decf	___fttol@exp1,f,c
  5144  0023B4                     l798:
  5145  0023B4  5039               	movf	___fttol@exp1,w,c
  5146  0023B6  A4D8               	btfss	status,2,c
  5147  0023B8  D7F7               	goto	l799
  5148  0023BA                     u2330:
  5149  0023BA  5034               	movf	___fttol@sign1,w,c
  5150  0023BC  B4D8               	btfsc	status,2,c
  5151  0023BE  D008               	goto	l801
  5152  0023C0  1E38               	comf	___fttol@lval+3,f,c
  5153  0023C2  1E37               	comf	___fttol@lval+2,f,c
  5154  0023C4  1E36               	comf	___fttol@lval+1,f,c
  5155  0023C6  6C35               	negf	___fttol@lval,c
  5156  0023C8  0E00               	movlw	0
  5157  0023CA  2236               	addwfc	___fttol@lval+1,f,c
  5158  0023CC  2237               	addwfc	___fttol@lval+2,f,c
  5159  0023CE  2238               	addwfc	___fttol@lval+3,f,c
  5160  0023D0                     l801:
  5161  0023D0  C035  F02B         	movff	___fttol@lval,?___fttol
  5162  0023D4  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5163  0023D8  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5164  0023DC  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5165  0023E0  0012               	return	
  5166  0023E2                     __end_of___fttol:
  5167                           	opt stack 0
  5168                           tblptru	equ	0xFF8
  5169                           tblptrh	equ	0xFF7
  5170                           tblptrl	equ	0xFF6
  5171                           tablat	equ	0xFF5
  5172                           prodh	equ	0xFF4
  5173                           prodl	equ	0xFF3
  5174                           postinc0	equ	0xFEE
  5175                           wreg	equ	0xFE8
  5176                           indf2	equ	0xFDF
  5177                           postinc2	equ	0xFDE
  5178                           postdec2	equ	0xFDD
  5179                           fsr2h	equ	0xFDA
  5180                           fsr2l	equ	0xFD9
  5181                           status	equ	0xFD8
  5182                           
  5183 ;; *************** function ___ftsub *****************
  5184 ;; Defined at:
  5185 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;  f1              3   57[COMRAM] float 
  5188 ;;  f2              3   60[COMRAM] float 
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;		None
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  3   57[COMRAM] float 
  5193 ;; Registers used:
  5194 ;;		wreg, status,2, status,0, cstack
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5200 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5203 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5204 ;;Total ram usage:        6 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    2
  5207 ;; This function calls:
  5208 ;;		___ftadd
  5209 ;; This function is called by:
  5210 ;;		_sprintf
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214                           	psect	text18
  5215  002EA8                     __ptext18:
  5216                           	opt stack 0
  5217  002EA8                     ___ftsub:
  5218                           	opt stack 26
  5219                           
  5220                           ;incstack = 0
  5221  002EA8  503D               	movf	___ftsub@f2,w,c
  5222  002EAA  103E               	iorwf	___ftsub@f2+1,w,c
  5223  002EAC  103F               	iorwf	___ftsub@f2+2,w,c
  5224  002EAE  B4D8               	btfsc	status,2,c
  5225  002EB0  D006               	goto	l786
  5226  002EB2  0E00               	movlw	0
  5227  002EB4  1A3D               	xorwf	___ftsub@f2,f,c
  5228  002EB6  0E00               	movlw	0
  5229  002EB8  1A3E               	xorwf	___ftsub@f2+1,f,c
  5230  002EBA  0E80               	movlw	128
  5231  002EBC  1A3F               	xorwf	___ftsub@f2+2,f,c
  5232  002EBE                     l786:
  5233  002EBE  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5234  002EC2  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5235  002EC6  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5236  002ECA  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5237  002ECE  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5238  002ED2  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5239  002ED6  ECFA  F00E         	call	___ftadd	;wreg free
  5240  002EDA  C02E  F03A         	movff	?___ftadd,?___ftsub
  5241  002EDE  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5242  002EE2  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5243  002EE6  0012               	return	
  5244  002EE8                     __end_of___ftsub:
  5245                           	opt stack 0
  5246                           tblptru	equ	0xFF8
  5247                           tblptrh	equ	0xFF7
  5248                           tblptrl	equ	0xFF6
  5249                           tablat	equ	0xFF5
  5250                           prodh	equ	0xFF4
  5251                           prodl	equ	0xFF3
  5252                           postinc0	equ	0xFEE
  5253                           wreg	equ	0xFE8
  5254                           indf2	equ	0xFDF
  5255                           postinc2	equ	0xFDE
  5256                           postdec2	equ	0xFDD
  5257                           fsr2h	equ	0xFDA
  5258                           fsr2l	equ	0xFD9
  5259                           status	equ	0xFD8
  5260                           
  5261 ;; *************** function ___ftadd *****************
  5262 ;; Defined at:
  5263 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;  f1              3   45[COMRAM] float 
  5266 ;;  f2              3   48[COMRAM] float 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  exp1            1   56[COMRAM] unsigned char 
  5269 ;;  exp2            1   55[COMRAM] unsigned char 
  5270 ;;  sign            1   54[COMRAM] unsigned char 
  5271 ;; Return value:  Size  Location     Type
  5272 ;;                  3   45[COMRAM] float 
  5273 ;; Registers used:
  5274 ;;		wreg, status,2, status,0, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5280 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;Total ram usage:       12 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:    1
  5287 ;; This function calls:
  5288 ;;		___ftpack
  5289 ;; This function is called by:
  5290 ;;		_sprintf
  5291 ;;		___ftsub
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text19
  5296  001DF4                     __ptext19:
  5297                           	opt stack 0
  5298  001DF4                     ___ftadd:
  5299                           	opt stack 26
  5300                           
  5301                           ;incstack = 0
  5302  001DF4  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5303  001DF8  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5304  001DFA  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5305  001DFC  342F               	rlcf	___ftadd@f1+1,w,c
  5306  001DFE  3634               	rlcf	??___ftadd& (0+255),f,c
  5307  001E00  E301               	bnc	u1581
  5308  001E02  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5309  001E04                     u1581:
  5310  001E04  5034               	movf	??___ftadd,w,c
  5311  001E06  6E39               	movwf	___ftadd@exp1,c
  5312  001E08  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5313  001E0C  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5314  001E0E  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5315  001E10  3432               	rlcf	___ftadd@f2+1,w,c
  5316  001E12  3634               	rlcf	??___ftadd& (0+255),f,c
  5317  001E14  E301               	bnc	u1591
  5318  001E16  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5319  001E18                     u1591:
  5320  001E18  5034               	movf	??___ftadd,w,c
  5321  001E1A  6E38               	movwf	___ftadd@exp2,c
  5322  001E1C  5039               	movf	___ftadd@exp1,w,c
  5323  001E1E  B4D8               	btfsc	status,2,c
  5324  001E20  D00B               	goto	u1620
  5325  001E22  5038               	movf	___ftadd@exp2,w,c
  5326  001E24  5C39               	subwf	___ftadd@exp1,w,c
  5327  001E26  B0D8               	btfsc	status,0,c
  5328  001E28  D00E               	goto	l704
  5329  001E2A  5039               	movf	___ftadd@exp1,w,c
  5330  001E2C  0800               	sublw	0
  5331  001E2E  2438               	addwf	___ftadd@exp2,w,c
  5332  001E30  6E34               	movwf	??___ftadd& (0+255),c
  5333  001E32  0E18               	movlw	24
  5334  001E34  6434               	cpfsgt	??___ftadd,c
  5335  001E36  D007               	goto	l704
  5336  001E38                     u1620:
  5337  001E38  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5338  001E3C  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5339  001E40  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5340  001E44  0012               	return	
  5341  001E46                     l704:
  5342  001E46  5038               	movf	___ftadd@exp2,w,c
  5343  001E48  B4D8               	btfsc	status,2,c
  5344  001E4A  D00B               	goto	u1650
  5345  001E4C  5039               	movf	___ftadd@exp1,w,c
  5346  001E4E  5C38               	subwf	___ftadd@exp2,w,c
  5347  001E50  B0D8               	btfsc	status,0,c
  5348  001E52  D00E               	goto	l708
  5349  001E54  5038               	movf	___ftadd@exp2,w,c
  5350  001E56  0800               	sublw	0
  5351  001E58  2439               	addwf	___ftadd@exp1,w,c
  5352  001E5A  6E34               	movwf	??___ftadd& (0+255),c
  5353  001E5C  0E18               	movlw	24
  5354  001E5E  6434               	cpfsgt	??___ftadd,c
  5355  001E60  D007               	goto	l708
  5356  001E62                     u1650:
  5357  001E62  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5358  001E66  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5359  001E6A  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5360  001E6E  0012               	return	
  5361  001E70                     l708:
  5362  001E70  0E06               	movlw	6
  5363  001E72  6E37               	movwf	___ftadd@sign,c
  5364  001E74  BE30               	btfsc	___ftadd@f1+2,7,c
  5365  001E76  8E37               	bsf	___ftadd@sign,7,c
  5366  001E78  BE33               	btfsc	___ftadd@f2+2,7,c
  5367  001E7A  8C37               	bsf	___ftadd@sign,6,c
  5368  001E7C  8E2F               	bsf	___ftadd@f1+1,7,c
  5369  001E7E  0EFF               	movlw	255
  5370  001E80  162E               	andwf	___ftadd@f1,f,c
  5371  001E82  0EFF               	movlw	255
  5372  001E84  162F               	andwf	___ftadd@f1+1,f,c
  5373  001E86  0E00               	movlw	0
  5374  001E88  1630               	andwf	___ftadd@f1+2,f,c
  5375  001E8A  8E32               	bsf	___ftadd@f2+1,7,c
  5376  001E8C  0EFF               	movlw	255
  5377  001E8E  1631               	andwf	___ftadd@f2,f,c
  5378  001E90  0EFF               	movlw	255
  5379  001E92  1632               	andwf	___ftadd@f2+1,f,c
  5380  001E94  0E00               	movlw	0
  5381  001E96  1633               	andwf	___ftadd@f2+2,f,c
  5382  001E98  5038               	movf	___ftadd@exp2,w,c
  5383  001E9A  5C39               	subwf	___ftadd@exp1,w,c
  5384  001E9C  B0D8               	btfsc	status,0,c
  5385  001E9E  D01B               	goto	l713
  5386  001EA0                     u1680:
  5387  001EA0  90D8               	bcf	status,0,c
  5388  001EA2  3631               	rlcf	___ftadd@f2,f,c
  5389  001EA4  3632               	rlcf	___ftadd@f2+1,f,c
  5390  001EA6  3633               	rlcf	___ftadd@f2+2,f,c
  5391  001EA8  0638               	decf	___ftadd@exp2,f,c
  5392  001EAA  5039               	movf	___ftadd@exp1,w,c
  5393  001EAC  1838               	xorwf	___ftadd@exp2,w,c
  5394  001EAE  B4D8               	btfsc	status,2,c
  5395  001EB0  D00D               	goto	l718
  5396  001EB2  0637               	decf	___ftadd@sign,f,c
  5397  001EB4  C037  F034         	movff	___ftadd@sign,??___ftadd
  5398  001EB8  0E07               	movlw	7
  5399  001EBA  1634               	andwf	??___ftadd,f,c
  5400  001EBC  B4D8               	btfsc	status,2,c
  5401  001EBE  D006               	goto	l718
  5402  001EC0  D7EF               	goto	u1680
  5403  001EC2  90D8               	bcf	status,0,c
  5404  001EC4  3230               	rrcf	___ftadd@f1+2,f,c
  5405  001EC6  322F               	rrcf	___ftadd@f1+1,f,c
  5406  001EC8  322E               	rrcf	___ftadd@f1,f,c
  5407  001ECA  2A39               	incf	___ftadd@exp1,f,c
  5408  001ECC                     l718:
  5409  001ECC  5038               	movf	___ftadd@exp2,w,c
  5410  001ECE  1839               	xorwf	___ftadd@exp1,w,c
  5411  001ED0  B4D8               	btfsc	status,2,c
  5412  001ED2  D01F               	goto	u1750
  5413  001ED4  D7F6               	goto	l719
  5414  001ED6                     l713:
  5415  001ED6  5039               	movf	___ftadd@exp1,w,c
  5416  001ED8  5C38               	subwf	___ftadd@exp2,w,c
  5417  001EDA  B0D8               	btfsc	status,0,c
  5418  001EDC  D01A               	goto	u1750
  5419  001EDE                     u1720:
  5420  001EDE  90D8               	bcf	status,0,c
  5421  001EE0  362E               	rlcf	___ftadd@f1,f,c
  5422  001EE2  362F               	rlcf	___ftadd@f1+1,f,c
  5423  001EE4  3630               	rlcf	___ftadd@f1+2,f,c
  5424  001EE6  0639               	decf	___ftadd@exp1,f,c
  5425  001EE8  5039               	movf	___ftadd@exp1,w,c
  5426  001EEA  1838               	xorwf	___ftadd@exp2,w,c
  5427  001EEC  B4D8               	btfsc	status,2,c
  5428  001EEE  D00D               	goto	l727
  5429  001EF0  0637               	decf	___ftadd@sign,f,c
  5430  001EF2  C037  F034         	movff	___ftadd@sign,??___ftadd
  5431  001EF6  0E07               	movlw	7
  5432  001EF8  1634               	andwf	??___ftadd,f,c
  5433  001EFA  B4D8               	btfsc	status,2,c
  5434  001EFC  D006               	goto	l727
  5435  001EFE  D7EF               	goto	u1720
  5436  001F00  90D8               	bcf	status,0,c
  5437  001F02  3233               	rrcf	___ftadd@f2+2,f,c
  5438  001F04  3232               	rrcf	___ftadd@f2+1,f,c
  5439  001F06  3231               	rrcf	___ftadd@f2,f,c
  5440  001F08  2A38               	incf	___ftadd@exp2,f,c
  5441  001F0A                     l727:
  5442  001F0A  5038               	movf	___ftadd@exp2,w,c
  5443  001F0C  1839               	xorwf	___ftadd@exp1,w,c
  5444  001F0E  A4D8               	btfss	status,2,c
  5445  001F10  D7F7               	goto	l728
  5446  001F12                     u1750:
  5447  001F12  AE37               	btfss	___ftadd@sign,7,c
  5448  001F14  D00C               	goto	l730
  5449  001F16  0EFF               	movlw	255
  5450  001F18  1A2E               	xorwf	___ftadd@f1,f,c
  5451  001F1A  0EFF               	movlw	255
  5452  001F1C  1A2F               	xorwf	___ftadd@f1+1,f,c
  5453  001F1E  0EFF               	movlw	255
  5454  001F20  1A30               	xorwf	___ftadd@f1+2,f,c
  5455  001F22  0E01               	movlw	1
  5456  001F24  262E               	addwf	___ftadd@f1,f,c
  5457  001F26  0E00               	movlw	0
  5458  001F28  222F               	addwfc	___ftadd@f1+1,f,c
  5459  001F2A  0E00               	movlw	0
  5460  001F2C  2230               	addwfc	___ftadd@f1+2,f,c
  5461  001F2E                     l730:
  5462  001F2E  AC37               	btfss	___ftadd@sign,6,c
  5463  001F30  D00C               	goto	l731
  5464  001F32  0EFF               	movlw	255
  5465  001F34  1A31               	xorwf	___ftadd@f2,f,c
  5466  001F36  0EFF               	movlw	255
  5467  001F38  1A32               	xorwf	___ftadd@f2+1,f,c
  5468  001F3A  0EFF               	movlw	255
  5469  001F3C  1A33               	xorwf	___ftadd@f2+2,f,c
  5470  001F3E  0E01               	movlw	1
  5471  001F40  2631               	addwf	___ftadd@f2,f,c
  5472  001F42  0E00               	movlw	0
  5473  001F44  2232               	addwfc	___ftadd@f2+1,f,c
  5474  001F46  0E00               	movlw	0
  5475  001F48  2233               	addwfc	___ftadd@f2+2,f,c
  5476  001F4A                     l731:
  5477  001F4A  0E00               	movlw	0
  5478  001F4C  6E37               	movwf	___ftadd@sign,c
  5479  001F4E  502E               	movf	___ftadd@f1,w,c
  5480  001F50  2631               	addwf	___ftadd@f2,f,c
  5481  001F52  502F               	movf	___ftadd@f1+1,w,c
  5482  001F54  2232               	addwfc	___ftadd@f2+1,f,c
  5483  001F56  5030               	movf	___ftadd@f1+2,w,c
  5484  001F58  2233               	addwfc	___ftadd@f2+2,f,c
  5485  001F5A  AE33               	btfss	___ftadd@f2+2,7,c
  5486  001F5C  D00E               	goto	l732
  5487  001F5E  0EFF               	movlw	255
  5488  001F60  1A31               	xorwf	___ftadd@f2,f,c
  5489  001F62  0EFF               	movlw	255
  5490  001F64  1A32               	xorwf	___ftadd@f2+1,f,c
  5491  001F66  0EFF               	movlw	255
  5492  001F68  1A33               	xorwf	___ftadd@f2+2,f,c
  5493  001F6A  0E01               	movlw	1
  5494  001F6C  2631               	addwf	___ftadd@f2,f,c
  5495  001F6E  0E00               	movlw	0
  5496  001F70  2232               	addwfc	___ftadd@f2+1,f,c
  5497  001F72  0E00               	movlw	0
  5498  001F74  2233               	addwfc	___ftadd@f2+2,f,c
  5499  001F76  0E01               	movlw	1
  5500  001F78  6E37               	movwf	___ftadd@sign,c
  5501  001F7A                     l732:
  5502  001F7A  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5503  001F7E  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5504  001F82  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5505  001F86  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5506  001F8A  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5507  001F8E  EC17  F014         	call	___ftpack	;wreg free
  5508  001F92  C001  F02E         	movff	?___ftpack,?___ftadd
  5509  001F96  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5510  001F9A  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5511  001F9E  0012               	return	
  5512  001FA0                     __end_of___ftadd:
  5513                           	opt stack 0
  5514                           tblptru	equ	0xFF8
  5515                           tblptrh	equ	0xFF7
  5516                           tblptrl	equ	0xFF6
  5517                           tablat	equ	0xFF5
  5518                           prodh	equ	0xFF4
  5519                           prodl	equ	0xFF3
  5520                           postinc0	equ	0xFEE
  5521                           wreg	equ	0xFE8
  5522                           indf2	equ	0xFDF
  5523                           postinc2	equ	0xFDE
  5524                           postdec2	equ	0xFDD
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function ___ftneg *****************
  5530 ;; Defined at:
  5531 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  f1              3    0[COMRAM] float 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  3    0[COMRAM] float 
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5545 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;Total ram usage:        3 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_sprintf
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558                           	psect	text20
  5559  002F70                     __ptext20:
  5560                           	opt stack 0
  5561  002F70                     ___ftneg:
  5562                           	opt stack 28
  5563                           
  5564                           ;incstack = 0
  5565  002F70  5001               	movf	___ftneg@f1,w,c
  5566  002F72  1002               	iorwf	___ftneg@f1+1,w,c
  5567  002F74  1003               	iorwf	___ftneg@f1+2,w,c
  5568  002F76  B4D8               	btfsc	status,2,c
  5569  002F78  D006               	goto	l780
  5570  002F7A  0E00               	movlw	0
  5571  002F7C  1A01               	xorwf	___ftneg@f1,f,c
  5572  002F7E  0E00               	movlw	0
  5573  002F80  1A02               	xorwf	___ftneg@f1+1,f,c
  5574  002F82  0E80               	movlw	128
  5575  002F84  1A03               	xorwf	___ftneg@f1+2,f,c
  5576  002F86                     l780:
  5577  002F86  C001  F001         	movff	___ftneg@f1,?___ftneg
  5578  002F8A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5579  002F8E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5580  002F92  0012               	return		;funcret
  5581  002F94                     __end_of___ftneg:
  5582                           	opt stack 0
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           postinc0	equ	0xFEE
  5590                           wreg	equ	0xFE8
  5591                           indf2	equ	0xFDF
  5592                           postinc2	equ	0xFDE
  5593                           postdec2	equ	0xFDD
  5594                           fsr2h	equ	0xFDA
  5595                           fsr2l	equ	0xFD9
  5596                           status	equ	0xFD8
  5597                           
  5598 ;; *************** function ___ftge *****************
  5599 ;; Defined at:
  5600 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  ff1             3    0[COMRAM] float 
  5603 ;;  ff2             3    3[COMRAM] float 
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;		None
  5606 ;; Return value:  Size  Location     Type
  5607 ;;		None               void
  5608 ;; Registers used:
  5609 ;;		wreg, status,2, status,0
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5615 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;Total ram usage:        9 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; This function calls:
  5622 ;;		Nothing
  5623 ;; This function is called by:
  5624 ;;		_sprintf
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           	psect	text21
  5629  0028DC                     __ptext21:
  5630                           	opt stack 0
  5631  0028DC                     ___ftge:
  5632                           	opt stack 28
  5633                           
  5634                           ;incstack = 0
  5635  0028DC  AE03               	btfss	___ftge@ff1+2,7,c
  5636  0028DE  D016               	goto	l762
  5637  0028E0  C001  F007         	movff	___ftge@ff1,??___ftge
  5638  0028E4  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5639  0028E8  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5640  0028EC  1E07               	comf	??___ftge,f,c
  5641  0028EE  1E08               	comf	??___ftge+1,f,c
  5642  0028F0  1E09               	comf	??___ftge+2,f,c
  5643  0028F2  2A07               	incf	??___ftge,f,c
  5644  0028F4  0E00               	movlw	0
  5645  0028F6  2208               	addwfc	??___ftge+1,f,c
  5646  0028F8  2209               	addwfc	??___ftge+2,f,c
  5647  0028FA  0E00               	movlw	0
  5648  0028FC  2407               	addwf	??___ftge,w,c
  5649  0028FE  6E01               	movwf	___ftge@ff1,c
  5650  002900  0E00               	movlw	0
  5651  002902  2008               	addwfc	??___ftge+1,w,c
  5652  002904  6E02               	movwf	___ftge@ff1+1,c
  5653  002906  0E80               	movlw	128
  5654  002908  2009               	addwfc	??___ftge+2,w,c
  5655  00290A  6E03               	movwf	___ftge@ff1+2,c
  5656  00290C                     l762:
  5657  00290C  AE06               	btfss	___ftge@ff2+2,7,c
  5658  00290E  D016               	goto	l763
  5659  002910  C004  F007         	movff	___ftge@ff2,??___ftge
  5660  002914  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5661  002918  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5662  00291C  1E07               	comf	??___ftge,f,c
  5663  00291E  1E08               	comf	??___ftge+1,f,c
  5664  002920  1E09               	comf	??___ftge+2,f,c
  5665  002922  2A07               	incf	??___ftge,f,c
  5666  002924  0E00               	movlw	0
  5667  002926  2208               	addwfc	??___ftge+1,f,c
  5668  002928  2209               	addwfc	??___ftge+2,f,c
  5669  00292A  0E00               	movlw	0
  5670  00292C  2407               	addwf	??___ftge,w,c
  5671  00292E  6E04               	movwf	___ftge@ff2,c
  5672  002930  0E00               	movlw	0
  5673  002932  2008               	addwfc	??___ftge+1,w,c
  5674  002934  6E05               	movwf	___ftge@ff2+1,c
  5675  002936  0E80               	movlw	128
  5676  002938  2009               	addwfc	??___ftge+2,w,c
  5677  00293A  6E06               	movwf	___ftge@ff2+2,c
  5678  00293C                     l763:
  5679  00293C  0E00               	movlw	0
  5680  00293E  1A01               	xorwf	___ftge@ff1,f,c
  5681  002940  0E00               	movlw	0
  5682  002942  1A02               	xorwf	___ftge@ff1+1,f,c
  5683  002944  0E80               	movlw	128
  5684  002946  1A03               	xorwf	___ftge@ff1+2,f,c
  5685  002948  0E00               	movlw	0
  5686  00294A  1A04               	xorwf	___ftge@ff2,f,c
  5687  00294C  0E00               	movlw	0
  5688  00294E  1A05               	xorwf	___ftge@ff2+1,f,c
  5689  002950  0E80               	movlw	128
  5690  002952  1A06               	xorwf	___ftge@ff2+2,f,c
  5691  002954  5004               	movf	___ftge@ff2,w,c
  5692  002956  5C01               	subwf	___ftge@ff1,w,c
  5693  002958  5005               	movf	___ftge@ff2+1,w,c
  5694  00295A  5802               	subwfb	___ftge@ff1+1,w,c
  5695  00295C  5006               	movf	___ftge@ff2+2,w,c
  5696  00295E  5803               	subwfb	___ftge@ff1+2,w,c
  5697  002960  B0D8               	btfsc	status,0,c
  5698  002962  D002               	goto	l2320
  5699  002964  90D8               	bcf	status,0,c
  5700  002966  0012               	return	
  5701  002968                     l2320:
  5702  002968  80D8               	bsf	status,0,c
  5703  00296A  0012               	return	
  5704  00296C                     __end_of___ftge:
  5705                           	opt stack 0
  5706                           tblptru	equ	0xFF8
  5707                           tblptrh	equ	0xFF7
  5708                           tblptrl	equ	0xFF6
  5709                           tablat	equ	0xFF5
  5710                           prodh	equ	0xFF4
  5711                           prodl	equ	0xFF3
  5712                           postinc0	equ	0xFEE
  5713                           wreg	equ	0xFE8
  5714                           indf2	equ	0xFDF
  5715                           postinc2	equ	0xFDE
  5716                           postdec2	equ	0xFDD
  5717                           fsr2h	equ	0xFDA
  5718                           fsr2l	equ	0xFD9
  5719                           status	equ	0xFD8
  5720                           
  5721 ;; *************** function ___lbtoft *****************
  5722 ;; Defined at:
  5723 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbtoft.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;  c               1    wreg     unsigned char 
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;  c               1   11[COMRAM] unsigned char 
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  3    8[COMRAM] float 
  5730 ;; Registers used:
  5731 ;;		wreg, status,2, status,0, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5737 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;Total ram usage:        4 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    1
  5744 ;; This function calls:
  5745 ;;		___ftpack
  5746 ;; This function is called by:
  5747 ;;		_read_Iout
  5748 ;;		_read_Uout
  5749 ;;		_read_Uin
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text22
  5754  002F94                     __ptext22:
  5755                           	opt stack 0
  5756  002F94                     ___lbtoft:
  5757                           	opt stack 28
  5758                           
  5759                           ;incstack = 0
  5760                           ;___lbtoft@c stored from wreg
  5761  002F94  6E0C               	movwf	___lbtoft@c,c
  5762  002F96  500C               	movf	___lbtoft@c,w,c
  5763  002F98  6E01               	movwf	___ftpack@arg,c
  5764  002F9A  6A02               	clrf	___ftpack@arg+1,c
  5765  002F9C  6A03               	clrf	___ftpack@arg+2,c
  5766  002F9E  0E8E               	movlw	142
  5767  002FA0  6E04               	movwf	___ftpack@exp,c
  5768  002FA2  0E00               	movlw	0
  5769  002FA4  6E05               	movwf	___ftpack@sign,c
  5770  002FA6  EC17  F014         	call	___ftpack	;wreg free
  5771  002FAA  C001  F009         	movff	?___ftpack,?___lbtoft
  5772  002FAE  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  5773  002FB2  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  5774  002FB6  0012               	return	
  5775  002FB8                     __end_of___lbtoft:
  5776                           	opt stack 0
  5777                           tblptru	equ	0xFF8
  5778                           tblptrh	equ	0xFF7
  5779                           tblptrl	equ	0xFF6
  5780                           tablat	equ	0xFF5
  5781                           prodh	equ	0xFF4
  5782                           prodl	equ	0xFF3
  5783                           postinc0	equ	0xFEE
  5784                           wreg	equ	0xFE8
  5785                           indf2	equ	0xFDF
  5786                           postinc2	equ	0xFDE
  5787                           postdec2	equ	0xFDD
  5788                           fsr2h	equ	0xFDA
  5789                           fsr2l	equ	0xFD9
  5790                           status	equ	0xFD8
  5791                           
  5792 ;; *************** function ___ftpack *****************
  5793 ;; Defined at:
  5794 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;  arg             3    0[COMRAM] unsigned um
  5797 ;;  exp             1    3[COMRAM] unsigned char 
  5798 ;;  sign            1    4[COMRAM] unsigned char 
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  3    0[COMRAM] float 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5810 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;Total ram usage:        8 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; This function calls:
  5817 ;;		Nothing
  5818 ;; This function is called by:
  5819 ;;		___ftadd
  5820 ;;		___ftdiv
  5821 ;;		___ftmul
  5822 ;;		___lbtoft
  5823 ;;		___lltoft
  5824 ;; This function uses a non-reentrant model
  5825 ;;
  5826                           
  5827                           	psect	text23
  5828  00282E                     __ptext23:
  5829                           	opt stack 0
  5830  00282E                     ___ftpack:
  5831                           	opt stack 26
  5832                           
  5833                           ;incstack = 0
  5834  00282E  5004               	movf	___ftpack@exp,w,c
  5835  002830  B4D8               	btfsc	status,2,c
  5836  002832  D005               	goto	u1510
  5837  002834  5001               	movf	___ftpack@arg,w,c
  5838  002836  1002               	iorwf	___ftpack@arg+1,w,c
  5839  002838  1003               	iorwf	___ftpack@arg+2,w,c
  5840  00283A  A4D8               	btfss	status,2,c
  5841  00283C  D00C               	goto	l673
  5842  00283E                     u1510:
  5843  00283E  0E00               	movlw	0
  5844  002840  6E01               	movwf	?___ftpack,c
  5845  002842  0E00               	movlw	0
  5846  002844  6E02               	movwf	?___ftpack+1,c
  5847  002846  0E00               	movlw	0
  5848  002848  6E03               	movwf	?___ftpack+2,c
  5849  00284A  0012               	return	
  5850  00284C  2A04               	incf	___ftpack@exp,f,c
  5851  00284E  90D8               	bcf	status,0,c
  5852  002850  3203               	rrcf	___ftpack@arg+2,f,c
  5853  002852  3202               	rrcf	___ftpack@arg+1,f,c
  5854  002854  3201               	rrcf	___ftpack@arg,f,c
  5855  002856                     l673:
  5856  002856  0E00               	movlw	0
  5857  002858  1401               	andwf	___ftpack@arg,w,c
  5858  00285A  6E06               	movwf	??___ftpack& (0+255),c
  5859  00285C  0E00               	movlw	0
  5860  00285E  1402               	andwf	___ftpack@arg+1,w,c
  5861  002860  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5862  002862  0EFE               	movlw	254
  5863  002864  1403               	andwf	___ftpack@arg+2,w,c
  5864  002866  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5865  002868  5006               	movf	??___ftpack,w,c
  5866  00286A  1007               	iorwf	??___ftpack+1,w,c
  5867  00286C  1008               	iorwf	??___ftpack+2,w,c
  5868  00286E  B4D8               	btfsc	status,2,c
  5869  002870  D00C               	goto	l676
  5870  002872  D7EC               	goto	l674
  5871  002874  2A04               	incf	___ftpack@exp,f,c
  5872  002876  0E01               	movlw	1
  5873  002878  2601               	addwf	___ftpack@arg,f,c
  5874  00287A  0E00               	movlw	0
  5875  00287C  2202               	addwfc	___ftpack@arg+1,f,c
  5876  00287E  0E00               	movlw	0
  5877  002880  2203               	addwfc	___ftpack@arg+2,f,c
  5878  002882  90D8               	bcf	status,0,c
  5879  002884  3203               	rrcf	___ftpack@arg+2,f,c
  5880  002886  3202               	rrcf	___ftpack@arg+1,f,c
  5881  002888  3201               	rrcf	___ftpack@arg,f,c
  5882  00288A                     l676:
  5883  00288A  0E00               	movlw	0
  5884  00288C  1401               	andwf	___ftpack@arg,w,c
  5885  00288E  6E06               	movwf	??___ftpack& (0+255),c
  5886  002890  0E00               	movlw	0
  5887  002892  1402               	andwf	___ftpack@arg+1,w,c
  5888  002894  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5889  002896  0EFF               	movlw	255
  5890  002898  1403               	andwf	___ftpack@arg+2,w,c
  5891  00289A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5892  00289C  5006               	movf	??___ftpack,w,c
  5893  00289E  1007               	iorwf	??___ftpack+1,w,c
  5894  0028A0  1008               	iorwf	??___ftpack+2,w,c
  5895  0028A2  B4D8               	btfsc	status,2,c
  5896  0028A4  D006               	goto	l679
  5897  0028A6  D7E6               	goto	l677
  5898  0028A8  0604               	decf	___ftpack@exp,f,c
  5899  0028AA  90D8               	bcf	status,0,c
  5900  0028AC  3601               	rlcf	___ftpack@arg,f,c
  5901  0028AE  3602               	rlcf	___ftpack@arg+1,f,c
  5902  0028B0  3603               	rlcf	___ftpack@arg+2,f,c
  5903  0028B2                     l679:
  5904  0028B2  BE02               	btfsc	___ftpack@arg+1,7,c
  5905  0028B4  D003               	goto	u1550
  5906  0028B6  0E02               	movlw	2
  5907  0028B8  6004               	cpfslt	___ftpack@exp,c
  5908  0028BA  D7F6               	goto	l680
  5909  0028BC                     u1550:
  5910  0028BC  A004               	btfss	___ftpack@exp,0,c
  5911  0028BE  9E02               	bcf	___ftpack@arg+1,7,c
  5912  0028C0  90D8               	bcf	status,0,c
  5913  0028C2  3204               	rrcf	___ftpack@exp,f,c
  5914  0028C4  5004               	movf	___ftpack@exp,w,c
  5915  0028C6  1203               	iorwf	___ftpack@arg+2,f,c
  5916  0028C8  5005               	movf	___ftpack@sign,w,c
  5917  0028CA  A4D8               	btfss	status,2,c
  5918  0028CC  8E03               	bsf	___ftpack@arg+2,7,c
  5919  0028CE  C001  F001         	movff	___ftpack@arg,?___ftpack
  5920  0028D2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5921  0028D6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5922  0028DA  0012               	return	
  5923  0028DC                     __end_of___ftpack:
  5924                           	opt stack 0
  5925                           tblptru	equ	0xFF8
  5926                           tblptrh	equ	0xFF7
  5927                           tblptrl	equ	0xFF6
  5928                           tablat	equ	0xFF5
  5929                           prodh	equ	0xFF4
  5930                           prodl	equ	0xFF3
  5931                           postinc0	equ	0xFEE
  5932                           wreg	equ	0xFE8
  5933                           indf2	equ	0xFDF
  5934                           postinc2	equ	0xFDE
  5935                           postdec2	equ	0xFDD
  5936                           fsr2h	equ	0xFDA
  5937                           fsr2l	equ	0xFD9
  5938                           status	equ	0xFD8
  5939                           
  5940 ;; *************** function _pwm_config *****************
  5941 ;; Defined at:
  5942 ;;		line 46 in file "config.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;		None
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;                  1    wreg      void 
  5949 ;; Registers used:
  5950 ;;		wreg, status,2
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;Total ram usage:        0 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_main
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           	psect	text24
  5970  002F22                     __ptext24:
  5971                           	opt stack 0
  5972  002F22                     _pwm_config:
  5973                           	opt stack 30
  5974                           
  5975                           ;config.c: 48: CCPTMRS0=0b00000000;
  5976                           
  5977                           ;incstack = 0
  5978  002F22  0E00               	movlw	0
  5979  002F24  010F               	movlb	15	; () banked
  5980  002F26  6F49               	movwf	73,b	;volatile
  5981                           
  5982                           ;config.c: 49: CCP2CON=0b00001100;
  5983  002F28  0E0C               	movlw	12
  5984  002F2A  6E66               	movwf	3942,c	;volatile
  5985                           
  5986                           ;config.c: 50: CCP1CON=0b00001100;
  5987  002F2C  0E0C               	movlw	12
  5988  002F2E  6EBD               	movwf	4029,c	;volatile
  5989                           
  5990                           ;config.c: 51: T2CON=0b01111101;
  5991  002F30  0E7D               	movlw	125
  5992  002F32  6EBA               	movwf	4026,c	;volatile
  5993                           
  5994                           ;config.c: 52: PR2=160;
  5995  002F34  0EA0               	movlw	160
  5996  002F36  6EBB               	movwf	4027,c	;volatile
  5997                           
  5998                           ;config.c: 54: CCPR2L=128;
  5999  002F38  0E80               	movlw	128
  6000  002F3A  6E67               	movwf	3943,c	;volatile
  6001                           
  6002                           ;config.c: 55: CCPR1L=64;
  6003  002F3C  0E40               	movlw	64
  6004  002F3E  6EBE               	movwf	4030,c	;volatile
  6005                           
  6006                           ;config.c: 56: CCP3CON=0b00001100;
  6007  002F40  0E0C               	movlw	12
  6008  002F42  6F5D               	movwf	93,b	;volatile
  6009                           
  6010                           ;config.c: 57: CCPR3L=128;
  6011  002F44  0E80               	movlw	128
  6012  002F46  6F5E               	movwf	94,b	;volatile
  6013                           
  6014                           ; BSR set to: 15
  6015  002F48  0012               	return		;funcret
  6016  002F4A                     __end_of_pwm_config:
  6017                           	opt stack 0
  6018                           tblptru	equ	0xFF8
  6019                           tblptrh	equ	0xFF7
  6020                           tblptrl	equ	0xFF6
  6021                           tablat	equ	0xFF5
  6022                           prodh	equ	0xFF4
  6023                           prodl	equ	0xFF3
  6024                           postinc0	equ	0xFEE
  6025                           wreg	equ	0xFE8
  6026                           indf2	equ	0xFDF
  6027                           postinc2	equ	0xFDE
  6028                           postdec2	equ	0xFDD
  6029                           fsr2h	equ	0xFDA
  6030                           fsr2l	equ	0xFD9
  6031                           status	equ	0xFD8
  6032                           
  6033 ;; *************** function _init_io_display *****************
  6034 ;; Defined at:
  6035 ;;		line 88 in file "config.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;		None
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;		None
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  1    wreg      void 
  6042 ;; Registers used:
  6043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;Total ram usage:        2 bytes
  6054 ;; Hardware stack levels used:    1
  6055 ;; Hardware stack levels required when called:    5
  6056 ;; This function calls:
  6057 ;;		_Cursor_Off
  6058 ;;		_I2C_Master_Init
  6059 ;;		_Lcd_Clear
  6060 ;;		_Lcd_Init
  6061 ;;		_Lcd_Set_Cursor
  6062 ;;		_Lcd_Write_String
  6063 ;; This function is called by:
  6064 ;;		_main
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text25
  6069  002BD4                     __ptext25:
  6070                           	opt stack 0
  6071  002BD4                     _init_io_display:
  6072                           	opt stack 25
  6073                           
  6074                           ;config.c: 90: TRISCbits.TRISC3=1;
  6075                           
  6076                           ; BSR set to: 15
  6077                           ;incstack = 0
  6078  002BD4  8694               	bsf	3988,3,c	;volatile
  6079                           
  6080                           ;config.c: 91: TRISCbits.TRISC4=1;
  6081  002BD6  8894               	bsf	3988,4,c	;volatile
  6082                           
  6083                           ;config.c: 92: I2C_Master_Init(100000);
  6084  002BD8  0EA0               	movlw	160
  6085  002BDA  6E0E               	movwf	I2C_Master_Init@c,c
  6086  002BDC  0E86               	movlw	134
  6087  002BDE  6E0F               	movwf	I2C_Master_Init@c+1,c
  6088  002BE0  0E01               	movlw	1
  6089  002BE2  6E10               	movwf	I2C_Master_Init@c+2,c
  6090  002BE4  0E00               	movlw	0
  6091  002BE6  6E11               	movwf	I2C_Master_Init@c+3,c
  6092  002BE8  EC81  F016         	call	_I2C_Master_Init	;wreg free
  6093                           
  6094                           ;config.c: 93: _delay((unsigned long)((100)*(64000000/4000.0)));
  6095  002BEC  0E09               	movlw	9
  6096  002BEE  6E17               	movwf	(??_init_io_display+1)& (0+255),c
  6097  002BF0  0E1E               	movlw	30
  6098  002BF2  6E16               	movwf	??_init_io_display& (0+255),c
  6099  002BF4  0EE4               	movlw	228
  6100  002BF6                     u3047:
  6101  002BF6  2EE8               	decfsz	wreg,f,c
  6102  002BF8  D7FE               	bra	u3047
  6103  002BFA  2E16               	decfsz	??_init_io_display& (0+255),f,c
  6104  002BFC  D7FC               	bra	u3047
  6105  002BFE  2E17               	decfsz	(??_init_io_display+1)& (0+255),f,c
  6106  002C00  D7FA               	bra	u3047
  6107  002C02  D000               	nop2	
  6108                           
  6109                           ;config.c: 94: Lcd_Init();
  6110  002C04  EC39  F015         	call	_Lcd_Init	;wreg free
  6111                           
  6112                           ;config.c: 95: Lcd_Clear();
  6113  002C08  EC12  F018         	call	_Lcd_Clear	;wreg free
  6114                           
  6115                           ;config.c: 96: Cursor_Off();
  6116  002C0C  EC19  F018         	call	_Cursor_Off	;wreg free
  6117                           
  6118                           ;config.c: 97: Lcd_Set_Cursor(1,1);
  6119  002C10  0E01               	movlw	1
  6120  002C12  6E0B               	movwf	Lcd_Set_Cursor@b,c
  6121  002C14  0E01               	movlw	1
  6122  002C16  EC04  F017         	call	_Lcd_Set_Cursor
  6123                           
  6124                           ;config.c: 98: Lcd_Write_String("Test");
  6125  002C1A  0E7C               	movlw	low STR_1
  6126  002C1C  6E08               	movwf	Lcd_Write_String@a,c
  6127  002C1E  0E10               	movlw	high STR_1
  6128  002C20  6E09               	movwf	Lcd_Write_String@a+1,c
  6129  002C22  EC77  F015         	call	_Lcd_Write_String	;wreg free
  6130                           
  6131                           ;config.c: 99: _delay((unsigned long)((100)*(64000000/4000.0)));
  6132  002C26  0E09               	movlw	9
  6133  002C28  6E17               	movwf	(??_init_io_display+1)& (0+255),c
  6134  002C2A  0E1E               	movlw	30
  6135  002C2C  6E16               	movwf	??_init_io_display& (0+255),c
  6136  002C2E  0EE4               	movlw	228
  6137  002C30                     u3057:
  6138  002C30  2EE8               	decfsz	wreg,f,c
  6139  002C32  D7FE               	bra	u3057
  6140  002C34  2E16               	decfsz	??_init_io_display& (0+255),f,c
  6141  002C36  D7FC               	bra	u3057
  6142  002C38  2E17               	decfsz	(??_init_io_display+1)& (0+255),f,c
  6143  002C3A  D7FA               	bra	u3057
  6144  002C3C  D000               	nop2	
  6145  002C3E  0012               	return		;funcret
  6146  002C40                     __end_of_init_io_display:
  6147                           	opt stack 0
  6148                           tblptru	equ	0xFF8
  6149                           tblptrh	equ	0xFF7
  6150                           tblptrl	equ	0xFF6
  6151                           tablat	equ	0xFF5
  6152                           prodh	equ	0xFF4
  6153                           prodl	equ	0xFF3
  6154                           postinc0	equ	0xFEE
  6155                           wreg	equ	0xFE8
  6156                           indf2	equ	0xFDF
  6157                           postinc2	equ	0xFDE
  6158                           postdec2	equ	0xFDD
  6159                           fsr2h	equ	0xFDA
  6160                           fsr2l	equ	0xFD9
  6161                           status	equ	0xFD8
  6162                           
  6163 ;; *************** function _Lcd_Write_String *****************
  6164 ;; Defined at:
  6165 ;;		line 115 in file "i2c_display.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;  a               2    7[COMRAM] PTR unsigned char 
  6168 ;;		 -> STR_9(3), STR_7(4), str_V(8), STR_5(3), 
  6169 ;;		 -> STR_4(3), str_A(8), STR_2(3), STR_1(5), 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  i               2   11[COMRAM] int 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      void 
  6174 ;; Registers used:
  6175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6181 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;Total ram usage:        6 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    4
  6188 ;; This function calls:
  6189 ;;		_Lcd_Write_Char
  6190 ;; This function is called by:
  6191 ;;		_init_io_display
  6192 ;;		_read_Iout
  6193 ;;		_read_Uout
  6194 ;;		_read_Uin
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text26
  6199  002AEE                     __ptext26:
  6200                           	opt stack 0
  6201  002AEE                     _Lcd_Write_String:
  6202                           	opt stack 25
  6203                           
  6204                           ;i2c_display.c: 117: int i;
  6205                           ;i2c_display.c: 118: for(i=0;a[i]!='\0';i++)
  6206                           
  6207                           ;incstack = 0
  6208  002AEE  0E00               	movlw	0
  6209  002AF0  6E0D               	movwf	Lcd_Write_String@i+1,c
  6210  002AF2  0E00               	movlw	0
  6211  002AF4  6E0C               	movwf	Lcd_Write_String@i,c
  6212  002AF6  D01B               	goto	l257
  6213  002AF8                     
  6214                           ;i2c_display.c: 119: Lcd_Write_Char(a[i]);
  6215  002AF8  500C               	movf	Lcd_Write_String@i,w,c
  6216  002AFA  2408               	addwf	Lcd_Write_String@a,w,c
  6217  002AFC  6E0A               	movwf	??_Lcd_Write_String& (0+255),c
  6218  002AFE  500D               	movf	Lcd_Write_String@i+1,w,c
  6219  002B00  2009               	addwfc	Lcd_Write_String@a+1,w,c
  6220  002B02  6E0B               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  6221  002B04  C00A  FFF6         	movff	??_Lcd_Write_String,tblptrl
  6222  002B08  C00B  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  6223  002B0C  0E00               	movlw	low (__smallconst shr (0+16))
  6224  002B0E  6EF8               	movwf	tblptru,c
  6225  002B10  0E0F               	movlw	(high __ramtop+-1)
  6226  002B12  64F7               	cpfsgt	tblptrh,c
  6227  002B14  D003               	bra	u2457
  6228  002B16  0008               	tblrd		*
  6229  002B18  50F5               	movf	tablat,w,c
  6230  002B1A  D005               	bra	u2450
  6231  002B1C                     u2457:
  6232  002B1C  CFF6 FFE9          	movff	tblptrl,fsr0l
  6233  002B20  CFF7 FFEA          	movff	tblptrh,fsr0h
  6234  002B24  50EF               	movf	indf0,w,c
  6235  002B26                     u2450:
  6236  002B26  ECAE  F016         	call	_Lcd_Write_Char
  6237  002B2A  4A0C               	infsnz	Lcd_Write_String@i,f,c
  6238  002B2C  2A0D               	incf	Lcd_Write_String@i+1,f,c
  6239  002B2E                     l257:
  6240  002B2E  500C               	movf	Lcd_Write_String@i,w,c
  6241  002B30  2408               	addwf	Lcd_Write_String@a,w,c
  6242  002B32  6E0A               	movwf	??_Lcd_Write_String& (0+255),c
  6243  002B34  500D               	movf	Lcd_Write_String@i+1,w,c
  6244  002B36  2009               	addwfc	Lcd_Write_String@a+1,w,c
  6245  002B38  6E0B               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  6246  002B3A  C00A  FFF6         	movff	??_Lcd_Write_String,tblptrl
  6247  002B3E  C00B  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  6248  002B42  0E00               	movlw	low (__smallconst shr (0+16))
  6249  002B44  6EF8               	movwf	tblptru,c
  6250  002B46  0E0F               	movlw	(high __ramtop+-1)
  6251  002B48  64F7               	cpfsgt	tblptrh,c
  6252  002B4A  D003               	bra	u2467
  6253  002B4C  0008               	tblrd		*
  6254  002B4E  50F5               	movf	tablat,w,c
  6255  002B50  D005               	bra	u2460
  6256  002B52                     u2467:
  6257  002B52  CFF6 FFE9          	movff	tblptrl,fsr0l
  6258  002B56  CFF7 FFEA          	movff	tblptrh,fsr0h
  6259  002B5A  50EF               	movf	indf0,w,c
  6260  002B5C                     u2460:
  6261  002B5C  0900               	iorlw	0
  6262  002B5E  B4D8               	btfsc	status,2,c
  6263  002B60  0012               	return	
  6264  002B62  D7CA               	goto	l258
  6265  002B64                     __end_of_Lcd_Write_String:
  6266                           	opt stack 0
  6267                           tblptru	equ	0xFF8
  6268                           tblptrh	equ	0xFF7
  6269                           tblptrl	equ	0xFF6
  6270                           tablat	equ	0xFF5
  6271                           prodh	equ	0xFF4
  6272                           prodl	equ	0xFF3
  6273                           indf0	equ	0xFEF
  6274                           postinc0	equ	0xFEE
  6275                           fsr0h	equ	0xFEA
  6276                           fsr0l	equ	0xFE9
  6277                           wreg	equ	0xFE8
  6278                           indf2	equ	0xFDF
  6279                           postinc2	equ	0xFDE
  6280                           postdec2	equ	0xFDD
  6281                           fsr2h	equ	0xFDA
  6282                           fsr2l	equ	0xFD9
  6283                           status	equ	0xFD8
  6284                           
  6285 ;; *************** function _Lcd_Write_Char *****************
  6286 ;; Defined at:
  6287 ;;		line 91 in file "i2c_display.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;  a               1    wreg     unsigned char 
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;  a               1    4[COMRAM] unsigned char 
  6292 ;;  temp            1    6[COMRAM] unsigned char 
  6293 ;;  y               1    5[COMRAM] unsigned char 
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      void 
  6296 ;; Registers used:
  6297 ;;		wreg, status,2, status,0, cstack
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6306 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;Total ram usage:        3 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    3
  6310 ;; This function calls:
  6311 ;;		_Lcd_Port
  6312 ;; This function is called by:
  6313 ;;		_Lcd_Write_String
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           	psect	text27
  6318  002D5C                     __ptext27:
  6319                           	opt stack 0
  6320  002D5C                     _Lcd_Write_Char:
  6321                           	opt stack 25
  6322                           
  6323                           ;incstack = 0
  6324                           ;Lcd_Write_Char@a stored from wreg
  6325  002D5C  6E05               	movwf	Lcd_Write_Char@a,c
  6326                           
  6327                           ;i2c_display.c: 93: char temp,y;
  6328                           ;i2c_display.c: 94: temp = a&0x0F;
  6329  002D5E  5005               	movf	Lcd_Write_Char@a,w,c
  6330  002D60  0B0F               	andlw	15
  6331  002D62  6E07               	movwf	Lcd_Write_Char@temp,c
  6332                           
  6333                           ;i2c_display.c: 95: temp=temp<<4;
  6334  002D64  3807               	swapf	Lcd_Write_Char@temp,w,c
  6335  002D66  0BF0               	andlw	240
  6336  002D68  6E07               	movwf	Lcd_Write_Char@temp,c
  6337                           
  6338                           ;i2c_display.c: 96: y = a&0xF0;
  6339  002D6A  5005               	movf	Lcd_Write_Char@a,w,c
  6340  002D6C  0BF0               	andlw	240
  6341  002D6E  6E06               	movwf	Lcd_Write_Char@y,c
  6342                           
  6343                           ;i2c_display.c: 99: Lcd_Port(0x00 | 0x01 | 0x00 | 0x00);
  6344  002D70  0E01               	movlw	1
  6345  002D72  ECDC  F017         	call	_Lcd_Port
  6346                           
  6347                           ;i2c_display.c: 100: Lcd_Port(y);
  6348  002D76  5006               	movf	Lcd_Write_Char@y,w,c
  6349  002D78  ECDC  F017         	call	_Lcd_Port
  6350                           
  6351                           ;i2c_display.c: 102: Lcd_Port(y | 0x01 | 0x04 | 0x00);
  6352  002D7C  5006               	movf	Lcd_Write_Char@y,w,c
  6353  002D7E  0905               	iorlw	5
  6354  002D80  ECDC  F017         	call	_Lcd_Port
  6355                           
  6356                           ;i2c_display.c: 103: _delay((unsigned long)((40)*(64000000/4000000.0)));
  6357  002D84  0ED5               	movlw	213
  6358  002D86                     u3067:
  6359  002D86  2EE8               	decfsz	wreg,f,c
  6360  002D88  D7FE               	bra	u3067
  6361  002D8A  F000               	nop	
  6362                           
  6363                           ;i2c_display.c: 105: Lcd_Port(y | 0x01 | 0x00 | 0x00);
  6364  002D8C  5006               	movf	Lcd_Write_Char@y,w,c
  6365  002D8E  0901               	iorlw	1
  6366  002D90  ECDC  F017         	call	_Lcd_Port
  6367                           
  6368                           ;i2c_display.c: 106: Lcd_Port(temp);
  6369  002D94  5007               	movf	Lcd_Write_Char@temp,w,c
  6370  002D96  ECDC  F017         	call	_Lcd_Port
  6371                           
  6372                           ;i2c_display.c: 109: Lcd_Port(temp | 0x01 | 0x04 | 0x00);
  6373  002D9A  5007               	movf	Lcd_Write_Char@temp,w,c
  6374  002D9C  0905               	iorlw	5
  6375  002D9E  ECDC  F017         	call	_Lcd_Port
  6376                           
  6377                           ;i2c_display.c: 110: _delay((unsigned long)((40)*(64000000/4000000.0)));
  6378  002DA2  0ED5               	movlw	213
  6379  002DA4                     u3077:
  6380  002DA4  2EE8               	decfsz	wreg,f,c
  6381  002DA6  D7FE               	bra	u3077
  6382  002DA8  F000               	nop	
  6383                           
  6384                           ;i2c_display.c: 112: Lcd_Port(temp | 0x01 | 0x00 | 0x00);
  6385  002DAA  5007               	movf	Lcd_Write_Char@temp,w,c
  6386  002DAC  0901               	iorlw	1
  6387  002DAE  ECDC  F017         	call	_Lcd_Port
  6388  002DB2  0012               	return		;funcret
  6389  002DB4                     __end_of_Lcd_Write_Char:
  6390                           	opt stack 0
  6391                           tblptru	equ	0xFF8
  6392                           tblptrh	equ	0xFF7
  6393                           tblptrl	equ	0xFF6
  6394                           tablat	equ	0xFF5
  6395                           prodh	equ	0xFF4
  6396                           prodl	equ	0xFF3
  6397                           indf0	equ	0xFEF
  6398                           postinc0	equ	0xFEE
  6399                           fsr0h	equ	0xFEA
  6400                           fsr0l	equ	0xFE9
  6401                           wreg	equ	0xFE8
  6402                           indf2	equ	0xFDF
  6403                           postinc2	equ	0xFDE
  6404                           postdec2	equ	0xFDD
  6405                           fsr2h	equ	0xFDA
  6406                           fsr2l	equ	0xFD9
  6407                           status	equ	0xFD8
  6408                           
  6409 ;; *************** function _Lcd_Set_Cursor *****************
  6410 ;; Defined at:
  6411 ;;		line 51 in file "i2c_display.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;  a               1    wreg     unsigned char 
  6414 ;;  b               1   10[COMRAM] unsigned char 
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;  a               1   11[COMRAM] unsigned char 
  6417 ;;  temp            1   14[COMRAM] unsigned char 
  6418 ;;  y               1   13[COMRAM] unsigned char 
  6419 ;;  z               1   12[COMRAM] unsigned char 
  6420 ;; Return value:  Size  Location     Type
  6421 ;;                  1    wreg      void 
  6422 ;; Registers used:
  6423 ;;		wreg, status,2, status,0, cstack
  6424 ;; Tracked objects:
  6425 ;;		On entry : 0/0
  6426 ;;		On exit  : 0/0
  6427 ;;		Unchanged: 0/0
  6428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6429 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;Total ram usage:        5 bytes
  6434 ;; Hardware stack levels used:    1
  6435 ;; Hardware stack levels required when called:    4
  6436 ;; This function calls:
  6437 ;;		_Lcd_Cmd
  6438 ;; This function is called by:
  6439 ;;		_init_io_display
  6440 ;;		_read_Iout
  6441 ;;		_read_Uout
  6442 ;;		_read_Uin
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text28
  6447  002E08                     __ptext28:
  6448                           	opt stack 0
  6449  002E08                     _Lcd_Set_Cursor:
  6450                           	opt stack 25
  6451                           
  6452                           ;incstack = 0
  6453                           ;Lcd_Set_Cursor@a stored from wreg
  6454  002E08  6E0C               	movwf	Lcd_Set_Cursor@a,c
  6455                           
  6456                           ;i2c_display.c: 53: char temp,z,y;
  6457                           ;i2c_display.c: 54: if(a == 1)
  6458  002E0A  040C               	decf	Lcd_Set_Cursor@a,w,c
  6459  002E0C  A4D8               	btfss	status,2,c
  6460  002E0E  D010               	goto	l245
  6461                           
  6462                           ;i2c_display.c: 55: {
  6463                           ;i2c_display.c: 56: temp = 0x80 + b - 1;
  6464  002E10  500B               	movf	Lcd_Set_Cursor@b,w,c
  6465  002E12  0F7F               	addlw	127
  6466  002E14  6E0F               	movwf	Lcd_Set_Cursor@temp,c
  6467                           
  6468                           ;i2c_display.c: 57: z = temp>>4;
  6469  002E16  380F               	swapf	Lcd_Set_Cursor@temp,w,c
  6470  002E18  0B0F               	andlw	15
  6471  002E1A  6E0D               	movwf	Lcd_Set_Cursor@z,c
  6472                           
  6473                           ;i2c_display.c: 58: y = temp & 0x0F;
  6474  002E1C  500F               	movf	Lcd_Set_Cursor@temp,w,c
  6475  002E1E  0B0F               	andlw	15
  6476  002E20  6E0E               	movwf	Lcd_Set_Cursor@y,c
  6477                           
  6478                           ;i2c_display.c: 59: Lcd_Cmd(z);
  6479  002E22  500D               	movf	Lcd_Set_Cursor@z,w,c
  6480  002E24  EC2C  F017         	call	_Lcd_Cmd
  6481                           
  6482                           ;i2c_display.c: 60: Lcd_Cmd(y);
  6483  002E28  500E               	movf	Lcd_Set_Cursor@y,w,c
  6484  002E2A  EC2C  F017         	call	_Lcd_Cmd
  6485                           
  6486                           ;i2c_display.c: 61: }
  6487  002E2E  0012               	return	
  6488  002E30                     l245:
  6489                           
  6490                           ;i2c_display.c: 62: else if(a == 2)
  6491  002E30  0E02               	movlw	2
  6492  002E32  180C               	xorwf	Lcd_Set_Cursor@a,w,c
  6493  002E34  A4D8               	btfss	status,2,c
  6494  002E36  0012               	return	
  6495                           
  6496                           ;i2c_display.c: 63: {
  6497                           ;i2c_display.c: 64: temp = 0xC0 + b - 1;
  6498  002E38  500B               	movf	Lcd_Set_Cursor@b,w,c
  6499  002E3A  0FBF               	addlw	191
  6500  002E3C  6E0F               	movwf	Lcd_Set_Cursor@temp,c
  6501                           
  6502                           ;i2c_display.c: 65: z = temp>>4;
  6503  002E3E  380F               	swapf	Lcd_Set_Cursor@temp,w,c
  6504  002E40  0B0F               	andlw	15
  6505  002E42  6E0D               	movwf	Lcd_Set_Cursor@z,c
  6506                           
  6507                           ;i2c_display.c: 66: y = temp & 0x0F;
  6508  002E44  500F               	movf	Lcd_Set_Cursor@temp,w,c
  6509  002E46  0B0F               	andlw	15
  6510  002E48  6E0E               	movwf	Lcd_Set_Cursor@y,c
  6511                           
  6512                           ;i2c_display.c: 67: Lcd_Cmd(z);
  6513  002E4A  500D               	movf	Lcd_Set_Cursor@z,w,c
  6514  002E4C  EC2C  F017         	call	_Lcd_Cmd
  6515                           
  6516                           ;i2c_display.c: 68: Lcd_Cmd(y);
  6517  002E50  500E               	movf	Lcd_Set_Cursor@y,w,c
  6518  002E52  EC2C  F017         	call	_Lcd_Cmd
  6519  002E56  0012               	return	
  6520  002E58                     __end_of_Lcd_Set_Cursor:
  6521                           	opt stack 0
  6522                           tblptru	equ	0xFF8
  6523                           tblptrh	equ	0xFF7
  6524                           tblptrl	equ	0xFF6
  6525                           tablat	equ	0xFF5
  6526                           prodh	equ	0xFF4
  6527                           prodl	equ	0xFF3
  6528                           indf0	equ	0xFEF
  6529                           postinc0	equ	0xFEE
  6530                           fsr0h	equ	0xFEA
  6531                           fsr0l	equ	0xFE9
  6532                           wreg	equ	0xFE8
  6533                           indf2	equ	0xFDF
  6534                           postinc2	equ	0xFDE
  6535                           postdec2	equ	0xFDD
  6536                           fsr2h	equ	0xFDA
  6537                           fsr2l	equ	0xFD9
  6538                           status	equ	0xFD8
  6539                           
  6540 ;; *************** function _Lcd_Init *****************
  6541 ;; Defined at:
  6542 ;;		line 72 in file "i2c_display.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;		None
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;		None
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  1    wreg      void 
  6549 ;; Registers used:
  6550 ;;		wreg, status,2, status,0, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;Total ram usage:        2 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    4
  6563 ;; This function calls:
  6564 ;;		_Lcd_Cmd
  6565 ;;		_Lcd_Port
  6566 ;; This function is called by:
  6567 ;;		_init_io_display
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text29
  6572  002A72                     __ptext29:
  6573                           	opt stack 0
  6574  002A72                     _Lcd_Init:
  6575                           	opt stack 25
  6576                           
  6577                           ;i2c_display.c: 74: Lcd_Port(0x00);
  6578                           
  6579                           ;incstack = 0
  6580  002A72  0E00               	movlw	0
  6581  002A74  ECDC  F017         	call	_Lcd_Port
  6582                           
  6583                           ;i2c_display.c: 75: _delay((unsigned long)((20)*(64000000/4000.0)));
  6584  002A78  0E02               	movlw	2
  6585  002A7A  6E0C               	movwf	(??_Lcd_Init+1)& (0+255),c
  6586  002A7C  0EA0               	movlw	160
  6587  002A7E  6E0B               	movwf	??_Lcd_Init& (0+255),c
  6588  002A80  0E92               	movlw	146
  6589  002A82                     u3087:
  6590  002A82  2EE8               	decfsz	wreg,f,c
  6591  002A84  D7FE               	bra	u3087
  6592  002A86  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  6593  002A88  D7FC               	bra	u3087
  6594  002A8A  2E0C               	decfsz	(??_Lcd_Init+1)& (0+255),f,c
  6595  002A8C  D7FA               	bra	u3087
  6596  002A8E  D000               	nop2	
  6597                           
  6598                           ;i2c_display.c: 76: Lcd_Cmd(0x03);
  6599  002A90  0E03               	movlw	3
  6600  002A92  EC2C  F017         	call	_Lcd_Cmd
  6601                           
  6602                           ;i2c_display.c: 77: _delay((unsigned long)((5)*(64000000/4000.0)));
  6603  002A96  0E68               	movlw	104
  6604  002A98  6E0B               	movwf	??_Lcd_Init& (0+255),c
  6605  002A9A  0EE4               	movlw	228
  6606  002A9C                     u3097:
  6607  002A9C  2EE8               	decfsz	wreg,f,c
  6608  002A9E  D7FE               	bra	u3097
  6609  002AA0  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  6610  002AA2  D7FC               	bra	u3097
  6611  002AA4  D000               	nop2	
  6612                           
  6613                           ;i2c_display.c: 78: Lcd_Cmd(0x03);
  6614  002AA6  0E03               	movlw	3
  6615  002AA8  EC2C  F017         	call	_Lcd_Cmd
  6616                           
  6617                           ;i2c_display.c: 79: _delay((unsigned long)((11)*(64000000/4000.0)));
  6618  002AAC  0EE5               	movlw	229
  6619  002AAE  6E0B               	movwf	??_Lcd_Init& (0+255),c
  6620  002AB0  0E91               	movlw	145
  6621  002AB2                     u3107:
  6622  002AB2  2EE8               	decfsz	wreg,f,c
  6623  002AB4  D7FE               	bra	u3107
  6624  002AB6  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  6625  002AB8  D7FC               	bra	u3107
  6626  002ABA  F000               	nop	
  6627                           
  6628                           ;i2c_display.c: 80: Lcd_Cmd(0x03);
  6629  002ABC  0E03               	movlw	3
  6630  002ABE  EC2C  F017         	call	_Lcd_Cmd
  6631                           
  6632                           ;i2c_display.c: 82: Lcd_Cmd(0x02);
  6633  002AC2  0E02               	movlw	2
  6634  002AC4  EC2C  F017         	call	_Lcd_Cmd
  6635                           
  6636                           ;i2c_display.c: 83: Lcd_Cmd(0x02);
  6637  002AC8  0E02               	movlw	2
  6638  002ACA  EC2C  F017         	call	_Lcd_Cmd
  6639                           
  6640                           ;i2c_display.c: 84: Lcd_Cmd(0x08);
  6641  002ACE  0E08               	movlw	8
  6642  002AD0  EC2C  F017         	call	_Lcd_Cmd
  6643                           
  6644                           ;i2c_display.c: 85: Lcd_Cmd(0x00);
  6645  002AD4  0E00               	movlw	0
  6646  002AD6  EC2C  F017         	call	_Lcd_Cmd
  6647                           
  6648                           ;i2c_display.c: 86: Lcd_Cmd(0x0C);
  6649  002ADA  0E0C               	movlw	12
  6650  002ADC  EC2C  F017         	call	_Lcd_Cmd
  6651                           
  6652                           ;i2c_display.c: 87: Lcd_Cmd(0x00);
  6653  002AE0  0E00               	movlw	0
  6654  002AE2  EC2C  F017         	call	_Lcd_Cmd
  6655                           
  6656                           ;i2c_display.c: 88: Lcd_Cmd(0x06);
  6657  002AE6  0E06               	movlw	6
  6658  002AE8  EC2C  F017         	call	_Lcd_Cmd
  6659  002AEC  0012               	return		;funcret
  6660  002AEE                     __end_of_Lcd_Init:
  6661                           	opt stack 0
  6662                           tblptru	equ	0xFF8
  6663                           tblptrh	equ	0xFF7
  6664                           tblptrl	equ	0xFF6
  6665                           tablat	equ	0xFF5
  6666                           prodh	equ	0xFF4
  6667                           prodl	equ	0xFF3
  6668                           indf0	equ	0xFEF
  6669                           postinc0	equ	0xFEE
  6670                           fsr0h	equ	0xFEA
  6671                           fsr0l	equ	0xFE9
  6672                           wreg	equ	0xFE8
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _Lcd_Clear *****************
  6681 ;; Defined at:
  6682 ;;		line 45 in file "i2c_display.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;		None
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;		None
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  1    wreg      void 
  6689 ;; Registers used:
  6690 ;;		wreg, status,2, status,0, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;Total ram usage:        0 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; Hardware stack levels required when called:    4
  6703 ;; This function calls:
  6704 ;;		_Lcd_Cmd
  6705 ;; This function is called by:
  6706 ;;		_main
  6707 ;;		_init_io_display
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text30
  6712  003024                     __ptext30:
  6713                           	opt stack 0
  6714  003024                     _Lcd_Clear:
  6715                           	opt stack 25
  6716                           
  6717                           ;i2c_display.c: 47: Lcd_Cmd(0);
  6718                           
  6719                           ;incstack = 0
  6720  003024  0E00               	movlw	0
  6721  003026  EC2C  F017         	call	_Lcd_Cmd
  6722                           
  6723                           ;i2c_display.c: 48: Lcd_Cmd(1);
  6724  00302A  0E01               	movlw	1
  6725  00302C  EC2C  F017         	call	_Lcd_Cmd
  6726  003030  0012               	return		;funcret
  6727  003032                     __end_of_Lcd_Clear:
  6728                           	opt stack 0
  6729                           tblptru	equ	0xFF8
  6730                           tblptrh	equ	0xFF7
  6731                           tblptrl	equ	0xFF6
  6732                           tablat	equ	0xFF5
  6733                           prodh	equ	0xFF4
  6734                           prodl	equ	0xFF3
  6735                           indf0	equ	0xFEF
  6736                           postinc0	equ	0xFEE
  6737                           fsr0h	equ	0xFEA
  6738                           fsr0l	equ	0xFE9
  6739                           wreg	equ	0xFE8
  6740                           indf2	equ	0xFDF
  6741                           postinc2	equ	0xFDE
  6742                           postdec2	equ	0xFDD
  6743                           fsr2h	equ	0xFDA
  6744                           fsr2l	equ	0xFD9
  6745                           status	equ	0xFD8
  6746                           
  6747 ;; *************** function _I2C_Master_Init *****************
  6748 ;; Defined at:
  6749 ;;		line 166 in file "i2c_display.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;  c               4   13[COMRAM] const unsigned long 
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;		None
  6754 ;; Return value:  Size  Location     Type
  6755 ;;                  1    wreg      void 
  6756 ;; Registers used:
  6757 ;;		wreg, status,2, status,0, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6763 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;Total ram usage:        8 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    1
  6770 ;; This function calls:
  6771 ;;		___lldiv
  6772 ;; This function is called by:
  6773 ;;		_init_io_display
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text31
  6778  002D02                     __ptext31:
  6779                           	opt stack 0
  6780  002D02                     _I2C_Master_Init:
  6781                           	opt stack 28
  6782                           
  6783                           ;i2c_display.c: 168: SSP1CON1 = 0b00101000;
  6784                           
  6785                           ;incstack = 0
  6786  002D02  0E28               	movlw	40
  6787  002D04  6EC6               	movwf	4038,c	;volatile
  6788                           
  6789                           ;i2c_display.c: 169: SSP1CON2 = 0x00;
  6790  002D06  0E00               	movlw	0
  6791  002D08  6EC5               	movwf	4037,c	;volatile
  6792                           
  6793                           ;i2c_display.c: 170: SSP1ADD = (64000000/(4*c))-1;
  6794  002D0A  0E00               	movlw	0
  6795  002D0C  6E01               	movwf	___lldiv@dividend,c
  6796  002D0E  0E90               	movlw	144
  6797  002D10  6E02               	movwf	___lldiv@dividend+1,c
  6798  002D12  0ED0               	movlw	208
  6799  002D14  6E03               	movwf	___lldiv@dividend+2,c
  6800  002D16  0E03               	movlw	3
  6801  002D18  6E04               	movwf	___lldiv@dividend+3,c
  6802  002D1A  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6803  002D1E  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6804  002D22  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6805  002D26  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6806  002D2A  0E02               	movlw	2
  6807  002D2C                     u2425:
  6808  002D2C  90D8               	bcf	status,0,c
  6809  002D2E  3612               	rlcf	??_I2C_Master_Init,f,c
  6810  002D30  3613               	rlcf	??_I2C_Master_Init+1,f,c
  6811  002D32  3614               	rlcf	??_I2C_Master_Init+2,f,c
  6812  002D34  3615               	rlcf	??_I2C_Master_Init+3,f,c
  6813  002D36  2EE8               	decfsz	wreg,f,c
  6814  002D38  D7F9               	goto	u2425
  6815  002D3A  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  6816  002D3E  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6817  002D42  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6818  002D46  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6819  002D4A  ECF8  F014         	call	___lldiv	;wreg free
  6820  002D4E  0401               	decf	?___lldiv,w,c
  6821  002D50  6EC8               	movwf	4040,c	;volatile
  6822                           
  6823                           ;i2c_display.c: 171: SSP1STAT = 0x00;
  6824  002D52  0E00               	movlw	0
  6825  002D54  6EC7               	movwf	4039,c	;volatile
  6826                           
  6827                           ;i2c_display.c: 172: TRISCbits.TRISC3=1;
  6828  002D56  8694               	bsf	3988,3,c	;volatile
  6829                           
  6830                           ;i2c_display.c: 173: TRISCbits.TRISC4=1;
  6831  002D58  8894               	bsf	3988,4,c	;volatile
  6832  002D5A  0012               	return		;funcret
  6833  002D5C                     __end_of_I2C_Master_Init:
  6834                           	opt stack 0
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           indf0	equ	0xFEF
  6842                           postinc0	equ	0xFEE
  6843                           fsr0h	equ	0xFEA
  6844                           fsr0l	equ	0xFE9
  6845                           wreg	equ	0xFE8
  6846                           indf2	equ	0xFDF
  6847                           postinc2	equ	0xFDE
  6848                           postdec2	equ	0xFDD
  6849                           fsr2h	equ	0xFDA
  6850                           fsr2l	equ	0xFD9
  6851                           status	equ	0xFD8
  6852                           
  6853 ;; *************** function ___lldiv *****************
  6854 ;; Defined at:
  6855 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;  dividend        4    0[COMRAM] unsigned long 
  6858 ;;  divisor         4    4[COMRAM] unsigned long 
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;  quotient        4    8[COMRAM] unsigned long 
  6861 ;;  counter         1   12[COMRAM] unsigned char 
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  4    0[COMRAM] unsigned long 
  6864 ;; Registers used:
  6865 ;;		wreg, status,2, status,0
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6871 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;Total ram usage:       13 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; This function calls:
  6878 ;;		Nothing
  6879 ;; This function is called by:
  6880 ;;		_I2C_Master_Init
  6881 ;;		_sprintf
  6882 ;; This function uses a non-reentrant model
  6883 ;;
  6884                           
  6885                           	psect	text32
  6886  0029F0                     __ptext32:
  6887                           	opt stack 0
  6888  0029F0                     ___lldiv:
  6889                           	opt stack 28
  6890                           
  6891                           ;incstack = 0
  6892  0029F0  0E00               	movlw	0
  6893  0029F2  6E09               	movwf	___lldiv@quotient,c
  6894  0029F4  0E00               	movlw	0
  6895  0029F6  6E0A               	movwf	___lldiv@quotient+1,c
  6896  0029F8  0E00               	movlw	0
  6897  0029FA  6E0B               	movwf	___lldiv@quotient+2,c
  6898  0029FC  0E00               	movlw	0
  6899  0029FE  6E0C               	movwf	___lldiv@quotient+3,c
  6900  002A00  5005               	movf	___lldiv@divisor,w,c
  6901  002A02  1006               	iorwf	___lldiv@divisor+1,w,c
  6902  002A04  1007               	iorwf	___lldiv@divisor+2,w,c
  6903  002A06  1008               	iorwf	___lldiv@divisor+3,w,c
  6904  002A08  B4D8               	btfsc	status,2,c
  6905  002A0A  D02A               	goto	l836
  6906  002A0C  0E01               	movlw	1
  6907  002A0E  6E0D               	movwf	___lldiv@counter,c
  6908  002A10  D006               	goto	l831
  6909  002A12  90D8               	bcf	status,0,c
  6910  002A14  3605               	rlcf	___lldiv@divisor,f,c
  6911  002A16  3606               	rlcf	___lldiv@divisor+1,f,c
  6912  002A18  3607               	rlcf	___lldiv@divisor+2,f,c
  6913  002A1A  3608               	rlcf	___lldiv@divisor+3,f,c
  6914  002A1C  2A0D               	incf	___lldiv@counter,f,c
  6915  002A1E                     l831:
  6916  002A1E  AE08               	btfss	___lldiv@divisor+3,7,c
  6917  002A20  D7F8               	goto	l832
  6918  002A22                     u2360:
  6919  002A22  90D8               	bcf	status,0,c
  6920  002A24  3609               	rlcf	___lldiv@quotient,f,c
  6921  002A26  360A               	rlcf	___lldiv@quotient+1,f,c
  6922  002A28  360B               	rlcf	___lldiv@quotient+2,f,c
  6923  002A2A  360C               	rlcf	___lldiv@quotient+3,f,c
  6924  002A2C  5005               	movf	___lldiv@divisor,w,c
  6925  002A2E  5C01               	subwf	___lldiv@dividend,w,c
  6926  002A30  5006               	movf	___lldiv@divisor+1,w,c
  6927  002A32  5802               	subwfb	___lldiv@dividend+1,w,c
  6928  002A34  5007               	movf	___lldiv@divisor+2,w,c
  6929  002A36  5803               	subwfb	___lldiv@dividend+2,w,c
  6930  002A38  5008               	movf	___lldiv@divisor+3,w,c
  6931  002A3A  5804               	subwfb	___lldiv@dividend+3,w,c
  6932  002A3C  A0D8               	btfss	status,0,c
  6933  002A3E  D009               	goto	l835
  6934  002A40  5005               	movf	___lldiv@divisor,w,c
  6935  002A42  5E01               	subwf	___lldiv@dividend,f,c
  6936  002A44  5006               	movf	___lldiv@divisor+1,w,c
  6937  002A46  5A02               	subwfb	___lldiv@dividend+1,f,c
  6938  002A48  5007               	movf	___lldiv@divisor+2,w,c
  6939  002A4A  5A03               	subwfb	___lldiv@dividend+2,f,c
  6940  002A4C  5008               	movf	___lldiv@divisor+3,w,c
  6941  002A4E  5A04               	subwfb	___lldiv@dividend+3,f,c
  6942  002A50  8009               	bsf	___lldiv@quotient,0,c
  6943  002A52                     l835:
  6944  002A52  90D8               	bcf	status,0,c
  6945  002A54  3208               	rrcf	___lldiv@divisor+3,f,c
  6946  002A56  3207               	rrcf	___lldiv@divisor+2,f,c
  6947  002A58  3206               	rrcf	___lldiv@divisor+1,f,c
  6948  002A5A  3205               	rrcf	___lldiv@divisor,f,c
  6949  002A5C  2E0D               	decfsz	___lldiv@counter,f,c
  6950  002A5E  D7E1               	goto	u2360
  6951  002A60                     l836:
  6952  002A60  C009  F001         	movff	___lldiv@quotient,?___lldiv
  6953  002A64  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6954  002A68  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6955  002A6C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6956  002A70  0012               	return		;funcret
  6957  002A72                     __end_of___lldiv:
  6958                           	opt stack 0
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodh	equ	0xFF4
  6964                           prodl	equ	0xFF3
  6965                           indf0	equ	0xFEF
  6966                           postinc0	equ	0xFEE
  6967                           fsr0h	equ	0xFEA
  6968                           fsr0l	equ	0xFE9
  6969                           wreg	equ	0xFE8
  6970                           indf2	equ	0xFDF
  6971                           postinc2	equ	0xFDE
  6972                           postdec2	equ	0xFDD
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function _Cursor_Off *****************
  6978 ;; Defined at:
  6979 ;;		line 140 in file "i2c_display.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;		None
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;		None
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  1    wreg      void 
  6986 ;; Registers used:
  6987 ;;		wreg, status,2, status,0, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;Total ram usage:        0 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    4
  7000 ;; This function calls:
  7001 ;;		_Lcd_Cmd
  7002 ;; This function is called by:
  7003 ;;		_init_io_display
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	text33
  7008  003032                     __ptext33:
  7009                           	opt stack 0
  7010  003032                     _Cursor_Off:
  7011                           	opt stack 25
  7012                           
  7013                           ;i2c_display.c: 142: Lcd_Cmd(0x00);
  7014                           
  7015                           ;incstack = 0
  7016  003032  0E00               	movlw	0
  7017  003034  EC2C  F017         	call	_Lcd_Cmd
  7018                           
  7019                           ;i2c_display.c: 143: Lcd_Cmd(0x0C);
  7020  003038  0E0C               	movlw	12
  7021  00303A  EC2C  F017         	call	_Lcd_Cmd
  7022  00303E  0012               	return		;funcret
  7023  003040                     __end_of_Cursor_Off:
  7024                           	opt stack 0
  7025                           tblptru	equ	0xFF8
  7026                           tblptrh	equ	0xFF7
  7027                           tblptrl	equ	0xFF6
  7028                           tablat	equ	0xFF5
  7029                           prodh	equ	0xFF4
  7030                           prodl	equ	0xFF3
  7031                           indf0	equ	0xFEF
  7032                           postinc0	equ	0xFEE
  7033                           fsr0h	equ	0xFEA
  7034                           fsr0l	equ	0xFE9
  7035                           wreg	equ	0xFE8
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           postdec2	equ	0xFDD
  7039                           fsr2h	equ	0xFDA
  7040                           fsr2l	equ	0xFD9
  7041                           status	equ	0xFD8
  7042                           
  7043 ;; *************** function _Lcd_Cmd *****************
  7044 ;; Defined at:
  7045 ;;		line 26 in file "i2c_display.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;  a               1    wreg     unsigned char 
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;  a               1    9[COMRAM] unsigned char 
  7050 ;;  buff            2    7[COMRAM] int 
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  1    wreg      void 
  7053 ;; Registers used:
  7054 ;;		wreg, status,2, status,0, cstack
  7055 ;; Tracked objects:
  7056 ;;		On entry : 0/0
  7057 ;;		On exit  : 0/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;Total ram usage:        6 bytes
  7065 ;; Hardware stack levels used:    1
  7066 ;; Hardware stack levels required when called:    3
  7067 ;; This function calls:
  7068 ;;		_Lcd_Port
  7069 ;; This function is called by:
  7070 ;;		_Lcd_Clear
  7071 ;;		_Lcd_Set_Cursor
  7072 ;;		_Lcd_Init
  7073 ;;		_Cursor_Off
  7074 ;;		_Lcd_Shift_Right
  7075 ;;		_Lcd_Shift_Left
  7076 ;;		_Cursor_On
  7077 ;;		_Cursor_Left
  7078 ;;		_Cursor_Right
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text34
  7083  002E58                     __ptext34:
  7084                           	opt stack 0
  7085  002E58                     _Lcd_Cmd:
  7086                           	opt stack 25
  7087                           
  7088                           ;incstack = 0
  7089                           ;Lcd_Cmd@a stored from wreg
  7090  002E58  6E0A               	movwf	Lcd_Cmd@a,c
  7091                           
  7092                           ;i2c_display.c: 28: int buff;
  7093                           ;i2c_display.c: 29: a=a<<4;
  7094  002E5A  380A               	swapf	Lcd_Cmd@a,w,c
  7095  002E5C  0BF0               	andlw	240
  7096  002E5E  6E0A               	movwf	Lcd_Cmd@a,c
  7097                           
  7098                           ;i2c_display.c: 32: Lcd_Port(0x00 || 0x00 || 0x00 || 0x00);
  7099  002E60  0E01               	movlw	1
  7100  002E62  6E07               	movwf	_Lcd_Cmd$617,c
  7101  002E64  0E00               	movlw	0
  7102  002E66  6E07               	movwf	_Lcd_Cmd$617,c
  7103  002E68  5007               	movf	_Lcd_Cmd$617,w,c
  7104  002E6A  ECDC  F017         	call	_Lcd_Port
  7105                           
  7106                           ;i2c_display.c: 34: Lcd_Port(a);
  7107  002E6E  500A               	movf	Lcd_Cmd@a,w,c
  7108  002E70  ECDC  F017         	call	_Lcd_Port
  7109                           
  7110                           ;i2c_display.c: 37: buff=a | 0x00 | 0x04 | 0x00;
  7111  002E74  0E04               	movlw	4
  7112  002E76  C00A  F005         	movff	Lcd_Cmd@a,??_Lcd_Cmd
  7113  002E7A  6A06               	clrf	(??_Lcd_Cmd+1)& (0+255),c
  7114  002E7C  1005               	iorwf	??_Lcd_Cmd,w,c
  7115  002E7E  6E08               	movwf	Lcd_Cmd@buff,c
  7116  002E80  5006               	movf	??_Lcd_Cmd+1,w,c
  7117  002E82  6E09               	movwf	Lcd_Cmd@buff+1,c
  7118                           
  7119                           ;i2c_display.c: 38: Lcd_Port(buff);
  7120  002E84  5008               	movf	Lcd_Cmd@buff,w,c
  7121  002E86  ECDC  F017         	call	_Lcd_Port
  7122                           
  7123                           ;i2c_display.c: 39: _delay((unsigned long)((4)*(64000000/4000.0)));
  7124  002E8A  0E54               	movlw	84
  7125  002E8C  6E05               	movwf	??_Lcd_Cmd& (0+255),c
  7126  002E8E  0E1C               	movlw	28
  7127  002E90                     u3117:
  7128  002E90  2EE8               	decfsz	wreg,f,c
  7129  002E92  D7FE               	bra	u3117
  7130  002E94  2E05               	decfsz	??_Lcd_Cmd& (0+255),f,c
  7131  002E96  D7FC               	bra	u3117
  7132  002E98  D000               	nop2	
  7133                           
  7134                           ;i2c_display.c: 41: buff=a | 0x00 | 0x00 | 0x00;
  7135  002E9A  C00A  F008         	movff	Lcd_Cmd@a,Lcd_Cmd@buff
  7136  002E9E  6A09               	clrf	Lcd_Cmd@buff+1,c
  7137                           
  7138                           ;i2c_display.c: 42: Lcd_Port(buff);
  7139  002EA0  5008               	movf	Lcd_Cmd@buff,w,c
  7140  002EA2  ECDC  F017         	call	_Lcd_Port
  7141  002EA6  0012               	return		;funcret
  7142  002EA8                     __end_of_Lcd_Cmd:
  7143                           	opt stack 0
  7144                           tblptru	equ	0xFF8
  7145                           tblptrh	equ	0xFF7
  7146                           tblptrl	equ	0xFF6
  7147                           tablat	equ	0xFF5
  7148                           prodh	equ	0xFF4
  7149                           prodl	equ	0xFF3
  7150                           indf0	equ	0xFEF
  7151                           postinc0	equ	0xFEE
  7152                           fsr0h	equ	0xFEA
  7153                           fsr0l	equ	0xFE9
  7154                           wreg	equ	0xFE8
  7155                           indf2	equ	0xFDF
  7156                           postinc2	equ	0xFDE
  7157                           postdec2	equ	0xFDD
  7158                           fsr2h	equ	0xFDA
  7159                           fsr2l	equ	0xFD9
  7160                           status	equ	0xFD8
  7161                           
  7162 ;; *************** function _Lcd_Port *****************
  7163 ;; Defined at:
  7164 ;;		line 20 in file "i2c_display.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;  data            1    wreg     unsigned char 
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;  data            1    3[COMRAM] unsigned char 
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  1    wreg      void 
  7171 ;; Registers used:
  7172 ;;		wreg, status,2, status,0, cstack
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;Total ram usage:        1 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:    2
  7185 ;; This function calls:
  7186 ;;		_I2C_Master_Start
  7187 ;;		_I2C_Master_Stop
  7188 ;;		_I2C_Write_Display
  7189 ;; This function is called by:
  7190 ;;		_Lcd_Cmd
  7191 ;;		_Lcd_Init
  7192 ;;		_Lcd_Write_Char
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text35
  7197  002FB8                     __ptext35:
  7198                           	opt stack 0
  7199  002FB8                     _Lcd_Port:
  7200                           	opt stack 25
  7201                           
  7202                           ;incstack = 0
  7203                           ;Lcd_Port@data stored from wreg
  7204  002FB8  6E04               	movwf	Lcd_Port@data,c
  7205  002FBA  EC29  F018         	call	_I2C_Master_Start	;wreg free
  7206                           
  7207                           ;i2c_display.c: 22: I2C_Write_Display(0x70);
  7208  002FBE  0E00               	movlw	0
  7209  002FC0  6E03               	movwf	I2C_Write_Display@d+1,c
  7210  002FC2  0E70               	movlw	112
  7211  002FC4  6E02               	movwf	I2C_Write_Display@d,c
  7212  002FC6  EC20  F018         	call	_I2C_Write_Display	;wreg free
  7213                           
  7214                           ;i2c_display.c: 23: I2C_Write_Display(data);
  7215  002FCA  C004  F002         	movff	Lcd_Port@data,I2C_Write_Display@d
  7216  002FCE  6A03               	clrf	I2C_Write_Display@d+1,c
  7217  002FD0  EC20  F018         	call	_I2C_Write_Display	;wreg free
  7218                           
  7219                           ;i2c_display.c: 24: I2C_Master_Stop();
  7220  002FD4  EC25  F018         	call	_I2C_Master_Stop	;wreg free
  7221  002FD8  0012               	return		;funcret
  7222  002FDA                     __end_of_Lcd_Port:
  7223                           	opt stack 0
  7224                           tblptru	equ	0xFF8
  7225                           tblptrh	equ	0xFF7
  7226                           tblptrl	equ	0xFF6
  7227                           tablat	equ	0xFF5
  7228                           prodh	equ	0xFF4
  7229                           prodl	equ	0xFF3
  7230                           indf0	equ	0xFEF
  7231                           postinc0	equ	0xFEE
  7232                           fsr0h	equ	0xFEA
  7233                           fsr0l	equ	0xFE9
  7234                           wreg	equ	0xFE8
  7235                           indf2	equ	0xFDF
  7236                           postinc2	equ	0xFDE
  7237                           postdec2	equ	0xFDD
  7238                           fsr2h	equ	0xFDA
  7239                           fsr2l	equ	0xFD9
  7240                           status	equ	0xFD8
  7241                           
  7242 ;; *************** function _I2C_Write_Display *****************
  7243 ;; Defined at:
  7244 ;;		line 207 in file "i2c_display.c"
  7245 ;; Parameters:    Size  Location     Type
  7246 ;;  d               2    1[COMRAM] unsigned int 
  7247 ;; Auto vars:     Size  Location     Type
  7248 ;;		None
  7249 ;; Return value:  Size  Location     Type
  7250 ;;                  1    wreg      void 
  7251 ;; Registers used:
  7252 ;;		wreg, status,2, status,0, cstack
  7253 ;; Tracked objects:
  7254 ;;		On entry : 0/0
  7255 ;;		On exit  : 0/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7261 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7262 ;;Total ram usage:        2 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:    1
  7265 ;; This function calls:
  7266 ;;		_I2C_Master_Wait
  7267 ;; This function is called by:
  7268 ;;		_Lcd_Port
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           	psect	text36
  7273  003040                     __ptext36:
  7274                           	opt stack 0
  7275  003040                     _I2C_Write_Display:
  7276                           	opt stack 25
  7277                           
  7278                           ;i2c_display.c: 209: I2C_Master_Wait();
  7279                           
  7280                           ;incstack = 0
  7281  003040  EC09  F018         	call	_I2C_Master_Wait	;wreg free
  7282                           
  7283                           ;i2c_display.c: 210: SSP1BUF = d;
  7284  003044  C002  FFC9         	movff	I2C_Write_Display@d,4041	;volatile
  7285  003048  0012               	return		;funcret
  7286  00304A                     __end_of_I2C_Write_Display:
  7287                           	opt stack 0
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           indf0	equ	0xFEF
  7295                           postinc0	equ	0xFEE
  7296                           fsr0h	equ	0xFEA
  7297                           fsr0l	equ	0xFE9
  7298                           wreg	equ	0xFE8
  7299                           indf2	equ	0xFDF
  7300                           postinc2	equ	0xFDE
  7301                           postdec2	equ	0xFDD
  7302                           fsr2h	equ	0xFDA
  7303                           fsr2l	equ	0xFD9
  7304                           status	equ	0xFD8
  7305                           
  7306 ;; *************** function _I2C_Master_Stop *****************
  7307 ;; Defined at:
  7308 ;;		line 195 in file "i2c_display.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;		None
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;		None
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      void 
  7315 ;; Registers used:
  7316 ;;		wreg, status,2, status,0, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;Total ram usage:        0 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    1
  7329 ;; This function calls:
  7330 ;;		_I2C_Master_Wait
  7331 ;; This function is called by:
  7332 ;;		_Lcd_Port
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text37
  7337  00304A                     __ptext37:
  7338                           	opt stack 0
  7339  00304A                     _I2C_Master_Stop:
  7340                           	opt stack 25
  7341                           
  7342                           ;i2c_display.c: 197: I2C_Master_Wait();
  7343                           
  7344                           ;incstack = 0
  7345  00304A  EC09  F018         	call	_I2C_Master_Wait	;wreg free
  7346                           
  7347                           ;i2c_display.c: 198: SSP1CON2bits.PEN = 1;
  7348  00304E  84C5               	bsf	4037,2,c	;volatile
  7349  003050  0012               	return		;funcret
  7350  003052                     __end_of_I2C_Master_Stop:
  7351                           	opt stack 0
  7352                           tblptru	equ	0xFF8
  7353                           tblptrh	equ	0xFF7
  7354                           tblptrl	equ	0xFF6
  7355                           tablat	equ	0xFF5
  7356                           prodh	equ	0xFF4
  7357                           prodl	equ	0xFF3
  7358                           indf0	equ	0xFEF
  7359                           postinc0	equ	0xFEE
  7360                           fsr0h	equ	0xFEA
  7361                           fsr0l	equ	0xFE9
  7362                           wreg	equ	0xFE8
  7363                           indf2	equ	0xFDF
  7364                           postinc2	equ	0xFDE
  7365                           postdec2	equ	0xFDD
  7366                           fsr2h	equ	0xFDA
  7367                           fsr2l	equ	0xFD9
  7368                           status	equ	0xFD8
  7369                           
  7370 ;; *************** function _I2C_Master_Start *****************
  7371 ;; Defined at:
  7372 ;;		line 183 in file "i2c_display.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;		None
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;		None
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, status,2, status,0, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7390 ;;Total ram usage:        0 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:    1
  7393 ;; This function calls:
  7394 ;;		_I2C_Master_Wait
  7395 ;; This function is called by:
  7396 ;;		_Lcd_Port
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           	psect	text38
  7401  003052                     __ptext38:
  7402                           	opt stack 0
  7403  003052                     _I2C_Master_Start:
  7404                           	opt stack 25
  7405                           
  7406                           ;i2c_display.c: 185: I2C_Master_Wait();
  7407                           
  7408                           ;incstack = 0
  7409  003052  EC09  F018         	call	_I2C_Master_Wait	;wreg free
  7410                           
  7411                           ;i2c_display.c: 186: SSP1CON2bits.SEN = 1;
  7412  003056  80C5               	bsf	4037,0,c	;volatile
  7413  003058  0012               	return		;funcret
  7414  00305A                     __end_of_I2C_Master_Start:
  7415                           	opt stack 0
  7416                           tblptru	equ	0xFF8
  7417                           tblptrh	equ	0xFF7
  7418                           tblptrl	equ	0xFF6
  7419                           tablat	equ	0xFF5
  7420                           prodh	equ	0xFF4
  7421                           prodl	equ	0xFF3
  7422                           indf0	equ	0xFEF
  7423                           postinc0	equ	0xFEE
  7424                           fsr0h	equ	0xFEA
  7425                           fsr0l	equ	0xFE9
  7426                           wreg	equ	0xFE8
  7427                           indf2	equ	0xFDF
  7428                           postinc2	equ	0xFDE
  7429                           postdec2	equ	0xFDD
  7430                           fsr2h	equ	0xFDA
  7431                           fsr2l	equ	0xFD9
  7432                           status	equ	0xFD8
  7433                           
  7434 ;; *************** function _I2C_Master_Wait *****************
  7435 ;; Defined at:
  7436 ;;		line 176 in file "i2c_display.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;		None
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;		None
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      void 
  7443 ;; Registers used:
  7444 ;;		wreg, status,2, status,0
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;Total ram usage:        1 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; This function calls:
  7457 ;;		Nothing
  7458 ;; This function is called by:
  7459 ;;		_I2C_Master_Start
  7460 ;;		_I2C_Master_Stop
  7461 ;;		_I2C_Write_Display
  7462 ;;		_I2C_Master_RepeatedStart
  7463 ;;		_I2C_Master_Write
  7464 ;;		_I2C_Master_Read
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           	psect	text39
  7469  003012                     __ptext39:
  7470                           	opt stack 0
  7471  003012                     _I2C_Master_Wait:
  7472                           	opt stack 25
  7473                           
  7474                           ;i2c_display.c: 178: while ((SSP1STAT & 0x04) || (SSP1CON2 & 0x1F));
  7475                           
  7476                           ;incstack = 0
  7477  003012  B4C7               	btfsc	4039,2,c	;volatile
  7478  003014  D7FE               	goto	_I2C_Master_Wait
  7479  003016  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  7480  00301A  0E1F               	movlw	31
  7481  00301C  1601               	andwf	??_I2C_Master_Wait,f,c
  7482  00301E  B4D8               	btfsc	status,2,c
  7483  003020  0012               	return	
  7484  003022  D7F7               	goto	_I2C_Master_Wait
  7485  003024                     __end_of_I2C_Master_Wait:
  7486                           	opt stack 0
  7487                           tblptru	equ	0xFF8
  7488                           tblptrh	equ	0xFF7
  7489                           tblptrl	equ	0xFF6
  7490                           tablat	equ	0xFF5
  7491                           prodh	equ	0xFF4
  7492                           prodl	equ	0xFF3
  7493                           indf0	equ	0xFEF
  7494                           postinc0	equ	0xFEE
  7495                           fsr0h	equ	0xFEA
  7496                           fsr0l	equ	0xFE9
  7497                           wreg	equ	0xFE8
  7498                           indf2	equ	0xFDF
  7499                           postinc2	equ	0xFDE
  7500                           postdec2	equ	0xFDD
  7501                           fsr2h	equ	0xFDA
  7502                           fsr2l	equ	0xFD9
  7503                           status	equ	0xFD8
  7504                           
  7505 ;; *************** function _config *****************
  7506 ;; Defined at:
  7507 ;;		line 7 in file "config.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;		None
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;		None
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  1    wreg      void 
  7514 ;; Registers used:
  7515 ;;		wreg, status,2
  7516 ;; Tracked objects:
  7517 ;;		On entry : 0/0
  7518 ;;		On exit  : 0/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7525 ;;Total ram usage:        0 bytes
  7526 ;; Hardware stack levels used:    1
  7527 ;; This function calls:
  7528 ;;		Nothing
  7529 ;; This function is called by:
  7530 ;;		_main
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           	psect	text40
  7535  002DB4                     __ptext40:
  7536                           	opt stack 0
  7537  002DB4                     _config:
  7538                           	opt stack 30
  7539                           
  7540                           ;config.c: 9: TRISA=0Xff;
  7541                           
  7542                           ;incstack = 0
  7543  002DB4  6892               	setf	3986,c	;volatile
  7544                           
  7545                           ;config.c: 10: TRISB=0X00;
  7546  002DB6  0E00               	movlw	0
  7547  002DB8  6E93               	movwf	3987,c	;volatile
  7548                           
  7549                           ;config.c: 11: TRISC=0X00;
  7550  002DBA  0E00               	movlw	0
  7551  002DBC  6E94               	movwf	3988,c	;volatile
  7552                           
  7553                           ;config.c: 12: TRISD=0X00;
  7554  002DBE  0E00               	movlw	0
  7555  002DC0  6E95               	movwf	3989,c	;volatile
  7556                           
  7557                           ;config.c: 13: TRISE=0Xff;
  7558  002DC2  6896               	setf	3990,c	;volatile
  7559                           
  7560                           ;config.c: 15: PORTA=0X00;
  7561  002DC4  0E00               	movlw	0
  7562  002DC6  6E80               	movwf	3968,c	;volatile
  7563                           
  7564                           ;config.c: 16: PORTB=0X00;
  7565  002DC8  0E00               	movlw	0
  7566  002DCA  6E81               	movwf	3969,c	;volatile
  7567                           
  7568                           ;config.c: 17: PORTC=0X00;
  7569  002DCC  0E00               	movlw	0
  7570  002DCE  6E82               	movwf	3970,c	;volatile
  7571                           
  7572                           ;config.c: 18: PORTD=0X00;
  7573  002DD0  0E00               	movlw	0
  7574  002DD2  6E83               	movwf	3971,c	;volatile
  7575                           
  7576                           ;config.c: 19: PORTE=0X00;
  7577  002DD4  0E00               	movlw	0
  7578  002DD6  6E84               	movwf	3972,c	;volatile
  7579                           
  7580                           ;config.c: 21: LATA=0X00;
  7581  002DD8  0E00               	movlw	0
  7582  002DDA  6E89               	movwf	3977,c	;volatile
  7583                           
  7584                           ;config.c: 22: LATB=0X00;
  7585  002DDC  0E00               	movlw	0
  7586  002DDE  6E8A               	movwf	3978,c	;volatile
  7587                           
  7588                           ;config.c: 23: LATC=0X00;
  7589  002DE0  0E00               	movlw	0
  7590  002DE2  6E8B               	movwf	3979,c	;volatile
  7591                           
  7592                           ;config.c: 24: LATD=0X00;
  7593  002DE4  0E00               	movlw	0
  7594  002DE6  6E8C               	movwf	3980,c	;volatile
  7595                           
  7596                           ;config.c: 25: LATE=0X00;
  7597  002DE8  0E00               	movlw	0
  7598  002DEA  6E8D               	movwf	3981,c	;volatile
  7599                           
  7600                           ;config.c: 27: ANSELA=0Xff;
  7601  002DEC  010F               	movlb	15	; () banked
  7602  002DEE  6938               	setf	56,b	;volatile
  7603                           
  7604                           ;config.c: 28: ANSELB=0X00;
  7605  002DF0  0E00               	movlw	0
  7606  002DF2  6F39               	movwf	57,b	;volatile
  7607                           
  7608                           ;config.c: 29: ANSELC=0X00;
  7609  002DF4  0E00               	movlw	0
  7610  002DF6  6F3A               	movwf	58,b	;volatile
  7611                           
  7612                           ;config.c: 30: ANSELD=0X00;
  7613  002DF8  0E00               	movlw	0
  7614  002DFA  6F3B               	movwf	59,b	;volatile
  7615                           
  7616                           ;config.c: 31: ANSELE=0X00;
  7617  002DFC  0E00               	movlw	0
  7618  002DFE  6F3C               	movwf	60,b	;volatile
  7619                           
  7620                           ;config.c: 33: OSCCON=0b01110100;
  7621  002E00  0E74               	movlw	116
  7622  002E02  6ED3               	movwf	4051,c	;volatile
  7623                           
  7624                           ; BSR set to: 15
  7625                           ;config.c: 34: OSCTUNEbits.PLLEN=1;
  7626  002E04  8C9B               	bsf	3995,6,c	;volatile
  7627                           
  7628                           ; BSR set to: 15
  7629  002E06  0012               	return		;funcret
  7630  002E08                     __end_of_config:
  7631                           	opt stack 0
  7632                           tblptru	equ	0xFF8
  7633                           tblptrh	equ	0xFF7
  7634                           tblptrl	equ	0xFF6
  7635                           tablat	equ	0xFF5
  7636                           prodh	equ	0xFF4
  7637                           prodl	equ	0xFF3
  7638                           indf0	equ	0xFEF
  7639                           postinc0	equ	0xFEE
  7640                           fsr0h	equ	0xFEA
  7641                           fsr0l	equ	0xFE9
  7642                           wreg	equ	0xFE8
  7643                           indf2	equ	0xFDF
  7644                           postinc2	equ	0xFDE
  7645                           postdec2	equ	0xFDD
  7646                           fsr2h	equ	0xFDA
  7647                           fsr2l	equ	0xFD9
  7648                           status	equ	0xFD8
  7649                           
  7650 ;; *************** function _adc_config *****************
  7651 ;; Defined at:
  7652 ;;		line 62 in file "config.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;		None
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  1    wreg      void 
  7659 ;; Registers used:
  7660 ;;		wreg, status,2
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7670 ;;Total ram usage:        0 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; This function calls:
  7673 ;;		Nothing
  7674 ;; This function is called by:
  7675 ;;		_main
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           	psect	text41
  7680  002FF8                     __ptext41:
  7681                           	opt stack 0
  7682  002FF8                     _adc_config:
  7683                           	opt stack 30
  7684                           
  7685                           ; BSR set to: 15
  7686                           ;incstack = 0
  7687  002FF8  8092               	bsf	3986,0,c	;volatile
  7688                           
  7689                           ;config.c: 64: ANSELAbits.ANSA0=1;
  7690  002FFA  010F               	movlb	15	; () banked
  7691  002FFC  8138               	bsf	56,0,b	;volatile
  7692                           
  7693                           ;config.c: 65: TRISAbits.RA1=1;
  7694  002FFE  8292               	bsf	3986,1,c	;volatile
  7695                           
  7696                           ;config.c: 66: ANSELAbits.ANSA1=1;
  7697  003000  8338               	bsf	56,1,b	;volatile
  7698                           
  7699                           ; BSR set to: 15
  7700                           ;config.c: 69: ADCON0=0b00000011;
  7701  003002  0E03               	movlw	3
  7702  003004  6EC2               	movwf	4034,c	;volatile
  7703                           
  7704                           ;config.c: 70: ADCON1=0b10000000;
  7705  003006  0E80               	movlw	128
  7706  003008  6EC1               	movwf	4033,c	;volatile
  7707                           
  7708                           ;config.c: 71: ADCON2=0b00111110;
  7709  00300A  0E3E               	movlw	62
  7710  00300C  6EC0               	movwf	4032,c	;volatile
  7711                           
  7712                           ; BSR set to: 15
  7713                           ;config.c: 72: ADCON2bits.ADFM=0;
  7714  00300E  9EC0               	bcf	4032,7,c	;volatile
  7715                           
  7716                           ; BSR set to: 15
  7717  003010  0012               	return		;funcret
  7718  003012                     __end_of_adc_config:
  7719                           	opt stack 0
  7720                           tblptru	equ	0xFF8
  7721                           tblptrh	equ	0xFF7
  7722                           tblptrl	equ	0xFF6
  7723                           tablat	equ	0xFF5
  7724                           prodh	equ	0xFF4
  7725                           prodl	equ	0xFF3
  7726                           indf0	equ	0xFEF
  7727                           postinc0	equ	0xFEE
  7728                           fsr0h	equ	0xFEA
  7729                           fsr0l	equ	0xFE9
  7730                           wreg	equ	0xFE8
  7731                           indf2	equ	0xFDF
  7732                           postinc2	equ	0xFDE
  7733                           postdec2	equ	0xFDD
  7734                           fsr2h	equ	0xFDA
  7735                           fsr2l	equ	0xFD9
  7736                           status	equ	0xFD8
  7737                           tblptru	equ	0xFF8
  7738                           tblptrh	equ	0xFF7
  7739                           tblptrl	equ	0xFF6
  7740                           tablat	equ	0xFF5
  7741                           prodh	equ	0xFF4
  7742                           prodl	equ	0xFF3
  7743                           indf0	equ	0xFEF
  7744                           postinc0	equ	0xFEE
  7745                           fsr0h	equ	0xFEA
  7746                           fsr0l	equ	0xFE9
  7747                           wreg	equ	0xFE8
  7748                           indf2	equ	0xFDF
  7749                           postinc2	equ	0xFDE
  7750                           postdec2	equ	0xFDD
  7751                           fsr2h	equ	0xFDA
  7752                           fsr2l	equ	0xFD9
  7753                           status	equ	0xFD8
  7754                           
  7755                           	psect	rparam
  7756  0000                     tblptru	equ	0xFF8
  7757                           tblptrh	equ	0xFF7
  7758                           tblptrl	equ	0xFF6
  7759                           tablat	equ	0xFF5
  7760                           prodh	equ	0xFF4
  7761                           prodl	equ	0xFF3
  7762                           indf0	equ	0xFEF
  7763                           postinc0	equ	0xFEE
  7764                           fsr0h	equ	0xFEA
  7765                           fsr0l	equ	0xFE9
  7766                           wreg	equ	0xFE8
  7767                           indf2	equ	0xFDF
  7768                           postinc2	equ	0xFDE
  7769                           postdec2	equ	0xFDD
  7770                           fsr2h	equ	0xFDA
  7771                           fsr2l	equ	0xFD9
  7772                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    118
    Data        2
    BSS         133
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     82      94
    BANK0           160     23     146
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_8(CODE[5]), STR_6(CODE[5]), STR_3(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> str_V(BANK0[8]), str_A(BANK0[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 8
		 -> STR_9(CODE[3]), STR_7(CODE[4]), str_V(BANK0[8]), STR_5(CODE[3]), 
		 -> STR_4(CODE[3]), str_A(BANK0[8]), STR_2(CODE[3]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_read_Iout
    _main->_read_Uin
    _main->_read_Uout
    _read_Uout->_sprintf
    _read_Uin->_sprintf
    ___ftdiv->___ftpack
    _read_Iout->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lbtoft->___ftpack
    _init_io_display->_I2C_Master_Init
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _Cursor_Off->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _Lcd_Port->_I2C_Write_Display
    _I2C_Write_Display->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _main in BANK0

    _read_Uout->_sprintf
    _read_Uin->_sprintf
    _read_Iout->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  198746
                                             78 COMRAM     4     4      0
                          _Lcd_Clear
                         _adc_config
                             _config
                    _init_io_display
                         _pwm_config
                          _read_Iout
                           _read_Uin
                          _read_Uout
 ---------------------------------------------------------------------------------
 (1) _read_Uout                                            2     2      0   65744
                                             76 COMRAM     2     2      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _read_Uin                                             2     2      0   65744
                                             76 COMRAM     2     2      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3215
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_Iout                                            2     2      0   62529
                                             76 COMRAM     2     2      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___ftmul
                           ___lbtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    37      7   51829
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   12515
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              10     7      3   12317
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5845
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     632
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2527
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _pwm_config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_io_display                                      2     2      0    4305
                                             21 COMRAM     2     2      0
                         _Cursor_Off
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2    1171
                                              7 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     397
                                              4 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1    1157
                                             10 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     551
                                             10 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     355
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     716
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _Cursor_Off                                           0     0      0     355
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              6     6      0     355
                                              4 COMRAM     6     6      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     196
                                              3 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                  _I2C_Write_Display
 ---------------------------------------------------------------------------------
 (5) _I2C_Write_Display                                    2     0      2     174
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   _adc_config
   _config
   _init_io_display
     _Cursor_Off
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _I2C_Master_Init
       ___lldiv
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
   _pwm_config
   _read_Iout
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lbtoft
       ___ftpack
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _read_Uin
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lbtoft
       ___ftpack
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _read_Uout
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lbtoft
       ___ftpack
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     17      92       5       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     52      5E       1       98.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F0      12        0.0%
DATA                 0      0      F0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Mar 12 21:00:05 2019

                         _b 00C9                           _c 0059                           _d 00C7  
                        l25 26A0                ___awdiv@sign 000C         ___wmul@multiplicand 0011  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                ___ftadd@exp1 0039                ___ftadd@exp2 0038  
              ___ftadd@sign 0037          I2C_Write_Display@d 0002                         l401 124A  
                       l402 12B0                         l420 1534                         l404 12D6  
                       l245 2E30                         l421 14A0                         l405 1316  
                       l430 15EE                         l406 13DE                         l423 1554  
                       l415 1444                         l432 16F2                         l424 153E  
                       l257 2B2E                         l433 16DC                         l409 1386  
                       l258 2AF8                         l610 2990                         l370 1DB4  
                       l426 1578                         l435 1714                         l427 157C  
                       l612 29AE                         l380 1B7E                         l436 1730  
                       l428 159E                         l613 29A6                         l373 19A2  
                       l429 16D0                         l630 2BBC                         l622 2B78  
                       l374 18CE                         l438 1750                         l631 2BCA  
                       l623 2B84                         l367 1CE8                         l439 1774  
                       l391 113E                         l704 1E46                         l616 29CE  
                       l384 109E                         l713 1ED6                         l801 23D0  
                       l641 20F0                         l617 29D8                         l609 2980  
                       l625 2B9A                         l377 197E                         l385 10B4  
                       l730 1F2E                         l618 29E6                         l626 2B92  
                       l378 1ACE                         l394 113A                         l386 112C  
                       l731 1F4A                         l643 210E                         l395 1162  
                       l387 1116                         l732 1F7A                         l708 1E70  
                       l644 2150                         l388 10DE                         l740 2558  
                       l653 21E2                         l645 2180                         l629 2BB2  
                       l805 2FF0                         l397 16FC                         l741 257E  
                       l718 1ECC                         l654 21D6                         l398 1176  
                       l831 2A1E                         l727 1F0A                         l719 1EC2  
                       l647 21BE                         l751 2096                         l399 11B8  
                       l832 2A12                         l680 28A8                         l728 1F00  
                       l648 21AE                         l752 2086                         l673 2856  
                       l841 2C5E                         l745 1FCC                         l737 24F2  
                       l674 284C                         l762 290C                         l842 2C52  
                       l835 2A52                         l763 293C                         l747 1FF8  
                       l771 224A                         l739 251A                         l836 2A60  
                       l676 288A                         l780 2F86                         l852 2CB8  
                       l748 2032                         l772 227C                         l677 2874  
                       l845 2C86                         l853 2CAC                         l757 20BA  
                       l749 205A                         l773 228C                         l790 231A  
                       l846 2C94                         l758 20AE                         l679 28B2  
                       l775 22A4                         l792 2390                         l776 22B4  
                       l793 2380                         l769 2222                         l786 2EBE  
                       l798 23B4                         l799 23A8                __CFG_CPB$OFF 000000  
                       _PR2 000FBB                __CFG_CPD$OFF 000000                         _Uin 00A8  
                       _cnt 005D                         _dty 00BF                ___awmod@sign 0006  
                       wreg 000FE8                __CFG_LVP$OFF 000000                ___ftdiv@cntr 0012  
              ___ftdiv@sign 0017                        l2320 2968                        l3116 153E  
                      l3060 1316                        l3068 1360                        l3088 1448  
                      l3178 1770                        STR_1 107C                        STR_2 1085  
                      STR_3 1077                        STR_4 108B                        STR_5 1088  
                      STR_6 1077                        STR_7 1081                        STR_8 1077  
                      STR_9 108E                        u2210 21E8                        u2140 20C0  
                      u2061 1FB0                        _LATA 000F89                        u1510 283E  
                      _LATB 000F8A                        u3007 23EC                        _LATC 000F8B  
                      _LATD 000F8C                        u2081 1FDC                        u3017 2400  
                      _LATE 000F8D                        u2330 23BA                        u3107 2AB2  
                      u3027 276C                        u1620 1E38                        u3117 2E90  
                      u3037 2780                        u1550 28BC                        u3047 2BF6  
                      u2271 22FE                        u2360 2A22                        u1720 1EDE  
                      u2600 1328                        u2425 2D2C                        u3057 2C30  
                      u2450 2B26                        u1650 1E62                        u2290 2338  
                      u3067 2D86                        u1811 2232                        u2460 2B5C  
                      u2700 1562                        u3077 2DA4                        u1581 1E04  
                      u1750 1F12                        u2390 2C62                        u2710 1572  
                      u2630 1360                        u2550 11F0                        u3087 2A82  
                      u1591 1E18                        u2295 2330                        u1680 1EA0  
                      u2800 178C                        u3097 2A9C                        u2457 2B1C  
                      u2467 2B52                        u2555 11E6                        u2811 24DA  
                      u1940 2B9E                        u2670 1480                        u2590 12E8  
                      u1791 220A                        u2831 2502                        u1880 29B2  
                      u2927 26B6                        u2937 26D2                        u2947 26F6  
                      u2957 2712                        u2967 2736                        u2977 2752  
                      u2987 25BA                        u2997 25CE                        _Iout 00AE  
                      _Uout 00AB                        _adcn 00C3                        _adcp 00C5  
                      _data 00B7           ?_Lcd_Write_String 0008                        _buck 00BD  
                      _main 268C                ___ftpack@arg 0001                ___ftpack@exp 0004  
                      _tens 0053                        fsr0h 000FEA                        indf0 000FEF  
                      fsr2h 000FDA                        fsr0l 000FE9                        indf2 000FDF  
                      fsr2l 000FD9               __CFG_BORV$190 000000                        _type 00C1  
                      prodh 000FF4                        prodl 000FF3                        start 0000  
        ??_Lcd_Write_String 000A               __CFG_IESO$OFF 000000                _sprintf$1430 00DB  
           __end_of_Lcd_Cmd 2EA8                ___ftmul@cntr 0022                ___param_bank 000000  
              ___ftmul@sign 0023                ___fttol@exp1 0039                ___fttol@lval 0035  
          ?_I2C_Master_Init 000E            ?_I2C_Master_Wait 0001            ?_I2C_Master_Stop 0001  
                     ?_main 0001             __end_of___awdiv 29F0             __end_of___ftadd 1FA0  
           __end_of___awmod 2BD4             __end_of___ftdiv 25B0             __end_of___ftneg 2F94  
           __end_of___lldiv 2A72             __end_of___ftmul 22EE             ___awdiv@divisor 0009  
           __end_of___llmod 2CA6             __end_of___ftsub 2EE8             __end_of___fttol 23E2  
                     _T2CON 000FBA             ___awdiv@counter 000B                       _PORTA 000F80  
                     _PORTB 000F81                       _PORTC 000F82                       _PORTD 000F83  
                     _PORTE 000F84     __size_of_Lcd_Set_Cursor 0050                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96                       _UQEnd 005B               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
              ___lltoft@exp 0011              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
            __CFG_EBTRB$OFF 000000             __end_of_dpowers 1029                       _boost 00BB  
                     _scale 179A             __end_of_isdigit 2FF8          __CFG_MCLRE$EXTMCLR 000000  
             ___ftpack@sign 0005                       _str_A 00CB                       _str_P 00A0  
                     _str_V 00D3              __CFG_BOREN$OFF 000000                       tablat 000FF5  
                     status 000FD8             __end_of_sprintf 179A              __CFG_HFOFST$ON 000000  
            __CFG_PBADEN$ON 000000            __end_of_Lcd_Init 2AEE            __end_of_Lcd_Port 2FDA  
               _Lcd_Cmd$617 0007             __initialization 2EE8                __end_of_main 2762  
                _Cursor_Off 3032                      ??_main 004F               ___fttol@sign1 0034  
        __size_of_Lcd_Clear 000E               __activetblptr 000002              __CFG_PLLCFG$ON 000000  
      __size_of__tdiv_to_l_ 0132           ?_I2C_Master_Start 0001          ??_I2C_Master_Start 0002  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADCON2 000FC0  
          ___llmod@dividend 0001                      ?_scale 0024                      _ADRESH 000FC4  
                    _CCPR1L 000FBE                      _CCPR2L 000F67                      _CCPR3L 000F5E  
          ___awdiv@dividend 0007                      _ANSELA 000F38                      _ANSELB 000F39  
                    _ANSELC 000F3A                      _ANSELD 000F3B                      _ANSELE 000F3C  
          __end_of___ftpack 28DC            __end_of___lbtoft 2FB8            __end_of___lltoft 2D02  
            __CFG_WDTEN$OFF 000000                      _OSCCON 000FD3                   ??_Lcd_Cmd 0005  
   __size_of_Lcd_Write_Char 0058                      _SSPBUF 000FC9                      _URBuff 0060  
            __CFG_XINST$OFF 000000            __end_of__powers_ 1050                      ___ftge 28DC  
                    ___wmul 2F4A                   ??___awdiv 000B                   ??___ftadd 0034  
                 ??___awmod 0005                   ??___ftdiv 000F                   ??___ftneg 0004  
                 ??___lldiv 0009                   ??___ftmul 001B                   ??___llmod 0009  
                 ??___ftsub 0040                   ??___fttol 002F                      _config 2DB4  
          __end_of_read_Uin 24CA                      _fround 1BA2                      clear_0 2F06  
                    clear_1 2F12            ___awdiv@quotient 000D             ___awmod@divisor 0003  
                    _tens_A 00B1             ___awmod@counter 0005             _init_io_display 2BD4  
     ___ftmul@f3_as_product 001F                __pdataCOMRAM 005D                   ??_isdigit 0001  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_sprintf 0047             Lcd_Set_Cursor@a 000C  
           Lcd_Set_Cursor@b 000B             Lcd_Set_Cursor@y 000E             Lcd_Set_Cursor@z 000D  
                __accesstop 0060     __end_of__initialization 2F18                  ___ftadd@f1 002E  
                ___ftadd@f2 0031                  ___ftge@ff1 0001                  ___ftge@ff2 0004  
         __end_of_Lcd_Clear 3032               ___rparam_used 000001                  ___ftdiv@f1 0009  
                ___ftdiv@f2 000C                  ___ftdiv@f3 0013                  ___ftneg@f1 0001  
                ___lbtoft@c 000C                  ___ftmul@f1 0015                  ___ftmul@f2 0018  
                ___ftsub@f1 003A                  ___ftsub@f2 003D                  ___fttol@f1 002B  
            __pcstackCOMRAM 0001                  _adc_config 2FF8                  ___lltoft@c 0009  
             __end_of_scale 1BA2                 ?_Cursor_Off 0001              _Lcd_Set_Cursor 2E08  
                __div_to_l_ 20D2                   ?_Lcd_Init 0001                   ?_Lcd_Port 0001  
           __div_to_l_@exp1 000C             __div_to_l_@cntr 000B                     ??_scale 0027  
           __div_to_l_@quot 0007                  __pbssBANK0 0060          __size_of_read_Iout 00CC  
             __div_to_l_@f1 0001               __div_to_l_@f2 0004          __size_of_read_Uout 00DC  
        __CFG_CCP2MX$PORTC1 000000     __end_of_init_io_display 2C40                     ?___ftge 0001  
                   ?___wmul 000F          __CFG_CCP3MX$PORTB5 000000                     ?_config 0001  
                   _CCP1CON 000FBD           _I2C_Write_Display 3040                     _CCP2CON 000F66  
                   _CCP3CON 000F5D                     ?_fround 0024   __size_of_Lcd_Write_String 0076  
                 ?___ftpack 0001                   ?___lbtoft 0009      __end_of_Lcd_Set_Cursor 2E58  
                 ?___lltoft 0009          ?_I2C_Write_Display 0002           __CFG_PRICLKEN$OFF 000000  
       ??_I2C_Write_Display 0004                  ??_Lcd_Init 000B                     _SSP1ADD 000FC8  
                   _SSP1BUF 000FC9                  ??_Lcd_Port 0004                     _UQFront 005C  
            _Lcd_Write_Char 2D5C                     _Lcd_Cmd 2E58         __size_of_Cursor_Off 000E  
                 ?_read_Uin 0001             __CFG_PWRTEN$OFF 000000           __end_of__npowers_ 1077  
                   __Hparam 0000                  _scale$1429 0027                     __Lparam 0000  
 __end_of_I2C_Write_Display 304A                 ?_adc_config 0001             __size_of___ftge 0090  
                   ___awdiv 296C                     ___ftadd 1DF4                     ___awmod 2B64  
                   ___ftdiv 24CA                     ___ftneg 2F70                     ___lldiv 29F0  
           __size_of___wmul 0026                     ___ftmul 21FA                     ___llmod 2C40  
                   ___ftsub 2EA8                     ___fttol 22EE                __psmallconst 1000  
           __size_of_config 0054             __CFG_STVREN$OFF 000000                     __pcinit 2EE8  
                ??___ftpack 0006                  ??___lbtoft 000C             __size_of_fround 0252  
                   __ramtop 1000             ?_Lcd_Set_Cursor 000B                  ??___lltoft 000D  
                   __ptext0 268C                     __ptext1 25B0                     __ptext2 23E2  
                   __ptext3 24CA                     __ptext4 2762                     __ptext5 1092  
                   __ptext6 179A                     __ptext7 2FDA                     __ptext8 1BA2  
                   __ptext9 2F4A                 ?__div_to_l_ 0001                     _dpowers 1001  
         __end_of_read_Iout 282E                     _dty_car 00B9                     _isdigit 2FDA  
         __end_of_read_Uout 268C            ___awmod@dividend 0001    __size_of_I2C_Master_Init 005A  
  __size_of_I2C_Master_Wait 0012    __size_of_I2C_Master_Stop 0008                     _sprintf 1092  
    __end_of_Lcd_Write_Char 2DB4        end_of_initialization 2F18                  ??_read_Uin 004D  
             __Lmediumconst 0000   __size_of_I2C_Master_Start 0008             ___lldiv@divisor 0005  
           ___lldiv@counter 000D            I2C_Master_Init@c 000E            ?_init_io_display 0001  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
            __tdiv_to_l_@f1 0001              __tdiv_to_l_@f2 0004               ??__tdiv_to_l_ 0007  
                 _TRISAbits 000F92                   _TRISCbits 000F94                  _pwm_config 2F22  
           ?_Lcd_Write_Char 0001         __size_of_adc_config 001A           Lcd_Write_String@a 0008  
         Lcd_Write_String@i 000C                 ___ftdiv@exp 0016         __size_of__div_to_l_ 0128  
               ___ftmul@exp 001E                   _Lcd_Clear 3024  __size_of_I2C_Write_Display 000A  
            __end_of___ftge 296C                ??_Cursor_Off 000B              __end_of___wmul 2F70  
          _Lcd_Write_String 2AEE               __pidataCOMRAM 305A              __end_of_config 2E08  
            __end_of_fround 1DF4         start_initialization 2EE8         __end_of__tdiv_to_l_ 20D2  
         __size_of_Lcd_Init 007C           __size_of_Lcd_Port 0022           ??_I2C_Master_Init 0012  
         ??_I2C_Master_Wait 0001           ??_I2C_Master_Stop 0002          __end_of_Cursor_Off 3040  
           ___llmod@divisor 0005             ___llmod@counter 0009                  ?_Lcd_Clear 0001  
                  ??___ftge 0007                    ??___wmul 0013                    ??_config 0001  
           Lcd_Write_Char@a 0005             Lcd_Write_Char@y 0006                    ??_fround 0027  
             sprintf@tmpval 00E8                  fround@prec 002D           __size_of___ftpack 00AE  
         __size_of___lbtoft 0024           __size_of___lltoft 005C                 __pbssCOMRAM 0053  
             __pcstackBANK0 00DB                 ?_pwm_config 0001                _isdigit$1053 0002  
                  ?_Lcd_Cmd 0001                 sprintf@flag 00E0                 sprintf@fval 00EE  
               sprintf@prec 00EC            _I2C_Master_Start 3052           __size_of_read_Uin 00E8  
          ??_Lcd_Set_Cursor 000C                ??_adc_config 0001                    ?___awdiv 0007  
                  ?___ftadd 002E                    ?___awmod 0001                    ?___ftdiv 0009  
                  ?___ftneg 0001                    ?___lldiv 0001                    ?___ftmul 0015  
                  ?___llmod 0001                    ?___ftsub 003A                   __npowers_ 1050  
                  ?___fttol 002B                 __tdiv_to_l_ 1FA0                ??__div_to_l_ 0007  
               __smallconst 1000                    ?_isdigit 0001                    _CCPTMRS0 000F49  
                 _read_Iout 2762                   _read_Uout 25B0                    ?_sprintf 0040  
            __size_of_scale 0408          __end_of_adc_config 3012              ___wmul@product 0013  
                  _LATDbits 000F8C                    _PIE1bits 000F9D                   _rez_adc_A 00B4  
                 _rez_adc_U 0056                    Lcd_Cmd@a 000A          __end_of__div_to_l_ 21FA  
               ??_Lcd_Clear 000B            __CFG_WDTPS$32768 000000         __size_of_pwm_config 0028  
                  _SSP1CON1 000FC6                    _SSP1CON2 000FC5                    _SSP1STAT 000FC7  
                _ADCON0bits 000FC2                  _ADCON2bits 000FC0           ___wmul@multiplier 000F  
          ??_Lcd_Write_Char 0005                    _Lcd_Init 2A72                    _Lcd_Port 2FB8  
                ?_read_Iout 0001                  ?_read_Uout 0001    __end_of_Lcd_Write_String 2B64  
          __size_of_Lcd_Cmd 0050                Lcd_Port@data 0004                    __Hrparam 0000  
                  __Lrparam 0000           __CFG_P2BMX$PORTD2 000000            __size_of___awdiv 0084  
          __size_of___ftadd 01AC            __size_of___awmod 0070            __size_of___ftdiv 00E6  
          __size_of___ftneg 0024            __size_of___lldiv 0082            __size_of___ftmul 00F4  
          __size_of___llmod 0066            __size_of___ftsub 0040            __size_of___fttol 00F4  
                  ___ftpack 282E                    ___lbtoft 2F94                 _fround$1427 002A  
               _fround$1428 0027                    ___lltoft 2CA6                  _ANSELAbits 000F38  
  __size_of_init_io_display 006C                  sprintf@exp 00E6                  sprintf@val 00E2  
           _I2C_Master_Init 2D02             _I2C_Master_Wait 3012             _I2C_Master_Stop 304A  
          __size_of_isdigit 001E                    __ptext10 21FA                    __ptext11 2B64  
                  __ptext20 2F70                    __ptext12 296C                    __ptext21 28DC  
                  __ptext13 1FA0                    __ptext30 3024                    __ptext22 2F94  
                  __ptext14 20D2                    __ptext31 2D02                    __ptext23 282E  
                  __ptext15 2CA6                    __ptext40 2DB4                    __ptext32 29F0  
                  __ptext24 2F22                    __ptext16 2C40                    __ptext41 2FF8  
                  __ptext33 3032                    __ptext25 2BD4                    __ptext17 22EE  
                  __ptext34 2E58                    __ptext26 2AEE                    __ptext18 2EA8  
                  __ptext35 2FB8                    __ptext27 2D5C                    __ptext19 1DF4  
                  __ptext36 3040                    __ptext28 2E08                    __ptext37 304A  
                  __ptext29 2A72                    __ptext38 3052                    __ptext39 3012  
              _SSP1CON2bits 000FC5                    __powers_ 1029            __size_of_sprintf 0708  
               Lcd_Cmd@buff 0008                    _read_Uin 23E2               __size_of_main 00D6  
                  main@port 0051    __end_of_I2C_Master_Start 305A                 _OSCTUNEbits 000F9B  
                _INTCONbits 000FF2                ??_pwm_config 0001                    isdigit@c 0003  
               ??_read_Iout 004D                    scale@scl 002A                 ??_read_Uout 004D  
        Lcd_Write_Char@temp 0007                   sprintf@ap 00DE            __tdiv_to_l_@exp1 000F  
                 sprintf@sp 0040            __tdiv_to_l_@cntr 000E            __tdiv_to_l_@quot 000A  
          ___lldiv@dividend 0001          __end_of_pwm_config 2F4A     __end_of_I2C_Master_Init 2D5C  
   __end_of_I2C_Master_Wait 3024     __end_of_I2C_Master_Stop 3052          Lcd_Set_Cursor@temp 000F  
              ?__tdiv_to_l_ 0001                    sprintf@c 00F1                    sprintf@f 0042  
          ___lldiv@quotient 0009           __CFG_T3CMX$PORTC0 000000           ??_init_io_display 0016  
         __CFG_FOSC$INTIO67 000000  
