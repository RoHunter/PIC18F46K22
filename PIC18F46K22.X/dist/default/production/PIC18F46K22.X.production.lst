

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Mar 12 13:19:09 2019

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58  0000                     
    59                           ; Version 1.44
    60                           ; Generated 14/09/2017 GMT
    61                           ; 
    62                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F46K22 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataCOMRAM
    95  0030E4                     __pidataCOMRAM:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _cnt
    99  0030E4  0001               	dw	1
   100                           
   101                           	psect	smallconst
   102  001000                     __psmallconst:
   103                           	opt stack 0
   104  001000  00                 	db	0
   105  001001                     _dpowers:
   106                           	opt stack 0
   107  001001  0001               	dw	1
   108  001003  0000               	dw	0
   109  001005  000A               	dw	10
   110  001007  0000               	dw	0
   111  001009  0064               	dw	100
   112  00100B  0000               	dw	0
   113  00100D  03E8               	dw	1000
   114  00100F  0000               	dw	0
   115  001011  2710               	dw	10000
   116  001013  0000               	dw	0
   117  001015  86A0               	dw	34464
   118  001017  0001               	dw	1
   119  001019  4240               	dw	16960
   120  00101B  000F               	dw	15
   121  00101D  9680               	dw	38528
   122  00101F  0098               	dw	152
   123  001021  E100               	dw	57600
   124  001023  05F5               	dw	1525
   125  001025  CA00               	dw	51712
   126  001027  3B9A               	dw	15258
   127  001029                     __end_of_dpowers:
   128                           	opt stack 0
   129  001029                     __powers_:
   130                           	opt stack 0
   131  001029  00                 	db	0
   132  00102A  80                 	db	128
   133  00102B  3F                 	db	63
   134  00102C  00                 	db	0
   135  00102D  20                 	db	32
   136  00102E  41                 	db	65
   137  00102F  00                 	db	0
   138  001030  C8                 	db	200
   139  001031  42                 	db	66
   140  001032  00                 	db	0
   141  001033  7A                 	db	122
   142  001034  44                 	db	68
   143  001035  40                 	db	64
   144  001036  1C                 	db	28
   145  001037  46                 	db	70
   146  001038  50                 	db	80
   147  001039  C3                 	db	195
   148  00103A  47                 	db	71
   149  00103B  24                 	db	36
   150  00103C  74                 	db	116
   151  00103D  49                 	db	73
   152  00103E  97                 	db	151
   153  00103F  18                 	db	24
   154  001040  4B                 	db	75
   155  001041  BC                 	db	188
   156  001042  BE                 	db	190
   157  001043  4C                 	db	76
   158  001044  6B                 	db	107
   159  001045  6E                 	db	110
   160  001046  4E                 	db	78
   161  001047  03                 	db	3
   162  001048  15                 	db	21
   163  001049  50                 	db	80
   164  00104A  79                 	db	121
   165  00104B  AD                 	db	173
   166  00104C  60                 	db	96
   167  00104D  F3                 	db	243
   168  00104E  49                 	db	73
   169  00104F  71                 	db	113
   170  001050                     __end_of__powers_:
   171                           	opt stack 0
   172  001050                     __npowers_:
   173                           	opt stack 0
   174  001050  00                 	db	0
   175  001051  80                 	db	128
   176  001052  3F                 	db	63
   177  001053  CD                 	db	205
   178  001054  CC                 	db	204
   179  001055  3D                 	db	61
   180  001056  D7                 	db	215
   181  001057  23                 	db	35
   182  001058  3C                 	db	60
   183  001059  12                 	db	18
   184  00105A  83                 	db	131
   185  00105B  3A                 	db	58
   186  00105C  B7                 	db	183
   187  00105D  D1                 	db	209
   188  00105E  38                 	db	56
   189  00105F  C6                 	db	198
   190  001060  27                 	db	39
   191  001061  37                 	db	55
   192  001062  38                 	db	56
   193  001063  86                 	db	134
   194  001064  35                 	db	53
   195  001065  C0                 	db	192
   196  001066  D6                 	db	214
   197  001067  33                 	db	51
   198  001068  CC                 	db	204
   199  001069  2B                 	db	43
   200  00106A  32                 	db	50
   201  00106B  70                 	db	112
   202  00106C  89                 	db	137
   203  00106D  30                 	db	48
   204  00106E  E7                 	db	231
   205  00106F  DB                 	db	219
   206  001070  2E                 	db	46
   207  001071  E5                 	db	229
   208  001072  3C                 	db	60
   209  001073  1E                 	db	30
   210  001074  42                 	db	66
   211  001075  A2                 	db	162
   212  001076  0D                 	db	13
   213  001077                     __end_of__npowers_:
   214                           	opt stack 0
   215  0000                     _ANSELAbits	set	3896
   216  0000                     _CCPR3L	set	3934
   217  0000                     _CCP3CON	set	3933
   218  0000                     _CCPTMRS0	set	3913
   219  0000                     _ANSELE	set	3900
   220  0000                     _ANSELD	set	3899
   221  0000                     _ANSELC	set	3898
   222  0000                     _ANSELB	set	3897
   223  0000                     _ANSELA	set	3896
   224  0000                     _ADCON0bits	set	4034
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSP1BUF	set	4041
   227  0000                     _SSP1CON2bits	set	4037
   228  0000                     _SSP1STAT	set	4039
   229  0000                     _SSP1ADD	set	4040
   230  0000                     _SSP1CON2	set	4037
   231  0000                     _SSP1CON1	set	4038
   232  0000                     _PIE1bits	set	3997
   233  0000                     _INTCONbits	set	4082
   234  0000                     _TRISCbits	set	3988
   235  0000                     _ADCON2bits	set	4032
   236  0000                     _ADCON2	set	4032
   237  0000                     _ADCON1	set	4033
   238  0000                     _TRISAbits	set	3986
   239  0000                     _PR2	set	4027
   240  0000                     _T2CON	set	4026
   241  0000                     _CCP1CON	set	4029
   242  0000                     _CCP2CON	set	3942
   243  0000                     _OSCTUNEbits	set	3995
   244  0000                     _OSCCON	set	4051
   245  0000                     _LATE	set	3981
   246  0000                     _LATD	set	3980
   247  0000                     _LATC	set	3979
   248  0000                     _LATB	set	3978
   249  0000                     _LATA	set	3977
   250  0000                     _PORTE	set	3972
   251  0000                     _PORTD	set	3971
   252  0000                     _PORTC	set	3970
   253  0000                     _PORTB	set	3969
   254  0000                     _PORTA	set	3968
   255  0000                     _TRISE	set	3990
   256  0000                     _TRISD	set	3989
   257  0000                     _TRISC	set	3988
   258  0000                     _TRISB	set	3987
   259  0000                     _TRISA	set	3986
   260  0000                     _CCPR2L	set	3943
   261  0000                     _CCPR1L	set	4030
   262  0000                     _ADRESH	set	4036
   263  0000                     _ADCON0	set	4034
   264  0000                     _LATDbits	set	3980
   265  0000                     _TRISDbits	set	3989
   266  001077                     STR_9:
   267                           
   268                           ; BSR set to: 15
   269  001077  54                 	db	84	;'T'
   270  001078  65                 	db	101	;'e'
   271  001079  73                 	db	115	;'s'
   272  00107A  74                 	db	116	;'t'
   273  00107B  00                 	db	0
   274  00107C                     STR_2:
   275                           
   276                           ; BSR set to: 15
   277  00107C  25                 	db	37
   278  00107D  2E                 	db	46
   279  00107E  32                 	db	50	;'2'
   280  00107F  66                 	db	102	;'f'
   281  001080  00                 	db	0
   282  001081                     STR_6:
   283                           
   284                           ; BSR set to: 15
   285  001081  55                 	db	85	;'U'
   286  001082  69                 	db	105	;'i'
   287  001083  3D                 	db	61	;'='
   288  001084  00                 	db	0
   289  001085                     STR_3:
   290                           
   291                           ; BSR set to: 15
   292  001085  49                 	db	73	;'I'
   293  001086  3D                 	db	61	;'='
   294  001087  00                 	db	0
   295  001088                     STR_1:
   296                           
   297                           ; BSR set to: 15
   298  001088  55                 	db	85	;'U'
   299  001089  3D                 	db	61	;'='
   300  00108A  00                 	db	0
   301  00108B                     STR_5:
   302                           
   303                           ; BSR set to: 15
   304  00108B  20                 	db	32
   305  00108C  41                 	db	65	;'A'
   306  00108D  00                 	db	0
   307  00108E                     STR_8:
   308                           
   309                           ; BSR set to: 15
   310  00108E  20                 	db	32
   311  00108F  56                 	db	86	;'V'
   312  001090  00                 	db	0
   313  0000                     
   314                           ; #config settings
   315  001091  00                 	db	0	; dummy byte at the end
   316  0000                     
   317                           	psect	cinit
   318  002F26                     __pcinit:
   319                           	opt stack 0
   320  002F26                     start_initialization:
   321                           	opt stack 0
   322  002F26                     __initialization:
   323                           	opt stack 0
   324                           
   325                           ; Initialize objects allocated to COMRAM (2 bytes)
   326                           ; load TBLPTR registers with __pidataCOMRAM
   327  002F26  0EE4               	movlw	low __pidataCOMRAM
   328  002F28  6EF6               	movwf	tblptrl,c
   329  002F2A  0E30               	movlw	high __pidataCOMRAM
   330  002F2C  6EF7               	movwf	tblptrh,c
   331  002F2E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   332  002F30  6EF8               	movwf	tblptru,c
   333  002F32  0009               	tblrd		*+	;fetch initializer
   334  002F34  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   335  002F38  0009               	tblrd		*+	;fetch initializer
   336  002F3A  CFF5 F05F          	movff	tablat,__pdataCOMRAM+1
   337                           
   338                           ; Clear objects allocated to BANK1 (64 bytes)
   339  002F3E  EE01  F000         	lfsr	0,__pbssBANK1
   340  002F42  0E40               	movlw	64
   341  002F44                     clear_0:
   342  002F44  6AEE               	clrf	postinc0,c
   343  002F46  06E8               	decf	wreg,f,c
   344  002F48  E1FD               	bnz	clear_0
   345                           
   346                           ; Clear objects allocated to BANK0 (96 bytes)
   347  002F4A  EE00  F060         	lfsr	0,__pbssBANK0
   348  002F4E  0E60               	movlw	96
   349  002F50                     clear_1:
   350  002F50  6AEE               	clrf	postinc0,c
   351  002F52  06E8               	decf	wreg,f,c
   352  002F54  E1FD               	bnz	clear_1
   353                           
   354                           ; Clear objects allocated to COMRAM (15 bytes)
   355  002F56  EE00  F04F         	lfsr	0,__pbssCOMRAM
   356  002F5A  0E0F               	movlw	15
   357  002F5C                     clear_2:
   358  002F5C  6AEE               	clrf	postinc0,c
   359  002F5E  06E8               	decf	wreg,f,c
   360  002F60  E1FD               	bnz	clear_2
   361  002F62                     end_of_initialization:
   362                           	opt stack 0
   363  002F62                     __end_of__initialization:
   364                           	opt stack 0
   365  002F62  0E00               	movlw	low (__Lmediumconst shr (0+16))
   366  002F64  6EF8               	movwf	tblptru,c
   367  002F66  0100               	movlb	0
   368  002F68  EFFA  F00E         	goto	_main	;jump to C main() function
   369                           tblptru	equ	0xFF8
   370                           tblptrh	equ	0xFF7
   371                           tblptrl	equ	0xFF6
   372                           tablat	equ	0xFF5
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           
   376                           	psect	bssCOMRAM
   377  00004F                     __pbssCOMRAM:
   378                           	opt stack 0
   379  00004F                     _tens:
   380                           	opt stack 0
   381  00004F                     	ds	3
   382  000052                     _rez_adc_U:
   383                           	opt stack 0
   384  000052                     	ds	3
   385  000055                     _rez_adc_A:
   386                           	opt stack 0
   387  000055                     	ds	3
   388  000058                     _c:
   389                           	opt stack 0
   390  000058                     	ds	2
   391  00005A                     _duty_boost:
   392                           	opt stack 0
   393  00005A                     	ds	2
   394  00005C                     _UQEnd:
   395                           	opt stack 0
   396  00005C                     	ds	1
   397  00005D                     _UQFront:
   398                           	opt stack 0
   399  00005D                     	ds	1
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           
   407                           	psect	dataCOMRAM
   408  00005E                     __pdataCOMRAM:
   409                           	opt stack 0
   410  00005E                     _cnt:
   411                           	opt stack 0
   412  00005E                     	ds	2
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           
   420                           	psect	bssBANK0
   421  000060                     __pbssBANK0:
   422                           	opt stack 0
   423  000060                     _str:
   424                           	opt stack 0
   425  000060                     	ds	20
   426  000074                     _str_P:
   427                           	opt stack 0
   428  000074                     	ds	8
   429  00007C                     _str_A:
   430                           	opt stack 0
   431  00007C                     	ds	8
   432  000084                     _str_V:
   433                           	opt stack 0
   434  000084                     	ds	8
   435  00008C                     _Uin:
   436                           	opt stack 0
   437  00008C                     	ds	3
   438  00008F                     _Uout:
   439                           	opt stack 0
   440  00008F                     	ds	3
   441  000092                     _Iout:
   442                           	opt stack 0
   443  000092                     	ds	3
   444  000095                     _tens_A:
   445                           	opt stack 0
   446  000095                     	ds	3
   447  000098                     _data:
   448                           	opt stack 0
   449  000098                     	ds	2
   450  00009A                     _dty_car:
   451                           	opt stack 0
   452  00009A                     	ds	2
   453  00009C                     _boost:
   454                           	opt stack 0
   455  00009C                     	ds	2
   456  00009E                     _buck:
   457                           	opt stack 0
   458  00009E                     	ds	2
   459  0000A0                     _dty:
   460                           	opt stack 0
   461  0000A0                     	ds	2
   462  0000A2                     _type:
   463                           	opt stack 0
   464  0000A2                     	ds	2
   465  0000A4                     _adcn:
   466                           	opt stack 0
   467  0000A4                     	ds	2
   468  0000A6                     _adcp:
   469                           	opt stack 0
   470  0000A6                     	ds	2
   471  0000A8                     _d:
   472                           	opt stack 0
   473  0000A8                     	ds	2
   474  0000AA                     _b:
   475                           	opt stack 0
   476  0000AA                     	ds	2
   477  0000AC                     _nt:
   478                           	opt stack 0
   479  0000AC                     	ds	2
   480  0000AE                     _sel_pasi:
   481                           	opt stack 0
   482  0000AE                     	ds	2
   483  0000B0                     _pasi_int:
   484                           	opt stack 0
   485  0000B0                     	ds	2
   486  0000B2                     _start:
   487                           	opt stack 0
   488  0000B2                     	ds	2
   489  0000B4                     _go_stepper:
   490                           	opt stack 0
   491  0000B4                     	ds	2
   492  0000B6                     _directie_2:
   493                           	opt stack 0
   494  0000B6                     	ds	2
   495  0000B8                     _nr_pasi:
   496                           	opt stack 0
   497  0000B8                     	ds	2
   498  0000BA                     _dir:
   499                           	opt stack 0
   500  0000BA                     	ds	2
   501  0000BC                     _pasi:
   502                           	opt stack 0
   503  0000BC                     	ds	2
   504  0000BE                     _duty_buck:
   505                           	opt stack 0
   506  0000BE                     	ds	2
   507                           tblptru	equ	0xFF8
   508                           tblptrh	equ	0xFF7
   509                           tblptrl	equ	0xFF6
   510                           tablat	equ	0xFF5
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           
   514                           	psect	bssBANK1
   515  000100                     __pbssBANK1:
   516                           	opt stack 0
   517  000100                     _URBuff:
   518                           	opt stack 0
   519  000100                     	ds	64
   520                           tblptru	equ	0xFF8
   521                           tblptrh	equ	0xFF7
   522                           tblptrl	equ	0xFF6
   523                           tablat	equ	0xFF5
   524                           postinc0	equ	0xFEE
   525                           wreg	equ	0xFE8
   526                           
   527                           	psect	cstackBANK0
   528  0000C0                     __pcstackBANK0:
   529                           	opt stack 0
   530  0000C0                     _sprintf$1534:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0x0
   534  0000C0                     	ds	3
   535  0000C3                     sprintf@ap:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x3
   539  0000C3                     	ds	2
   540  0000C5                     sprintf@flag:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x5
   544  0000C5                     	ds	2
   545  0000C7                     sprintf@val:
   546                           	opt stack 0
   547                           
   548                           ; 4 bytes @ 0x7
   549  0000C7                     	ds	4
   550  0000CB                     sprintf@exp:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0xB
   554  0000CB                     	ds	2
   555  0000CD                     sprintf@tmpval:
   556                           	opt stack 0
   557                           
   558                           ; 4 bytes @ 0xD
   559  0000CD                     	ds	4
   560  0000D1                     sprintf@prec:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x11
   564  0000D1                     	ds	2
   565  0000D3                     sprintf@fval:
   566                           	opt stack 0
   567                           
   568                           ; 3 bytes @ 0x13
   569  0000D3                     	ds	3
   570  0000D6                     sprintf@c:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x16
   574  0000D6                     	ds	1
   575  0000D7                     main@Power:
   576                           	opt stack 0
   577                           
   578                           ; 3 bytes @ 0x17
   579  0000D7                     	ds	3
   580  0000DA                     main@dty:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x1A
   584  0000DA                     	ds	2
   585  0000DC                     main@str_A:
   586                           	opt stack 0
   587                           
   588                           ; 8 bytes @ 0x1C
   589  0000DC                     	ds	8
   590  0000E4                     main@str_V:
   591                           	opt stack 0
   592                           
   593                           ; 8 bytes @ 0x24
   594  0000E4                     	ds	8
   595  0000EC                     main@curent:
   596                           	opt stack 0
   597                           
   598                           ; 3 bytes @ 0x2C
   599  0000EC                     	ds	3
   600  0000EF                     main@Iout:
   601                           	opt stack 0
   602                           
   603                           ; 3 bytes @ 0x2F
   604  0000EF                     	ds	3
   605  0000F2                     main@Uout:
   606                           	opt stack 0
   607                           
   608                           ; 3 bytes @ 0x32
   609  0000F2                     	ds	3
   610  0000F5                     main@Uin:
   611                           	opt stack 0
   612                           
   613                           ; 3 bytes @ 0x35
   614  0000F5                     	ds	3
   615  0000F8                     main@c:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x38
   619  0000F8                     	ds	2
   620  0000FA                     main@tens:
   621                           	opt stack 0
   622                           
   623                           ; 3 bytes @ 0x3A
   624  0000FA                     	ds	3
   625  0000FD                     main@port:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x3D
   629  0000FD                     	ds	2
   630                           tblptru	equ	0xFF8
   631                           tblptrh	equ	0xFF7
   632                           tblptrl	equ	0xFF6
   633                           tablat	equ	0xFF5
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           
   637                           	psect	cstackCOMRAM
   638  000001                     __pcstackCOMRAM:
   639                           	opt stack 0
   640  000001                     ??_isdigit:
   641  000001                     ??_I2C_Master_Wait:
   642  000001                     ?___awmod:
   643                           	opt stack 0
   644  000001                     ?___ftpack:
   645                           	opt stack 0
   646  000001                     ?___ftneg:
   647                           	opt stack 0
   648  000001                     ?__tdiv_to_l_:
   649                           	opt stack 0
   650  000001                     ?__div_to_l_:
   651                           	opt stack 0
   652  000001                     ?___lldiv:
   653                           	opt stack 0
   654  000001                     ?___llmod:
   655                           	opt stack 0
   656  000001                     ___awmod@dividend:
   657                           	opt stack 0
   658  000001                     __div_to_l_@f1:
   659                           	opt stack 0
   660  000001                     ___ftpack@arg:
   661                           	opt stack 0
   662  000001                     __tdiv_to_l_@f1:
   663                           	opt stack 0
   664  000001                     ___ftge@ff1:
   665                           	opt stack 0
   666  000001                     ___ftneg@f1:
   667                           	opt stack 0
   668  000001                     ___lldiv@dividend:
   669                           	opt stack 0
   670  000001                     ___llmod@dividend:
   671                           	opt stack 0
   672                           
   673                           ; 4 bytes @ 0x0
   674  000001                     	ds	1
   675  000002                     _isdigit$1157:
   676                           	opt stack 0
   677  000002                     I2C_Write_Display@d:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x1
   681  000002                     	ds	1
   682  000003                     isdigit@c:
   683                           	opt stack 0
   684  000003                     ___awmod@divisor:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x2
   688  000003                     	ds	1
   689  000004                     Lcd_Port@data:
   690                           	opt stack 0
   691  000004                     ___ftpack@exp:
   692                           	opt stack 0
   693  000004                     __div_to_l_@f2:
   694                           	opt stack 0
   695  000004                     __tdiv_to_l_@f2:
   696                           	opt stack 0
   697  000004                     ___ftge@ff2:
   698                           	opt stack 0
   699                           
   700                           ; 3 bytes @ 0x3
   701  000004                     	ds	1
   702  000005                     ??_Lcd_Cmd:
   703  000005                     Lcd_Write_Char@a:
   704                           	opt stack 0
   705  000005                     ___awmod@counter:
   706                           	opt stack 0
   707  000005                     ___ftpack@sign:
   708                           	opt stack 0
   709  000005                     ___lldiv@divisor:
   710                           	opt stack 0
   711  000005                     ___llmod@divisor:
   712                           	opt stack 0
   713                           
   714                           ; 4 bytes @ 0x4
   715  000005                     	ds	1
   716  000006                     ??___ftpack:
   717  000006                     Lcd_Write_Char@y:
   718                           	opt stack 0
   719  000006                     ___awmod@sign:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x5
   723  000006                     	ds	1
   724  000007                     ??__tdiv_to_l_:
   725  000007                     ??___ftge:
   726  000007                     ?___awdiv:
   727                           	opt stack 0
   728  000007                     _Lcd_Cmd$736:
   729                           	opt stack 0
   730  000007                     Lcd_Write_Char@temp:
   731                           	opt stack 0
   732  000007                     ___awdiv@dividend:
   733                           	opt stack 0
   734  000007                     __div_to_l_@quot:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0x6
   738  000007                     	ds	1
   739  000008                     Lcd_Cmd@buff:
   740                           	opt stack 0
   741  000008                     Lcd_Write_String@a:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x7
   745  000008                     	ds	1
   746  000009                     ?___ftdiv:
   747                           	opt stack 0
   748  000009                     ?___lbtoft:
   749                           	opt stack 0
   750  000009                     ?___lltoft:
   751                           	opt stack 0
   752  000009                     ___llmod@counter:
   753                           	opt stack 0
   754  000009                     ___awdiv@divisor:
   755                           	opt stack 0
   756  000009                     ___ftdiv@f1:
   757                           	opt stack 0
   758  000009                     ___lldiv@quotient:
   759                           	opt stack 0
   760  000009                     ___lltoft@c:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x8
   764  000009                     	ds	1
   765  00000A                     ??_Lcd_Write_String:
   766  00000A                     Lcd_Cmd@a:
   767                           	opt stack 0
   768  00000A                     __tdiv_to_l_@quot:
   769                           	opt stack 0
   770                           
   771                           ; 4 bytes @ 0x9
   772  00000A                     	ds	1
   773  00000B                     ??_Lcd_Init:
   774  00000B                     Lcd_Set_Cursor@b:
   775                           	opt stack 0
   776  00000B                     ___awdiv@counter:
   777                           	opt stack 0
   778  00000B                     __div_to_l_@cntr:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0xA
   782  00000B                     	ds	1
   783  00000C                     Lcd_Set_Cursor@a:
   784                           	opt stack 0
   785  00000C                     ___awdiv@sign:
   786                           	opt stack 0
   787  00000C                     __div_to_l_@exp1:
   788                           	opt stack 0
   789  00000C                     ___lbtoft@c:
   790                           	opt stack 0
   791  00000C                     Lcd_Write_String@i:
   792                           	opt stack 0
   793  00000C                     ___ftdiv@f2:
   794                           	opt stack 0
   795                           
   796                           ; 3 bytes @ 0xB
   797  00000C                     	ds	1
   798  00000D                     ??___lltoft:
   799  00000D                     Lcd_Set_Cursor@z:
   800                           	opt stack 0
   801  00000D                     ___lldiv@counter:
   802                           	opt stack 0
   803  00000D                     ___awdiv@quotient:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0xC
   807  00000D                     	ds	1
   808  00000E                     Lcd_Set_Cursor@y:
   809                           	opt stack 0
   810  00000E                     __tdiv_to_l_@cntr:
   811                           	opt stack 0
   812  00000E                     I2C_Master_Init@c:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0xD
   816  00000E                     	ds	1
   817  00000F                     ??___ftdiv:
   818  00000F                     ?___wmul:
   819                           	opt stack 0
   820  00000F                     Lcd_Set_Cursor@temp:
   821                           	opt stack 0
   822  00000F                     __tdiv_to_l_@exp1:
   823                           	opt stack 0
   824  00000F                     ___wmul@multiplier:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0xE
   828  00000F                     	ds	2
   829  000011                     ___lltoft@exp:
   830                           	opt stack 0
   831  000011                     ___wmul@multiplicand:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x10
   835  000011                     	ds	1
   836  000012                     ??_I2C_Master_Init:
   837  000012                     ___ftdiv@cntr:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x11
   841  000012                     	ds	1
   842  000013                     ___wmul@product:
   843                           	opt stack 0
   844  000013                     ___ftdiv@f3:
   845                           	opt stack 0
   846                           
   847                           ; 3 bytes @ 0x12
   848  000013                     	ds	2
   849  000015                     ?___ftmul:
   850                           	opt stack 0
   851  000015                     ___ftmul@f1:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0x14
   855  000015                     	ds	1
   856  000016                     ??_init_io_display:
   857  000016                     ___ftdiv@exp:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x15
   861  000016                     	ds	1
   862  000017                     ___ftdiv@sign:
   863                           	opt stack 0
   864                           
   865                           ; 1 bytes @ 0x16
   866  000017                     	ds	1
   867  000018                     ___ftmul@f2:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x17
   871  000018                     	ds	3
   872  00001B                     ??___ftmul:
   873                           
   874                           ; 1 bytes @ 0x1A
   875  00001B                     	ds	3
   876  00001E                     ___ftmul@exp:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x1D
   880  00001E                     	ds	1
   881  00001F                     ___ftmul@f3_as_product:
   882                           	opt stack 0
   883                           
   884                           ; 3 bytes @ 0x1E
   885  00001F                     	ds	3
   886  000022                     ___ftmul@cntr:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x21
   890  000022                     	ds	1
   891  000023                     ___ftmul@sign:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x22
   895  000023                     	ds	1
   896  000024                     ??_read_Uout:
   897  000024                     ??_read_Iout:
   898  000024                     ??_read_Uin:
   899  000024                     ?_fround:
   900                           	opt stack 0
   901  000024                     ?_scale:
   902                           	opt stack 0
   903                           
   904                           ; 3 bytes @ 0x23
   905  000024                     	ds	3
   906  000027                     _fround$1532:
   907                           	opt stack 0
   908  000027                     _scale$1533:
   909                           	opt stack 0
   910                           
   911                           ; 3 bytes @ 0x26
   912  000027                     	ds	3
   913  00002A                     scale@scl:
   914                           	opt stack 0
   915  00002A                     _fround$1531:
   916                           	opt stack 0
   917                           
   918                           ; 3 bytes @ 0x29
   919  00002A                     	ds	1
   920  00002B                     ?___fttol:
   921                           	opt stack 0
   922  00002B                     ___fttol@f1:
   923                           	opt stack 0
   924                           
   925                           ; 3 bytes @ 0x2A
   926  00002B                     	ds	2
   927  00002D                     fround@prec:
   928                           	opt stack 0
   929                           
   930                           ; 1 bytes @ 0x2C
   931  00002D                     	ds	1
   932  00002E                     ?___ftadd:
   933                           	opt stack 0
   934  00002E                     ___ftadd@f1:
   935                           	opt stack 0
   936                           
   937                           ; 3 bytes @ 0x2D
   938  00002E                     	ds	1
   939  00002F                     ??___fttol:
   940                           
   941                           ; 1 bytes @ 0x2E
   942  00002F                     	ds	2
   943  000031                     ___ftadd@f2:
   944                           	opt stack 0
   945                           
   946                           ; 3 bytes @ 0x30
   947  000031                     	ds	3
   948  000034                     ??___ftadd:
   949  000034                     ___fttol@sign1:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x33
   953  000034                     	ds	1
   954  000035                     ___fttol@lval:
   955                           	opt stack 0
   956                           
   957                           ; 4 bytes @ 0x34
   958  000035                     	ds	2
   959  000037                     ___ftadd@sign:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x36
   963  000037                     	ds	1
   964  000038                     ___ftadd@exp2:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x37
   968  000038                     	ds	1
   969  000039                     ___ftadd@exp1:
   970                           	opt stack 0
   971  000039                     ___fttol@exp1:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x38
   975  000039                     	ds	1
   976  00003A                     ?___ftsub:
   977                           	opt stack 0
   978  00003A                     ___ftsub@f1:
   979                           	opt stack 0
   980                           
   981                           ; 3 bytes @ 0x39
   982  00003A                     	ds	3
   983  00003D                     ___ftsub@f2:
   984                           	opt stack 0
   985                           
   986                           ; 3 bytes @ 0x3C
   987  00003D                     	ds	3
   988  000040                     ?_sprintf:
   989                           	opt stack 0
   990  000040                     sprintf@sp:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x3F
   994  000040                     	ds	2
   995  000042                     sprintf@f:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x41
   999  000042                     	ds	5
  1000  000047                     ??_sprintf:
  1001                           
  1002                           ; 1 bytes @ 0x46
  1003  000047                     	ds	6
  1004  00004D                     ??_main:
  1005                           
  1006                           ; 1 bytes @ 0x4C
  1007  00004D                     	ds	2
  1008                           tblptru	equ	0xFF8
  1009                           tblptrh	equ	0xFF7
  1010                           tblptrl	equ	0xFF6
  1011                           tablat	equ	0xFF5
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           
  1015 ;;
  1016 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1017 ;;
  1018 ;; *************** function _main *****************
  1019 ;; Defined at:
  1020 ;;		line 16 in file "main.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;		None
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;  pwm_buffer     20    0        unsigned char [20]
  1025 ;;  str_V           8   36[BANK0 ] unsigned char [8]
  1026 ;;  str_A           8   28[BANK0 ] unsigned char [8]
  1027 ;;  str_P           8    0        unsigned char [8]
  1028 ;;  tens            3   58[BANK0 ] float 
  1029 ;;  Uin             3   53[BANK0 ] float 
  1030 ;;  Uout            3   50[BANK0 ] float 
  1031 ;;  Iout            3   47[BANK0 ] float 
  1032 ;;  curent          3   44[BANK0 ] float 
  1033 ;;  Power           3   23[BANK0 ] float 
  1034 ;;  numar           3    0        float 
  1035 ;;  tens_A          3    0        float 
  1036 ;;  port            2   61[BANK0 ] int 
  1037 ;;  c               2   56[BANK0 ] int 
  1038 ;;  dty             2   26[BANK0 ] int 
  1039 ;;  tip             2    0        int 
  1040 ;;  rez_adc         2    0        int 
  1041 ;;  rez_adc_U       2    0        int 
  1042 ;;  rez_adc_A       2    0        int 
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1053 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1054 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1055 ;;      Totals:         2      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1056 ;;Total ram usage:       42 bytes
  1057 ;; Hardware stack levels required when called:    6
  1058 ;; This function calls:
  1059 ;;		_Lcd_Clear
  1060 ;;		_Lcd_Set_Cursor
  1061 ;;		_Lcd_Write_String
  1062 ;;		___ftge
  1063 ;;		___ftmul
  1064 ;;		_adc_config
  1065 ;;		_config
  1066 ;;		_init_io_display
  1067 ;;		_pwm_config
  1068 ;;		_read_Iout
  1069 ;;		_read_Uin
  1070 ;;		_read_Uout
  1071 ;;		_sprintf
  1072 ;; This function is called by:
  1073 ;;		Startup code after reset
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text0
  1078  001DF4                     __ptext0:
  1079                           	opt stack 0
  1080  001DF4                     _main:
  1081                           	opt stack 25
  1082                           
  1083                           ;main.c: 19: char pwm_buffer[20];
  1084                           ;main.c: 20: config();
  1085                           
  1086                           ;incstack = 0
  1087  001DF4  EC19  F017         	call	_config	;wreg free
  1088                           
  1089                           ;main.c: 21: pwm_config();
  1090  001DF8  ECD6  F017         	call	_pwm_config	;wreg free
  1091                           
  1092                           ;main.c: 22: adc_config();
  1093  001DFC  EC41  F018         	call	_adc_config	;wreg free
  1094                           
  1095                           ;main.c: 23: init_io_display();
  1096  001E00  EC29  F016         	call	_init_io_display	;wreg free
  1097                           
  1098                           ;main.c: 24: char str_V[8],str_A[8],str_P[8];
  1099                           ;main.c: 25: float tens,tens_A,curent,Power,Iout,Uout,Uin;
  1100                           ;main.c: 26: int rez_adc_A,rez_adc_U;
  1101                           ;main.c: 27: int dty,rez_adc,tip,port,c=100;
  1102  001E04  0E00               	movlw	0
  1103  001E06  0100               	movlb	0	; () banked
  1104  001E08  6FF9               	movwf	(main@c+1)& (0+255),b
  1105  001E0A  0E64               	movlw	100
  1106  001E0C  6FF8               	movwf	main@c& (0+255),b
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;main.c: 28: float numar;
  1110                           ;main.c: 29: dty=0;
  1111  001E0E  0E00               	movlw	0
  1112  001E10  6FDB               	movwf	(main@dty+1)& (0+255),b
  1113  001E12  0E00               	movlw	0
  1114  001E14  6FDA               	movwf	main@dty& (0+255),b
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;main.c: 30: port=0;
  1118  001E16  0E00               	movlw	0
  1119  001E18  6FFE               	movwf	(main@port+1)& (0+255),b
  1120  001E1A  0E00               	movlw	0
  1121  001E1C  6FFD               	movwf	main@port& (0+255),b
  1122                           
  1123                           ; BSR set to: 0
  1124                           ;main.c: 31: TRISDbits.RD4=0;
  1125  001E1E  9895               	bcf	3989,4,c	;volatile
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;main.c: 32: LATDbits.LD6=0;
  1129  001E20  9C8C               	bcf	3980,6,c	;volatile
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;main.c: 33: LATDbits.LD7=0;
  1133  001E22  9E8C               	bcf	3980,7,c	;volatile
  1134                           
  1135                           ; BSR set to: 0
  1136                           ;main.c: 34: LATDbits.LD5=0;
  1137  001E24  9A8C               	bcf	3980,5,c	;volatile
  1138                           
  1139                           ; BSR set to: 0
  1140                           ;main.c: 35: LATDbits.LD4=0;
  1141  001E26  988C               	bcf	3980,4,c	;volatile
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;main.c: 38: ADCON0=0b00010011;
  1145  001E28  0E13               	movlw	19
  1146  001E2A  6EC2               	movwf	4034,c	;volatile
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;main.c: 40: Lcd_Clear();
  1150  001E2C  EC57  F018         	call	_Lcd_Clear	;wreg free
  1151  001E30                     
  1152                           ;main.c: 51: {
  1153                           ;main.c: 52: read_Uout();
  1154  001E30  EC2B  F014         	call	_read_Uout	;wreg free
  1155                           
  1156                           ;main.c: 54: Lcd_Set_Cursor(1,1);
  1157  001E34  0E01               	movlw	1
  1158  001E36  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1159  001E38  0E01               	movlw	1
  1160  001E3A  EC43  F017         	call	_Lcd_Set_Cursor
  1161                           
  1162                           ;main.c: 55: Lcd_Write_String("U=");
  1163  001E3E  0E88               	movlw	low STR_1
  1164  001E40  6E08               	movwf	Lcd_Write_String@a,c
  1165  001E42  0E10               	movlw	high STR_1
  1166  001E44  6E09               	movwf	Lcd_Write_String@a+1,c
  1167  001E46  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1168                           
  1169                           ;main.c: 56: sprintf(str_V, "%.2f", tens);
  1170  001E4A  0EE4               	movlw	low main@str_V
  1171  001E4C  6E40               	movwf	sprintf@sp,c
  1172  001E4E  0E00               	movlw	high main@str_V
  1173  001E50  6E41               	movwf	sprintf@sp+1,c
  1174  001E52  0E7C               	movlw	low STR_2
  1175  001E54  6E42               	movwf	sprintf@f,c
  1176  001E56  0E10               	movlw	high STR_2
  1177  001E58  6E43               	movwf	sprintf@f+1,c
  1178  001E5A  C0FA  F044         	movff	main@tens,?_sprintf+4
  1179  001E5E  C0FB  F045         	movff	main@tens+1,?_sprintf+5
  1180  001E62  C0FC  F046         	movff	main@tens+2,?_sprintf+6
  1181  001E66  EC49  F008         	call	_sprintf	;wreg free
  1182                           
  1183                           ;main.c: 57: Lcd_Set_Cursor(1,3);
  1184  001E6A  0E03               	movlw	3
  1185  001E6C  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1186  001E6E  0E01               	movlw	1
  1187  001E70  EC43  F017         	call	_Lcd_Set_Cursor
  1188                           
  1189                           ;main.c: 58: Lcd_Write_String(str_V);
  1190  001E74  0EE4               	movlw	low main@str_V
  1191  001E76  6E08               	movwf	Lcd_Write_String@a,c
  1192  001E78  0E00               	movlw	high main@str_V
  1193  001E7A  6E09               	movwf	Lcd_Write_String@a+1,c
  1194  001E7C  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1195                           
  1196                           ;main.c: 59: port=1;
  1197  001E80  0E00               	movlw	0
  1198  001E82  0100               	movlb	0	; () banked
  1199  001E84  6FFE               	movwf	(main@port+1)& (0+255),b
  1200  001E86  0E01               	movlw	1
  1201  001E88  6FFD               	movwf	main@port& (0+255),b
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;main.c: 60: _delay((unsigned long)((100)*(64000000/4000.0)));
  1205  001E8A  0E09               	movlw	9
  1206  001E8C  6E4E               	movwf	(??_main+1)& (0+255),c
  1207  001E8E  0E1E               	movlw	30
  1208  001E90  6E4D               	movwf	??_main& (0+255),c
  1209  001E92  0EE4               	movlw	228
  1210  001E94                     u2947:
  1211  001E94  2EE8               	decfsz	wreg,f,c
  1212  001E96  D7FE               	bra	u2947
  1213  001E98  2E4D               	decfsz	??_main& (0+255),f,c
  1214  001E9A  D7FC               	bra	u2947
  1215  001E9C  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1216  001E9E  D7FA               	bra	u2947
  1217  001EA0  D000               	nop2	
  1218                           
  1219                           ;main.c: 61: ADRESH=0X00;
  1220  001EA2  0E00               	movlw	0
  1221  001EA4  6EC4               	movwf	4036,c	;volatile
  1222                           
  1223                           ;main.c: 62: _delay((unsigned long)((100)*(64000000/4000.0)));
  1224  001EA6  0E09               	movlw	9
  1225  001EA8  6E4E               	movwf	(??_main+1)& (0+255),c
  1226  001EAA  0E1E               	movlw	30
  1227  001EAC  6E4D               	movwf	??_main& (0+255),c
  1228  001EAE  0EE4               	movlw	228
  1229  001EB0                     u2957:
  1230  001EB0  2EE8               	decfsz	wreg,f,c
  1231  001EB2  D7FE               	bra	u2957
  1232  001EB4  2E4D               	decfsz	??_main& (0+255),f,c
  1233  001EB6  D7FC               	bra	u2957
  1234  001EB8  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1235  001EBA  D7FA               	bra	u2957
  1236  001EBC  D000               	nop2	
  1237                           
  1238                           ;main.c: 66: {
  1239                           ;main.c: 67: read_Iout();
  1240  001EBE  ECB7  F015         	call	_read_Iout	;wreg free
  1241                           
  1242                           ;main.c: 69: Lcd_Set_Cursor(2,1);
  1243  001EC2  0E01               	movlw	1
  1244  001EC4  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1245  001EC6  0E02               	movlw	2
  1246  001EC8  EC43  F017         	call	_Lcd_Set_Cursor
  1247                           
  1248                           ;main.c: 70: Lcd_Write_String("I=");
  1249  001ECC  0E85               	movlw	low STR_3
  1250  001ECE  6E08               	movwf	Lcd_Write_String@a,c
  1251  001ED0  0E10               	movlw	high STR_3
  1252  001ED2  6E09               	movwf	Lcd_Write_String@a+1,c
  1253  001ED4  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1254                           
  1255                           ;main.c: 71: sprintf(str_A, "%.2f", curent);
  1256  001ED8  0EDC               	movlw	low main@str_A
  1257  001EDA  6E40               	movwf	sprintf@sp,c
  1258  001EDC  0E00               	movlw	high main@str_A
  1259  001EDE  6E41               	movwf	sprintf@sp+1,c
  1260  001EE0  0E7C               	movlw	low STR_2
  1261  001EE2  6E42               	movwf	sprintf@f,c
  1262  001EE4  0E10               	movlw	high STR_2
  1263  001EE6  6E43               	movwf	sprintf@f+1,c
  1264  001EE8  C0EC  F044         	movff	main@curent,?_sprintf+4
  1265  001EEC  C0ED  F045         	movff	main@curent+1,?_sprintf+5
  1266  001EF0  C0EE  F046         	movff	main@curent+2,?_sprintf+6
  1267  001EF4  EC49  F008         	call	_sprintf	;wreg free
  1268                           
  1269                           ;main.c: 72: Lcd_Set_Cursor(2,3);
  1270  001EF8  0E03               	movlw	3
  1271  001EFA  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1272  001EFC  0E02               	movlw	2
  1273  001EFE  EC43  F017         	call	_Lcd_Set_Cursor
  1274                           
  1275                           ;main.c: 73: Lcd_Write_String(str_A);
  1276  001F02  0EDC               	movlw	low main@str_A
  1277  001F04  6E08               	movwf	Lcd_Write_String@a,c
  1278  001F06  0E00               	movlw	high main@str_A
  1279  001F08  6E09               	movwf	Lcd_Write_String@a+1,c
  1280  001F0A  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1281                           
  1282                           ;main.c: 74: Lcd_Write_String(" A");
  1283  001F0E  0E8B               	movlw	low STR_5
  1284  001F10  6E08               	movwf	Lcd_Write_String@a,c
  1285  001F12  0E10               	movlw	high STR_5
  1286  001F14  6E09               	movwf	Lcd_Write_String@a+1,c
  1287  001F16  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1288                           
  1289                           ;main.c: 75: port=2;
  1290  001F1A  0E00               	movlw	0
  1291  001F1C  0100               	movlb	0	; () banked
  1292  001F1E  6FFE               	movwf	(main@port+1)& (0+255),b
  1293  001F20  0E02               	movlw	2
  1294  001F22  6FFD               	movwf	main@port& (0+255),b
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;main.c: 76: _delay((unsigned long)((100)*(64000000/4000.0)));
  1298  001F24  0E09               	movlw	9
  1299  001F26  6E4E               	movwf	(??_main+1)& (0+255),c
  1300  001F28  0E1E               	movlw	30
  1301  001F2A  6E4D               	movwf	??_main& (0+255),c
  1302  001F2C  0EE4               	movlw	228
  1303  001F2E                     u2967:
  1304  001F2E  2EE8               	decfsz	wreg,f,c
  1305  001F30  D7FE               	bra	u2967
  1306  001F32  2E4D               	decfsz	??_main& (0+255),f,c
  1307  001F34  D7FC               	bra	u2967
  1308  001F36  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1309  001F38  D7FA               	bra	u2967
  1310  001F3A  D000               	nop2	
  1311                           
  1312                           ;main.c: 77: ADRESH=0X00;
  1313  001F3C  0E00               	movlw	0
  1314  001F3E  6EC4               	movwf	4036,c	;volatile
  1315                           
  1316                           ;main.c: 78: _delay((unsigned long)((100)*(64000000/4000.0)));
  1317  001F40  0E09               	movlw	9
  1318  001F42  6E4E               	movwf	(??_main+1)& (0+255),c
  1319  001F44  0E1E               	movlw	30
  1320  001F46  6E4D               	movwf	??_main& (0+255),c
  1321  001F48  0EE4               	movlw	228
  1322  001F4A                     u2977:
  1323  001F4A  2EE8               	decfsz	wreg,f,c
  1324  001F4C  D7FE               	bra	u2977
  1325  001F4E  2E4D               	decfsz	??_main& (0+255),f,c
  1326  001F50  D7FC               	bra	u2977
  1327  001F52  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1328  001F54  D7FA               	bra	u2977
  1329  001F56  D000               	nop2	
  1330                           
  1331                           ;main.c: 81: {
  1332                           ;main.c: 82: read_Uin();
  1333  001F58  EC73  F014         	call	_read_Uin	;wreg free
  1334                           
  1335                           ;main.c: 84: Lcd_Set_Cursor(1,9);
  1336  001F5C  0E09               	movlw	9
  1337  001F5E  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1338  001F60  0E01               	movlw	1
  1339  001F62  EC43  F017         	call	_Lcd_Set_Cursor
  1340                           
  1341                           ;main.c: 85: Lcd_Write_String("Ui=");
  1342  001F66  0E81               	movlw	low STR_6
  1343  001F68  6E08               	movwf	Lcd_Write_String@a,c
  1344  001F6A  0E10               	movlw	high STR_6
  1345  001F6C  6E09               	movwf	Lcd_Write_String@a+1,c
  1346  001F6E  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1347                           
  1348                           ;main.c: 86: sprintf(str_V, "%.2f", tens);
  1349  001F72  0EE4               	movlw	low main@str_V
  1350  001F74  6E40               	movwf	sprintf@sp,c
  1351  001F76  0E00               	movlw	high main@str_V
  1352  001F78  6E41               	movwf	sprintf@sp+1,c
  1353  001F7A  0E7C               	movlw	low STR_2
  1354  001F7C  6E42               	movwf	sprintf@f,c
  1355  001F7E  0E10               	movlw	high STR_2
  1356  001F80  6E43               	movwf	sprintf@f+1,c
  1357  001F82  C0FA  F044         	movff	main@tens,?_sprintf+4
  1358  001F86  C0FB  F045         	movff	main@tens+1,?_sprintf+5
  1359  001F8A  C0FC  F046         	movff	main@tens+2,?_sprintf+6
  1360  001F8E  EC49  F008         	call	_sprintf	;wreg free
  1361                           
  1362                           ;main.c: 87: Lcd_Set_Cursor(1,12);
  1363  001F92  0E0C               	movlw	12
  1364  001F94  6E0B               	movwf	Lcd_Set_Cursor@b,c
  1365  001F96  0E01               	movlw	1
  1366  001F98  EC43  F017         	call	_Lcd_Set_Cursor
  1367                           
  1368                           ;main.c: 88: Lcd_Write_String(str_V);
  1369  001F9C  0EE4               	movlw	low main@str_V
  1370  001F9E  6E08               	movwf	Lcd_Write_String@a,c
  1371  001FA0  0E00               	movlw	high main@str_V
  1372  001FA2  6E09               	movwf	Lcd_Write_String@a+1,c
  1373  001FA4  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1374                           
  1375                           ;main.c: 89: Lcd_Write_String(" V");
  1376  001FA8  0E8E               	movlw	low STR_8
  1377  001FAA  6E08               	movwf	Lcd_Write_String@a,c
  1378  001FAC  0E10               	movlw	high STR_8
  1379  001FAE  6E09               	movwf	Lcd_Write_String@a+1,c
  1380  001FB0  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  1381                           
  1382                           ;main.c: 90: port=0;
  1383  001FB4  0E00               	movlw	0
  1384  001FB6  0100               	movlb	0	; () banked
  1385  001FB8  6FFE               	movwf	(main@port+1)& (0+255),b
  1386  001FBA  0E00               	movlw	0
  1387  001FBC  6FFD               	movwf	main@port& (0+255),b
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;main.c: 91: _delay((unsigned long)((100)*(64000000/4000.0)));
  1391  001FBE  0E09               	movlw	9
  1392  001FC0  6E4E               	movwf	(??_main+1)& (0+255),c
  1393  001FC2  0E1E               	movlw	30
  1394  001FC4  6E4D               	movwf	??_main& (0+255),c
  1395  001FC6  0EE4               	movlw	228
  1396  001FC8                     u2987:
  1397  001FC8  2EE8               	decfsz	wreg,f,c
  1398  001FCA  D7FE               	bra	u2987
  1399  001FCC  2E4D               	decfsz	??_main& (0+255),f,c
  1400  001FCE  D7FC               	bra	u2987
  1401  001FD0  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1402  001FD2  D7FA               	bra	u2987
  1403  001FD4  D000               	nop2	
  1404                           
  1405                           ;main.c: 92: ADRESH=0X00;
  1406  001FD6  0E00               	movlw	0
  1407  001FD8  6EC4               	movwf	4036,c	;volatile
  1408                           
  1409                           ;main.c: 93: _delay((unsigned long)((100)*(64000000/4000.0)));
  1410  001FDA  0E09               	movlw	9
  1411  001FDC  6E4E               	movwf	(??_main+1)& (0+255),c
  1412  001FDE  0E1E               	movlw	30
  1413  001FE0  6E4D               	movwf	??_main& (0+255),c
  1414  001FE2  0EE4               	movlw	228
  1415  001FE4                     u2997:
  1416  001FE4  2EE8               	decfsz	wreg,f,c
  1417  001FE6  D7FE               	bra	u2997
  1418  001FE8  2E4D               	decfsz	??_main& (0+255),f,c
  1419  001FEA  D7FC               	bra	u2997
  1420  001FEC  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1421  001FEE  D7FA               	bra	u2997
  1422  001FF0  D000               	nop2	
  1423                           
  1424                           ;main.c: 94: }
  1425                           ;main.c: 97: if(Uin<12)
  1426  001FF2  C0F5  F001         	movff	main@Uin,___ftge@ff1
  1427  001FF6  C0F6  F002         	movff	main@Uin+1,___ftge@ff1+1
  1428  001FFA  C0F7  F003         	movff	main@Uin+2,___ftge@ff1+2
  1429  001FFE  0E00               	movlw	0
  1430  002000  6E04               	movwf	___ftge@ff2,c
  1431  002002  0E40               	movlw	64
  1432  002004  6E05               	movwf	___ftge@ff2+1,c
  1433  002006  0E41               	movlw	65
  1434  002008  6E06               	movwf	___ftge@ff2+2,c
  1435  00200A  ECE3  F013         	call	___ftge	;wreg free
  1436  00200E  B0D8               	btfsc	status,0,c
  1437  002010  D70F               	goto	l65
  1438                           
  1439                           ;main.c: 98: {
  1440                           ;main.c: 99: CCPR1L=0;
  1441  002012  0E00               	movlw	0
  1442  002014  6EBE               	movwf	4030,c	;volatile
  1443                           
  1444                           ;main.c: 100: Power=Uout*Iout;
  1445  002016  C0F2  F015         	movff	main@Uout,___ftmul@f1
  1446  00201A  C0F3  F016         	movff	main@Uout+1,___ftmul@f1+1
  1447  00201E  C0F4  F017         	movff	main@Uout+2,___ftmul@f1+2
  1448  002022  C0EF  F018         	movff	main@Iout,___ftmul@f2
  1449  002026  C0F0  F019         	movff	main@Iout+1,___ftmul@f2+1
  1450  00202A  C0F1  F01A         	movff	main@Iout+2,___ftmul@f2+2
  1451  00202E  EC9F  F012         	call	___ftmul	;wreg free
  1452  002032  C015  F0D7         	movff	?___ftmul,main@Power
  1453  002036  C016  F0D8         	movff	?___ftmul+1,main@Power+1
  1454  00203A  C017  F0D9         	movff	?___ftmul+2,main@Power+2
  1455                           
  1456                           ;main.c: 101: CCPR2L=c;
  1457  00203E  C0F8  FF67         	movff	main@c,3943	;volatile
  1458  002042  D6F6               	goto	l65
  1459  002044                     __end_of_main:
  1460                           	opt stack 0
  1461                           tblptru	equ	0xFF8
  1462                           tblptrh	equ	0xFF7
  1463                           tblptrl	equ	0xFF6
  1464                           tablat	equ	0xFF5
  1465                           postinc0	equ	0xFEE
  1466                           wreg	equ	0xFE8
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _sprintf *****************
  1470 ;; Defined at:
  1471 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1474 ;;		 -> main@str_A(8), main@str_V(8), 
  1475 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1476 ;;		 -> STR_7(5), STR_4(5), STR_2(5), 
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;  tmpval          4   13[BANK0 ] struct .
  1479 ;;  val             4    7[BANK0 ] unsigned long 
  1480 ;;  fval            3   19[BANK0 ] unsigned long 
  1481 ;;  cp              3    0        PTR const unsigned char 
  1482 ;;  prec            2   17[BANK0 ] int 
  1483 ;;  exp             2   11[BANK0 ] int 
  1484 ;;  flag            2    5[BANK0 ] unsigned short 
  1485 ;;  ap              2    3[BANK0 ] PTR void [1]
  1486 ;;		 -> ?_sprintf(2), 
  1487 ;;  len             2    0        unsigned int 
  1488 ;;  width           2    0        int 
  1489 ;;  c               1   22[BANK0 ] char 
  1490 ;;  d               1    0        unsigned char 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  2   63[COMRAM] int 
  1493 ;; Registers used:
  1494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1500 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1501 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1502 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;      Totals:        13      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;Total ram usage:       36 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    3
  1507 ;; This function calls:
  1508 ;;		___awdiv
  1509 ;;		___ftadd
  1510 ;;		___ftge
  1511 ;;		___ftmul
  1512 ;;		___ftneg
  1513 ;;		___ftsub
  1514 ;;		___fttol
  1515 ;;		___lldiv
  1516 ;;		___llmod
  1517 ;;		___lltoft
  1518 ;;		___wmul
  1519 ;;		__div_to_l_
  1520 ;;		__tdiv_to_l_
  1521 ;;		_fround
  1522 ;;		_isdigit
  1523 ;;		_scale
  1524 ;; This function is called by:
  1525 ;;		_main
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529                           	psect	text1
  1530  001092                     __ptext1:
  1531                           	opt stack 0
  1532  001092                     _sprintf:
  1533                           	opt stack 27
  1534                           
  1535                           ;doprnt.c: 494: va_list ap;
  1536                           ;doprnt.c: 499: signed char c;
  1537                           ;doprnt.c: 501: int width;
  1538                           ;doprnt.c: 504: int prec;
  1539                           ;doprnt.c: 508: unsigned short flag;
  1540                           ;doprnt.c: 515: char d;
  1541                           ;doprnt.c: 516: double fval;
  1542                           ;doprnt.c: 517: int exp;
  1543                           ;doprnt.c: 523: union {
  1544                           ;doprnt.c: 524: unsigned long vd;
  1545                           ;doprnt.c: 525: double integ;
  1546                           ;doprnt.c: 526: } tmpval;
  1547                           ;doprnt.c: 528: unsigned long val;
  1548                           ;doprnt.c: 529: unsigned len;
  1549                           ;doprnt.c: 530: const char * cp;
  1550                           ;doprnt.c: 533: *ap = __va_start();
  1551                           
  1552                           ;incstack = 0
  1553  001092  0E44               	movlw	low (?_sprintf+4)
  1554  001094  0100               	movlb	0	; () banked
  1555  001096  6FC3               	movwf	sprintf@ap& (0+255),b
  1556  001098  0E00               	movlw	high (?_sprintf+4)
  1557  00109A  6FC4               	movwf	(sprintf@ap+1)& (0+255),b
  1558                           
  1559                           ;doprnt.c: 536: while(c = *f++) {
  1560  00109C  D36B               	goto	l476
  1561  00109E                     
  1562                           ; BSR set to: 0
  1563                           ;doprnt.c: 538: if(c != '%')
  1564                           
  1565                           ; BSR set to: 0
  1566  00109E  0E25               	movlw	37
  1567  0010A0  19D6               	xorwf	sprintf@c& (0+255),w,b
  1568  0010A2  B4D8               	btfsc	status,2,c
  1569  0010A4  D007               	goto	l422
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;doprnt.c: 540: {
  1573                           ;doprnt.c: 541: ((*sp++ = (c)));
  1574  0010A6  C040  FFD9         	movff	sprintf@sp,fsr2l
  1575  0010AA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1576  0010AE  C0D6  FFDF         	movff	sprintf@c,indf2
  1577  0010B2  D35E               	goto	l3335
  1578  0010B4                     l422:
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;doprnt.c: 543: }
  1582                           ;doprnt.c: 548: flag = 0;
  1583                           
  1584                           ; BSR set to: 0
  1585  0010B4  0E00               	movlw	0
  1586  0010B6  6FC6               	movwf	(sprintf@flag+1)& (0+255),b
  1587  0010B8  0E00               	movlw	0
  1588  0010BA  6FC5               	movwf	sprintf@flag& (0+255),b
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;doprnt.c: 611: if(*f == '.') {
  1592  0010BC  C042  FFF6         	movff	sprintf@f,tblptrl
  1593  0010C0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1594  0010C4                     	if	0	;tblptru may be non-zero
  1595  0010C4                     	endif
  1596  0010C4                     	if	0	;tblptru may be non-zero
  1597  0010C4                     	endif
  1598  0010C4  0008               	tblrd		*
  1599  0010C6  50F5               	movf	tablat,w,c
  1600  0010C8  0A2E               	xorlw	46
  1601  0010CA  A4D8               	btfss	status,2,c
  1602  0010CC  D02F               	goto	l423
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;doprnt.c: 612: flag |= 0x4000;
  1606  0010CE  8DC6               	bsf	(sprintf@flag+1)& (0+255),6,b
  1607                           
  1608                           ;doprnt.c: 613: f++;
  1609  0010D0  4A42               	infsnz	sprintf@f,f,c
  1610  0010D2  2A43               	incf	sprintf@f+1,f,c
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;doprnt.c: 620: {
  1614                           ;doprnt.c: 621: prec = 0;
  1615  0010D4  0E00               	movlw	0
  1616  0010D6  6FD2               	movwf	(sprintf@prec+1)& (0+255),b
  1617  0010D8  0E00               	movlw	0
  1618  0010DA  6FD1               	movwf	sprintf@prec& (0+255),b
  1619                           
  1620                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1621  0010DC  D01C               	goto	l424
  1622  0010DE                     
  1623                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1624                           
  1625                           ; BSR set to: 0
  1626  0010DE  C0D1  F00F         	movff	sprintf@prec,___wmul@multiplier
  1627  0010E2  C0D2  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1628  0010E6  0E00               	movlw	0
  1629  0010E8  6E12               	movwf	___wmul@multiplicand+1,c
  1630  0010EA  0E0A               	movlw	10
  1631  0010EC  6E11               	movwf	___wmul@multiplicand,c
  1632  0010EE  ECEA  F017         	call	___wmul	;wreg free
  1633  0010F2  C042  FFF6         	movff	sprintf@f,tblptrl
  1634  0010F6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1635  0010FA                     	if	0	;tblptru may be non-zero
  1636  0010FA                     	endif
  1637  0010FA                     	if	0	;tblptru may be non-zero
  1638  0010FA                     	endif
  1639  0010FA  0008               	tblrd		*
  1640  0010FC  50F5               	movf	tablat,w,c
  1641  0010FE  260F               	addwf	?___wmul,f,c
  1642  001100  0E00               	movlw	0
  1643  001102  2210               	addwfc	?___wmul+1,f,c
  1644  001104  0ED0               	movlw	208
  1645  001106  240F               	addwf	?___wmul,w,c
  1646  001108  0100               	movlb	0	; () banked
  1647  00110A  6FD1               	movwf	sprintf@prec& (0+255),b
  1648  00110C  0EFF               	movlw	255
  1649  00110E  2010               	addwfc	?___wmul+1,w,c
  1650  001110  6FD2               	movwf	(sprintf@prec+1)& (0+255),b
  1651                           
  1652                           ; BSR set to: 0
  1653  001112  4A42               	infsnz	sprintf@f,f,c
  1654  001114  2A43               	incf	sprintf@f+1,f,c
  1655  001116                     l424:
  1656                           
  1657                           ; BSR set to: 0
  1658                           
  1659                           ; BSR set to: 0
  1660  001116  C042  FFF6         	movff	sprintf@f,tblptrl
  1661  00111A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1662  00111E                     	if	0	;tblptru may be non-zero
  1663  00111E                     	endif
  1664  00111E                     	if	0	;tblptru may be non-zero
  1665  00111E                     	endif
  1666  00111E  0008               	tblrd		*
  1667  001120  50F5               	movf	tablat,w,c
  1668  001122  EC32  F018         	call	_isdigit
  1669  001126  A0D8               	btfss	status,0,c
  1670  001128  D00A               	goto	l428
  1671  00112A  D7D9               	goto	l425
  1672  00112C                     l423:
  1673                           
  1674                           ;doprnt.c: 626: prec = 0;
  1675  00112C  0E00               	movlw	0
  1676  00112E  0100               	movlb	0	; () banked
  1677  001130  6FD2               	movwf	(sprintf@prec+1)& (0+255),b
  1678  001132  0E00               	movlw	0
  1679  001134  6FD1               	movwf	sprintf@prec& (0+255),b
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;doprnt.c: 628: flag |= 0x1000;
  1683  001136  89C6               	bsf	(sprintf@flag+1)& (0+255),4,b
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;doprnt.c: 630: }
  1687                           ;doprnt.c: 635: switch(c = *f++) {
  1688  001138  D002               	goto	l428
  1689  00113A                     
  1690                           ; BSR set to: 0
  1691                           ;doprnt.c: 663: flag |= 0x400;
  1692                           
  1693                           ; BSR set to: 0
  1694  00113A  85C6               	bsf	(sprintf@flag+1)& (0+255),2,b
  1695                           
  1696                           ;doprnt.c: 664: break;
  1697  00113C  D012               	goto	l432
  1698  00113E                     l428:
  1699                           
  1700                           ; BSR set to: 0
  1701  00113E  C042  FFF6         	movff	sprintf@f,tblptrl
  1702  001142  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1703  001146  4A42               	infsnz	sprintf@f,f,c
  1704  001148  2A43               	incf	sprintf@f+1,f,c
  1705  00114A                     	if	0	;tblptru may be non-zero
  1706  00114A                     	endif
  1707  00114A                     	if	0	;tblptru may be non-zero
  1708  00114A                     	endif
  1709  00114A  0008               	tblrd		*
  1710  00114C  CFF5 F0D6          	movff	tablat,sprintf@c
  1711  001150  0100               	movlb	0	; () banked
  1712  001152  51D6               	movf	sprintf@c& (0+255),w,b
  1713                           
  1714                           ; Switch size 1, requested type "space"
  1715                           ; Number of cases is 2, Range of values is 0 to 102
  1716                           ; switch strategies available:
  1717                           ; Name         Instructions Cycles
  1718                           ; simple_byte            7     4 (average)
  1719                           ;	Chosen strategy is simple_byte
  1720  001154  0A00               	xorlw	0	; case 0
  1721  001156  B4D8               	btfsc	status,2,c
  1722  001158  D319               	goto	u2860
  1723  00115A  0A66               	xorlw	102	; case 102
  1724  00115C  B4D8               	btfsc	status,2,c
  1725  00115E  D7ED               	goto	l431
  1726  001160  D309               	goto	l476
  1727  001162                     l432:
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;doprnt.c: 825: if(flag & (0x700)) {
  1731                           
  1732                           ; BSR set to: 0
  1733  001162  0E07               	movlw	7
  1734  001164  15C6               	andwf	(sprintf@flag+1)& (0+255),w,b
  1735  001166  B4D8               	btfsc	status,2,c
  1736  001168  D2C9               	goto	l434
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;doprnt.c: 827: if(flag & 0x1000)
  1740  00116A  A9C6               	btfss	(sprintf@flag+1)& (0+255),4,b
  1741  00116C  D004               	goto	l435
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;doprnt.c: 829: prec = 6;
  1745  00116E  0E00               	movlw	0
  1746  001170  6FD2               	movwf	(sprintf@prec+1)& (0+255),b
  1747  001172  0E06               	movlw	6
  1748  001174  6FD1               	movwf	sprintf@prec& (0+255),b
  1749  001176                     l435:
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1753                           
  1754                           ; BSR set to: 0
  1755  001176  C0C3  FFD9         	movff	sprintf@ap,fsr2l
  1756  00117A  C0C4  FFDA         	movff	sprintf@ap+1,fsr2h
  1757  00117E  CFDE F0D3          	movff	postinc2,sprintf@fval
  1758  001182  CFDE F0D4          	movff	postinc2,sprintf@fval+1
  1759  001186  CFDD F0D5          	movff	postdec2,sprintf@fval+2
  1760                           
  1761                           ; BSR set to: 0
  1762  00118A  0E03               	movlw	3
  1763  00118C  27C3               	addwf	sprintf@ap& (0+255),f,b
  1764  00118E  0E00               	movlw	0
  1765  001190  23C4               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;doprnt.c: 831: if(fval < 0.0) {
  1769  001192  AFD5               	btfss	(sprintf@fval+2)& (0+255),7,b
  1770  001194  D011               	goto	l436
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;doprnt.c: 832: fval = -fval;
  1774  001196  C0D3  F001         	movff	sprintf@fval,___ftneg@f1
  1775  00119A  C0D4  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1776  00119E  C0D5  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1777  0011A2  ECFD  F017         	call	___ftneg	;wreg free
  1778  0011A6  C001  F0D3         	movff	?___ftneg,sprintf@fval
  1779  0011AA  C002  F0D4         	movff	?___ftneg+1,sprintf@fval+1
  1780  0011AE  C003  F0D5         	movff	?___ftneg+2,sprintf@fval+2
  1781                           
  1782                           ;doprnt.c: 833: flag |= 0x03;
  1783  0011B2  0E03               	movlw	3
  1784  0011B4  0100               	movlb	0	; () banked
  1785  0011B6  13C5               	iorwf	sprintf@flag& (0+255),f,b
  1786  0011B8                     l436:
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;doprnt.c: 834: }
  1790                           ;doprnt.c: 835: exp = 0;
  1791                           
  1792                           ; BSR set to: 0
  1793  0011B8  0E00               	movlw	0
  1794  0011BA  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  1795  0011BC  0E00               	movlw	0
  1796  0011BE  6FCB               	movwf	sprintf@exp& (0+255),b
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;doprnt.c: 836: if( fval!=0) {
  1800  0011C0  51D3               	movf	sprintf@fval& (0+255),w,b
  1801  0011C2  11D4               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1802  0011C4  11D5               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1803  0011C6  B4D8               	btfsc	status,2,c
  1804  0011C8  D086               	goto	l441
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1808  0011CA  0E82               	movlw	130
  1809  0011CC  6E47               	movwf	??_sprintf& (0+255),c
  1810  0011CE  0EFF               	movlw	255
  1811  0011D0  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1812  0011D2  C0D3  F049         	movff	sprintf@fval,??_sprintf+2
  1813  0011D6  C0D4  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1814  0011DA  C0D5  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1815  0011DE  C0D6  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1816  0011E2  0E10               	movlw	16
  1817  0011E4  D005               	goto	u2610
  1818  0011E6                     u2615:
  1819  0011E6  90D8               	bcf	status,0,c
  1820  0011E8  324C               	rrcf	??_sprintf+5,f,c
  1821  0011EA  324B               	rrcf	??_sprintf+4,f,c
  1822  0011EC  324A               	rrcf	??_sprintf+3,f,c
  1823  0011EE  3249               	rrcf	??_sprintf+2,f,c
  1824  0011F0                     u2610:
  1825  0011F0  2EE8               	decfsz	wreg,f,c
  1826  0011F2  D7F9               	goto	u2615
  1827  0011F4  5049               	movf	??_sprintf+2,w,c
  1828  0011F6  2447               	addwf	??_sprintf,w,c
  1829  0011F8  6FCB               	movwf	sprintf@exp& (0+255),b
  1830  0011FA  0E00               	movlw	0
  1831  0011FC  2048               	addwfc	??_sprintf+1,w,c
  1832  0011FE  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;doprnt.c: 838: exp--;
  1836  001200  07CB               	decf	sprintf@exp& (0+255),f,b
  1837  001202  A0D8               	btfss	status,0,c
  1838  001204  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;doprnt.c: 839: exp *= 3;
  1842  001206  C0CB  F00F         	movff	sprintf@exp,___wmul@multiplier
  1843  00120A  C0CC  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1844  00120E  0E00               	movlw	0
  1845  001210  6E12               	movwf	___wmul@multiplicand+1,c
  1846  001212  0E03               	movlw	3
  1847  001214  6E11               	movwf	___wmul@multiplicand,c
  1848  001216  ECEA  F017         	call	___wmul	;wreg free
  1849  00121A  C00F  F0CB         	movff	?___wmul,sprintf@exp
  1850  00121E  C010  F0CC         	movff	?___wmul+1,sprintf@exp+1
  1851                           
  1852                           ;doprnt.c: 840: exp /= 10;
  1853  001222  C0CB  F007         	movff	sprintf@exp,___awdiv@dividend
  1854  001226  C0CC  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1855  00122A  0E00               	movlw	0
  1856  00122C  6E0A               	movwf	___awdiv@divisor+1,c
  1857  00122E  0E0A               	movlw	10
  1858  001230  6E09               	movwf	___awdiv@divisor,c
  1859  001232  ECBB  F014         	call	___awdiv	;wreg free
  1860  001236  C007  F0CB         	movff	?___awdiv,sprintf@exp
  1861  00123A  C008  F0CC         	movff	?___awdiv+1,sprintf@exp+1
  1862                           
  1863                           ;doprnt.c: 841: if(exp < 0)
  1864  00123E  0100               	movlb	0	; () banked
  1865  001240  AFCC               	btfss	(sprintf@exp+1)& (0+255),7,b
  1866  001242  D003               	goto	l438
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;doprnt.c: 842: exp--;
  1870  001244  07CB               	decf	sprintf@exp& (0+255),f,b
  1871  001246  A0D8               	btfss	status,0,c
  1872  001248  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  1873  00124A                     l438:
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1877                           
  1878                           ; BSR set to: 0
  1879  00124A  51CB               	movf	sprintf@exp& (0+255),w,b
  1880  00124C  0800               	sublw	0
  1881  00124E  ECCD  F00B         	call	_scale
  1882  001252  C024  F0CD         	movff	?_scale,sprintf@tmpval
  1883  001256  C025  F0CE         	movff	?_scale+1,sprintf@tmpval+1
  1884  00125A  C026  F0CF         	movff	?_scale+2,sprintf@tmpval+2
  1885                           
  1886                           ;doprnt.c: 847: tmpval.integ *= fval;
  1887  00125E  C0CD  F015         	movff	sprintf@tmpval,___ftmul@f1
  1888  001262  C0CE  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1889  001266  C0CF  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1890  00126A  C0D3  F018         	movff	sprintf@fval,___ftmul@f2
  1891  00126E  C0D4  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1892  001272  C0D5  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1893  001276  EC9F  F012         	call	___ftmul	;wreg free
  1894  00127A  C015  F0CD         	movff	?___ftmul,sprintf@tmpval
  1895  00127E  C016  F0CE         	movff	?___ftmul+1,sprintf@tmpval+1
  1896  001282  C017  F0CF         	movff	?___ftmul+2,sprintf@tmpval+2
  1897                           
  1898                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1899  001286  C0CD  F001         	movff	sprintf@tmpval,___ftge@ff1
  1900  00128A  C0CE  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1901  00128E  C0CF  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1902  001292  0E00               	movlw	0
  1903  001294  6E04               	movwf	___ftge@ff2,c
  1904  001296  0E80               	movlw	128
  1905  001298  6E05               	movwf	___ftge@ff2+1,c
  1906  00129A  0E3F               	movlw	63
  1907  00129C  6E06               	movwf	___ftge@ff2+2,c
  1908  00129E  ECE3  F013         	call	___ftge	;wreg free
  1909  0012A2  B0D8               	btfsc	status,0,c
  1910  0012A4  D005               	goto	l439
  1911                           
  1912                           ;doprnt.c: 849: exp--;
  1913  0012A6  0100               	movlb	0	; () banked
  1914  0012A8  07CB               	decf	sprintf@exp& (0+255),f,b
  1915  0012AA  A0D8               	btfss	status,0,c
  1916  0012AC  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  1917  0012AE  D013               	goto	l441
  1918  0012B0                     l439:
  1919                           
  1920                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1921                           
  1922                           ; BSR set to: 0
  1923  0012B0  C0CD  F001         	movff	sprintf@tmpval,___ftge@ff1
  1924  0012B4  C0CE  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1925  0012B8  C0CF  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1926  0012BC  0E00               	movlw	0
  1927  0012BE  6E04               	movwf	___ftge@ff2,c
  1928  0012C0  0E20               	movlw	32
  1929  0012C2  6E05               	movwf	___ftge@ff2+1,c
  1930  0012C4  0E41               	movlw	65
  1931  0012C6  6E06               	movwf	___ftge@ff2+2,c
  1932  0012C8  ECE3  F013         	call	___ftge	;wreg free
  1933  0012CC  A0D8               	btfss	status,0,c
  1934  0012CE  D003               	goto	l441
  1935                           
  1936                           ;doprnt.c: 851: exp++;
  1937  0012D0  0100               	movlb	0	; () banked
  1938  0012D2  4BCB               	infsnz	sprintf@exp& (0+255),f,b
  1939  0012D4  2BCC               	incf	(sprintf@exp+1)& (0+255),f,b
  1940  0012D6                     l441:
  1941                           
  1942                           ;doprnt.c: 852: }
  1943                           ;doprnt.c: 1112: if(prec <= 12)
  1944                           
  1945                           ; BSR set to: 0
  1946                           
  1947                           ; BSR set to: 0
  1948                           
  1949                           ; BSR set to: 0
  1950  0012D6  0100               	movlb	0	; () banked
  1951  0012D8  BFD2               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1952  0012DA  D006               	goto	u2650
  1953  0012DC  51D2               	movf	(sprintf@prec+1)& (0+255),w,b
  1954  0012DE  E11B               	bnz	l3217
  1955  0012E0  0E0D               	movlw	13
  1956  0012E2  5DD1               	subwf	sprintf@prec& (0+255),w,b
  1957  0012E4  B0D8               	btfsc	status,0,c
  1958  0012E6  D017               	goto	l442
  1959  0012E8                     u2650:
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;doprnt.c: 1113: fval += fround(prec);
  1963  0012E8  C0D3  F02E         	movff	sprintf@fval,___ftadd@f1
  1964  0012EC  C0D4  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1965  0012F0  C0D5  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1966  0012F4  51D1               	movf	sprintf@prec& (0+255),w,b
  1967  0012F6  ECD1  F00D         	call	_fround
  1968  0012FA  C024  F031         	movff	?_fround,___ftadd@f2
  1969  0012FE  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1970  001302  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1971  001306  EC22  F010         	call	___ftadd	;wreg free
  1972  00130A  C02E  F0D3         	movff	?___ftadd,sprintf@fval
  1973  00130E  C02F  F0D4         	movff	?___ftadd+1,sprintf@fval+1
  1974  001312  C030  F0D5         	movff	?___ftadd+2,sprintf@fval+2
  1975  001316                     l442:
  1976  001316                     l3217:
  1977                           
  1978                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1979  001316  0100               	movlb	0	; () banked
  1980  001318  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1981  00131A  D006               	goto	u2660
  1982  00131C  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  1983  00131E  E120               	bnz	l3225
  1984  001320  0E0A               	movlw	10
  1985  001322  5DCB               	subwf	sprintf@exp& (0+255),w,b
  1986  001324  B0D8               	btfsc	status,0,c
  1987  001326  D01C               	goto	u2690
  1988  001328                     u2660:
  1989                           
  1990                           ; BSR set to: 0
  1991  001328  51D3               	movf	sprintf@fval& (0+255),w,b
  1992  00132A  11D4               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1993  00132C  11D5               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1994  00132E  B4D8               	btfsc	status,2,c
  1995  001330  D056               	goto	l443
  1996                           
  1997                           ; BSR set to: 0
  1998  001332  C0D3  F02B         	movff	sprintf@fval,___fttol@f1
  1999  001336  C0D4  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2000  00133A  C0D5  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2001  00133E  EC25  F012         	call	___fttol	;wreg free
  2002  001342  502B               	movf	?___fttol,w,c
  2003  001344  102C               	iorwf	?___fttol+1,w,c
  2004  001346  102D               	iorwf	?___fttol+2,w,c
  2005  001348  102E               	iorwf	?___fttol+3,w,c
  2006  00134A  A4D8               	btfss	status,2,c
  2007  00134C  D048               	goto	l443
  2008  00134E  0100               	movlb	0	; () banked
  2009  001350  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2010  001352  D045               	goto	l443
  2011  001354  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  2012  001356  E104               	bnz	l3225
  2013  001358  0E02               	movlw	2
  2014  00135A  5DCB               	subwf	sprintf@exp& (0+255),w,b
  2015  00135C  A0D8               	btfss	status,0,c
  2016  00135E  D03F               	goto	l443
  2017  001360                     u2690:
  2018  001360                     l3225:
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2022  001360  C0CD  F001         	movff	sprintf@tmpval,___ftge@ff1
  2023  001364  C0CE  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2024  001368  C0CF  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2025  00136C  0E70               	movlw	112
  2026  00136E  6E04               	movwf	___ftge@ff2,c
  2027  001370  0E89               	movlw	137
  2028  001372  6E05               	movwf	___ftge@ff2+1,c
  2029  001374  0E40               	movlw	64
  2030  001376  6E06               	movwf	___ftge@ff2+2,c
  2031  001378  ECE3  F013         	call	___ftge	;wreg free
  2032  00137C  B0D8               	btfsc	status,0,c
  2033  00137E  D003               	goto	l446
  2034                           
  2035                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2036  001380  0100               	movlb	0	; () banked
  2037  001382  0EF7               	movlw	247
  2038  001384  D002               	goto	L1
  2039  001386                     l446:
  2040                           
  2041                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2042                           
  2043                           ; BSR set to: 0
  2044  001386  0100               	movlb	0	; () banked
  2045  001388  0EF8               	movlw	248
  2046  00138A                     L1:
  2047  00138A  27CB               	addwf	sprintf@exp& (0+255),f,b
  2048  00138C  0EFF               	movlw	255
  2049  00138E  23CC               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;doprnt.c: 1124: }
  2053                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2054                           
  2055                           ; BSR set to: 0
  2056  001390  51CB               	movf	sprintf@exp& (0+255),w,b
  2057  001392  ECCD  F00B         	call	_scale
  2058  001396  C024  F0CD         	movff	?_scale,sprintf@tmpval
  2059  00139A  C025  F0CE         	movff	?_scale+1,sprintf@tmpval+1
  2060  00139E  C026  F0CF         	movff	?_scale+2,sprintf@tmpval+2
  2061                           
  2062                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2063  0013A2  C0D3  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2064  0013A6  C0D4  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2065  0013AA  C0D5  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2066  0013AE  C0CD  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2067  0013B2  C0CE  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2068  0013B6  C0CF  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2069  0013BA  ECF8  F010         	call	__tdiv_to_l_	;wreg free
  2070  0013BE  C001  F0C7         	movff	?__tdiv_to_l_,sprintf@val
  2071  0013C2  C002  F0C8         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2072  0013C6  C003  F0C9         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2073  0013CA  C004  F0CA         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2074                           
  2075                           ;doprnt.c: 1129: fval = 0.0;
  2076  0013CE  0E00               	movlw	0
  2077  0013D0  0100               	movlb	0	; () banked
  2078  0013D2  6FD3               	movwf	sprintf@fval& (0+255),b
  2079  0013D4  0E00               	movlw	0
  2080  0013D6  6FD4               	movwf	(sprintf@fval+1)& (0+255),b
  2081  0013D8  0E00               	movlw	0
  2082  0013DA  6FD5               	movwf	(sprintf@fval+2)& (0+255),b
  2083                           
  2084                           ;doprnt.c: 1130: } else {
  2085  0013DC  D033               	goto	l452
  2086  0013DE                     l443:
  2087                           
  2088                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2089                           
  2090                           ; BSR set to: 0
  2091  0013DE  C0D3  F02B         	movff	sprintf@fval,___fttol@f1
  2092  0013E2  C0D4  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2093  0013E6  C0D5  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2094  0013EA  EC25  F012         	call	___fttol	;wreg free
  2095  0013EE  C02B  F0C7         	movff	?___fttol,sprintf@val
  2096  0013F2  C02C  F0C8         	movff	?___fttol+1,sprintf@val+1
  2097  0013F6  C02D  F0C9         	movff	?___fttol+2,sprintf@val+2
  2098  0013FA  C02E  F0CA         	movff	?___fttol+3,sprintf@val+3
  2099                           
  2100                           ;doprnt.c: 1132: fval -= (double)val;
  2101  0013FE  C0D3  F03A         	movff	sprintf@fval,___ftsub@f1
  2102  001402  C0D4  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2103  001406  C0D5  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2104  00140A  C0C7  F009         	movff	sprintf@val,___lltoft@c
  2105  00140E  C0C8  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2106  001412  C0C9  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2107  001416  C0CA  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2108  00141A  EC92  F016         	call	___lltoft	;wreg free
  2109  00141E  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2110  001422  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2111  001426  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2112  00142A  ECB6  F017         	call	___ftsub	;wreg free
  2113  00142E  C03A  F0D3         	movff	?___ftsub,sprintf@fval
  2114  001432  C03B  F0D4         	movff	?___ftsub+1,sprintf@fval+1
  2115  001436  C03C  F0D5         	movff	?___ftsub+2,sprintf@fval+2
  2116                           
  2117                           ;doprnt.c: 1133: exp = 0;
  2118  00143A  0E00               	movlw	0
  2119  00143C  0100               	movlb	0	; () banked
  2120  00143E  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  2121  001440  0E00               	movlw	0
  2122  001442  6FCB               	movwf	sprintf@exp& (0+255),b
  2123  001444                     l452:
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;doprnt.c: 1134: }
  2127                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2128                           
  2129                           ; BSR set to: 0
  2130  001444  0E01               	movlw	1
  2131  001446  6FD6               	movwf	sprintf@c& (0+255),b
  2132  001448                     l3245:
  2133                           
  2134                           ; BSR set to: 0
  2135  001448  0E0A               	movlw	10
  2136  00144A  19D6               	xorwf	sprintf@c& (0+255),w,b
  2137  00144C  B4D8               	btfsc	status,2,c
  2138  00144E  D018               	goto	u2730
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;doprnt.c: 1137: if(val < dpowers[c])
  2142                           
  2143                           ; BSR set to: 0
  2144                           
  2145                           ; BSR set to: 0
  2146  001450  51D6               	movf	sprintf@c& (0+255),w,b
  2147  001452  0D04               	mullw	4
  2148  001454  0E01               	movlw	low _dpowers
  2149  001456  24F3               	addwf	prodl,w,c
  2150  001458  6EF6               	movwf	tblptrl,c
  2151  00145A  0E10               	movlw	high _dpowers
  2152  00145C  20F4               	addwfc	prodh,w,c
  2153  00145E  6EF7               	movwf	tblptrh,c
  2154  001460                     	if	0	;There are less than 3 active tblptr bytes
  2155  001460                     	endif
  2156  001460  0009               	tblrd		*+
  2157  001462  50F5               	movf	tablat,w,c
  2158  001464  5DC7               	subwf	sprintf@val& (0+255),w,b
  2159  001466  0009               	tblrd		*+
  2160  001468  50F5               	movf	tablat,w,c
  2161  00146A  59C8               	subwfb	(sprintf@val+1)& (0+255),w,b
  2162  00146C  0009               	tblrd		*+
  2163  00146E  50F5               	movf	tablat,w,c
  2164  001470  59C9               	subwfb	(sprintf@val+2)& (0+255),w,b
  2165  001472  0009               	tblrd		*+
  2166  001474  50F5               	movf	tablat,w,c
  2167  001476  59CA               	subwfb	(sprintf@val+3)& (0+255),w,b
  2168  001478  A0D8               	btfss	status,0,c
  2169  00147A  D002               	goto	u2730
  2170                           
  2171                           ; BSR set to: 0
  2172                           
  2173                           ; BSR set to: 0
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;doprnt.c: 1138: break;
  2177  00147C  2BD6               	incf	sprintf@c& (0+255),f,b
  2178  00147E  D7E4               	goto	l3245
  2179  001480                     u2730:
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;doprnt.c: 1175: {
  2183                           ;doprnt.c: 1188: if(flag & 0x03)
  2184                           
  2185                           ; BSR set to: 0
  2186  001480  0E03               	movlw	3
  2187  001482  15C5               	andwf	sprintf@flag& (0+255),w,b
  2188  001484  6E47               	movwf	??_sprintf& (0+255),c
  2189  001486  0E00               	movlw	0
  2190  001488  15C6               	andwf	(sprintf@flag+1)& (0+255),w,b
  2191  00148A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2192  00148C  5047               	movf	??_sprintf,w,c
  2193  00148E  1048               	iorwf	??_sprintf+1,w,c
  2194  001490  B4D8               	btfsc	status,2,c
  2195  001492  D050               	goto	l457
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2199  001494  C040  FFD9         	movff	sprintf@sp,fsr2l
  2200  001498  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2201  00149C  0E2D               	movlw	45
  2202  00149E  D047               	goto	L2
  2203  0014A0                     
  2204                           ; BSR set to: 0
  2205                           ;doprnt.c: 1200: {
  2206                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2207                           
  2208                           ; BSR set to: 0
  2209  0014A0  C0C7  F001         	movff	sprintf@val,___lldiv@dividend
  2210  0014A4  C0C8  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2211  0014A8  C0C9  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2212  0014AC  C0CA  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2213  0014B0  51D6               	movf	sprintf@c& (0+255),w,b
  2214  0014B2  0D04               	mullw	4
  2215  0014B4  0E01               	movlw	low _dpowers
  2216  0014B6  24F3               	addwf	prodl,w,c
  2217  0014B8  6EF6               	movwf	tblptrl,c
  2218  0014BA  0E10               	movlw	high _dpowers
  2219  0014BC  20F4               	addwfc	prodh,w,c
  2220  0014BE  6EF7               	movwf	tblptrh,c
  2221  0014C0                     	if	0	;There are less than 3 active tblptr bytes
  2222  0014C0                     	endif
  2223  0014C0  0009               	tblrd		*+
  2224  0014C2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2225  0014C6  0009               	tblrd		*+
  2226  0014C8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2227  0014CC  0009               	tblrd		*+
  2228  0014CE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2229  0014D2  000A               	tblrd		*-
  2230  0014D4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2231  0014D8  ECFD  F014         	call	___lldiv	;wreg free
  2232  0014DC  C001  F0CD         	movff	?___lldiv,sprintf@tmpval
  2233  0014E0  C002  F0CE         	movff	?___lldiv+1,sprintf@tmpval+1
  2234  0014E4  C003  F0CF         	movff	?___lldiv+2,sprintf@tmpval+2
  2235  0014E8  C004  F0D0         	movff	?___lldiv+3,sprintf@tmpval+3
  2236                           
  2237                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2238  0014EC  C0CD  F001         	movff	sprintf@tmpval,___llmod@dividend
  2239  0014F0  C0CE  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2240  0014F4  C0CF  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2241  0014F8  C0D0  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2242  0014FC  0E0A               	movlw	10
  2243  0014FE  6E05               	movwf	___llmod@divisor,c
  2244  001500  0E00               	movlw	0
  2245  001502  6E06               	movwf	___llmod@divisor+1,c
  2246  001504  0E00               	movlw	0
  2247  001506  6E07               	movwf	___llmod@divisor+2,c
  2248  001508  0E00               	movlw	0
  2249  00150A  6E08               	movwf	___llmod@divisor+3,c
  2250  00150C  EC5F  F016         	call	___llmod	;wreg free
  2251  001510  C001  F0CD         	movff	?___llmod,sprintf@tmpval
  2252  001514  C002  F0CE         	movff	?___llmod+1,sprintf@tmpval+1
  2253  001518  C003  F0CF         	movff	?___llmod+2,sprintf@tmpval+2
  2254  00151C  C004  F0D0         	movff	?___llmod+3,sprintf@tmpval+3
  2255                           
  2256                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2257  001520  0100               	movlb	0	; () banked
  2258  001522  51CD               	movf	sprintf@tmpval& (0+255),w,b
  2259  001524  0F30               	addlw	48
  2260  001526  C040  FFD9         	movff	sprintf@sp,fsr2l
  2261  00152A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2262  00152E                     L2:
  2263  00152E  6EDF               	movwf	indf2,c
  2264                           
  2265                           ; BSR set to: 0
  2266  001530  4A40               	infsnz	sprintf@sp,f,c
  2267  001532  2A41               	incf	sprintf@sp+1,f,c
  2268  001534                     l457:
  2269                           
  2270                           ; BSR set to: 0
  2271                           
  2272                           ; BSR set to: 0
  2273  001534  07D6               	decf	sprintf@c& (0+255),f,b
  2274  001536  29D6               	incf	sprintf@c& (0+255),w,b
  2275  001538  B4D8               	btfsc	status,2,c
  2276  00153A  D00C               	goto	l460
  2277  00153C  D7B1               	goto	l458
  2278  00153E                     l3273:
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2282  00153E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2283  001542  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2284  001546  0E30               	movlw	48
  2285  001548  6EDF               	movwf	indf2,c
  2286                           
  2287                           ; BSR set to: 0
  2288  00154A  4A40               	infsnz	sprintf@sp,f,c
  2289  00154C  2A41               	incf	sprintf@sp+1,f,c
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;doprnt.c: 1209: exp--;
  2293  00154E  07CB               	decf	sprintf@exp& (0+255),f,b
  2294  001550  A0D8               	btfss	status,0,c
  2295  001552  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  2296  001554                     l460:
  2297                           
  2298                           ; BSR set to: 0
  2299                           
  2300                           ; BSR set to: 0
  2301  001554  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2302  001556  D005               	goto	u2760
  2303  001558  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  2304  00155A  E1F1               	bnz	l3273
  2305  00155C  05CB               	decf	sprintf@exp& (0+255),w,b
  2306  00155E  B0D8               	btfsc	status,0,c
  2307  001560  D7EE               	goto	l461
  2308  001562                     u2760:
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;doprnt.c: 1210: }
  2312                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2313                           
  2314                           ; BSR set to: 0
  2315  001562  BFD2               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2316  001564  D009               	goto	l463
  2317  001566  51D2               	movf	(sprintf@prec+1)& (0+255),w,b
  2318  001568  E104               	bnz	u2770
  2319  00156A  0E09               	movlw	9
  2320  00156C  5DD1               	subwf	sprintf@prec& (0+255),w,b
  2321  00156E  A0D8               	btfss	status,0,c
  2322  001570  D003               	goto	l463
  2323  001572                     u2770:
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2327  001572  0E08               	movlw	8
  2328  001574  6FD6               	movwf	sprintf@c& (0+255),b
  2329  001576  D002               	goto	l464
  2330  001578                     l463:
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;doprnt.c: 1213: else
  2334                           ;doprnt.c: 1214: c = prec;
  2335  001578  C0D1  F0D6         	movff	sprintf@prec,sprintf@c
  2336  00157C                     l464:
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;doprnt.c: 1215: prec -= c;
  2340                           
  2341                           ; BSR set to: 0
  2342  00157C  51D6               	movf	sprintf@c& (0+255),w,b
  2343  00157E  5FD1               	subwf	sprintf@prec& (0+255),f,b
  2344  001580  0E00               	movlw	0
  2345  001582  BFD6               	btfsc	sprintf@c& (0+255),7,b
  2346  001584  0EFF               	movlw	255
  2347  001586  5BD2               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;doprnt.c: 1219: if(c)
  2351  001588  51D6               	movf	sprintf@c& (0+255),w,b
  2352  00158A  B4D8               	btfsc	status,2,c
  2353  00158C  D008               	goto	l465
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2357  00158E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2358  001592  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2359  001596  0E2E               	movlw	46
  2360  001598  6EDF               	movwf	indf2,c
  2361                           
  2362                           ; BSR set to: 0
  2363  00159A  4A40               	infsnz	sprintf@sp,f,c
  2364  00159C  2A41               	incf	sprintf@sp+1,f,c
  2365  00159E                     l465:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2369                           
  2370                           ; BSR set to: 0
  2371  00159E  51D6               	movf	sprintf@c& (0+255),w,b
  2372  0015A0  ECCD  F00B         	call	_scale
  2373  0015A4  C024  F0C0         	movff	?_scale,_sprintf$1534
  2374  0015A8  C025  F0C1         	movff	?_scale+1,_sprintf$1534+1
  2375  0015AC  C026  F0C2         	movff	?_scale+2,_sprintf$1534+2
  2376                           
  2377                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2378  0015B0  C0D3  F018         	movff	sprintf@fval,___ftmul@f2
  2379  0015B4  C0D4  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2380  0015B8  C0D5  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2381  0015BC  C0C0  F015         	movff	_sprintf$1534,___ftmul@f1
  2382  0015C0  C0C1  F016         	movff	_sprintf$1534+1,___ftmul@f1+1
  2383  0015C4  C0C2  F017         	movff	_sprintf$1534+2,___ftmul@f1+2
  2384  0015C8  EC9F  F012         	call	___ftmul	;wreg free
  2385  0015CC  C015  F02B         	movff	?___ftmul,___fttol@f1
  2386  0015D0  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2387  0015D4  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2388  0015D8  EC25  F012         	call	___fttol	;wreg free
  2389  0015DC  C02B  F0C7         	movff	?___fttol,sprintf@val
  2390  0015E0  C02C  F0C8         	movff	?___fttol+1,sprintf@val+1
  2391  0015E4  C02D  F0C9         	movff	?___fttol+2,sprintf@val+2
  2392  0015E8  C02E  F0CA         	movff	?___fttol+3,sprintf@val+3
  2393                           
  2394                           ;doprnt.c: 1228: while(c--) {
  2395  0015EC  D071               	goto	l466
  2396  0015EE                     
  2397                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2398  0015EE  C0C7  F001         	movff	sprintf@val,___lldiv@dividend
  2399  0015F2  C0C8  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2400  0015F6  C0C9  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2401  0015FA  C0CA  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2402  0015FE  0100               	movlb	0	; () banked
  2403  001600  51D6               	movf	sprintf@c& (0+255),w,b
  2404  001602  0D04               	mullw	4
  2405  001604  0E01               	movlw	low _dpowers
  2406  001606  24F3               	addwf	prodl,w,c
  2407  001608  6EF6               	movwf	tblptrl,c
  2408  00160A  0E10               	movlw	high _dpowers
  2409  00160C  20F4               	addwfc	prodh,w,c
  2410  00160E  6EF7               	movwf	tblptrh,c
  2411  001610                     	if	0	;There are less than 3 active tblptr bytes
  2412  001610                     	endif
  2413  001610  0009               	tblrd		*+
  2414  001612  CFF5 F005          	movff	tablat,___lldiv@divisor
  2415  001616  0009               	tblrd		*+
  2416  001618  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2417  00161C  0009               	tblrd		*+
  2418  00161E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2419  001622  000A               	tblrd		*-
  2420  001624  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2421  001628  ECFD  F014         	call	___lldiv	;wreg free
  2422  00162C  C001  F0CD         	movff	?___lldiv,sprintf@tmpval
  2423  001630  C002  F0CE         	movff	?___lldiv+1,sprintf@tmpval+1
  2424  001634  C003  F0CF         	movff	?___lldiv+2,sprintf@tmpval+2
  2425  001638  C004  F0D0         	movff	?___lldiv+3,sprintf@tmpval+3
  2426                           
  2427                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2428  00163C  C0CD  F001         	movff	sprintf@tmpval,___llmod@dividend
  2429  001640  C0CE  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2430  001644  C0CF  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2431  001648  C0D0  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2432  00164C  0E0A               	movlw	10
  2433  00164E  6E05               	movwf	___llmod@divisor,c
  2434  001650  0E00               	movlw	0
  2435  001652  6E06               	movwf	___llmod@divisor+1,c
  2436  001654  0E00               	movlw	0
  2437  001656  6E07               	movwf	___llmod@divisor+2,c
  2438  001658  0E00               	movlw	0
  2439  00165A  6E08               	movwf	___llmod@divisor+3,c
  2440  00165C  EC5F  F016         	call	___llmod	;wreg free
  2441  001660  C001  F0CD         	movff	?___llmod,sprintf@tmpval
  2442  001664  C002  F0CE         	movff	?___llmod+1,sprintf@tmpval+1
  2443  001668  C003  F0CF         	movff	?___llmod+2,sprintf@tmpval+2
  2444  00166C  C004  F0D0         	movff	?___llmod+3,sprintf@tmpval+3
  2445                           
  2446                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2447  001670  0100               	movlb	0	; () banked
  2448  001672  51CD               	movf	sprintf@tmpval& (0+255),w,b
  2449  001674  0F30               	addlw	48
  2450  001676  C040  FFD9         	movff	sprintf@sp,fsr2l
  2451  00167A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2452  00167E  6EDF               	movwf	indf2,c
  2453                           
  2454                           ; BSR set to: 0
  2455  001680  4A40               	infsnz	sprintf@sp,f,c
  2456  001682  2A41               	incf	sprintf@sp+1,f,c
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;doprnt.c: 1232: val %= dpowers[c];
  2460  001684  C0C7  F001         	movff	sprintf@val,___llmod@dividend
  2461  001688  C0C8  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2462  00168C  C0C9  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2463  001690  C0CA  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2464  001694  51D6               	movf	sprintf@c& (0+255),w,b
  2465  001696  0D04               	mullw	4
  2466  001698  0E01               	movlw	low _dpowers
  2467  00169A  24F3               	addwf	prodl,w,c
  2468  00169C  6EF6               	movwf	tblptrl,c
  2469  00169E  0E10               	movlw	high _dpowers
  2470  0016A0  20F4               	addwfc	prodh,w,c
  2471  0016A2  6EF7               	movwf	tblptrh,c
  2472  0016A4                     	if	0	;There are less than 3 active tblptr bytes
  2473  0016A4                     	endif
  2474  0016A4  0009               	tblrd		*+
  2475  0016A6  CFF5 F005          	movff	tablat,___llmod@divisor
  2476  0016AA  0009               	tblrd		*+
  2477  0016AC  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2478  0016B0  0009               	tblrd		*+
  2479  0016B2  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2480  0016B6  000A               	tblrd		*-
  2481  0016B8  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2482  0016BC  EC5F  F016         	call	___llmod	;wreg free
  2483  0016C0  C001  F0C7         	movff	?___llmod,sprintf@val
  2484  0016C4  C002  F0C8         	movff	?___llmod+1,sprintf@val+1
  2485  0016C8  C003  F0C9         	movff	?___llmod+2,sprintf@val+2
  2486  0016CC  C004  F0CA         	movff	?___llmod+3,sprintf@val+3
  2487  0016D0                     l466:
  2488  0016D0  0100               	movlb	0	; () banked
  2489  0016D2  07D6               	decf	sprintf@c& (0+255),f,b
  2490  0016D4  29D6               	incf	sprintf@c& (0+255),w,b
  2491  0016D6  B4D8               	btfsc	status,2,c
  2492  0016D8  D00C               	goto	l469
  2493  0016DA  D789               	goto	l467
  2494  0016DC                     
  2495                           ; BSR set to: 0
  2496                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2497                           
  2498                           ; BSR set to: 0
  2499  0016DC  C040  FFD9         	movff	sprintf@sp,fsr2l
  2500  0016E0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2501  0016E4  0E30               	movlw	48
  2502  0016E6  6EDF               	movwf	indf2,c
  2503                           
  2504                           ; BSR set to: 0
  2505  0016E8  4A40               	infsnz	sprintf@sp,f,c
  2506  0016EA  2A41               	incf	sprintf@sp+1,f,c
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;doprnt.c: 1237: prec--;
  2510  0016EC  07D1               	decf	sprintf@prec& (0+255),f,b
  2511  0016EE  A0D8               	btfss	status,0,c
  2512  0016F0  07D2               	decf	(sprintf@prec+1)& (0+255),f,b
  2513  0016F2                     l469:
  2514                           
  2515                           ; BSR set to: 0
  2516                           
  2517                           ; BSR set to: 0
  2518  0016F2  51D1               	movf	sprintf@prec& (0+255),w,b
  2519  0016F4  11D2               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2520  0016F6  B4D8               	btfsc	status,2,c
  2521  0016F8  D03D               	goto	l476
  2522  0016FA  D7F0               	goto	l470
  2523  0016FC                     l434:
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;doprnt.c: 1246: }
  2527                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2528                           
  2529                           ; BSR set to: 0
  2530  0016FC  51D1               	movf	sprintf@prec& (0+255),w,b
  2531  0016FE  11D2               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2532  001700  A4D8               	btfss	status,2,c
  2533  001702  D008               	goto	l472
  2534                           
  2535                           ; BSR set to: 0
  2536  001704  51C7               	movf	sprintf@val& (0+255),w,b
  2537  001706  11C8               	iorwf	(sprintf@val+1)& (0+255),w,b
  2538  001708  11C9               	iorwf	(sprintf@val+2)& (0+255),w,b
  2539  00170A  11CA               	iorwf	(sprintf@val+3)& (0+255),w,b
  2540  00170C  A4D8               	btfss	status,2,c
  2541  00170E  D002               	goto	l472
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;doprnt.c: 1291: prec++;
  2545  001710  4BD1               	infsnz	sprintf@prec& (0+255),f,b
  2546  001712  2BD2               	incf	(sprintf@prec+1)& (0+255),f,b
  2547  001714                     l472:
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;doprnt.c: 1339: if(c < prec)
  2551                           
  2552                           ; BSR set to: 0
  2553  001714  0E80               	movlw	128
  2554  001716  BFD6               	btfsc	sprintf@c& (0+255),7,b
  2555  001718  0E7F               	movlw	127
  2556  00171A  6E47               	movwf	??_sprintf& (0+255),c
  2557  00171C  51D1               	movf	sprintf@prec& (0+255),w,b
  2558  00171E  5DD6               	subwf	sprintf@c& (0+255),w,b
  2559  001720  51D2               	movf	(sprintf@prec+1)& (0+255),w,b
  2560  001722  0A80               	xorlw	128
  2561  001724  5847               	subwfb	??_sprintf& (0+255),w,c
  2562  001726  B0D8               	btfsc	status,0,c
  2563  001728  D003               	goto	l473
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 1340: c = prec;
  2567  00172A  C0D1  F0D6         	movff	sprintf@prec,sprintf@c
  2568  00172E  D010               	goto	l475
  2569  001730                     l473:
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;doprnt.c: 1341: else if(prec < c)
  2573                           
  2574                           ; BSR set to: 0
  2575  001730  51D2               	movf	(sprintf@prec+1)& (0+255),w,b
  2576  001732  0A80               	xorlw	128
  2577  001734  6E47               	movwf	??_sprintf& (0+255),c
  2578  001736  51D6               	movf	sprintf@c& (0+255),w,b
  2579  001738  5DD1               	subwf	sprintf@prec& (0+255),w,b
  2580  00173A  0E80               	movlw	128
  2581  00173C  BFD6               	btfsc	sprintf@c& (0+255),7,b
  2582  00173E  0E7F               	movlw	127
  2583  001740  5847               	subwfb	??_sprintf& (0+255),w,c
  2584  001742  B0D8               	btfsc	status,0,c
  2585  001744  D005               	goto	l475
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;doprnt.c: 1342: prec = c;
  2589  001746  51D6               	movf	sprintf@c& (0+255),w,b
  2590  001748  6FD1               	movwf	sprintf@prec& (0+255),b
  2591  00174A  6BD2               	clrf	(sprintf@prec+1)& (0+255),b
  2592  00174C  BFD1               	btfsc	sprintf@prec& (0+255),7,b
  2593  00174E  07D2               	decf	(sprintf@prec+1)& (0+255),f,b
  2594  001750                     l475:
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;doprnt.c: 1422: {
  2598                           ;doprnt.c: 1438: if(flag & 0x03)
  2599                           
  2600                           ; BSR set to: 0
  2601                           
  2602                           ; BSR set to: 0
  2603  001750  0E03               	movlw	3
  2604  001752  15C5               	andwf	sprintf@flag& (0+255),w,b
  2605  001754  6E47               	movwf	??_sprintf& (0+255),c
  2606  001756  0E00               	movlw	0
  2607  001758  15C6               	andwf	(sprintf@flag+1)& (0+255),w,b
  2608  00175A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2609  00175C  5047               	movf	??_sprintf,w,c
  2610  00175E  1048               	iorwf	??_sprintf+1,w,c
  2611  001760  B4D8               	btfsc	status,2,c
  2612  001762  D008               	goto	l476
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2616  001764  C040  FFD9         	movff	sprintf@sp,fsr2l
  2617  001768  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2618  00176C  0E2D               	movlw	45
  2619  00176E  6EDF               	movwf	indf2,c
  2620  001770                     l3335:
  2621                           
  2622                           ; BSR set to: 0
  2623  001770  4A40               	infsnz	sprintf@sp,f,c
  2624  001772  2A41               	incf	sprintf@sp+1,f,c
  2625  001774                     l476:
  2626                           
  2627                           ; BSR set to: 0
  2628                           
  2629                           ; BSR set to: 0
  2630                           
  2631                           ; BSR set to: 0
  2632  001774  C042  FFF6         	movff	sprintf@f,tblptrl
  2633  001778  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2634  00177C  4A42               	infsnz	sprintf@f,f,c
  2635  00177E  2A43               	incf	sprintf@f+1,f,c
  2636  001780                     	if	0	;tblptru may be non-zero
  2637  001780                     	endif
  2638  001780                     	if	0	;tblptru may be non-zero
  2639  001780                     	endif
  2640  001780  0008               	tblrd		*
  2641  001782  CFF5 F0D6          	movff	tablat,sprintf@c
  2642  001786  51D6               	movf	sprintf@c& (0+255),w,b
  2643  001788  A4D8               	btfss	status,2,c
  2644  00178A  D489               	goto	l421
  2645  00178C                     u2860:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;doprnt.c: 1538: *sp = 0;
  2649                           
  2650                           ; BSR set to: 0
  2651                           
  2652                           ;doprnt.c: 1469: }
  2653                           ;doprnt.c: 1533: }
  2654                           ;doprnt.c: 1535: alldone:
  2655                           
  2656                           ; BSR set to: 0
  2657  00178C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2658  001790  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2659  001794  0E00               	movlw	0
  2660  001796  6EDF               	movwf	indf2,c
  2661  001798  0012               	return	
  2662  00179A                     __end_of_sprintf:
  2663                           	opt stack 0
  2664                           tblptru	equ	0xFF8
  2665                           tblptrh	equ	0xFF7
  2666                           tblptrl	equ	0xFF6
  2667                           tablat	equ	0xFF5
  2668                           prodh	equ	0xFF4
  2669                           prodl	equ	0xFF3
  2670                           postinc0	equ	0xFEE
  2671                           wreg	equ	0xFE8
  2672                           indf2	equ	0xFDF
  2673                           postinc2	equ	0xFDE
  2674                           postdec2	equ	0xFDD
  2675                           fsr2h	equ	0xFDA
  2676                           fsr2l	equ	0xFD9
  2677                           status	equ	0xFD8
  2678                           
  2679 ;; *************** function _scale *****************
  2680 ;; Defined at:
  2681 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;  scl             1    wreg     char 
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;  scl             1   41[COMRAM] char 
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  3   35[COMRAM] char 
  2688 ;; Registers used:
  2689 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2695 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2696 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2699 ;;Total ram usage:        7 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    2
  2702 ;; This function calls:
  2703 ;;		___awdiv
  2704 ;;		___awmod
  2705 ;;		___ftmul
  2706 ;;		___wmul
  2707 ;; This function is called by:
  2708 ;;		_sprintf
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text2
  2713  00179A                     __ptext2:
  2714                           	opt stack 0
  2715  00179A                     _scale:
  2716                           	opt stack 27
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;incstack = 0
  2720                           ;scale@scl stored from wreg
  2721  00179A  6E2A               	movwf	scale@scl,c
  2722                           
  2723                           ;doprnt.c: 428: if(scl < 0) {
  2724  00179C  AE2A               	btfss	scale@scl,7,c
  2725  00179E  D101               	goto	l410
  2726                           
  2727                           ;doprnt.c: 429: scl = -scl;
  2728  0017A0  6C2A               	negf	scale@scl,c
  2729                           
  2730                           ;doprnt.c: 430: if(scl>=110)
  2731  0017A2  502A               	movf	scale@scl,w,c
  2732  0017A4  0A80               	xorlw	128
  2733  0017A6  0F12               	addlw	-238
  2734  0017A8  A0D8               	btfss	status,0,c
  2735  0017AA  D091               	goto	l411
  2736                           
  2737                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2738  0017AC  0E00               	movlw	0
  2739  0017AE  6E12               	movwf	___wmul@multiplicand+1,c
  2740  0017B0  0E03               	movlw	3
  2741  0017B2  6E11               	movwf	___wmul@multiplicand,c
  2742  0017B4  0E00               	movlw	0
  2743  0017B6  6E0A               	movwf	___awdiv@divisor+1,c
  2744  0017B8  0E0A               	movlw	10
  2745  0017BA  6E09               	movwf	___awdiv@divisor,c
  2746  0017BC  0E00               	movlw	0
  2747  0017BE  6E04               	movwf	___awmod@divisor+1,c
  2748  0017C0  0E64               	movlw	100
  2749  0017C2  6E03               	movwf	___awmod@divisor,c
  2750  0017C4  502A               	movf	scale@scl,w,c
  2751  0017C6  6E01               	movwf	___awmod@dividend,c
  2752  0017C8  6A02               	clrf	___awmod@dividend+1,c
  2753  0017CA  BE01               	btfsc	___awmod@dividend,7,c
  2754  0017CC  0602               	decf	___awmod@dividend+1,f,c
  2755  0017CE  ECF1  F015         	call	___awmod	;wreg free
  2756  0017D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2757  0017D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2758  0017DA  ECBB  F014         	call	___awdiv	;wreg free
  2759  0017DE  0E09               	movlw	9
  2760  0017E0  2407               	addwf	?___awdiv,w,c
  2761  0017E2  6E0F               	movwf	___wmul@multiplier,c
  2762  0017E4  0E00               	movlw	0
  2763  0017E6  2008               	addwfc	?___awdiv+1,w,c
  2764  0017E8  6E10               	movwf	___wmul@multiplier+1,c
  2765  0017EA  ECEA  F017         	call	___wmul	;wreg free
  2766  0017EE  0E50               	movlw	low __npowers_
  2767  0017F0  240F               	addwf	?___wmul,w,c
  2768  0017F2  6EF6               	movwf	tblptrl,c
  2769  0017F4  0E10               	movlw	high __npowers_
  2770  0017F6  2010               	addwfc	?___wmul+1,w,c
  2771  0017F8  6EF7               	movwf	tblptrh,c
  2772  0017FA                     	if	0	;There are less than 3 active tblptr bytes
  2773  0017FA                     	endif
  2774  0017FA  0009               	tblrd		*+
  2775  0017FC  CFF5 F018          	movff	tablat,___ftmul@f2
  2776  001800  0009               	tblrd		*+
  2777  001802  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2778  001806  000A               	tblrd		*-
  2779  001808  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2780  00180C  0E00               	movlw	0
  2781  00180E  6E0A               	movwf	___awdiv@divisor+1,c
  2782  001810  0E64               	movlw	100
  2783  001812  6E09               	movwf	___awdiv@divisor,c
  2784  001814  502A               	movf	scale@scl,w,c
  2785  001816  6E07               	movwf	___awdiv@dividend,c
  2786  001818  6A08               	clrf	___awdiv@dividend+1,c
  2787  00181A  BE07               	btfsc	___awdiv@dividend,7,c
  2788  00181C  0608               	decf	___awdiv@dividend+1,f,c
  2789  00181E  ECBB  F014         	call	___awdiv	;wreg free
  2790  001822  0E12               	movlw	18
  2791  001824  2407               	addwf	?___awdiv,w,c
  2792  001826  6E0F               	movwf	___wmul@multiplier,c
  2793  001828  0E00               	movlw	0
  2794  00182A  2008               	addwfc	?___awdiv+1,w,c
  2795  00182C  6E10               	movwf	___wmul@multiplier+1,c
  2796  00182E  0E00               	movlw	0
  2797  001830  6E12               	movwf	___wmul@multiplicand+1,c
  2798  001832  0E03               	movlw	3
  2799  001834  6E11               	movwf	___wmul@multiplicand,c
  2800  001836  ECEA  F017         	call	___wmul	;wreg free
  2801  00183A  0E50               	movlw	low __npowers_
  2802  00183C  240F               	addwf	?___wmul,w,c
  2803  00183E  6EF6               	movwf	tblptrl,c
  2804  001840  0E10               	movlw	high __npowers_
  2805  001842  2010               	addwfc	?___wmul+1,w,c
  2806  001844  6EF7               	movwf	tblptrh,c
  2807  001846                     	if	0	;There are less than 3 active tblptr bytes
  2808  001846                     	endif
  2809  001846  0009               	tblrd		*+
  2810  001848  CFF5 F015          	movff	tablat,___ftmul@f1
  2811  00184C  0009               	tblrd		*+
  2812  00184E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2813  001852  000A               	tblrd		*-
  2814  001854  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2815  001858  EC9F  F012         	call	___ftmul	;wreg free
  2816  00185C  C015  F027         	movff	?___ftmul,_scale$1533
  2817  001860  C016  F028         	movff	?___ftmul+1,_scale$1533+1
  2818  001864  C017  F029         	movff	?___ftmul+2,_scale$1533+2
  2819                           
  2820                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2821  001868  C027  F015         	movff	_scale$1533,___ftmul@f1
  2822  00186C  C028  F016         	movff	_scale$1533+1,___ftmul@f1+1
  2823  001870  C029  F017         	movff	_scale$1533+2,___ftmul@f1+2
  2824  001874  0E00               	movlw	0
  2825  001876  6E12               	movwf	___wmul@multiplicand+1,c
  2826  001878  0E03               	movlw	3
  2827  00187A  6E11               	movwf	___wmul@multiplicand,c
  2828  00187C  0E00               	movlw	0
  2829  00187E  6E04               	movwf	___awmod@divisor+1,c
  2830  001880  0E0A               	movlw	10
  2831  001882  6E03               	movwf	___awmod@divisor,c
  2832  001884  502A               	movf	scale@scl,w,c
  2833  001886  6E01               	movwf	___awmod@dividend,c
  2834  001888  6A02               	clrf	___awmod@dividend+1,c
  2835  00188A  BE01               	btfsc	___awmod@dividend,7,c
  2836  00188C  0602               	decf	___awmod@dividend+1,f,c
  2837  00188E  ECF1  F015         	call	___awmod	;wreg free
  2838  001892  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2839  001896  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2840  00189A  ECEA  F017         	call	___wmul	;wreg free
  2841  00189E  0E50               	movlw	low __npowers_
  2842  0018A0  240F               	addwf	?___wmul,w,c
  2843  0018A2  6EF6               	movwf	tblptrl,c
  2844  0018A4  0E10               	movlw	high __npowers_
  2845  0018A6  2010               	addwfc	?___wmul+1,w,c
  2846  0018A8  6EF7               	movwf	tblptrh,c
  2847  0018AA                     	if	0	;There are less than 3 active tblptr bytes
  2848  0018AA                     	endif
  2849  0018AA  0009               	tblrd		*+
  2850  0018AC  CFF5 F018          	movff	tablat,___ftmul@f2
  2851  0018B0  0009               	tblrd		*+
  2852  0018B2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2853  0018B6  000A               	tblrd		*-
  2854  0018B8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2855  0018BC  EC9F  F012         	call	___ftmul	;wreg free
  2856  0018C0  C015  F024         	movff	?___ftmul,?_scale
  2857  0018C4  C016  F025         	movff	?___ftmul+1,?_scale+1
  2858  0018C8  C017  F026         	movff	?___ftmul+2,?_scale+2
  2859  0018CC  0012               	return	
  2860  0018CE                     l411:
  2861                           
  2862                           ;doprnt.c: 432: else if(scl > 10)
  2863  0018CE  502A               	movf	scale@scl,w,c
  2864  0018D0  0A80               	xorlw	128
  2865  0018D2  0F75               	addlw	-139
  2866  0018D4  A0D8               	btfss	status,0,c
  2867  0018D6  D053               	goto	l414
  2868                           
  2869                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2870  0018D8  0E00               	movlw	0
  2871  0018DA  6E0A               	movwf	___awdiv@divisor+1,c
  2872  0018DC  0E0A               	movlw	10
  2873  0018DE  6E09               	movwf	___awdiv@divisor,c
  2874  0018E0  502A               	movf	scale@scl,w,c
  2875  0018E2  6E07               	movwf	___awdiv@dividend,c
  2876  0018E4  6A08               	clrf	___awdiv@dividend+1,c
  2877  0018E6  BE07               	btfsc	___awdiv@dividend,7,c
  2878  0018E8  0608               	decf	___awdiv@dividend+1,f,c
  2879  0018EA  ECBB  F014         	call	___awdiv	;wreg free
  2880  0018EE  0E09               	movlw	9
  2881  0018F0  2407               	addwf	?___awdiv,w,c
  2882  0018F2  6E0F               	movwf	___wmul@multiplier,c
  2883  0018F4  0E00               	movlw	0
  2884  0018F6  2008               	addwfc	?___awdiv+1,w,c
  2885  0018F8  6E10               	movwf	___wmul@multiplier+1,c
  2886  0018FA  0E00               	movlw	0
  2887  0018FC  6E12               	movwf	___wmul@multiplicand+1,c
  2888  0018FE  0E03               	movlw	3
  2889  001900  6E11               	movwf	___wmul@multiplicand,c
  2890  001902  ECEA  F017         	call	___wmul	;wreg free
  2891  001906  0E50               	movlw	low __npowers_
  2892  001908  240F               	addwf	?___wmul,w,c
  2893  00190A  6EF6               	movwf	tblptrl,c
  2894  00190C  0E10               	movlw	high __npowers_
  2895  00190E  2010               	addwfc	?___wmul+1,w,c
  2896  001910  6EF7               	movwf	tblptrh,c
  2897  001912                     	if	0	;There are less than 3 active tblptr bytes
  2898  001912                     	endif
  2899  001912  0009               	tblrd		*+
  2900  001914  CFF5 F015          	movff	tablat,___ftmul@f1
  2901  001918  0009               	tblrd		*+
  2902  00191A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2903  00191E  000A               	tblrd		*-
  2904  001920  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2905  001924  0E00               	movlw	0
  2906  001926  6E12               	movwf	___wmul@multiplicand+1,c
  2907  001928  0E03               	movlw	3
  2908  00192A  6E11               	movwf	___wmul@multiplicand,c
  2909  00192C  0E00               	movlw	0
  2910  00192E  6E04               	movwf	___awmod@divisor+1,c
  2911  001930  0E0A               	movlw	10
  2912  001932  6E03               	movwf	___awmod@divisor,c
  2913  001934  502A               	movf	scale@scl,w,c
  2914  001936  6E01               	movwf	___awmod@dividend,c
  2915  001938  6A02               	clrf	___awmod@dividend+1,c
  2916  00193A  BE01               	btfsc	___awmod@dividend,7,c
  2917  00193C  0602               	decf	___awmod@dividend+1,f,c
  2918  00193E  ECF1  F015         	call	___awmod	;wreg free
  2919  001942  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2920  001946  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2921  00194A  ECEA  F017         	call	___wmul	;wreg free
  2922  00194E  0E50               	movlw	low __npowers_
  2923  001950  240F               	addwf	?___wmul,w,c
  2924  001952  6EF6               	movwf	tblptrl,c
  2925  001954  0E10               	movlw	high __npowers_
  2926  001956  2010               	addwfc	?___wmul+1,w,c
  2927  001958  6EF7               	movwf	tblptrh,c
  2928  00195A                     	if	0	;There are less than 3 active tblptr bytes
  2929  00195A                     	endif
  2930  00195A  0009               	tblrd		*+
  2931  00195C  CFF5 F018          	movff	tablat,___ftmul@f2
  2932  001960  0009               	tblrd		*+
  2933  001962  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2934  001966  000A               	tblrd		*-
  2935  001968  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2936  00196C  EC9F  F012         	call	___ftmul	;wreg free
  2937  001970  C015  F024         	movff	?___ftmul,?_scale
  2938  001974  C016  F025         	movff	?___ftmul+1,?_scale+1
  2939  001978  C017  F026         	movff	?___ftmul+2,?_scale+2
  2940  00197C  0012               	return	
  2941  00197E                     l414:
  2942                           
  2943                           ;doprnt.c: 434: return _npowers_[scl];
  2944  00197E  502A               	movf	scale@scl,w,c
  2945  001980  0D03               	mullw	3
  2946  001982  0E50               	movlw	low __npowers_
  2947  001984  24F3               	addwf	prodl,w,c
  2948  001986  6EF6               	movwf	tblptrl,c
  2949  001988  0E10               	movlw	high __npowers_
  2950  00198A  20F4               	addwfc	prodh,w,c
  2951  00198C  6EF7               	movwf	tblptrh,c
  2952  00198E                     	if	0	;There are less than 3 active tblptr bytes
  2953  00198E                     	endif
  2954  00198E  0009               	tblrd		*+
  2955  001990  CFF5 F024          	movff	tablat,?_scale
  2956  001994  0009               	tblrd		*+
  2957  001996  CFF5 F025          	movff	tablat,?_scale+1
  2958  00199A  000A               	tblrd		*-
  2959  00199C  CFF5 F026          	movff	tablat,?_scale+2
  2960  0019A0  0012               	return	
  2961  0019A2                     l410:
  2962                           
  2963                           ;doprnt.c: 435: }
  2964                           ;doprnt.c: 436: if(scl>=110)
  2965  0019A2  502A               	movf	scale@scl,w,c
  2966  0019A4  0A80               	xorlw	128
  2967  0019A6  0F12               	addlw	-238
  2968  0019A8  A0D8               	btfss	status,0,c
  2969  0019AA  D091               	goto	l415
  2970                           
  2971                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2972  0019AC  0E00               	movlw	0
  2973  0019AE  6E12               	movwf	___wmul@multiplicand+1,c
  2974  0019B0  0E03               	movlw	3
  2975  0019B2  6E11               	movwf	___wmul@multiplicand,c
  2976  0019B4  0E00               	movlw	0
  2977  0019B6  6E0A               	movwf	___awdiv@divisor+1,c
  2978  0019B8  0E0A               	movlw	10
  2979  0019BA  6E09               	movwf	___awdiv@divisor,c
  2980  0019BC  0E00               	movlw	0
  2981  0019BE  6E04               	movwf	___awmod@divisor+1,c
  2982  0019C0  0E64               	movlw	100
  2983  0019C2  6E03               	movwf	___awmod@divisor,c
  2984  0019C4  502A               	movf	scale@scl,w,c
  2985  0019C6  6E01               	movwf	___awmod@dividend,c
  2986  0019C8  6A02               	clrf	___awmod@dividend+1,c
  2987  0019CA  BE01               	btfsc	___awmod@dividend,7,c
  2988  0019CC  0602               	decf	___awmod@dividend+1,f,c
  2989  0019CE  ECF1  F015         	call	___awmod	;wreg free
  2990  0019D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2991  0019D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2992  0019DA  ECBB  F014         	call	___awdiv	;wreg free
  2993  0019DE  0E09               	movlw	9
  2994  0019E0  2407               	addwf	?___awdiv,w,c
  2995  0019E2  6E0F               	movwf	___wmul@multiplier,c
  2996  0019E4  0E00               	movlw	0
  2997  0019E6  2008               	addwfc	?___awdiv+1,w,c
  2998  0019E8  6E10               	movwf	___wmul@multiplier+1,c
  2999  0019EA  ECEA  F017         	call	___wmul	;wreg free
  3000  0019EE  0E29               	movlw	low __powers_
  3001  0019F0  240F               	addwf	?___wmul,w,c
  3002  0019F2  6EF6               	movwf	tblptrl,c
  3003  0019F4  0E10               	movlw	high __powers_
  3004  0019F6  2010               	addwfc	?___wmul+1,w,c
  3005  0019F8  6EF7               	movwf	tblptrh,c
  3006  0019FA                     	if	0	;There are less than 3 active tblptr bytes
  3007  0019FA                     	endif
  3008  0019FA  0009               	tblrd		*+
  3009  0019FC  CFF5 F018          	movff	tablat,___ftmul@f2
  3010  001A00  0009               	tblrd		*+
  3011  001A02  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3012  001A06  000A               	tblrd		*-
  3013  001A08  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3014  001A0C  0E00               	movlw	0
  3015  001A0E  6E0A               	movwf	___awdiv@divisor+1,c
  3016  001A10  0E64               	movlw	100
  3017  001A12  6E09               	movwf	___awdiv@divisor,c
  3018  001A14  502A               	movf	scale@scl,w,c
  3019  001A16  6E07               	movwf	___awdiv@dividend,c
  3020  001A18  6A08               	clrf	___awdiv@dividend+1,c
  3021  001A1A  BE07               	btfsc	___awdiv@dividend,7,c
  3022  001A1C  0608               	decf	___awdiv@dividend+1,f,c
  3023  001A1E  ECBB  F014         	call	___awdiv	;wreg free
  3024  001A22  0E12               	movlw	18
  3025  001A24  2407               	addwf	?___awdiv,w,c
  3026  001A26  6E0F               	movwf	___wmul@multiplier,c
  3027  001A28  0E00               	movlw	0
  3028  001A2A  2008               	addwfc	?___awdiv+1,w,c
  3029  001A2C  6E10               	movwf	___wmul@multiplier+1,c
  3030  001A2E  0E00               	movlw	0
  3031  001A30  6E12               	movwf	___wmul@multiplicand+1,c
  3032  001A32  0E03               	movlw	3
  3033  001A34  6E11               	movwf	___wmul@multiplicand,c
  3034  001A36  ECEA  F017         	call	___wmul	;wreg free
  3035  001A3A  0E29               	movlw	low __powers_
  3036  001A3C  240F               	addwf	?___wmul,w,c
  3037  001A3E  6EF6               	movwf	tblptrl,c
  3038  001A40  0E10               	movlw	high __powers_
  3039  001A42  2010               	addwfc	?___wmul+1,w,c
  3040  001A44  6EF7               	movwf	tblptrh,c
  3041  001A46                     	if	0	;There are less than 3 active tblptr bytes
  3042  001A46                     	endif
  3043  001A46  0009               	tblrd		*+
  3044  001A48  CFF5 F015          	movff	tablat,___ftmul@f1
  3045  001A4C  0009               	tblrd		*+
  3046  001A4E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3047  001A52  000A               	tblrd		*-
  3048  001A54  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3049  001A58  EC9F  F012         	call	___ftmul	;wreg free
  3050  001A5C  C015  F027         	movff	?___ftmul,_scale$1533
  3051  001A60  C016  F028         	movff	?___ftmul+1,_scale$1533+1
  3052  001A64  C017  F029         	movff	?___ftmul+2,_scale$1533+2
  3053                           
  3054                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3055  001A68  C027  F015         	movff	_scale$1533,___ftmul@f1
  3056  001A6C  C028  F016         	movff	_scale$1533+1,___ftmul@f1+1
  3057  001A70  C029  F017         	movff	_scale$1533+2,___ftmul@f1+2
  3058  001A74  0E00               	movlw	0
  3059  001A76  6E12               	movwf	___wmul@multiplicand+1,c
  3060  001A78  0E03               	movlw	3
  3061  001A7A  6E11               	movwf	___wmul@multiplicand,c
  3062  001A7C  0E00               	movlw	0
  3063  001A7E  6E04               	movwf	___awmod@divisor+1,c
  3064  001A80  0E0A               	movlw	10
  3065  001A82  6E03               	movwf	___awmod@divisor,c
  3066  001A84  502A               	movf	scale@scl,w,c
  3067  001A86  6E01               	movwf	___awmod@dividend,c
  3068  001A88  6A02               	clrf	___awmod@dividend+1,c
  3069  001A8A  BE01               	btfsc	___awmod@dividend,7,c
  3070  001A8C  0602               	decf	___awmod@dividend+1,f,c
  3071  001A8E  ECF1  F015         	call	___awmod	;wreg free
  3072  001A92  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3073  001A96  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3074  001A9A  ECEA  F017         	call	___wmul	;wreg free
  3075  001A9E  0E29               	movlw	low __powers_
  3076  001AA0  240F               	addwf	?___wmul,w,c
  3077  001AA2  6EF6               	movwf	tblptrl,c
  3078  001AA4  0E10               	movlw	high __powers_
  3079  001AA6  2010               	addwfc	?___wmul+1,w,c
  3080  001AA8  6EF7               	movwf	tblptrh,c
  3081  001AAA                     	if	0	;There are less than 3 active tblptr bytes
  3082  001AAA                     	endif
  3083  001AAA  0009               	tblrd		*+
  3084  001AAC  CFF5 F018          	movff	tablat,___ftmul@f2
  3085  001AB0  0009               	tblrd		*+
  3086  001AB2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3087  001AB6  000A               	tblrd		*-
  3088  001AB8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3089  001ABC  EC9F  F012         	call	___ftmul	;wreg free
  3090  001AC0  C015  F024         	movff	?___ftmul,?_scale
  3091  001AC4  C016  F025         	movff	?___ftmul+1,?_scale+1
  3092  001AC8  C017  F026         	movff	?___ftmul+2,?_scale+2
  3093  001ACC  0012               	return	
  3094  001ACE                     l415:
  3095                           
  3096                           ;doprnt.c: 438: else if(scl > 10)
  3097  001ACE  502A               	movf	scale@scl,w,c
  3098  001AD0  0A80               	xorlw	128
  3099  001AD2  0F75               	addlw	-139
  3100  001AD4  A0D8               	btfss	status,0,c
  3101  001AD6  D053               	goto	l417
  3102                           
  3103                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3104  001AD8  0E00               	movlw	0
  3105  001ADA  6E0A               	movwf	___awdiv@divisor+1,c
  3106  001ADC  0E0A               	movlw	10
  3107  001ADE  6E09               	movwf	___awdiv@divisor,c
  3108  001AE0  502A               	movf	scale@scl,w,c
  3109  001AE2  6E07               	movwf	___awdiv@dividend,c
  3110  001AE4  6A08               	clrf	___awdiv@dividend+1,c
  3111  001AE6  BE07               	btfsc	___awdiv@dividend,7,c
  3112  001AE8  0608               	decf	___awdiv@dividend+1,f,c
  3113  001AEA  ECBB  F014         	call	___awdiv	;wreg free
  3114  001AEE  0E09               	movlw	9
  3115  001AF0  2407               	addwf	?___awdiv,w,c
  3116  001AF2  6E0F               	movwf	___wmul@multiplier,c
  3117  001AF4  0E00               	movlw	0
  3118  001AF6  2008               	addwfc	?___awdiv+1,w,c
  3119  001AF8  6E10               	movwf	___wmul@multiplier+1,c
  3120  001AFA  0E00               	movlw	0
  3121  001AFC  6E12               	movwf	___wmul@multiplicand+1,c
  3122  001AFE  0E03               	movlw	3
  3123  001B00  6E11               	movwf	___wmul@multiplicand,c
  3124  001B02  ECEA  F017         	call	___wmul	;wreg free
  3125  001B06  0E29               	movlw	low __powers_
  3126  001B08  240F               	addwf	?___wmul,w,c
  3127  001B0A  6EF6               	movwf	tblptrl,c
  3128  001B0C  0E10               	movlw	high __powers_
  3129  001B0E  2010               	addwfc	?___wmul+1,w,c
  3130  001B10  6EF7               	movwf	tblptrh,c
  3131  001B12                     	if	0	;There are less than 3 active tblptr bytes
  3132  001B12                     	endif
  3133  001B12  0009               	tblrd		*+
  3134  001B14  CFF5 F015          	movff	tablat,___ftmul@f1
  3135  001B18  0009               	tblrd		*+
  3136  001B1A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3137  001B1E  000A               	tblrd		*-
  3138  001B20  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3139  001B24  0E00               	movlw	0
  3140  001B26  6E12               	movwf	___wmul@multiplicand+1,c
  3141  001B28  0E03               	movlw	3
  3142  001B2A  6E11               	movwf	___wmul@multiplicand,c
  3143  001B2C  0E00               	movlw	0
  3144  001B2E  6E04               	movwf	___awmod@divisor+1,c
  3145  001B30  0E0A               	movlw	10
  3146  001B32  6E03               	movwf	___awmod@divisor,c
  3147  001B34  502A               	movf	scale@scl,w,c
  3148  001B36  6E01               	movwf	___awmod@dividend,c
  3149  001B38  6A02               	clrf	___awmod@dividend+1,c
  3150  001B3A  BE01               	btfsc	___awmod@dividend,7,c
  3151  001B3C  0602               	decf	___awmod@dividend+1,f,c
  3152  001B3E  ECF1  F015         	call	___awmod	;wreg free
  3153  001B42  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3154  001B46  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3155  001B4A  ECEA  F017         	call	___wmul	;wreg free
  3156  001B4E  0E29               	movlw	low __powers_
  3157  001B50  240F               	addwf	?___wmul,w,c
  3158  001B52  6EF6               	movwf	tblptrl,c
  3159  001B54  0E10               	movlw	high __powers_
  3160  001B56  2010               	addwfc	?___wmul+1,w,c
  3161  001B58  6EF7               	movwf	tblptrh,c
  3162  001B5A                     	if	0	;There are less than 3 active tblptr bytes
  3163  001B5A                     	endif
  3164  001B5A  0009               	tblrd		*+
  3165  001B5C  CFF5 F018          	movff	tablat,___ftmul@f2
  3166  001B60  0009               	tblrd		*+
  3167  001B62  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3168  001B66  000A               	tblrd		*-
  3169  001B68  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3170  001B6C  EC9F  F012         	call	___ftmul	;wreg free
  3171  001B70  C015  F024         	movff	?___ftmul,?_scale
  3172  001B74  C016  F025         	movff	?___ftmul+1,?_scale+1
  3173  001B78  C017  F026         	movff	?___ftmul+2,?_scale+2
  3174  001B7C  0012               	return	
  3175  001B7E                     l417:
  3176                           
  3177                           ;doprnt.c: 440: return _powers_[scl];
  3178  001B7E  502A               	movf	scale@scl,w,c
  3179  001B80  0D03               	mullw	3
  3180  001B82  0E29               	movlw	low __powers_
  3181  001B84  24F3               	addwf	prodl,w,c
  3182  001B86  6EF6               	movwf	tblptrl,c
  3183  001B88  0E10               	movlw	high __powers_
  3184  001B8A  20F4               	addwfc	prodh,w,c
  3185  001B8C  6EF7               	movwf	tblptrh,c
  3186  001B8E                     	if	0	;There are less than 3 active tblptr bytes
  3187  001B8E                     	endif
  3188  001B8E  0009               	tblrd		*+
  3189  001B90  CFF5 F024          	movff	tablat,?_scale
  3190  001B94  0009               	tblrd		*+
  3191  001B96  CFF5 F025          	movff	tablat,?_scale+1
  3192  001B9A  000A               	tblrd		*-
  3193  001B9C  CFF5 F026          	movff	tablat,?_scale+2
  3194  001BA0  0012               	return	
  3195  001BA2                     __end_of_scale:
  3196                           	opt stack 0
  3197                           tblptru	equ	0xFF8
  3198                           tblptrh	equ	0xFF7
  3199                           tblptrl	equ	0xFF6
  3200                           tablat	equ	0xFF5
  3201                           prodh	equ	0xFF4
  3202                           prodl	equ	0xFF3
  3203                           postinc0	equ	0xFEE
  3204                           wreg	equ	0xFE8
  3205                           indf2	equ	0xFDF
  3206                           postinc2	equ	0xFDE
  3207                           postdec2	equ	0xFDD
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _isdigit *****************
  3213 ;; Defined at:
  3214 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  c               1    wreg     unsigned char 
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  c               1    2[COMRAM] unsigned char 
  3219 ;; Return value:  Size  Location     Type
  3220 ;;		None               void
  3221 ;; Registers used:
  3222 ;;		wreg, status,2, status,0
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;Total ram usage:        3 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; This function calls:
  3235 ;;		Nothing
  3236 ;; This function is called by:
  3237 ;;		_sprintf
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           	psect	text3
  3242  003064                     __ptext3:
  3243                           	opt stack 0
  3244  003064                     _isdigit:
  3245                           	opt stack 29
  3246                           
  3247                           ;incstack = 0
  3248                           ;isdigit@c stored from wreg
  3249  003064  6E03               	movwf	isdigit@c,c
  3250  003066  0E00               	movlw	0
  3251  003068  6E02               	movwf	_isdigit$1157,c
  3252  00306A  0E3A               	movlw	58
  3253  00306C  6003               	cpfslt	isdigit@c,c
  3254  00306E  D005               	goto	l842
  3255  003070  0E2F               	movlw	47
  3256  003072  6403               	cpfsgt	isdigit@c,c
  3257  003074  D002               	goto	l842
  3258  003076  0E01               	movlw	1
  3259  003078  6E02               	movwf	_isdigit$1157,c
  3260  00307A                     l842:
  3261  00307A  C002  F001         	movff	_isdigit$1157,??_isdigit
  3262  00307E  3001               	rrcf	??_isdigit,w,c
  3263  003080  0012               	return	
  3264  003082                     __end_of_isdigit:
  3265                           	opt stack 0
  3266                           tblptru	equ	0xFF8
  3267                           tblptrh	equ	0xFF7
  3268                           tblptrl	equ	0xFF6
  3269                           tablat	equ	0xFF5
  3270                           prodh	equ	0xFF4
  3271                           prodl	equ	0xFF3
  3272                           postinc0	equ	0xFEE
  3273                           wreg	equ	0xFE8
  3274                           indf2	equ	0xFDF
  3275                           postinc2	equ	0xFDE
  3276                           postdec2	equ	0xFDD
  3277                           fsr2h	equ	0xFDA
  3278                           fsr2l	equ	0xFD9
  3279                           status	equ	0xFD8
  3280                           
  3281 ;; *************** function _fround *****************
  3282 ;; Defined at:
  3283 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  prec            1    wreg     unsigned char 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;  prec            1   44[COMRAM] unsigned char 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  3   35[COMRAM] unsigned char 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3297 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3298 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;Total ram usage:       10 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    2
  3304 ;; This function calls:
  3305 ;;		___awdiv
  3306 ;;		___awmod
  3307 ;;		___ftmul
  3308 ;;		___wmul
  3309 ;; This function is called by:
  3310 ;;		_sprintf
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text4
  3315  001BA2                     __ptext4:
  3316                           	opt stack 0
  3317  001BA2                     _fround:
  3318                           	opt stack 27
  3319                           
  3320                           ;incstack = 0
  3321                           ;fround@prec stored from wreg
  3322  001BA2  6E2D               	movwf	fround@prec,c
  3323                           
  3324                           ;doprnt.c: 413: if(prec>=110)
  3325  001BA4  0E6D               	movlw	109
  3326  001BA6  642D               	cpfsgt	fround@prec,c
  3327  001BA8  D09F               	goto	l404
  3328                           
  3329                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3330  001BAA  0E00               	movlw	0
  3331  001BAC  6E12               	movwf	___wmul@multiplicand+1,c
  3332  001BAE  0E03               	movlw	3
  3333  001BB0  6E11               	movwf	___wmul@multiplicand,c
  3334  001BB2  0E00               	movlw	0
  3335  001BB4  6E0A               	movwf	___awdiv@divisor+1,c
  3336  001BB6  0E0A               	movlw	10
  3337  001BB8  6E09               	movwf	___awdiv@divisor,c
  3338  001BBA  0E00               	movlw	0
  3339  001BBC  6E04               	movwf	___awmod@divisor+1,c
  3340  001BBE  0E64               	movlw	100
  3341  001BC0  6E03               	movwf	___awmod@divisor,c
  3342  001BC2  C02D  F001         	movff	fround@prec,___awmod@dividend
  3343  001BC6  6A02               	clrf	___awmod@dividend+1,c
  3344  001BC8  ECF1  F015         	call	___awmod	;wreg free
  3345  001BCC  C001  F007         	movff	?___awmod,___awdiv@dividend
  3346  001BD0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3347  001BD4  ECBB  F014         	call	___awdiv	;wreg free
  3348  001BD8  0E09               	movlw	9
  3349  001BDA  2407               	addwf	?___awdiv,w,c
  3350  001BDC  6E0F               	movwf	___wmul@multiplier,c
  3351  001BDE  0E00               	movlw	0
  3352  001BE0  2008               	addwfc	?___awdiv+1,w,c
  3353  001BE2  6E10               	movwf	___wmul@multiplier+1,c
  3354  001BE4  ECEA  F017         	call	___wmul	;wreg free
  3355  001BE8  0E50               	movlw	low __npowers_
  3356  001BEA  240F               	addwf	?___wmul,w,c
  3357  001BEC  6EF6               	movwf	tblptrl,c
  3358  001BEE  0E10               	movlw	high __npowers_
  3359  001BF0  2010               	addwfc	?___wmul+1,w,c
  3360  001BF2  6EF7               	movwf	tblptrh,c
  3361  001BF4                     	if	0	;There are less than 3 active tblptr bytes
  3362  001BF4                     	endif
  3363  001BF4  0009               	tblrd		*+
  3364  001BF6  CFF5 F018          	movff	tablat,___ftmul@f2
  3365  001BFA  0009               	tblrd		*+
  3366  001BFC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3367  001C00  000A               	tblrd		*-
  3368  001C02  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3369  001C06  0E00               	movlw	0
  3370  001C08  6E0A               	movwf	___awdiv@divisor+1,c
  3371  001C0A  0E64               	movlw	100
  3372  001C0C  6E09               	movwf	___awdiv@divisor,c
  3373  001C0E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3374  001C12  6A08               	clrf	___awdiv@dividend+1,c
  3375  001C14  ECBB  F014         	call	___awdiv	;wreg free
  3376  001C18  0E12               	movlw	18
  3377  001C1A  2407               	addwf	?___awdiv,w,c
  3378  001C1C  6E0F               	movwf	___wmul@multiplier,c
  3379  001C1E  0E00               	movlw	0
  3380  001C20  2008               	addwfc	?___awdiv+1,w,c
  3381  001C22  6E10               	movwf	___wmul@multiplier+1,c
  3382  001C24  0E00               	movlw	0
  3383  001C26  6E12               	movwf	___wmul@multiplicand+1,c
  3384  001C28  0E03               	movlw	3
  3385  001C2A  6E11               	movwf	___wmul@multiplicand,c
  3386  001C2C  ECEA  F017         	call	___wmul	;wreg free
  3387  001C30  0E50               	movlw	low __npowers_
  3388  001C32  240F               	addwf	?___wmul,w,c
  3389  001C34  6EF6               	movwf	tblptrl,c
  3390  001C36  0E10               	movlw	high __npowers_
  3391  001C38  2010               	addwfc	?___wmul+1,w,c
  3392  001C3A  6EF7               	movwf	tblptrh,c
  3393  001C3C                     	if	0	;There are less than 3 active tblptr bytes
  3394  001C3C                     	endif
  3395  001C3C  0009               	tblrd		*+
  3396  001C3E  CFF5 F015          	movff	tablat,___ftmul@f1
  3397  001C42  0009               	tblrd		*+
  3398  001C44  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3399  001C48  000A               	tblrd		*-
  3400  001C4A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3401  001C4E  EC9F  F012         	call	___ftmul	;wreg free
  3402  001C52  C015  F02A         	movff	?___ftmul,_fround$1531
  3403  001C56  C016  F02B         	movff	?___ftmul+1,_fround$1531+1
  3404  001C5A  C017  F02C         	movff	?___ftmul+2,_fround$1531+2
  3405                           
  3406                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3407  001C5E  0E00               	movlw	0
  3408  001C60  6E12               	movwf	___wmul@multiplicand+1,c
  3409  001C62  0E03               	movlw	3
  3410  001C64  6E11               	movwf	___wmul@multiplicand,c
  3411  001C66  0E00               	movlw	0
  3412  001C68  6E04               	movwf	___awmod@divisor+1,c
  3413  001C6A  0E0A               	movlw	10
  3414  001C6C  6E03               	movwf	___awmod@divisor,c
  3415  001C6E  C02D  F001         	movff	fround@prec,___awmod@dividend
  3416  001C72  6A02               	clrf	___awmod@dividend+1,c
  3417  001C74  ECF1  F015         	call	___awmod	;wreg free
  3418  001C78  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3419  001C7C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3420  001C80  ECEA  F017         	call	___wmul	;wreg free
  3421  001C84  0E50               	movlw	low __npowers_
  3422  001C86  240F               	addwf	?___wmul,w,c
  3423  001C88  6EF6               	movwf	tblptrl,c
  3424  001C8A  0E10               	movlw	high __npowers_
  3425  001C8C  2010               	addwfc	?___wmul+1,w,c
  3426  001C8E  6EF7               	movwf	tblptrh,c
  3427  001C90                     	if	0	;There are less than 3 active tblptr bytes
  3428  001C90                     	endif
  3429  001C90  0009               	tblrd		*+
  3430  001C92  CFF5 F018          	movff	tablat,___ftmul@f2
  3431  001C96  0009               	tblrd		*+
  3432  001C98  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3433  001C9C  000A               	tblrd		*-
  3434  001C9E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3435  001CA2  C02A  F015         	movff	_fround$1531,___ftmul@f1
  3436  001CA6  C02B  F016         	movff	_fround$1531+1,___ftmul@f1+1
  3437  001CAA  C02C  F017         	movff	_fround$1531+2,___ftmul@f1+2
  3438  001CAE  EC9F  F012         	call	___ftmul	;wreg free
  3439  001CB2  C015  F027         	movff	?___ftmul,_fround$1532
  3440  001CB6  C016  F028         	movff	?___ftmul+1,_fround$1532+1
  3441  001CBA  C017  F029         	movff	?___ftmul+2,_fround$1532+2
  3442                           
  3443                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3444  001CBE  C027  F015         	movff	_fround$1532,___ftmul@f1
  3445  001CC2  C028  F016         	movff	_fround$1532+1,___ftmul@f1+1
  3446  001CC6  C029  F017         	movff	_fround$1532+2,___ftmul@f1+2
  3447  001CCA  0E00               	movlw	0
  3448  001CCC  6E18               	movwf	___ftmul@f2,c
  3449  001CCE  0E00               	movlw	0
  3450  001CD0  6E19               	movwf	___ftmul@f2+1,c
  3451  001CD2  0E3F               	movlw	63
  3452  001CD4  6E1A               	movwf	___ftmul@f2+2,c
  3453  001CD6  EC9F  F012         	call	___ftmul	;wreg free
  3454  001CDA  C015  F024         	movff	?___ftmul,?_fround
  3455  001CDE  C016  F025         	movff	?___ftmul+1,?_fround+1
  3456  001CE2  C017  F026         	movff	?___ftmul+2,?_fround+2
  3457  001CE6  0012               	return	
  3458  001CE8                     l404:
  3459                           
  3460                           ;doprnt.c: 415: else if(prec > 10)
  3461  001CE8  0E0A               	movlw	10
  3462  001CEA  642D               	cpfsgt	fround@prec,c
  3463  001CEC  D063               	goto	l407
  3464                           
  3465                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3466  001CEE  0E00               	movlw	0
  3467  001CF0  6E12               	movwf	___wmul@multiplicand+1,c
  3468  001CF2  0E03               	movlw	3
  3469  001CF4  6E11               	movwf	___wmul@multiplicand,c
  3470  001CF6  0E00               	movlw	0
  3471  001CF8  6E04               	movwf	___awmod@divisor+1,c
  3472  001CFA  0E0A               	movlw	10
  3473  001CFC  6E03               	movwf	___awmod@divisor,c
  3474  001CFE  C02D  F001         	movff	fround@prec,___awmod@dividend
  3475  001D02  6A02               	clrf	___awmod@dividend+1,c
  3476  001D04  ECF1  F015         	call	___awmod	;wreg free
  3477  001D08  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3478  001D0C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3479  001D10  ECEA  F017         	call	___wmul	;wreg free
  3480  001D14  0E50               	movlw	low __npowers_
  3481  001D16  240F               	addwf	?___wmul,w,c
  3482  001D18  6EF6               	movwf	tblptrl,c
  3483  001D1A  0E10               	movlw	high __npowers_
  3484  001D1C  2010               	addwfc	?___wmul+1,w,c
  3485  001D1E  6EF7               	movwf	tblptrh,c
  3486  001D20                     	if	0	;There are less than 3 active tblptr bytes
  3487  001D20                     	endif
  3488  001D20  0009               	tblrd		*+
  3489  001D22  CFF5 F018          	movff	tablat,___ftmul@f2
  3490  001D26  0009               	tblrd		*+
  3491  001D28  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3492  001D2C  000A               	tblrd		*-
  3493  001D2E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3494  001D32  0E00               	movlw	0
  3495  001D34  6E0A               	movwf	___awdiv@divisor+1,c
  3496  001D36  0E0A               	movlw	10
  3497  001D38  6E09               	movwf	___awdiv@divisor,c
  3498  001D3A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3499  001D3E  6A08               	clrf	___awdiv@dividend+1,c
  3500  001D40  ECBB  F014         	call	___awdiv	;wreg free
  3501  001D44  0E09               	movlw	9
  3502  001D46  2407               	addwf	?___awdiv,w,c
  3503  001D48  6E0F               	movwf	___wmul@multiplier,c
  3504  001D4A  0E00               	movlw	0
  3505  001D4C  2008               	addwfc	?___awdiv+1,w,c
  3506  001D4E  6E10               	movwf	___wmul@multiplier+1,c
  3507  001D50  0E00               	movlw	0
  3508  001D52  6E12               	movwf	___wmul@multiplicand+1,c
  3509  001D54  0E03               	movlw	3
  3510  001D56  6E11               	movwf	___wmul@multiplicand,c
  3511  001D58  ECEA  F017         	call	___wmul	;wreg free
  3512  001D5C  0E50               	movlw	low __npowers_
  3513  001D5E  240F               	addwf	?___wmul,w,c
  3514  001D60  6EF6               	movwf	tblptrl,c
  3515  001D62  0E10               	movlw	high __npowers_
  3516  001D64  2010               	addwfc	?___wmul+1,w,c
  3517  001D66  6EF7               	movwf	tblptrh,c
  3518  001D68                     	if	0	;There are less than 3 active tblptr bytes
  3519  001D68                     	endif
  3520  001D68  0009               	tblrd		*+
  3521  001D6A  CFF5 F015          	movff	tablat,___ftmul@f1
  3522  001D6E  0009               	tblrd		*+
  3523  001D70  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3524  001D74  000A               	tblrd		*-
  3525  001D76  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3526  001D7A  EC9F  F012         	call	___ftmul	;wreg free
  3527  001D7E  C015  F02A         	movff	?___ftmul,_fround$1531
  3528  001D82  C016  F02B         	movff	?___ftmul+1,_fround$1531+1
  3529  001D86  C017  F02C         	movff	?___ftmul+2,_fround$1531+2
  3530                           
  3531                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3532  001D8A  C02A  F015         	movff	_fround$1531,___ftmul@f1
  3533  001D8E  C02B  F016         	movff	_fround$1531+1,___ftmul@f1+1
  3534  001D92  C02C  F017         	movff	_fround$1531+2,___ftmul@f1+2
  3535  001D96  0E00               	movlw	0
  3536  001D98  6E18               	movwf	___ftmul@f2,c
  3537  001D9A  0E00               	movlw	0
  3538  001D9C  6E19               	movwf	___ftmul@f2+1,c
  3539  001D9E  0E3F               	movlw	63
  3540  001DA0  6E1A               	movwf	___ftmul@f2+2,c
  3541  001DA2  EC9F  F012         	call	___ftmul	;wreg free
  3542  001DA6  C015  F024         	movff	?___ftmul,?_fround
  3543  001DAA  C016  F025         	movff	?___ftmul+1,?_fround+1
  3544  001DAE  C017  F026         	movff	?___ftmul+2,?_fround+2
  3545  001DB2  0012               	return	
  3546  001DB4                     l407:
  3547                           
  3548                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3549  001DB4  502D               	movf	fround@prec,w,c
  3550  001DB6  0D03               	mullw	3
  3551  001DB8  0E50               	movlw	low __npowers_
  3552  001DBA  24F3               	addwf	prodl,w,c
  3553  001DBC  6EF6               	movwf	tblptrl,c
  3554  001DBE  0E10               	movlw	high __npowers_
  3555  001DC0  20F4               	addwfc	prodh,w,c
  3556  001DC2  6EF7               	movwf	tblptrh,c
  3557  001DC4                     	if	0	;There are less than 3 active tblptr bytes
  3558  001DC4                     	endif
  3559  001DC4  0009               	tblrd		*+
  3560  001DC6  CFF5 F015          	movff	tablat,___ftmul@f1
  3561  001DCA  0009               	tblrd		*+
  3562  001DCC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3563  001DD0  000A               	tblrd		*-
  3564  001DD2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3565  001DD6  0E00               	movlw	0
  3566  001DD8  6E18               	movwf	___ftmul@f2,c
  3567  001DDA  0E00               	movlw	0
  3568  001DDC  6E19               	movwf	___ftmul@f2+1,c
  3569  001DDE  0E3F               	movlw	63
  3570  001DE0  6E1A               	movwf	___ftmul@f2+2,c
  3571  001DE2  EC9F  F012         	call	___ftmul	;wreg free
  3572  001DE6  C015  F024         	movff	?___ftmul,?_fround
  3573  001DEA  C016  F025         	movff	?___ftmul+1,?_fround+1
  3574  001DEE  C017  F026         	movff	?___ftmul+2,?_fround+2
  3575  001DF2  0012               	return	
  3576  001DF4                     __end_of_fround:
  3577                           	opt stack 0
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           prodh	equ	0xFF4
  3583                           prodl	equ	0xFF3
  3584                           postinc0	equ	0xFEE
  3585                           wreg	equ	0xFE8
  3586                           indf2	equ	0xFDF
  3587                           postinc2	equ	0xFDE
  3588                           postdec2	equ	0xFDD
  3589                           fsr2h	equ	0xFDA
  3590                           fsr2l	equ	0xFD9
  3591                           status	equ	0xFD8
  3592                           
  3593 ;; *************** function ___wmul *****************
  3594 ;; Defined at:
  3595 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;  multiplier      2   14[COMRAM] unsigned int 
  3598 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  product         2   18[COMRAM] unsigned int 
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  2   14[COMRAM] unsigned int 
  3603 ;; Registers used:
  3604 ;;		wreg, status,2, status,0, prodl, prodh
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3610 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;Total ram usage:        6 bytes
  3615 ;; Hardware stack levels used:    1
  3616 ;; This function calls:
  3617 ;;		Nothing
  3618 ;; This function is called by:
  3619 ;;		_fround
  3620 ;;		_scale
  3621 ;;		_sprintf
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625                           	psect	text5
  3626  002FD4                     __ptext5:
  3627                           	opt stack 0
  3628  002FD4                     ___wmul:
  3629                           	opt stack 28
  3630                           
  3631                           ;incstack = 0
  3632  002FD4  500F               	movf	___wmul@multiplier,w,c
  3633  002FD6  0211               	mulwf	___wmul@multiplicand,c
  3634  002FD8  CFF3 F013          	movff	prodl,___wmul@product
  3635  002FDC  CFF4 F014          	movff	prodh,___wmul@product+1
  3636  002FE0  500F               	movf	___wmul@multiplier,w,c
  3637  002FE2  0212               	mulwf	___wmul@multiplicand+1,c
  3638  002FE4  50F3               	movf	prodl,w,c
  3639  002FE6  2614               	addwf	___wmul@product+1,f,c
  3640  002FE8  5010               	movf	___wmul@multiplier+1,w,c
  3641  002FEA  0211               	mulwf	___wmul@multiplicand,c
  3642  002FEC  50F3               	movf	prodl,w,c
  3643  002FEE  2614               	addwf	___wmul@product+1,f,c
  3644  002FF0  C013  F00F         	movff	___wmul@product,?___wmul
  3645  002FF4  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3646  002FF8  0012               	return	
  3647  002FFA                     __end_of___wmul:
  3648                           	opt stack 0
  3649                           tblptru	equ	0xFF8
  3650                           tblptrh	equ	0xFF7
  3651                           tblptrl	equ	0xFF6
  3652                           tablat	equ	0xFF5
  3653                           prodh	equ	0xFF4
  3654                           prodl	equ	0xFF3
  3655                           postinc0	equ	0xFEE
  3656                           wreg	equ	0xFE8
  3657                           indf2	equ	0xFDF
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           fsr2h	equ	0xFDA
  3661                           fsr2l	equ	0xFD9
  3662                           status	equ	0xFD8
  3663                           
  3664 ;; *************** function ___awmod *****************
  3665 ;; Defined at:
  3666 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;  dividend        2    0[COMRAM] int 
  3669 ;;  divisor         2    2[COMRAM] int 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  sign            1    5[COMRAM] unsigned char 
  3672 ;;  counter         1    4[COMRAM] unsigned char 
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  2    0[COMRAM] int 
  3675 ;; Registers used:
  3676 ;;		wreg, status,2, status,0
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3682 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3683 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3685 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;Total ram usage:        6 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_fround
  3692 ;;		_scale
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           	psect	text6
  3697  002BE2                     __ptext6:
  3698                           	opt stack 0
  3699  002BE2                     ___awmod:
  3700                           	opt stack 28
  3701                           
  3702                           ;incstack = 0
  3703  002BE2  0E00               	movlw	0
  3704  002BE4  6E06               	movwf	___awmod@sign,c
  3705  002BE6  AE02               	btfss	___awmod@dividend+1,7,c
  3706  002BE8  D006               	goto	l659
  3707  002BEA  6C01               	negf	___awmod@dividend,c
  3708  002BEC  1E02               	comf	___awmod@dividend+1,f,c
  3709  002BEE  B0D8               	btfsc	status,0,c
  3710  002BF0  2A02               	incf	___awmod@dividend+1,f,c
  3711  002BF2  0E01               	movlw	1
  3712  002BF4  6E06               	movwf	___awmod@sign,c
  3713  002BF6                     l659:
  3714  002BF6  AE04               	btfss	___awmod@divisor+1,7,c
  3715  002BF8  D004               	goto	l660
  3716  002BFA  6C03               	negf	___awmod@divisor,c
  3717  002BFC  1E04               	comf	___awmod@divisor+1,f,c
  3718  002BFE  B0D8               	btfsc	status,0,c
  3719  002C00  2A04               	incf	___awmod@divisor+1,f,c
  3720  002C02                     l660:
  3721  002C02  5003               	movf	___awmod@divisor,w,c
  3722  002C04  1004               	iorwf	___awmod@divisor+1,w,c
  3723  002C06  B4D8               	btfsc	status,2,c
  3724  002C08  D018               	goto	l667
  3725  002C0A  0E01               	movlw	1
  3726  002C0C  6E05               	movwf	___awmod@counter,c
  3727  002C0E  D004               	goto	l662
  3728  002C10  90D8               	bcf	status,0,c
  3729  002C12  3603               	rlcf	___awmod@divisor,f,c
  3730  002C14  3604               	rlcf	___awmod@divisor+1,f,c
  3731  002C16  2A05               	incf	___awmod@counter,f,c
  3732  002C18                     l662:
  3733  002C18  AE04               	btfss	___awmod@divisor+1,7,c
  3734  002C1A  D7FA               	goto	l663
  3735  002C1C                     u1950:
  3736  002C1C  5003               	movf	___awmod@divisor,w,c
  3737  002C1E  5C01               	subwf	___awmod@dividend,w,c
  3738  002C20  5004               	movf	___awmod@divisor+1,w,c
  3739  002C22  5802               	subwfb	___awmod@dividend+1,w,c
  3740  002C24  A0D8               	btfss	status,0,c
  3741  002C26  D004               	goto	l666
  3742  002C28  5003               	movf	___awmod@divisor,w,c
  3743  002C2A  5E01               	subwf	___awmod@dividend,f,c
  3744  002C2C  5004               	movf	___awmod@divisor+1,w,c
  3745  002C2E  5A02               	subwfb	___awmod@dividend+1,f,c
  3746  002C30                     l666:
  3747  002C30  90D8               	bcf	status,0,c
  3748  002C32  3204               	rrcf	___awmod@divisor+1,f,c
  3749  002C34  3203               	rrcf	___awmod@divisor,f,c
  3750  002C36  2E05               	decfsz	___awmod@counter,f,c
  3751  002C38  D7F1               	goto	u1950
  3752  002C3A                     l667:
  3753  002C3A  5006               	movf	___awmod@sign,w,c
  3754  002C3C  B4D8               	btfsc	status,2,c
  3755  002C3E  D004               	goto	l668
  3756  002C40  6C01               	negf	___awmod@dividend,c
  3757  002C42  1E02               	comf	___awmod@dividend+1,f,c
  3758  002C44  B0D8               	btfsc	status,0,c
  3759  002C46  2A02               	incf	___awmod@dividend+1,f,c
  3760  002C48                     l668:
  3761  002C48  C001  F001         	movff	___awmod@dividend,?___awmod
  3762  002C4C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3763  002C50  0012               	return	
  3764  002C52                     __end_of___awmod:
  3765                           	opt stack 0
  3766                           tblptru	equ	0xFF8
  3767                           tblptrh	equ	0xFF7
  3768                           tblptrl	equ	0xFF6
  3769                           tablat	equ	0xFF5
  3770                           prodh	equ	0xFF4
  3771                           prodl	equ	0xFF3
  3772                           postinc0	equ	0xFEE
  3773                           wreg	equ	0xFE8
  3774                           indf2	equ	0xFDF
  3775                           postinc2	equ	0xFDE
  3776                           postdec2	equ	0xFDD
  3777                           fsr2h	equ	0xFDA
  3778                           fsr2l	equ	0xFD9
  3779                           status	equ	0xFD8
  3780                           
  3781 ;; *************** function ___awdiv *****************
  3782 ;; Defined at:
  3783 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;  dividend        2    6[COMRAM] int 
  3786 ;;  divisor         2    8[COMRAM] int 
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;  quotient        2   12[COMRAM] int 
  3789 ;;  sign            1   11[COMRAM] unsigned char 
  3790 ;;  counter         1   10[COMRAM] unsigned char 
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  2    6[COMRAM] int 
  3793 ;; Registers used:
  3794 ;;		wreg, status,2, status,0
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3800 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3801 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3803 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3804 ;;Total ram usage:        8 bytes
  3805 ;; Hardware stack levels used:    1
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_fround
  3810 ;;		_scale
  3811 ;;		_sprintf
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815                           	psect	text7
  3816  002976                     __ptext7:
  3817                           	opt stack 0
  3818  002976                     ___awdiv:
  3819                           	opt stack 28
  3820                           
  3821                           ;incstack = 0
  3822  002976  0E00               	movlw	0
  3823  002978  6E0C               	movwf	___awdiv@sign,c
  3824  00297A  AE0A               	btfss	___awdiv@divisor+1,7,c
  3825  00297C  D006               	goto	l646
  3826  00297E  6C09               	negf	___awdiv@divisor,c
  3827  002980  1E0A               	comf	___awdiv@divisor+1,f,c
  3828  002982  B0D8               	btfsc	status,0,c
  3829  002984  2A0A               	incf	___awdiv@divisor+1,f,c
  3830  002986  0E01               	movlw	1
  3831  002988  6E0C               	movwf	___awdiv@sign,c
  3832  00298A                     l646:
  3833  00298A  AE08               	btfss	___awdiv@dividend+1,7,c
  3834  00298C  D006               	goto	l647
  3835  00298E  6C07               	negf	___awdiv@dividend,c
  3836  002990  1E08               	comf	___awdiv@dividend+1,f,c
  3837  002992  B0D8               	btfsc	status,0,c
  3838  002994  2A08               	incf	___awdiv@dividend+1,f,c
  3839  002996  0E01               	movlw	1
  3840  002998  1A0C               	xorwf	___awdiv@sign,f,c
  3841  00299A                     l647:
  3842  00299A  0E00               	movlw	0
  3843  00299C  6E0E               	movwf	___awdiv@quotient+1,c
  3844  00299E  0E00               	movlw	0
  3845  0029A0  6E0D               	movwf	___awdiv@quotient,c
  3846  0029A2  5009               	movf	___awdiv@divisor,w,c
  3847  0029A4  100A               	iorwf	___awdiv@divisor+1,w,c
  3848  0029A6  B4D8               	btfsc	status,2,c
  3849  0029A8  D01C               	goto	l654
  3850  0029AA  0E01               	movlw	1
  3851  0029AC  6E0B               	movwf	___awdiv@counter,c
  3852  0029AE  D004               	goto	l649
  3853  0029B0  90D8               	bcf	status,0,c
  3854  0029B2  3609               	rlcf	___awdiv@divisor,f,c
  3855  0029B4  360A               	rlcf	___awdiv@divisor+1,f,c
  3856  0029B6  2A0B               	incf	___awdiv@counter,f,c
  3857  0029B8                     l649:
  3858  0029B8  AE0A               	btfss	___awdiv@divisor+1,7,c
  3859  0029BA  D7FA               	goto	l650
  3860  0029BC                     u1890:
  3861  0029BC  90D8               	bcf	status,0,c
  3862  0029BE  360D               	rlcf	___awdiv@quotient,f,c
  3863  0029C0  360E               	rlcf	___awdiv@quotient+1,f,c
  3864  0029C2  5009               	movf	___awdiv@divisor,w,c
  3865  0029C4  5C07               	subwf	___awdiv@dividend,w,c
  3866  0029C6  500A               	movf	___awdiv@divisor+1,w,c
  3867  0029C8  5808               	subwfb	___awdiv@dividend+1,w,c
  3868  0029CA  A0D8               	btfss	status,0,c
  3869  0029CC  D005               	goto	l653
  3870  0029CE  5009               	movf	___awdiv@divisor,w,c
  3871  0029D0  5E07               	subwf	___awdiv@dividend,f,c
  3872  0029D2  500A               	movf	___awdiv@divisor+1,w,c
  3873  0029D4  5A08               	subwfb	___awdiv@dividend+1,f,c
  3874  0029D6  800D               	bsf	___awdiv@quotient,0,c
  3875  0029D8                     l653:
  3876  0029D8  90D8               	bcf	status,0,c
  3877  0029DA  320A               	rrcf	___awdiv@divisor+1,f,c
  3878  0029DC  3209               	rrcf	___awdiv@divisor,f,c
  3879  0029DE  2E0B               	decfsz	___awdiv@counter,f,c
  3880  0029E0  D7ED               	goto	u1890
  3881  0029E2                     l654:
  3882  0029E2  500C               	movf	___awdiv@sign,w,c
  3883  0029E4  B4D8               	btfsc	status,2,c
  3884  0029E6  D004               	goto	l655
  3885  0029E8  6C0D               	negf	___awdiv@quotient,c
  3886  0029EA  1E0E               	comf	___awdiv@quotient+1,f,c
  3887  0029EC  B0D8               	btfsc	status,0,c
  3888  0029EE  2A0E               	incf	___awdiv@quotient+1,f,c
  3889  0029F0                     l655:
  3890  0029F0  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3891  0029F4  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3892  0029F8  0012               	return	
  3893  0029FA                     __end_of___awdiv:
  3894                           	opt stack 0
  3895                           tblptru	equ	0xFF8
  3896                           tblptrh	equ	0xFF7
  3897                           tblptrl	equ	0xFF6
  3898                           tablat	equ	0xFF5
  3899                           prodh	equ	0xFF4
  3900                           prodl	equ	0xFF3
  3901                           postinc0	equ	0xFEE
  3902                           wreg	equ	0xFE8
  3903                           indf2	equ	0xFDF
  3904                           postinc2	equ	0xFDE
  3905                           postdec2	equ	0xFDD
  3906                           fsr2h	equ	0xFDA
  3907                           fsr2l	equ	0xFD9
  3908                           status	equ	0xFD8
  3909                           
  3910 ;; *************** function __tdiv_to_l_ *****************
  3911 ;; Defined at:
  3912 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;  f1              3    0[COMRAM] float 
  3915 ;;  f2              3    3[COMRAM] float 
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;  quot            4    9[COMRAM] unsigned long 
  3918 ;;  exp1            1   14[COMRAM] unsigned char 
  3919 ;;  cntr            1   13[COMRAM] unsigned char 
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  4    0[COMRAM] unsigned long 
  3922 ;; Registers used:
  3923 ;;		wreg, status,2, status,0
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3929 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3930 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3931 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;Total ram usage:       15 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; This function calls:
  3936 ;;		Nothing
  3937 ;; This function is called by:
  3938 ;;		_sprintf
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	text8
  3943  0021F0                     __ptext8:
  3944                           	opt stack 0
  3945  0021F0                     __tdiv_to_l_:
  3946                           	opt stack 29
  3947                           
  3948                           ;incstack = 0
  3949  0021F0  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3950  0021F4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3951  0021F6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3952  0021F8  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3953  0021FA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3954  0021FC  E301               	bnc	u2161
  3955  0021FE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3956  002200                     u2161:
  3957  002200  5007               	movf	??__tdiv_to_l_,w,c
  3958  002202  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3959  002204  500F               	movf	__tdiv_to_l_@exp1,w,c
  3960  002206  A4D8               	btfss	status,2,c
  3961  002208  D009               	goto	l782
  3962  00220A  0E00               	movlw	0
  3963  00220C  6E01               	movwf	?__tdiv_to_l_,c
  3964  00220E  0E00               	movlw	0
  3965  002210  6E02               	movwf	?__tdiv_to_l_+1,c
  3966  002212  0E00               	movlw	0
  3967  002214  6E03               	movwf	?__tdiv_to_l_+2,c
  3968  002216  0E00               	movlw	0
  3969  002218  6E04               	movwf	?__tdiv_to_l_+3,c
  3970  00221A  0012               	return	
  3971  00221C                     l782:
  3972  00221C  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3973  002220  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3974  002222  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3975  002224  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3976  002226  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3977  002228  E301               	bnc	u2181
  3978  00222A  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3979  00222C                     u2181:
  3980  00222C  5007               	movf	??__tdiv_to_l_,w,c
  3981  00222E  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3982  002230  500E               	movf	__tdiv_to_l_@cntr,w,c
  3983  002232  A4D8               	btfss	status,2,c
  3984  002234  D009               	goto	l784
  3985  002236  0E00               	movlw	0
  3986  002238  6E01               	movwf	?__tdiv_to_l_,c
  3987  00223A  0E00               	movlw	0
  3988  00223C  6E02               	movwf	?__tdiv_to_l_+1,c
  3989  00223E  0E00               	movlw	0
  3990  002240  6E03               	movwf	?__tdiv_to_l_+2,c
  3991  002242  0E00               	movlw	0
  3992  002244  6E04               	movwf	?__tdiv_to_l_+3,c
  3993  002246  0012               	return	
  3994  002248                     l784:
  3995  002248  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3996  00224A  0EFF               	movlw	255
  3997  00224C  1601               	andwf	__tdiv_to_l_@f1,f,c
  3998  00224E  0EFF               	movlw	255
  3999  002250  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4000  002252  0E00               	movlw	0
  4001  002254  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4002  002256  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4003  002258  0EFF               	movlw	255
  4004  00225A  1604               	andwf	__tdiv_to_l_@f2,f,c
  4005  00225C  0EFF               	movlw	255
  4006  00225E  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4007  002260  0E00               	movlw	0
  4008  002262  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4009  002264  0E00               	movlw	0
  4010  002266  6E0A               	movwf	__tdiv_to_l_@quot,c
  4011  002268  0E00               	movlw	0
  4012  00226A  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4013  00226C  0E00               	movlw	0
  4014  00226E  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4015  002270  0E00               	movlw	0
  4016  002272  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4017  002274  0E7F               	movlw	127
  4018  002276  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4019  002278  500E               	movf	__tdiv_to_l_@cntr,w,c
  4020  00227A  0F98               	addlw	152
  4021  00227C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4022  00227E  0E18               	movlw	24
  4023  002280  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4024  002282                     l785:
  4025  002282  90D8               	bcf	status,0,c
  4026  002284  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4027  002286  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4028  002288  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4029  00228A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4030  00228C  5004               	movf	__tdiv_to_l_@f2,w,c
  4031  00228E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4032  002290  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4033  002292  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4034  002294  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4035  002296  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4036  002298  A0D8               	btfss	status,0,c
  4037  00229A  D007               	goto	l786
  4038  00229C  5004               	movf	__tdiv_to_l_@f2,w,c
  4039  00229E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4040  0022A0  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4041  0022A2  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4042  0022A4  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4043  0022A6  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4044  0022A8  800A               	bsf	__tdiv_to_l_@quot,0,c
  4045  0022AA                     l786:
  4046  0022AA  90D8               	bcf	status,0,c
  4047  0022AC  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4048  0022AE  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4049  0022B0  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4050  0022B2  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4051  0022B4  D7E6               	goto	l785
  4052  0022B6  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4053  0022B8  D016               	goto	l788
  4054  0022BA  500F               	movf	__tdiv_to_l_@exp1,w,c
  4055  0022BC  0A80               	xorlw	128
  4056  0022BE  0F97               	addlw	151
  4057  0022C0  B0D8               	btfsc	status,0,c
  4058  0022C2  D009               	goto	l789
  4059  0022C4  0E00               	movlw	0
  4060  0022C6  6E01               	movwf	?__tdiv_to_l_,c
  4061  0022C8  0E00               	movlw	0
  4062  0022CA  6E02               	movwf	?__tdiv_to_l_+1,c
  4063  0022CC  0E00               	movlw	0
  4064  0022CE  6E03               	movwf	?__tdiv_to_l_+2,c
  4065  0022D0  0E00               	movlw	0
  4066  0022D2  6E04               	movwf	?__tdiv_to_l_+3,c
  4067  0022D4  0012               	return	
  4068  0022D6                     l789:
  4069  0022D6  90D8               	bcf	status,0,c
  4070  0022D8  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4071  0022DA  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4072  0022DC  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4073  0022DE  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4074  0022E0  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4075  0022E2  D7F9               	goto	l789
  4076  0022E4  D015               	goto	u2240
  4077  0022E6                     l788:
  4078  0022E6  0E17               	movlw	23
  4079  0022E8  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4080  0022EA  D00F               	goto	l794
  4081  0022EC  0E00               	movlw	0
  4082  0022EE  6E01               	movwf	?__tdiv_to_l_,c
  4083  0022F0  0E00               	movlw	0
  4084  0022F2  6E02               	movwf	?__tdiv_to_l_+1,c
  4085  0022F4  0E00               	movlw	0
  4086  0022F6  6E03               	movwf	?__tdiv_to_l_+2,c
  4087  0022F8  0E00               	movlw	0
  4088  0022FA  6E04               	movwf	?__tdiv_to_l_+3,c
  4089  0022FC  0012               	return	
  4090  0022FE  90D8               	bcf	status,0,c
  4091  002300  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4092  002302  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4093  002304  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4094  002306  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4095  002308  060F               	decf	__tdiv_to_l_@exp1,f,c
  4096  00230A                     l794:
  4097  00230A  500F               	movf	__tdiv_to_l_@exp1,w,c
  4098  00230C  A4D8               	btfss	status,2,c
  4099  00230E  D7F7               	goto	l795
  4100  002310                     u2240:
  4101  002310  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4102  002314  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4103  002318  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4104  00231C  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4105  002320  0012               	return		;funcret
  4106  002322                     __end_of__tdiv_to_l_:
  4107                           	opt stack 0
  4108                           tblptru	equ	0xFF8
  4109                           tblptrh	equ	0xFF7
  4110                           tblptrl	equ	0xFF6
  4111                           tablat	equ	0xFF5
  4112                           prodh	equ	0xFF4
  4113                           prodl	equ	0xFF3
  4114                           postinc0	equ	0xFEE
  4115                           wreg	equ	0xFE8
  4116                           indf2	equ	0xFDF
  4117                           postinc2	equ	0xFDE
  4118                           postdec2	equ	0xFDD
  4119                           fsr2h	equ	0xFDA
  4120                           fsr2l	equ	0xFD9
  4121                           status	equ	0xFD8
  4122                           
  4123 ;; *************** function __div_to_l_ *****************
  4124 ;; Defined at:
  4125 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;  f1              3    0[COMRAM] unsigned long 
  4128 ;;  f2              3    3[COMRAM] unsigned long 
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;  quot            4    6[COMRAM] unsigned long 
  4131 ;;  exp1            1   11[COMRAM] unsigned char 
  4132 ;;  cntr            1   10[COMRAM] unsigned char 
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  4    0[COMRAM] unsigned long 
  4135 ;; Registers used:
  4136 ;;		wreg, status,2, status,0
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4142 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4143 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4145 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;Total ram usage:       12 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		_sprintf
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text9
  4156  002322                     __ptext9:
  4157                           	opt stack 0
  4158  002322                     __div_to_l_:
  4159                           	opt stack 29
  4160                           
  4161                           ;incstack = 0
  4162  002322  3403               	rlcf	__div_to_l_@f1+2,w,c
  4163  002324  3404               	rlcf	__div_to_l_@f1+3,w,c
  4164  002326  6E0C               	movwf	__div_to_l_@exp1,c
  4165  002328  500C               	movf	__div_to_l_@exp1,w,c
  4166  00232A  A4D8               	btfss	status,2,c
  4167  00232C  D009               	goto	l678
  4168  00232E  0E00               	movlw	0
  4169  002330  6E01               	movwf	?__div_to_l_,c
  4170  002332  0E00               	movlw	0
  4171  002334  6E02               	movwf	?__div_to_l_+1,c
  4172  002336  0E00               	movlw	0
  4173  002338  6E03               	movwf	?__div_to_l_+2,c
  4174  00233A  0E00               	movlw	0
  4175  00233C  6E04               	movwf	?__div_to_l_+3,c
  4176  00233E  0012               	return	
  4177  002340                     l678:
  4178  002340  3406               	rlcf	__div_to_l_@f2+2,w,c
  4179  002342  3407               	rlcf	__div_to_l_@f2+3,w,c
  4180  002344  6E0B               	movwf	__div_to_l_@cntr,c
  4181  002346  500B               	movf	__div_to_l_@cntr,w,c
  4182  002348  A4D8               	btfss	status,2,c
  4183  00234A  D009               	goto	l680
  4184  00234C  0E00               	movlw	0
  4185  00234E  6E01               	movwf	?__div_to_l_,c
  4186  002350  0E00               	movlw	0
  4187  002352  6E02               	movwf	?__div_to_l_+1,c
  4188  002354  0E00               	movlw	0
  4189  002356  6E03               	movwf	?__div_to_l_+2,c
  4190  002358  0E00               	movlw	0
  4191  00235A  6E04               	movwf	?__div_to_l_+3,c
  4192  00235C  0012               	return	
  4193  00235E                     l680:
  4194  00235E  8E03               	bsf	__div_to_l_@f1+2,7,c
  4195  002360  0EFF               	movlw	255
  4196  002362  1601               	andwf	__div_to_l_@f1,f,c
  4197  002364  0EFF               	movlw	255
  4198  002366  1602               	andwf	__div_to_l_@f1+1,f,c
  4199  002368  0EFF               	movlw	255
  4200  00236A  1603               	andwf	__div_to_l_@f1+2,f,c
  4201  00236C  0E00               	movlw	0
  4202  00236E  1604               	andwf	__div_to_l_@f1+3,f,c
  4203  002370  8E06               	bsf	__div_to_l_@f2+2,7,c
  4204  002372  0EFF               	movlw	255
  4205  002374  1604               	andwf	__div_to_l_@f2,f,c
  4206  002376  0EFF               	movlw	255
  4207  002378  1605               	andwf	__div_to_l_@f2+1,f,c
  4208  00237A  0EFF               	movlw	255
  4209  00237C  1606               	andwf	__div_to_l_@f2+2,f,c
  4210  00237E  0E00               	movlw	0
  4211  002380  1607               	andwf	__div_to_l_@f2+3,f,c
  4212  002382  0E00               	movlw	0
  4213  002384  6E07               	movwf	__div_to_l_@quot,c
  4214  002386  0E00               	movlw	0
  4215  002388  6E08               	movwf	__div_to_l_@quot+1,c
  4216  00238A  0E00               	movlw	0
  4217  00238C  6E09               	movwf	__div_to_l_@quot+2,c
  4218  00238E  0E00               	movlw	0
  4219  002390  6E0A               	movwf	__div_to_l_@quot+3,c
  4220  002392  0E7F               	movlw	127
  4221  002394  5E0C               	subwf	__div_to_l_@exp1,f,c
  4222  002396  500B               	movf	__div_to_l_@cntr,w,c
  4223  002398  0FA0               	addlw	160
  4224  00239A  5E0C               	subwf	__div_to_l_@exp1,f,c
  4225  00239C  0E20               	movlw	32
  4226  00239E  6E0B               	movwf	__div_to_l_@cntr,c
  4227  0023A0  90D8               	bcf	status,0,c
  4228  0023A2  3607               	rlcf	__div_to_l_@quot,f,c
  4229  0023A4  3608               	rlcf	__div_to_l_@quot+1,f,c
  4230  0023A6  3609               	rlcf	__div_to_l_@quot+2,f,c
  4231  0023A8  360A               	rlcf	__div_to_l_@quot+3,f,c
  4232  0023AA  5004               	movf	__div_to_l_@f2,w,c
  4233  0023AC  5C01               	subwf	__div_to_l_@f1,w,c
  4234  0023AE  5005               	movf	__div_to_l_@f2+1,w,c
  4235  0023B0  5802               	subwfb	__div_to_l_@f1+1,w,c
  4236  0023B2  5006               	movf	__div_to_l_@f2+2,w,c
  4237  0023B4  5803               	subwfb	__div_to_l_@f1+2,w,c
  4238  0023B6  5007               	movf	__div_to_l_@f2+3,w,c
  4239  0023B8  5804               	subwfb	__div_to_l_@f1+3,w,c
  4240  0023BA  A0D8               	btfss	status,0,c
  4241  0023BC  D009               	goto	l682
  4242  0023BE  5004               	movf	__div_to_l_@f2,w,c
  4243  0023C0  5E01               	subwf	__div_to_l_@f1,f,c
  4244  0023C2  5005               	movf	__div_to_l_@f2+1,w,c
  4245  0023C4  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4246  0023C6  5006               	movf	__div_to_l_@f2+2,w,c
  4247  0023C8  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4248  0023CA  5007               	movf	__div_to_l_@f2+3,w,c
  4249  0023CC  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4250  0023CE  8007               	bsf	__div_to_l_@quot,0,c
  4251  0023D0                     l682:
  4252  0023D0  90D8               	bcf	status,0,c
  4253  0023D2  3601               	rlcf	__div_to_l_@f1,f,c
  4254  0023D4  3602               	rlcf	__div_to_l_@f1+1,f,c
  4255  0023D6  3603               	rlcf	__div_to_l_@f1+2,f,c
  4256  0023D8  3604               	rlcf	__div_to_l_@f1+3,f,c
  4257  0023DA  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4258  0023DC  D7E1               	goto	l681
  4259  0023DE  AE0C               	btfss	__div_to_l_@exp1,7,c
  4260  0023E0  D016               	goto	l684
  4261  0023E2  500C               	movf	__div_to_l_@exp1,w,c
  4262  0023E4  0A80               	xorlw	128
  4263  0023E6  0F9F               	addlw	159
  4264  0023E8  B0D8               	btfsc	status,0,c
  4265  0023EA  D009               	goto	l685
  4266  0023EC  0E00               	movlw	0
  4267  0023EE  6E01               	movwf	?__div_to_l_,c
  4268  0023F0  0E00               	movlw	0
  4269  0023F2  6E02               	movwf	?__div_to_l_+1,c
  4270  0023F4  0E00               	movlw	0
  4271  0023F6  6E03               	movwf	?__div_to_l_+2,c
  4272  0023F8  0E00               	movlw	0
  4273  0023FA  6E04               	movwf	?__div_to_l_+3,c
  4274  0023FC  0012               	return	
  4275  0023FE                     l685:
  4276  0023FE  90D8               	bcf	status,0,c
  4277  002400  320A               	rrcf	__div_to_l_@quot+3,f,c
  4278  002402  3209               	rrcf	__div_to_l_@quot+2,f,c
  4279  002404  3208               	rrcf	__div_to_l_@quot+1,f,c
  4280  002406  3207               	rrcf	__div_to_l_@quot,f,c
  4281  002408  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4282  00240A  D7F9               	goto	l685
  4283  00240C  D015               	goto	u2310
  4284  00240E                     l684:
  4285  00240E  0E1F               	movlw	31
  4286  002410  640C               	cpfsgt	__div_to_l_@exp1,c
  4287  002412  D00F               	goto	l690
  4288  002414  0E00               	movlw	0
  4289  002416  6E01               	movwf	?__div_to_l_,c
  4290  002418  0E00               	movlw	0
  4291  00241A  6E02               	movwf	?__div_to_l_+1,c
  4292  00241C  0E00               	movlw	0
  4293  00241E  6E03               	movwf	?__div_to_l_+2,c
  4294  002420  0E00               	movlw	0
  4295  002422  6E04               	movwf	?__div_to_l_+3,c
  4296  002424  0012               	return	
  4297  002426  90D8               	bcf	status,0,c
  4298  002428  3607               	rlcf	__div_to_l_@quot,f,c
  4299  00242A  3608               	rlcf	__div_to_l_@quot+1,f,c
  4300  00242C  3609               	rlcf	__div_to_l_@quot+2,f,c
  4301  00242E  360A               	rlcf	__div_to_l_@quot+3,f,c
  4302  002430  060C               	decf	__div_to_l_@exp1,f,c
  4303  002432                     l690:
  4304  002432  500C               	movf	__div_to_l_@exp1,w,c
  4305  002434  A4D8               	btfss	status,2,c
  4306  002436  D7F7               	goto	l691
  4307  002438                     u2310:
  4308  002438  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4309  00243C  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4310  002440  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4311  002444  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4312  002448  0012               	return		;funcret
  4313  00244A                     __end_of__div_to_l_:
  4314                           	opt stack 0
  4315                           tblptru	equ	0xFF8
  4316                           tblptrh	equ	0xFF7
  4317                           tblptrl	equ	0xFF6
  4318                           tablat	equ	0xFF5
  4319                           prodh	equ	0xFF4
  4320                           prodl	equ	0xFF3
  4321                           postinc0	equ	0xFEE
  4322                           wreg	equ	0xFE8
  4323                           indf2	equ	0xFDF
  4324                           postinc2	equ	0xFDE
  4325                           postdec2	equ	0xFDD
  4326                           fsr2h	equ	0xFDA
  4327                           fsr2l	equ	0xFD9
  4328                           status	equ	0xFD8
  4329                           
  4330 ;; *************** function ___lltoft *****************
  4331 ;; Defined at:
  4332 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  c               4    8[COMRAM] unsigned long 
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;  exp             1   16[COMRAM] unsigned char 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  3    8[COMRAM] float 
  4339 ;; Registers used:
  4340 ;;		wreg, status,2, status,0, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;Total ram usage:        9 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; Hardware stack levels required when called:    1
  4353 ;; This function calls:
  4354 ;;		___ftpack
  4355 ;; This function is called by:
  4356 ;;		_sprintf
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text10
  4361  002D24                     __ptext10:
  4362                           	opt stack 0
  4363  002D24                     ___lltoft:
  4364                           	opt stack 28
  4365                           
  4366                           ;incstack = 0
  4367  002D24  0E8E               	movlw	142
  4368  002D26  6E11               	movwf	___lltoft@exp,c
  4369  002D28  D006               	goto	l889
  4370  002D2A  90D8               	bcf	status,0,c
  4371  002D2C  320C               	rrcf	___lltoft@c+3,f,c
  4372  002D2E  320B               	rrcf	___lltoft@c+2,f,c
  4373  002D30  320A               	rrcf	___lltoft@c+1,f,c
  4374  002D32  3209               	rrcf	___lltoft@c,f,c
  4375  002D34  2A11               	incf	___lltoft@exp,f,c
  4376  002D36                     l889:
  4377  002D36  0E00               	movlw	0
  4378  002D38  1409               	andwf	___lltoft@c,w,c
  4379  002D3A  6E0D               	movwf	??___lltoft& (0+255),c
  4380  002D3C  0E00               	movlw	0
  4381  002D3E  140A               	andwf	___lltoft@c+1,w,c
  4382  002D40  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4383  002D42  0E00               	movlw	0
  4384  002D44  140B               	andwf	___lltoft@c+2,w,c
  4385  002D46  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4386  002D48  0EFF               	movlw	255
  4387  002D4A  140C               	andwf	___lltoft@c+3,w,c
  4388  002D4C  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4389  002D4E  500D               	movf	??___lltoft,w,c
  4390  002D50  100E               	iorwf	??___lltoft+1,w,c
  4391  002D52  100F               	iorwf	??___lltoft+2,w,c
  4392  002D54  1010               	iorwf	??___lltoft+3,w,c
  4393  002D56  A4D8               	btfss	status,2,c
  4394  002D58  D7E8               	goto	l890
  4395  002D5A  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4396  002D5E  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4397  002D62  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4398  002D66  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4399  002D6A  0E00               	movlw	0
  4400  002D6C  6E05               	movwf	___ftpack@sign,c
  4401  002D6E  EC8C  F013         	call	___ftpack	;wreg free
  4402  002D72  C001  F009         	movff	?___ftpack,?___lltoft
  4403  002D76  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4404  002D7A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4405  002D7E  0012               	return	
  4406  002D80                     __end_of___lltoft:
  4407                           	opt stack 0
  4408                           tblptru	equ	0xFF8
  4409                           tblptrh	equ	0xFF7
  4410                           tblptrl	equ	0xFF6
  4411                           tablat	equ	0xFF5
  4412                           prodh	equ	0xFF4
  4413                           prodl	equ	0xFF3
  4414                           postinc0	equ	0xFEE
  4415                           wreg	equ	0xFE8
  4416                           indf2	equ	0xFDF
  4417                           postinc2	equ	0xFDE
  4418                           postdec2	equ	0xFDD
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function ___llmod *****************
  4424 ;; Defined at:
  4425 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  dividend        4    0[COMRAM] unsigned long 
  4428 ;;  divisor         4    4[COMRAM] unsigned long 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  counter         1    8[COMRAM] unsigned char 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  4    0[COMRAM] unsigned long 
  4433 ;; Registers used:
  4434 ;;		wreg, status,2, status,0
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4440 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4443 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4444 ;;Total ram usage:        9 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_sprintf
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           	psect	text11
  4454  002CBE                     __ptext11:
  4455                           	opt stack 0
  4456  002CBE                     ___llmod:
  4457                           	opt stack 29
  4458                           
  4459                           ;incstack = 0
  4460  002CBE  5005               	movf	___llmod@divisor,w,c
  4461  002CC0  1006               	iorwf	___llmod@divisor+1,w,c
  4462  002CC2  1007               	iorwf	___llmod@divisor+2,w,c
  4463  002CC4  1008               	iorwf	___llmod@divisor+3,w,c
  4464  002CC6  B4D8               	btfsc	status,2,c
  4465  002CC8  D024               	goto	l883
  4466  002CCA  0E01               	movlw	1
  4467  002CCC  6E09               	movwf	___llmod@counter,c
  4468  002CCE  D006               	goto	l878
  4469  002CD0  90D8               	bcf	status,0,c
  4470  002CD2  3605               	rlcf	___llmod@divisor,f,c
  4471  002CD4  3606               	rlcf	___llmod@divisor+1,f,c
  4472  002CD6  3607               	rlcf	___llmod@divisor+2,f,c
  4473  002CD8  3608               	rlcf	___llmod@divisor+3,f,c
  4474  002CDA  2A09               	incf	___llmod@counter,f,c
  4475  002CDC                     l878:
  4476  002CDC  AE08               	btfss	___llmod@divisor+3,7,c
  4477  002CDE  D7F8               	goto	l879
  4478  002CE0                     u2510:
  4479  002CE0  5005               	movf	___llmod@divisor,w,c
  4480  002CE2  5C01               	subwf	___llmod@dividend,w,c
  4481  002CE4  5006               	movf	___llmod@divisor+1,w,c
  4482  002CE6  5802               	subwfb	___llmod@dividend+1,w,c
  4483  002CE8  5007               	movf	___llmod@divisor+2,w,c
  4484  002CEA  5803               	subwfb	___llmod@dividend+2,w,c
  4485  002CEC  5008               	movf	___llmod@divisor+3,w,c
  4486  002CEE  5804               	subwfb	___llmod@dividend+3,w,c
  4487  002CF0  A0D8               	btfss	status,0,c
  4488  002CF2  D008               	goto	l882
  4489  002CF4  5005               	movf	___llmod@divisor,w,c
  4490  002CF6  5E01               	subwf	___llmod@dividend,f,c
  4491  002CF8  5006               	movf	___llmod@divisor+1,w,c
  4492  002CFA  5A02               	subwfb	___llmod@dividend+1,f,c
  4493  002CFC  5007               	movf	___llmod@divisor+2,w,c
  4494  002CFE  5A03               	subwfb	___llmod@dividend+2,f,c
  4495  002D00  5008               	movf	___llmod@divisor+3,w,c
  4496  002D02  5A04               	subwfb	___llmod@dividend+3,f,c
  4497  002D04                     l882:
  4498  002D04  90D8               	bcf	status,0,c
  4499  002D06  3208               	rrcf	___llmod@divisor+3,f,c
  4500  002D08  3207               	rrcf	___llmod@divisor+2,f,c
  4501  002D0A  3206               	rrcf	___llmod@divisor+1,f,c
  4502  002D0C  3205               	rrcf	___llmod@divisor,f,c
  4503  002D0E  2E09               	decfsz	___llmod@counter,f,c
  4504  002D10  D7E7               	goto	u2510
  4505  002D12                     l883:
  4506  002D12  C001  F001         	movff	___llmod@dividend,?___llmod
  4507  002D16  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4508  002D1A  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4509  002D1E  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4510  002D22  0012               	return		;funcret
  4511  002D24                     __end_of___llmod:
  4512                           	opt stack 0
  4513                           tblptru	equ	0xFF8
  4514                           tblptrh	equ	0xFF7
  4515                           tblptrl	equ	0xFF6
  4516                           tablat	equ	0xFF5
  4517                           prodh	equ	0xFF4
  4518                           prodl	equ	0xFF3
  4519                           postinc0	equ	0xFEE
  4520                           wreg	equ	0xFE8
  4521                           indf2	equ	0xFDF
  4522                           postinc2	equ	0xFDE
  4523                           postdec2	equ	0xFDD
  4524                           fsr2h	equ	0xFDA
  4525                           fsr2l	equ	0xFD9
  4526                           status	equ	0xFD8
  4527                           
  4528 ;; *************** function ___fttol *****************
  4529 ;; Defined at:
  4530 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;  f1              3   42[COMRAM] float 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  lval            4   52[COMRAM] unsigned long 
  4535 ;;  exp1            1   56[COMRAM] unsigned char 
  4536 ;;  sign1           1   51[COMRAM] unsigned char 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  4   42[COMRAM] long 
  4539 ;; Registers used:
  4540 ;;		wreg, status,2, status,0
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4546 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4547 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;Total ram usage:       15 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_sprintf
  4556 ;;		_buck_boost
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text12
  4561  00244A                     __ptext12:
  4562                           	opt stack 0
  4563  00244A                     ___fttol:
  4564                           	opt stack 29
  4565                           
  4566                           ;incstack = 0
  4567  00244A  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4568  00244E  6A30               	clrf	(??___fttol+1)& (0+255),c
  4569  002450  6A31               	clrf	(??___fttol+2)& (0+255),c
  4570  002452  342C               	rlcf	___fttol@f1+1,w,c
  4571  002454  362F               	rlcf	??___fttol& (0+255),f,c
  4572  002456  E301               	bnc	u2421
  4573  002458  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4574  00245A                     u2421:
  4575  00245A  502F               	movf	??___fttol,w,c
  4576  00245C  6E39               	movwf	___fttol@exp1,c
  4577  00245E  5039               	movf	___fttol@exp1,w,c
  4578  002460  A4D8               	btfss	status,2,c
  4579  002462  D009               	goto	l827
  4580  002464  0E00               	movlw	0
  4581  002466  6E2B               	movwf	?___fttol,c
  4582  002468  0E00               	movlw	0
  4583  00246A  6E2C               	movwf	?___fttol+1,c
  4584  00246C  0E00               	movlw	0
  4585  00246E  6E2D               	movwf	?___fttol+2,c
  4586  002470  0E00               	movlw	0
  4587  002472  6E2E               	movwf	?___fttol+3,c
  4588  002474  0012               	return	
  4589  002476                     l827:
  4590  002476  0E17               	movlw	23
  4591  002478  6E2F               	movwf	??___fttol& (0+255),c
  4592  00247A  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4593  00247E  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4594  002482  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4595  002486  282F               	incf	??___fttol,w,c
  4596  002488  6E33               	movwf	(??___fttol+4)& (0+255),c
  4597  00248A  D004               	goto	u2440
  4598  00248C                     u2445:
  4599  00248C  90D8               	bcf	status,0,c
  4600  00248E  3232               	rrcf	??___fttol+3,f,c
  4601  002490  3231               	rrcf	??___fttol+2,f,c
  4602  002492  3230               	rrcf	??___fttol+1,f,c
  4603  002494                     u2440:
  4604  002494  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4605  002496  D7FA               	goto	u2445
  4606  002498  5030               	movf	??___fttol+1,w,c
  4607  00249A  6E34               	movwf	___fttol@sign1,c
  4608  00249C  8E2C               	bsf	___fttol@f1+1,7,c
  4609  00249E  0EFF               	movlw	255
  4610  0024A0  162B               	andwf	___fttol@f1,f,c
  4611  0024A2  0EFF               	movlw	255
  4612  0024A4  162C               	andwf	___fttol@f1+1,f,c
  4613  0024A6  0E00               	movlw	0
  4614  0024A8  162D               	andwf	___fttol@f1+2,f,c
  4615  0024AA  502B               	movf	___fttol@f1,w,c
  4616  0024AC  6E35               	movwf	___fttol@lval,c
  4617  0024AE  502C               	movf	___fttol@f1+1,w,c
  4618  0024B0  6E36               	movwf	___fttol@lval+1,c
  4619  0024B2  502D               	movf	___fttol@f1+2,w,c
  4620  0024B4  6E37               	movwf	___fttol@lval+2,c
  4621  0024B6  6A38               	clrf	___fttol@lval+3,c
  4622  0024B8  0E8E               	movlw	142
  4623  0024BA  5E39               	subwf	___fttol@exp1,f,c
  4624  0024BC  AE39               	btfss	___fttol@exp1,7,c
  4625  0024BE  D016               	goto	l829
  4626  0024C0  5039               	movf	___fttol@exp1,w,c
  4627  0024C2  0A80               	xorlw	128
  4628  0024C4  0F8F               	addlw	143
  4629  0024C6  B0D8               	btfsc	status,0,c
  4630  0024C8  D009               	goto	l830
  4631  0024CA  0E00               	movlw	0
  4632  0024CC  6E2B               	movwf	?___fttol,c
  4633  0024CE  0E00               	movlw	0
  4634  0024D0  6E2C               	movwf	?___fttol+1,c
  4635  0024D2  0E00               	movlw	0
  4636  0024D4  6E2D               	movwf	?___fttol+2,c
  4637  0024D6  0E00               	movlw	0
  4638  0024D8  6E2E               	movwf	?___fttol+3,c
  4639  0024DA  0012               	return	
  4640  0024DC                     l830:
  4641  0024DC  90D8               	bcf	status,0,c
  4642  0024DE  3238               	rrcf	___fttol@lval+3,f,c
  4643  0024E0  3237               	rrcf	___fttol@lval+2,f,c
  4644  0024E2  3236               	rrcf	___fttol@lval+1,f,c
  4645  0024E4  3235               	rrcf	___fttol@lval,f,c
  4646  0024E6  3E39               	incfsz	___fttol@exp1,f,c
  4647  0024E8  D7F9               	goto	l830
  4648  0024EA  D015               	goto	u2480
  4649  0024EC                     l829:
  4650  0024EC  0E17               	movlw	23
  4651  0024EE  6439               	cpfsgt	___fttol@exp1,c
  4652  0024F0  D00F               	goto	l835
  4653  0024F2  0E00               	movlw	0
  4654  0024F4  6E2B               	movwf	?___fttol,c
  4655  0024F6  0E00               	movlw	0
  4656  0024F8  6E2C               	movwf	?___fttol+1,c
  4657  0024FA  0E00               	movlw	0
  4658  0024FC  6E2D               	movwf	?___fttol+2,c
  4659  0024FE  0E00               	movlw	0
  4660  002500  6E2E               	movwf	?___fttol+3,c
  4661  002502  0012               	return	
  4662  002504  90D8               	bcf	status,0,c
  4663  002506  3635               	rlcf	___fttol@lval,f,c
  4664  002508  3636               	rlcf	___fttol@lval+1,f,c
  4665  00250A  3637               	rlcf	___fttol@lval+2,f,c
  4666  00250C  3638               	rlcf	___fttol@lval+3,f,c
  4667  00250E  0639               	decf	___fttol@exp1,f,c
  4668  002510                     l835:
  4669  002510  5039               	movf	___fttol@exp1,w,c
  4670  002512  A4D8               	btfss	status,2,c
  4671  002514  D7F7               	goto	l836
  4672  002516                     u2480:
  4673  002516  5034               	movf	___fttol@sign1,w,c
  4674  002518  B4D8               	btfsc	status,2,c
  4675  00251A  D008               	goto	l838
  4676  00251C  1E38               	comf	___fttol@lval+3,f,c
  4677  00251E  1E37               	comf	___fttol@lval+2,f,c
  4678  002520  1E36               	comf	___fttol@lval+1,f,c
  4679  002522  6C35               	negf	___fttol@lval,c
  4680  002524  0E00               	movlw	0
  4681  002526  2236               	addwfc	___fttol@lval+1,f,c
  4682  002528  2237               	addwfc	___fttol@lval+2,f,c
  4683  00252A  2238               	addwfc	___fttol@lval+3,f,c
  4684  00252C                     l838:
  4685  00252C  C035  F02B         	movff	___fttol@lval,?___fttol
  4686  002530  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4687  002534  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4688  002538  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4689  00253C  0012               	return	
  4690  00253E                     __end_of___fttol:
  4691                           	opt stack 0
  4692                           tblptru	equ	0xFF8
  4693                           tblptrh	equ	0xFF7
  4694                           tblptrl	equ	0xFF6
  4695                           tablat	equ	0xFF5
  4696                           prodh	equ	0xFF4
  4697                           prodl	equ	0xFF3
  4698                           postinc0	equ	0xFEE
  4699                           wreg	equ	0xFE8
  4700                           indf2	equ	0xFDF
  4701                           postinc2	equ	0xFDE
  4702                           postdec2	equ	0xFDD
  4703                           fsr2h	equ	0xFDA
  4704                           fsr2l	equ	0xFD9
  4705                           status	equ	0xFD8
  4706                           
  4707 ;; *************** function ___ftsub *****************
  4708 ;; Defined at:
  4709 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  f1              3   57[COMRAM] float 
  4712 ;;  f2              3   60[COMRAM] float 
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;		None
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  3   57[COMRAM] float 
  4717 ;; Registers used:
  4718 ;;		wreg, status,2, status,0, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4724 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;Total ram usage:        6 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    2
  4731 ;; This function calls:
  4732 ;;		___ftadd
  4733 ;; This function is called by:
  4734 ;;		_sprintf
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           	psect	text13
  4739  002F6C                     __ptext13:
  4740                           	opt stack 0
  4741  002F6C                     ___ftsub:
  4742                           	opt stack 27
  4743                           
  4744                           ;incstack = 0
  4745  002F6C  503D               	movf	___ftsub@f2,w,c
  4746  002F6E  103E               	iorwf	___ftsub@f2+1,w,c
  4747  002F70  103F               	iorwf	___ftsub@f2+2,w,c
  4748  002F72  B4D8               	btfsc	status,2,c
  4749  002F74  D006               	goto	l823
  4750  002F76  0E00               	movlw	0
  4751  002F78  1A3D               	xorwf	___ftsub@f2,f,c
  4752  002F7A  0E00               	movlw	0
  4753  002F7C  1A3E               	xorwf	___ftsub@f2+1,f,c
  4754  002F7E  0E80               	movlw	128
  4755  002F80  1A3F               	xorwf	___ftsub@f2+2,f,c
  4756  002F82                     l823:
  4757  002F82  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4758  002F86  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4759  002F8A  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4760  002F8E  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4761  002F92  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4762  002F96  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4763  002F9A  EC22  F010         	call	___ftadd	;wreg free
  4764  002F9E  C02E  F03A         	movff	?___ftadd,?___ftsub
  4765  002FA2  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4766  002FA6  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4767  002FAA  0012               	return	
  4768  002FAC                     __end_of___ftsub:
  4769                           	opt stack 0
  4770                           tblptru	equ	0xFF8
  4771                           tblptrh	equ	0xFF7
  4772                           tblptrl	equ	0xFF6
  4773                           tablat	equ	0xFF5
  4774                           prodh	equ	0xFF4
  4775                           prodl	equ	0xFF3
  4776                           postinc0	equ	0xFEE
  4777                           wreg	equ	0xFE8
  4778                           indf2	equ	0xFDF
  4779                           postinc2	equ	0xFDE
  4780                           postdec2	equ	0xFDD
  4781                           fsr2h	equ	0xFDA
  4782                           fsr2l	equ	0xFD9
  4783                           status	equ	0xFD8
  4784                           
  4785 ;; *************** function ___ftadd *****************
  4786 ;; Defined at:
  4787 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  4788 ;; Parameters:    Size  Location     Type
  4789 ;;  f1              3   45[COMRAM] float 
  4790 ;;  f2              3   48[COMRAM] float 
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;  exp1            1   56[COMRAM] unsigned char 
  4793 ;;  exp2            1   55[COMRAM] unsigned char 
  4794 ;;  sign            1   54[COMRAM] unsigned char 
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  3   45[COMRAM] float 
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4804 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;Total ram usage:       12 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    1
  4811 ;; This function calls:
  4812 ;;		___ftpack
  4813 ;; This function is called by:
  4814 ;;		_sprintf
  4815 ;;		___ftsub
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           	psect	text14
  4820  002044                     __ptext14:
  4821                           	opt stack 0
  4822  002044                     ___ftadd:
  4823                           	opt stack 27
  4824                           
  4825                           ;incstack = 0
  4826  002044  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4827  002048  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4828  00204A  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4829  00204C  342F               	rlcf	___ftadd@f1+1,w,c
  4830  00204E  3634               	rlcf	??___ftadd& (0+255),f,c
  4831  002050  E301               	bnc	u1591
  4832  002052  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4833  002054                     u1591:
  4834  002054  5034               	movf	??___ftadd,w,c
  4835  002056  6E39               	movwf	___ftadd@exp1,c
  4836  002058  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4837  00205C  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4838  00205E  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4839  002060  3432               	rlcf	___ftadd@f2+1,w,c
  4840  002062  3634               	rlcf	??___ftadd& (0+255),f,c
  4841  002064  E301               	bnc	u1601
  4842  002066  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4843  002068                     u1601:
  4844  002068  5034               	movf	??___ftadd,w,c
  4845  00206A  6E38               	movwf	___ftadd@exp2,c
  4846  00206C  5039               	movf	___ftadd@exp1,w,c
  4847  00206E  B4D8               	btfsc	status,2,c
  4848  002070  D00B               	goto	u1630
  4849  002072  5038               	movf	___ftadd@exp2,w,c
  4850  002074  5C39               	subwf	___ftadd@exp1,w,c
  4851  002076  B0D8               	btfsc	status,0,c
  4852  002078  D00E               	goto	l741
  4853  00207A  5039               	movf	___ftadd@exp1,w,c
  4854  00207C  0800               	sublw	0
  4855  00207E  2438               	addwf	___ftadd@exp2,w,c
  4856  002080  6E34               	movwf	??___ftadd& (0+255),c
  4857  002082  0E18               	movlw	24
  4858  002084  6434               	cpfsgt	??___ftadd,c
  4859  002086  D007               	goto	l741
  4860  002088                     u1630:
  4861  002088  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4862  00208C  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4863  002090  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4864  002094  0012               	return	
  4865  002096                     l741:
  4866  002096  5038               	movf	___ftadd@exp2,w,c
  4867  002098  B4D8               	btfsc	status,2,c
  4868  00209A  D00B               	goto	u1660
  4869  00209C  5039               	movf	___ftadd@exp1,w,c
  4870  00209E  5C38               	subwf	___ftadd@exp2,w,c
  4871  0020A0  B0D8               	btfsc	status,0,c
  4872  0020A2  D00E               	goto	l745
  4873  0020A4  5038               	movf	___ftadd@exp2,w,c
  4874  0020A6  0800               	sublw	0
  4875  0020A8  2439               	addwf	___ftadd@exp1,w,c
  4876  0020AA  6E34               	movwf	??___ftadd& (0+255),c
  4877  0020AC  0E18               	movlw	24
  4878  0020AE  6434               	cpfsgt	??___ftadd,c
  4879  0020B0  D007               	goto	l745
  4880  0020B2                     u1660:
  4881  0020B2  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4882  0020B6  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4883  0020BA  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4884  0020BE  0012               	return	
  4885  0020C0                     l745:
  4886  0020C0  0E06               	movlw	6
  4887  0020C2  6E37               	movwf	___ftadd@sign,c
  4888  0020C4  BE30               	btfsc	___ftadd@f1+2,7,c
  4889  0020C6  8E37               	bsf	___ftadd@sign,7,c
  4890  0020C8  BE33               	btfsc	___ftadd@f2+2,7,c
  4891  0020CA  8C37               	bsf	___ftadd@sign,6,c
  4892  0020CC  8E2F               	bsf	___ftadd@f1+1,7,c
  4893  0020CE  0EFF               	movlw	255
  4894  0020D0  162E               	andwf	___ftadd@f1,f,c
  4895  0020D2  0EFF               	movlw	255
  4896  0020D4  162F               	andwf	___ftadd@f1+1,f,c
  4897  0020D6  0E00               	movlw	0
  4898  0020D8  1630               	andwf	___ftadd@f1+2,f,c
  4899  0020DA  8E32               	bsf	___ftadd@f2+1,7,c
  4900  0020DC  0EFF               	movlw	255
  4901  0020DE  1631               	andwf	___ftadd@f2,f,c
  4902  0020E0  0EFF               	movlw	255
  4903  0020E2  1632               	andwf	___ftadd@f2+1,f,c
  4904  0020E4  0E00               	movlw	0
  4905  0020E6  1633               	andwf	___ftadd@f2+2,f,c
  4906  0020E8  5038               	movf	___ftadd@exp2,w,c
  4907  0020EA  5C39               	subwf	___ftadd@exp1,w,c
  4908  0020EC  B0D8               	btfsc	status,0,c
  4909  0020EE  D01B               	goto	l750
  4910  0020F0                     u1690:
  4911  0020F0  90D8               	bcf	status,0,c
  4912  0020F2  3631               	rlcf	___ftadd@f2,f,c
  4913  0020F4  3632               	rlcf	___ftadd@f2+1,f,c
  4914  0020F6  3633               	rlcf	___ftadd@f2+2,f,c
  4915  0020F8  0638               	decf	___ftadd@exp2,f,c
  4916  0020FA  5039               	movf	___ftadd@exp1,w,c
  4917  0020FC  1838               	xorwf	___ftadd@exp2,w,c
  4918  0020FE  B4D8               	btfsc	status,2,c
  4919  002100  D00D               	goto	l755
  4920  002102  0637               	decf	___ftadd@sign,f,c
  4921  002104  C037  F034         	movff	___ftadd@sign,??___ftadd
  4922  002108  0E07               	movlw	7
  4923  00210A  1634               	andwf	??___ftadd,f,c
  4924  00210C  B4D8               	btfsc	status,2,c
  4925  00210E  D006               	goto	l755
  4926  002110  D7EF               	goto	u1690
  4927  002112  90D8               	bcf	status,0,c
  4928  002114  3230               	rrcf	___ftadd@f1+2,f,c
  4929  002116  322F               	rrcf	___ftadd@f1+1,f,c
  4930  002118  322E               	rrcf	___ftadd@f1,f,c
  4931  00211A  2A39               	incf	___ftadd@exp1,f,c
  4932  00211C                     l755:
  4933  00211C  5038               	movf	___ftadd@exp2,w,c
  4934  00211E  1839               	xorwf	___ftadd@exp1,w,c
  4935  002120  B4D8               	btfsc	status,2,c
  4936  002122  D01F               	goto	u1760
  4937  002124  D7F6               	goto	l756
  4938  002126                     l750:
  4939  002126  5039               	movf	___ftadd@exp1,w,c
  4940  002128  5C38               	subwf	___ftadd@exp2,w,c
  4941  00212A  B0D8               	btfsc	status,0,c
  4942  00212C  D01A               	goto	u1760
  4943  00212E                     u1730:
  4944  00212E  90D8               	bcf	status,0,c
  4945  002130  362E               	rlcf	___ftadd@f1,f,c
  4946  002132  362F               	rlcf	___ftadd@f1+1,f,c
  4947  002134  3630               	rlcf	___ftadd@f1+2,f,c
  4948  002136  0639               	decf	___ftadd@exp1,f,c
  4949  002138  5039               	movf	___ftadd@exp1,w,c
  4950  00213A  1838               	xorwf	___ftadd@exp2,w,c
  4951  00213C  B4D8               	btfsc	status,2,c
  4952  00213E  D00D               	goto	l764
  4953  002140  0637               	decf	___ftadd@sign,f,c
  4954  002142  C037  F034         	movff	___ftadd@sign,??___ftadd
  4955  002146  0E07               	movlw	7
  4956  002148  1634               	andwf	??___ftadd,f,c
  4957  00214A  B4D8               	btfsc	status,2,c
  4958  00214C  D006               	goto	l764
  4959  00214E  D7EF               	goto	u1730
  4960  002150  90D8               	bcf	status,0,c
  4961  002152  3233               	rrcf	___ftadd@f2+2,f,c
  4962  002154  3232               	rrcf	___ftadd@f2+1,f,c
  4963  002156  3231               	rrcf	___ftadd@f2,f,c
  4964  002158  2A38               	incf	___ftadd@exp2,f,c
  4965  00215A                     l764:
  4966  00215A  5038               	movf	___ftadd@exp2,w,c
  4967  00215C  1839               	xorwf	___ftadd@exp1,w,c
  4968  00215E  A4D8               	btfss	status,2,c
  4969  002160  D7F7               	goto	l765
  4970  002162                     u1760:
  4971  002162  AE37               	btfss	___ftadd@sign,7,c
  4972  002164  D00C               	goto	l767
  4973  002166  0EFF               	movlw	255
  4974  002168  1A2E               	xorwf	___ftadd@f1,f,c
  4975  00216A  0EFF               	movlw	255
  4976  00216C  1A2F               	xorwf	___ftadd@f1+1,f,c
  4977  00216E  0EFF               	movlw	255
  4978  002170  1A30               	xorwf	___ftadd@f1+2,f,c
  4979  002172  0E01               	movlw	1
  4980  002174  262E               	addwf	___ftadd@f1,f,c
  4981  002176  0E00               	movlw	0
  4982  002178  222F               	addwfc	___ftadd@f1+1,f,c
  4983  00217A  0E00               	movlw	0
  4984  00217C  2230               	addwfc	___ftadd@f1+2,f,c
  4985  00217E                     l767:
  4986  00217E  AC37               	btfss	___ftadd@sign,6,c
  4987  002180  D00C               	goto	l768
  4988  002182  0EFF               	movlw	255
  4989  002184  1A31               	xorwf	___ftadd@f2,f,c
  4990  002186  0EFF               	movlw	255
  4991  002188  1A32               	xorwf	___ftadd@f2+1,f,c
  4992  00218A  0EFF               	movlw	255
  4993  00218C  1A33               	xorwf	___ftadd@f2+2,f,c
  4994  00218E  0E01               	movlw	1
  4995  002190  2631               	addwf	___ftadd@f2,f,c
  4996  002192  0E00               	movlw	0
  4997  002194  2232               	addwfc	___ftadd@f2+1,f,c
  4998  002196  0E00               	movlw	0
  4999  002198  2233               	addwfc	___ftadd@f2+2,f,c
  5000  00219A                     l768:
  5001  00219A  0E00               	movlw	0
  5002  00219C  6E37               	movwf	___ftadd@sign,c
  5003  00219E  502E               	movf	___ftadd@f1,w,c
  5004  0021A0  2631               	addwf	___ftadd@f2,f,c
  5005  0021A2  502F               	movf	___ftadd@f1+1,w,c
  5006  0021A4  2232               	addwfc	___ftadd@f2+1,f,c
  5007  0021A6  5030               	movf	___ftadd@f1+2,w,c
  5008  0021A8  2233               	addwfc	___ftadd@f2+2,f,c
  5009  0021AA  AE33               	btfss	___ftadd@f2+2,7,c
  5010  0021AC  D00E               	goto	l769
  5011  0021AE  0EFF               	movlw	255
  5012  0021B0  1A31               	xorwf	___ftadd@f2,f,c
  5013  0021B2  0EFF               	movlw	255
  5014  0021B4  1A32               	xorwf	___ftadd@f2+1,f,c
  5015  0021B6  0EFF               	movlw	255
  5016  0021B8  1A33               	xorwf	___ftadd@f2+2,f,c
  5017  0021BA  0E01               	movlw	1
  5018  0021BC  2631               	addwf	___ftadd@f2,f,c
  5019  0021BE  0E00               	movlw	0
  5020  0021C0  2232               	addwfc	___ftadd@f2+1,f,c
  5021  0021C2  0E00               	movlw	0
  5022  0021C4  2233               	addwfc	___ftadd@f2+2,f,c
  5023  0021C6  0E01               	movlw	1
  5024  0021C8  6E37               	movwf	___ftadd@sign,c
  5025  0021CA                     l769:
  5026  0021CA  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5027  0021CE  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5028  0021D2  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5029  0021D6  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5030  0021DA  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5031  0021DE  EC8C  F013         	call	___ftpack	;wreg free
  5032  0021E2  C001  F02E         	movff	?___ftpack,?___ftadd
  5033  0021E6  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5034  0021EA  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5035  0021EE  0012               	return	
  5036  0021F0                     __end_of___ftadd:
  5037                           	opt stack 0
  5038                           tblptru	equ	0xFF8
  5039                           tblptrh	equ	0xFF7
  5040                           tblptrl	equ	0xFF6
  5041                           tablat	equ	0xFF5
  5042                           prodh	equ	0xFF4
  5043                           prodl	equ	0xFF3
  5044                           postinc0	equ	0xFEE
  5045                           wreg	equ	0xFE8
  5046                           indf2	equ	0xFDF
  5047                           postinc2	equ	0xFDE
  5048                           postdec2	equ	0xFDD
  5049                           fsr2h	equ	0xFDA
  5050                           fsr2l	equ	0xFD9
  5051                           status	equ	0xFD8
  5052                           
  5053 ;; *************** function ___ftneg *****************
  5054 ;; Defined at:
  5055 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  f1              3    0[COMRAM] float 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  3    0[COMRAM] float 
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, status,0
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5069 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;Total ram usage:        3 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; This function calls:
  5076 ;;		Nothing
  5077 ;; This function is called by:
  5078 ;;		_sprintf
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082                           	psect	text15
  5083  002FFA                     __ptext15:
  5084                           	opt stack 0
  5085  002FFA                     ___ftneg:
  5086                           	opt stack 29
  5087                           
  5088                           ;incstack = 0
  5089  002FFA  5001               	movf	___ftneg@f1,w,c
  5090  002FFC  1002               	iorwf	___ftneg@f1+1,w,c
  5091  002FFE  1003               	iorwf	___ftneg@f1+2,w,c
  5092  003000  B4D8               	btfsc	status,2,c
  5093  003002  D006               	goto	l817
  5094  003004  0E00               	movlw	0
  5095  003006  1A01               	xorwf	___ftneg@f1,f,c
  5096  003008  0E00               	movlw	0
  5097  00300A  1A02               	xorwf	___ftneg@f1+1,f,c
  5098  00300C  0E80               	movlw	128
  5099  00300E  1A03               	xorwf	___ftneg@f1+2,f,c
  5100  003010                     l817:
  5101  003010  C001  F001         	movff	___ftneg@f1,?___ftneg
  5102  003014  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5103  003018  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5104  00301C  0012               	return		;funcret
  5105  00301E                     __end_of___ftneg:
  5106                           	opt stack 0
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           prodh	equ	0xFF4
  5112                           prodl	equ	0xFF3
  5113                           postinc0	equ	0xFEE
  5114                           wreg	equ	0xFE8
  5115                           indf2	equ	0xFDF
  5116                           postinc2	equ	0xFDE
  5117                           postdec2	equ	0xFDD
  5118                           fsr2h	equ	0xFDA
  5119                           fsr2l	equ	0xFD9
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function ___ftge *****************
  5123 ;; Defined at:
  5124 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  ff1             3    0[COMRAM] float 
  5127 ;;  ff2             3    3[COMRAM] float 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;		None               void
  5132 ;; Registers used:
  5133 ;;		wreg, status,2, status,0
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5139 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;Total ram usage:        9 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; This function calls:
  5146 ;;		Nothing
  5147 ;; This function is called by:
  5148 ;;		_main
  5149 ;;		_sprintf
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           	psect	text16
  5154  0027C6                     __ptext16:
  5155                           	opt stack 0
  5156  0027C6                     ___ftge:
  5157                           	opt stack 29
  5158                           
  5159                           ;incstack = 0
  5160  0027C6  AE03               	btfss	___ftge@ff1+2,7,c
  5161  0027C8  D016               	goto	l799
  5162  0027CA  C001  F007         	movff	___ftge@ff1,??___ftge
  5163  0027CE  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5164  0027D2  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5165  0027D6  1E07               	comf	??___ftge,f,c
  5166  0027D8  1E08               	comf	??___ftge+1,f,c
  5167  0027DA  1E09               	comf	??___ftge+2,f,c
  5168  0027DC  2A07               	incf	??___ftge,f,c
  5169  0027DE  0E00               	movlw	0
  5170  0027E0  2208               	addwfc	??___ftge+1,f,c
  5171  0027E2  2209               	addwfc	??___ftge+2,f,c
  5172  0027E4  0E00               	movlw	0
  5173  0027E6  2407               	addwf	??___ftge,w,c
  5174  0027E8  6E01               	movwf	___ftge@ff1,c
  5175  0027EA  0E00               	movlw	0
  5176  0027EC  2008               	addwfc	??___ftge+1,w,c
  5177  0027EE  6E02               	movwf	___ftge@ff1+1,c
  5178  0027F0  0E80               	movlw	128
  5179  0027F2  2009               	addwfc	??___ftge+2,w,c
  5180  0027F4  6E03               	movwf	___ftge@ff1+2,c
  5181  0027F6                     l799:
  5182  0027F6  AE06               	btfss	___ftge@ff2+2,7,c
  5183  0027F8  D016               	goto	l800
  5184  0027FA  C004  F007         	movff	___ftge@ff2,??___ftge
  5185  0027FE  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5186  002802  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5187  002806  1E07               	comf	??___ftge,f,c
  5188  002808  1E08               	comf	??___ftge+1,f,c
  5189  00280A  1E09               	comf	??___ftge+2,f,c
  5190  00280C  2A07               	incf	??___ftge,f,c
  5191  00280E  0E00               	movlw	0
  5192  002810  2208               	addwfc	??___ftge+1,f,c
  5193  002812  2209               	addwfc	??___ftge+2,f,c
  5194  002814  0E00               	movlw	0
  5195  002816  2407               	addwf	??___ftge,w,c
  5196  002818  6E04               	movwf	___ftge@ff2,c
  5197  00281A  0E00               	movlw	0
  5198  00281C  2008               	addwfc	??___ftge+1,w,c
  5199  00281E  6E05               	movwf	___ftge@ff2+1,c
  5200  002820  0E80               	movlw	128
  5201  002822  2009               	addwfc	??___ftge+2,w,c
  5202  002824  6E06               	movwf	___ftge@ff2+2,c
  5203  002826                     l800:
  5204  002826  0E00               	movlw	0
  5205  002828  1A01               	xorwf	___ftge@ff1,f,c
  5206  00282A  0E00               	movlw	0
  5207  00282C  1A02               	xorwf	___ftge@ff1+1,f,c
  5208  00282E  0E80               	movlw	128
  5209  002830  1A03               	xorwf	___ftge@ff1+2,f,c
  5210  002832  0E00               	movlw	0
  5211  002834  1A04               	xorwf	___ftge@ff2,f,c
  5212  002836  0E00               	movlw	0
  5213  002838  1A05               	xorwf	___ftge@ff2+1,f,c
  5214  00283A  0E80               	movlw	128
  5215  00283C  1A06               	xorwf	___ftge@ff2+2,f,c
  5216  00283E  5004               	movf	___ftge@ff2,w,c
  5217  002840  5C01               	subwf	___ftge@ff1,w,c
  5218  002842  5005               	movf	___ftge@ff2+1,w,c
  5219  002844  5802               	subwfb	___ftge@ff1+1,w,c
  5220  002846  5006               	movf	___ftge@ff2+2,w,c
  5221  002848  5803               	subwfb	___ftge@ff1+2,w,c
  5222  00284A  B0D8               	btfsc	status,0,c
  5223  00284C  D002               	goto	l2377
  5224  00284E  90D8               	bcf	status,0,c
  5225  002850  0012               	return	
  5226  002852                     l2377:
  5227  002852  80D8               	bsf	status,0,c
  5228  002854  0012               	return	
  5229  002856                     __end_of___ftge:
  5230                           	opt stack 0
  5231                           tblptru	equ	0xFF8
  5232                           tblptrh	equ	0xFF7
  5233                           tblptrl	equ	0xFF6
  5234                           tablat	equ	0xFF5
  5235                           prodh	equ	0xFF4
  5236                           prodl	equ	0xFF3
  5237                           postinc0	equ	0xFEE
  5238                           wreg	equ	0xFE8
  5239                           indf2	equ	0xFDF
  5240                           postinc2	equ	0xFDE
  5241                           postdec2	equ	0xFDD
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function _read_Uout *****************
  5247 ;; Defined at:
  5248 ;;		line 28 in file "MPPT.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;		None
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;		None
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  1    wreg      void 
  5255 ;; Registers used:
  5256 ;;		wreg, status,2, status,0, cstack
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5264 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5265 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5266 ;;Total ram usage:        2 bytes
  5267 ;; Hardware stack levels used:    1
  5268 ;; Hardware stack levels required when called:    2
  5269 ;; This function calls:
  5270 ;;		___ftdiv
  5271 ;;		___ftmul
  5272 ;;		___lbtoft
  5273 ;; This function is called by:
  5274 ;;		_main
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text17
  5279  002856                     __ptext17:
  5280                           	opt stack 0
  5281  002856                     _read_Uout:
  5282                           	opt stack 28
  5283                           
  5284                           ;MPPT.c: 30: ADCON0=0b00000111;
  5285                           
  5286                           ;incstack = 0
  5287  002856  0E07               	movlw	7
  5288  002858  6EC2               	movwf	4034,c	;volatile
  5289                           
  5290                           ;MPPT.c: 31: _delay((unsigned long)((10)*(64000000/4000.0)));
  5291  00285A  0ED0               	movlw	208
  5292  00285C  6E24               	movwf	??_read_Uout& (0+255),c
  5293  00285E  0ECA               	movlw	202
  5294  002860                     u3007:
  5295  002860  2EE8               	decfsz	wreg,f,c
  5296  002862  D7FE               	bra	u3007
  5297  002864  2E24               	decfsz	??_read_Uout& (0+255),f,c
  5298  002866  D7FC               	bra	u3007
  5299                           
  5300                           ;MPPT.c: 32: ADCON0bits.GO=1;
  5301  002868  82C2               	bsf	4034,1,c	;volatile
  5302                           
  5303                           ;MPPT.c: 33: _delay((unsigned long)((100)*(64000000/4000.0)));
  5304  00286A  0E09               	movlw	9
  5305  00286C  6E25               	movwf	(??_read_Uout+1)& (0+255),c
  5306  00286E  0E1E               	movlw	30
  5307  002870  6E24               	movwf	??_read_Uout& (0+255),c
  5308  002872  0EE4               	movlw	228
  5309  002874                     u3017:
  5310  002874  2EE8               	decfsz	wreg,f,c
  5311  002876  D7FE               	bra	u3017
  5312  002878  2E24               	decfsz	??_read_Uout& (0+255),f,c
  5313  00287A  D7FC               	bra	u3017
  5314  00287C  2E25               	decfsz	(??_read_Uout+1)& (0+255),f,c
  5315  00287E  D7FA               	bra	u3017
  5316  002880  D000               	nop2	
  5317                           
  5318                           ;MPPT.c: 34: rez_adc_U=ADRESH;
  5319  002882  50C4               	movf	4036,w,c	;volatile
  5320  002884  EC0F  F018         	call	___lbtoft
  5321  002888  C009  F052         	movff	?___lbtoft,_rez_adc_U
  5322  00288C  C00A  F053         	movff	?___lbtoft+1,_rez_adc_U+1
  5323  002890  C00B  F054         	movff	?___lbtoft+2,_rez_adc_U+2
  5324                           
  5325                           ;MPPT.c: 35: tens=rez_adc_U*0.01953125;
  5326  002894  C052  F015         	movff	_rez_adc_U,___ftmul@f1
  5327  002898  C053  F016         	movff	_rez_adc_U+1,___ftmul@f1+1
  5328  00289C  C054  F017         	movff	_rez_adc_U+2,___ftmul@f1+2
  5329  0028A0  0E00               	movlw	0
  5330  0028A2  6E18               	movwf	___ftmul@f2,c
  5331  0028A4  0EA0               	movlw	160
  5332  0028A6  6E19               	movwf	___ftmul@f2+1,c
  5333  0028A8  0E3C               	movlw	60
  5334  0028AA  6E1A               	movwf	___ftmul@f2+2,c
  5335  0028AC  EC9F  F012         	call	___ftmul	;wreg free
  5336  0028B0  C015  F04F         	movff	?___ftmul,_tens
  5337  0028B4  C016  F050         	movff	?___ftmul+1,_tens+1
  5338  0028B8  C017  F051         	movff	?___ftmul+2,_tens+2
  5339                           
  5340                           ;MPPT.c: 36: Uout=tens/0.25;
  5341  0028BC  C04F  F009         	movff	_tens,___ftdiv@f1
  5342  0028C0  C050  F00A         	movff	_tens+1,___ftdiv@f1+1
  5343  0028C4  C051  F00B         	movff	_tens+2,___ftdiv@f1+2
  5344  0028C8  0E00               	movlw	0
  5345  0028CA  6E0C               	movwf	___ftdiv@f2,c
  5346  0028CC  0E80               	movlw	128
  5347  0028CE  6E0D               	movwf	___ftdiv@f2+1,c
  5348  0028D0  0E3E               	movlw	62
  5349  0028D2  6E0E               	movwf	___ftdiv@f2+2,c
  5350  0028D4  EC19  F013         	call	___ftdiv	;wreg free
  5351  0028D8  C009  F08F         	movff	?___ftdiv,_Uout
  5352  0028DC  C00A  F090         	movff	?___ftdiv+1,_Uout+1
  5353  0028E0  C00B  F091         	movff	?___ftdiv+2,_Uout+2
  5354  0028E4  0012               	return		;funcret
  5355  0028E6                     __end_of_read_Uout:
  5356                           	opt stack 0
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           prodh	equ	0xFF4
  5362                           prodl	equ	0xFF3
  5363                           postinc0	equ	0xFEE
  5364                           wreg	equ	0xFE8
  5365                           indf2	equ	0xFDF
  5366                           postinc2	equ	0xFDE
  5367                           postdec2	equ	0xFDD
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372 ;; *************** function _read_Uin *****************
  5373 ;; Defined at:
  5374 ;;		line 39 in file "MPPT.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;		None
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;		None
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  1    wreg      void 
  5381 ;; Registers used:
  5382 ;;		wreg, status,2, status,0, cstack
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5391 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5392 ;;Total ram usage:        2 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    2
  5395 ;; This function calls:
  5396 ;;		___ftdiv
  5397 ;;		___ftmul
  5398 ;;		___lbtoft
  5399 ;; This function is called by:
  5400 ;;		_main
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           	psect	text18
  5405  0028E6                     __ptext18:
  5406                           	opt stack 0
  5407  0028E6                     _read_Uin:
  5408                           	opt stack 28
  5409                           
  5410                           ;MPPT.c: 41: ADCON0=0b00001111;
  5411                           
  5412                           ;incstack = 0
  5413  0028E6  0E0F               	movlw	15
  5414  0028E8  6EC2               	movwf	4034,c	;volatile
  5415                           
  5416                           ;MPPT.c: 42: _delay((unsigned long)((10)*(64000000/4000.0)));
  5417  0028EA  0ED0               	movlw	208
  5418  0028EC  6E24               	movwf	??_read_Uin& (0+255),c
  5419  0028EE  0ECA               	movlw	202
  5420  0028F0                     u3027:
  5421  0028F0  2EE8               	decfsz	wreg,f,c
  5422  0028F2  D7FE               	bra	u3027
  5423  0028F4  2E24               	decfsz	??_read_Uin& (0+255),f,c
  5424  0028F6  D7FC               	bra	u3027
  5425                           
  5426                           ;MPPT.c: 43: ADCON0bits.GO=1;
  5427  0028F8  82C2               	bsf	4034,1,c	;volatile
  5428                           
  5429                           ;MPPT.c: 44: _delay((unsigned long)((100)*(64000000/4000.0)));
  5430  0028FA  0E09               	movlw	9
  5431  0028FC  6E25               	movwf	(??_read_Uin+1)& (0+255),c
  5432  0028FE  0E1E               	movlw	30
  5433  002900  6E24               	movwf	??_read_Uin& (0+255),c
  5434  002902  0EE4               	movlw	228
  5435  002904                     u3037:
  5436  002904  2EE8               	decfsz	wreg,f,c
  5437  002906  D7FE               	bra	u3037
  5438  002908  2E24               	decfsz	??_read_Uin& (0+255),f,c
  5439  00290A  D7FC               	bra	u3037
  5440  00290C  2E25               	decfsz	(??_read_Uin+1)& (0+255),f,c
  5441  00290E  D7FA               	bra	u3037
  5442  002910  D000               	nop2	
  5443                           
  5444                           ;MPPT.c: 45: rez_adc_U=ADRESH;
  5445  002912  50C4               	movf	4036,w,c	;volatile
  5446  002914  EC0F  F018         	call	___lbtoft
  5447  002918  C009  F052         	movff	?___lbtoft,_rez_adc_U
  5448  00291C  C00A  F053         	movff	?___lbtoft+1,_rez_adc_U+1
  5449  002920  C00B  F054         	movff	?___lbtoft+2,_rez_adc_U+2
  5450                           
  5451                           ;MPPT.c: 46: tens=rez_adc_U*0.01953125;
  5452  002924  C052  F015         	movff	_rez_adc_U,___ftmul@f1
  5453  002928  C053  F016         	movff	_rez_adc_U+1,___ftmul@f1+1
  5454  00292C  C054  F017         	movff	_rez_adc_U+2,___ftmul@f1+2
  5455  002930  0E00               	movlw	0
  5456  002932  6E18               	movwf	___ftmul@f2,c
  5457  002934  0EA0               	movlw	160
  5458  002936  6E19               	movwf	___ftmul@f2+1,c
  5459  002938  0E3C               	movlw	60
  5460  00293A  6E1A               	movwf	___ftmul@f2+2,c
  5461  00293C  EC9F  F012         	call	___ftmul	;wreg free
  5462  002940  C015  F04F         	movff	?___ftmul,_tens
  5463  002944  C016  F050         	movff	?___ftmul+1,_tens+1
  5464  002948  C017  F051         	movff	?___ftmul+2,_tens+2
  5465                           
  5466                           ;MPPT.c: 47: Uin=tens/0.2;
  5467  00294C  C04F  F009         	movff	_tens,___ftdiv@f1
  5468  002950  C050  F00A         	movff	_tens+1,___ftdiv@f1+1
  5469  002954  C051  F00B         	movff	_tens+2,___ftdiv@f1+2
  5470  002958  0ECD               	movlw	205
  5471  00295A  6E0C               	movwf	___ftdiv@f2,c
  5472  00295C  0E4C               	movlw	76
  5473  00295E  6E0D               	movwf	___ftdiv@f2+1,c
  5474  002960  0E3E               	movlw	62
  5475  002962  6E0E               	movwf	___ftdiv@f2+2,c
  5476  002964  EC19  F013         	call	___ftdiv	;wreg free
  5477  002968  C009  F08C         	movff	?___ftdiv,_Uin
  5478  00296C  C00A  F08D         	movff	?___ftdiv+1,_Uin+1
  5479  002970  C00B  F08E         	movff	?___ftdiv+2,_Uin+2
  5480  002974  0012               	return		;funcret
  5481  002976                     __end_of_read_Uin:
  5482                           	opt stack 0
  5483                           tblptru	equ	0xFF8
  5484                           tblptrh	equ	0xFF7
  5485                           tblptrl	equ	0xFF6
  5486                           tablat	equ	0xFF5
  5487                           prodh	equ	0xFF4
  5488                           prodl	equ	0xFF3
  5489                           postinc0	equ	0xFEE
  5490                           wreg	equ	0xFE8
  5491                           indf2	equ	0xFDF
  5492                           postinc2	equ	0xFDE
  5493                           postdec2	equ	0xFDD
  5494                           fsr2h	equ	0xFDA
  5495                           fsr2l	equ	0xFD9
  5496                           status	equ	0xFD8
  5497                           
  5498 ;; *************** function ___ftdiv *****************
  5499 ;; Defined at:
  5500 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  f1              3    8[COMRAM] float 
  5503 ;;  f2              3   11[COMRAM] float 
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;  f3              3   18[COMRAM] float 
  5506 ;;  sign            1   22[COMRAM] unsigned char 
  5507 ;;  exp             1   21[COMRAM] unsigned char 
  5508 ;;  cntr            1   17[COMRAM] unsigned char 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  3    8[COMRAM] float 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2, status,0, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5518 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5519 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5521 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;Total ram usage:       15 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    1
  5525 ;; This function calls:
  5526 ;;		___ftpack
  5527 ;; This function is called by:
  5528 ;;		_read_Uout
  5529 ;;		_read_Uin
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           	psect	text19
  5534  002632                     __ptext19:
  5535                           	opt stack 0
  5536  002632                     ___ftdiv:
  5537                           	opt stack 28
  5538                           
  5539                           ;incstack = 0
  5540  002632  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  5541  002636  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5542  002638  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5543  00263A  340A               	rlcf	___ftdiv@f1+1,w,c
  5544  00263C  360F               	rlcf	??___ftdiv& (0+255),f,c
  5545  00263E  E301               	bnc	u2321
  5546  002640  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5547  002642                     u2321:
  5548  002642  500F               	movf	??___ftdiv,w,c
  5549  002644  6E16               	movwf	___ftdiv@exp,c
  5550  002646  5016               	movf	___ftdiv@exp,w,c
  5551  002648  A4D8               	btfss	status,2,c
  5552  00264A  D007               	goto	l774
  5553  00264C  0E00               	movlw	0
  5554  00264E  6E09               	movwf	?___ftdiv,c
  5555  002650  0E00               	movlw	0
  5556  002652  6E0A               	movwf	?___ftdiv+1,c
  5557  002654  0E00               	movlw	0
  5558  002656  6E0B               	movwf	?___ftdiv+2,c
  5559  002658  0012               	return	
  5560  00265A                     l774:
  5561  00265A  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  5562  00265E  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5563  002660  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5564  002662  340D               	rlcf	___ftdiv@f2+1,w,c
  5565  002664  360F               	rlcf	??___ftdiv& (0+255),f,c
  5566  002666  E301               	bnc	u2341
  5567  002668  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5568  00266A                     u2341:
  5569  00266A  500F               	movf	??___ftdiv,w,c
  5570  00266C  6E17               	movwf	___ftdiv@sign,c
  5571  00266E  5017               	movf	___ftdiv@sign,w,c
  5572  002670  A4D8               	btfss	status,2,c
  5573  002672  D007               	goto	l776
  5574  002674  0E00               	movlw	0
  5575  002676  6E09               	movwf	?___ftdiv,c
  5576  002678  0E00               	movlw	0
  5577  00267A  6E0A               	movwf	?___ftdiv+1,c
  5578  00267C  0E00               	movlw	0
  5579  00267E  6E0B               	movwf	?___ftdiv+2,c
  5580  002680  0012               	return	
  5581  002682                     l776:
  5582  002682  0E00               	movlw	0
  5583  002684  6E13               	movwf	___ftdiv@f3,c
  5584  002686  0E00               	movlw	0
  5585  002688  6E14               	movwf	___ftdiv@f3+1,c
  5586  00268A  0E00               	movlw	0
  5587  00268C  6E15               	movwf	___ftdiv@f3+2,c
  5588  00268E  5017               	movf	___ftdiv@sign,w,c
  5589  002690  0F89               	addlw	137
  5590  002692  5E16               	subwf	___ftdiv@exp,f,c
  5591  002694  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  5592  002698  500E               	movf	___ftdiv@f2+2,w,c
  5593  00269A  1A17               	xorwf	___ftdiv@sign,f,c
  5594  00269C  0E80               	movlw	128
  5595  00269E  1617               	andwf	___ftdiv@sign,f,c
  5596  0026A0  8E0A               	bsf	___ftdiv@f1+1,7,c
  5597  0026A2  0EFF               	movlw	255
  5598  0026A4  1609               	andwf	___ftdiv@f1,f,c
  5599  0026A6  0EFF               	movlw	255
  5600  0026A8  160A               	andwf	___ftdiv@f1+1,f,c
  5601  0026AA  0E00               	movlw	0
  5602  0026AC  160B               	andwf	___ftdiv@f1+2,f,c
  5603  0026AE  8E0D               	bsf	___ftdiv@f2+1,7,c
  5604  0026B0  0EFF               	movlw	255
  5605  0026B2  160C               	andwf	___ftdiv@f2,f,c
  5606  0026B4  0EFF               	movlw	255
  5607  0026B6  160D               	andwf	___ftdiv@f2+1,f,c
  5608  0026B8  0E00               	movlw	0
  5609  0026BA  160E               	andwf	___ftdiv@f2+2,f,c
  5610  0026BC  0E18               	movlw	24
  5611  0026BE  6E12               	movwf	___ftdiv@cntr,c
  5612  0026C0  90D8               	bcf	status,0,c
  5613  0026C2  3613               	rlcf	___ftdiv@f3,f,c
  5614  0026C4  3614               	rlcf	___ftdiv@f3+1,f,c
  5615  0026C6  3615               	rlcf	___ftdiv@f3+2,f,c
  5616  0026C8  500C               	movf	___ftdiv@f2,w,c
  5617  0026CA  5C09               	subwf	___ftdiv@f1,w,c
  5618  0026CC  500D               	movf	___ftdiv@f2+1,w,c
  5619  0026CE  580A               	subwfb	___ftdiv@f1+1,w,c
  5620  0026D0  500E               	movf	___ftdiv@f2+2,w,c
  5621  0026D2  580B               	subwfb	___ftdiv@f1+2,w,c
  5622  0026D4  A0D8               	btfss	status,0,c
  5623  0026D6  D007               	goto	l778
  5624  0026D8  500C               	movf	___ftdiv@f2,w,c
  5625  0026DA  5E09               	subwf	___ftdiv@f1,f,c
  5626  0026DC  500D               	movf	___ftdiv@f2+1,w,c
  5627  0026DE  5A0A               	subwfb	___ftdiv@f1+1,f,c
  5628  0026E0  500E               	movf	___ftdiv@f2+2,w,c
  5629  0026E2  5A0B               	subwfb	___ftdiv@f1+2,f,c
  5630  0026E4  8013               	bsf	___ftdiv@f3,0,c
  5631  0026E6                     l778:
  5632  0026E6  90D8               	bcf	status,0,c
  5633  0026E8  3609               	rlcf	___ftdiv@f1,f,c
  5634  0026EA  360A               	rlcf	___ftdiv@f1+1,f,c
  5635  0026EC  360B               	rlcf	___ftdiv@f1+2,f,c
  5636  0026EE  2E12               	decfsz	___ftdiv@cntr,f,c
  5637  0026F0  D7E7               	goto	l777
  5638  0026F2  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  5639  0026F6  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5640  0026FA  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5641  0026FE  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  5642  002702  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  5643  002706  EC8C  F013         	call	___ftpack	;wreg free
  5644  00270A  C001  F009         	movff	?___ftpack,?___ftdiv
  5645  00270E  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  5646  002712  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  5647  002716  0012               	return	
  5648  002718                     __end_of___ftdiv:
  5649                           	opt stack 0
  5650                           tblptru	equ	0xFF8
  5651                           tblptrh	equ	0xFF7
  5652                           tblptrl	equ	0xFF6
  5653                           tablat	equ	0xFF5
  5654                           prodh	equ	0xFF4
  5655                           prodl	equ	0xFF3
  5656                           postinc0	equ	0xFEE
  5657                           wreg	equ	0xFE8
  5658                           indf2	equ	0xFDF
  5659                           postinc2	equ	0xFDE
  5660                           postdec2	equ	0xFDD
  5661                           fsr2h	equ	0xFDA
  5662                           fsr2l	equ	0xFD9
  5663                           status	equ	0xFD8
  5664                           
  5665 ;; *************** function _read_Iout *****************
  5666 ;; Defined at:
  5667 ;;		line 15 in file "MPPT.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;		None
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;		None
  5672 ;; Return value:  Size  Location     Type
  5673 ;;                  1    wreg      void 
  5674 ;; Registers used:
  5675 ;;		wreg, status,2, status,0, cstack
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;Total ram usage:        2 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    2
  5688 ;; This function calls:
  5689 ;;		___ftmul
  5690 ;;		___lbtoft
  5691 ;; This function is called by:
  5692 ;;		_main
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           	psect	text20
  5697  002B6E                     __ptext20:
  5698                           	opt stack 0
  5699  002B6E                     _read_Iout:
  5700                           	opt stack 28
  5701                           
  5702                           ;MPPT.c: 17: ADCON0=0b00001011;
  5703                           
  5704                           ;incstack = 0
  5705  002B6E  0E0B               	movlw	11
  5706  002B70  6EC2               	movwf	4034,c	;volatile
  5707                           
  5708                           ;MPPT.c: 18: _delay((unsigned long)((10)*(64000000/4000.0)));
  5709  002B72  0ED0               	movlw	208
  5710  002B74  6E24               	movwf	??_read_Iout& (0+255),c
  5711  002B76  0ECA               	movlw	202
  5712  002B78                     u3047:
  5713  002B78  2EE8               	decfsz	wreg,f,c
  5714  002B7A  D7FE               	bra	u3047
  5715  002B7C  2E24               	decfsz	??_read_Iout& (0+255),f,c
  5716  002B7E  D7FC               	bra	u3047
  5717                           
  5718                           ;MPPT.c: 19: ADCON0bits.GO=1;
  5719  002B80  82C2               	bsf	4034,1,c	;volatile
  5720                           
  5721                           ;MPPT.c: 20: _delay((unsigned long)((100)*(64000000/4000.0)));
  5722  002B82  0E09               	movlw	9
  5723  002B84  6E25               	movwf	(??_read_Iout+1)& (0+255),c
  5724  002B86  0E1E               	movlw	30
  5725  002B88  6E24               	movwf	??_read_Iout& (0+255),c
  5726  002B8A  0EE4               	movlw	228
  5727  002B8C                     u3057:
  5728  002B8C  2EE8               	decfsz	wreg,f,c
  5729  002B8E  D7FE               	bra	u3057
  5730  002B90  2E24               	decfsz	??_read_Iout& (0+255),f,c
  5731  002B92  D7FC               	bra	u3057
  5732  002B94  2E25               	decfsz	(??_read_Iout+1)& (0+255),f,c
  5733  002B96  D7FA               	bra	u3057
  5734  002B98  D000               	nop2	
  5735                           
  5736                           ;MPPT.c: 21: rez_adc_A=ADRESH;
  5737  002B9A  50C4               	movf	4036,w,c	;volatile
  5738  002B9C  EC0F  F018         	call	___lbtoft
  5739  002BA0  C009  F055         	movff	?___lbtoft,_rez_adc_A
  5740  002BA4  C00A  F056         	movff	?___lbtoft+1,_rez_adc_A+1
  5741  002BA8  C00B  F057         	movff	?___lbtoft+2,_rez_adc_A+2
  5742                           
  5743                           ;MPPT.c: 22: tens_A=rez_adc_A*0.0181372549019608;
  5744  002BAC  C055  F015         	movff	_rez_adc_A,___ftmul@f1
  5745  002BB0  C056  F016         	movff	_rez_adc_A+1,___ftmul@f1+1
  5746  002BB4  C057  F017         	movff	_rez_adc_A+2,___ftmul@f1+2
  5747  002BB8  0E95               	movlw	149
  5748  002BBA  6E18               	movwf	___ftmul@f2,c
  5749  002BBC  0E94               	movlw	148
  5750  002BBE  6E19               	movwf	___ftmul@f2+1,c
  5751  002BC0  0E3C               	movlw	60
  5752  002BC2  6E1A               	movwf	___ftmul@f2+2,c
  5753  002BC4  EC9F  F012         	call	___ftmul	;wreg free
  5754  002BC8  C015  F095         	movff	?___ftmul,_tens_A
  5755  002BCC  C016  F096         	movff	?___ftmul+1,_tens_A+1
  5756  002BD0  C017  F097         	movff	?___ftmul+2,_tens_A+2
  5757                           
  5758                           ;MPPT.c: 23: Iout=tens_A;
  5759  002BD4  C095  F092         	movff	_tens_A,_Iout
  5760  002BD8  C096  F093         	movff	_tens_A+1,_Iout+1
  5761  002BDC  C097  F094         	movff	_tens_A+2,_Iout+2
  5762  002BE0  0012               	return		;funcret
  5763  002BE2                     __end_of_read_Iout:
  5764                           	opt stack 0
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           prodh	equ	0xFF4
  5770                           prodl	equ	0xFF3
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           indf2	equ	0xFDF
  5774                           postinc2	equ	0xFDE
  5775                           postdec2	equ	0xFDD
  5776                           fsr2h	equ	0xFDA
  5777                           fsr2l	equ	0xFD9
  5778                           status	equ	0xFD8
  5779                           
  5780 ;; *************** function ___lbtoft *****************
  5781 ;; Defined at:
  5782 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbtoft.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;  c               1    wreg     unsigned char 
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;  c               1   11[COMRAM] unsigned char 
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  3    8[COMRAM] float 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5796 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;Total ram usage:        4 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:    1
  5803 ;; This function calls:
  5804 ;;		___ftpack
  5805 ;; This function is called by:
  5806 ;;		_read_Iout
  5807 ;;		_read_Uout
  5808 ;;		_read_Uin
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           	psect	text21
  5813  00301E                     __ptext21:
  5814                           	opt stack 0
  5815  00301E                     ___lbtoft:
  5816                           	opt stack 28
  5817                           
  5818                           ;incstack = 0
  5819                           ;___lbtoft@c stored from wreg
  5820  00301E  6E0C               	movwf	___lbtoft@c,c
  5821  003020  500C               	movf	___lbtoft@c,w,c
  5822  003022  6E01               	movwf	___ftpack@arg,c
  5823  003024  6A02               	clrf	___ftpack@arg+1,c
  5824  003026  6A03               	clrf	___ftpack@arg+2,c
  5825  003028  0E8E               	movlw	142
  5826  00302A  6E04               	movwf	___ftpack@exp,c
  5827  00302C  0E00               	movlw	0
  5828  00302E  6E05               	movwf	___ftpack@sign,c
  5829  003030  EC8C  F013         	call	___ftpack	;wreg free
  5830  003034  C001  F009         	movff	?___ftpack,?___lbtoft
  5831  003038  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  5832  00303C  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  5833  003040  0012               	return	
  5834  003042                     __end_of___lbtoft:
  5835                           	opt stack 0
  5836                           tblptru	equ	0xFF8
  5837                           tblptrh	equ	0xFF7
  5838                           tblptrl	equ	0xFF6
  5839                           tablat	equ	0xFF5
  5840                           prodh	equ	0xFF4
  5841                           prodl	equ	0xFF3
  5842                           postinc0	equ	0xFEE
  5843                           wreg	equ	0xFE8
  5844                           indf2	equ	0xFDF
  5845                           postinc2	equ	0xFDE
  5846                           postdec2	equ	0xFDD
  5847                           fsr2h	equ	0xFDA
  5848                           fsr2l	equ	0xFD9
  5849                           status	equ	0xFD8
  5850                           
  5851 ;; *************** function ___ftmul *****************
  5852 ;; Defined at:
  5853 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;  f1              3   20[COMRAM] float 
  5856 ;;  f2              3   23[COMRAM] float 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  5859 ;;  sign            1   34[COMRAM] unsigned char 
  5860 ;;  cntr            1   33[COMRAM] unsigned char 
  5861 ;;  exp             1   29[COMRAM] unsigned char 
  5862 ;; Return value:  Size  Location     Type
  5863 ;;                  3   20[COMRAM] float 
  5864 ;; Registers used:
  5865 ;;		wreg, status,2, status,0, cstack
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5871 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;Total ram usage:       15 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; Hardware stack levels required when called:    1
  5878 ;; This function calls:
  5879 ;;		___ftpack
  5880 ;; This function is called by:
  5881 ;;		_main
  5882 ;;		_read_Iout
  5883 ;;		_read_Uout
  5884 ;;		_read_Uin
  5885 ;;		_fround
  5886 ;;		_scale
  5887 ;;		_sprintf
  5888 ;;		_buck_boost
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           	psect	text22
  5893  00253E                     __ptext22:
  5894                           	opt stack 0
  5895  00253E                     ___ftmul:
  5896                           	opt stack 27
  5897                           
  5898                           ;incstack = 0
  5899  00253E  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  5900  002542  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5901  002544  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5902  002546  3416               	rlcf	___ftmul@f1+1,w,c
  5903  002548  361B               	rlcf	??___ftmul& (0+255),f,c
  5904  00254A  E301               	bnc	u1801
  5905  00254C  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5906  00254E                     u1801:
  5907  00254E  501B               	movf	??___ftmul,w,c
  5908  002550  6E1E               	movwf	___ftmul@exp,c
  5909  002552  501E               	movf	___ftmul@exp,w,c
  5910  002554  A4D8               	btfss	status,2,c
  5911  002556  D007               	goto	l806
  5912  002558  0E00               	movlw	0
  5913  00255A  6E15               	movwf	?___ftmul,c
  5914  00255C  0E00               	movlw	0
  5915  00255E  6E16               	movwf	?___ftmul+1,c
  5916  002560  0E00               	movlw	0
  5917  002562  6E17               	movwf	?___ftmul+2,c
  5918  002564  0012               	return	
  5919  002566                     l806:
  5920  002566  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  5921  00256A  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5922  00256C  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5923  00256E  3419               	rlcf	___ftmul@f2+1,w,c
  5924  002570  361B               	rlcf	??___ftmul& (0+255),f,c
  5925  002572  E301               	bnc	u1821
  5926  002574  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5927  002576                     u1821:
  5928  002576  501B               	movf	??___ftmul,w,c
  5929  002578  6E23               	movwf	___ftmul@sign,c
  5930  00257A  5023               	movf	___ftmul@sign,w,c
  5931  00257C  A4D8               	btfss	status,2,c
  5932  00257E  D007               	goto	l808
  5933  002580  0E00               	movlw	0
  5934  002582  6E15               	movwf	?___ftmul,c
  5935  002584  0E00               	movlw	0
  5936  002586  6E16               	movwf	?___ftmul+1,c
  5937  002588  0E00               	movlw	0
  5938  00258A  6E17               	movwf	?___ftmul+2,c
  5939  00258C  0012               	return	
  5940  00258E                     l808:
  5941  00258E  5023               	movf	___ftmul@sign,w,c
  5942  002590  0F7B               	addlw	123
  5943  002592  261E               	addwf	___ftmul@exp,f,c
  5944  002594  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  5945  002598  501A               	movf	___ftmul@f2+2,w,c
  5946  00259A  1A23               	xorwf	___ftmul@sign,f,c
  5947  00259C  0E80               	movlw	128
  5948  00259E  1623               	andwf	___ftmul@sign,f,c
  5949  0025A0  8E16               	bsf	___ftmul@f1+1,7,c
  5950  0025A2  8E19               	bsf	___ftmul@f2+1,7,c
  5951  0025A4  0EFF               	movlw	255
  5952  0025A6  1618               	andwf	___ftmul@f2,f,c
  5953  0025A8  0EFF               	movlw	255
  5954  0025AA  1619               	andwf	___ftmul@f2+1,f,c
  5955  0025AC  0E00               	movlw	0
  5956  0025AE  161A               	andwf	___ftmul@f2+2,f,c
  5957  0025B0  0E00               	movlw	0
  5958  0025B2  6E1F               	movwf	___ftmul@f3_as_product,c
  5959  0025B4  0E00               	movlw	0
  5960  0025B6  6E20               	movwf	___ftmul@f3_as_product+1,c
  5961  0025B8  0E00               	movlw	0
  5962  0025BA  6E21               	movwf	___ftmul@f3_as_product+2,c
  5963  0025BC  0E07               	movlw	7
  5964  0025BE  6E22               	movwf	___ftmul@cntr,c
  5965  0025C0  A015               	btfss	___ftmul@f1,0,c
  5966  0025C2  D006               	goto	l810
  5967  0025C4  5018               	movf	___ftmul@f2,w,c
  5968  0025C6  261F               	addwf	___ftmul@f3_as_product,f,c
  5969  0025C8  5019               	movf	___ftmul@f2+1,w,c
  5970  0025CA  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5971  0025CC  501A               	movf	___ftmul@f2+2,w,c
  5972  0025CE  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5973  0025D0                     l810:
  5974  0025D0  90D8               	bcf	status,0,c
  5975  0025D2  3217               	rrcf	___ftmul@f1+2,f,c
  5976  0025D4  3216               	rrcf	___ftmul@f1+1,f,c
  5977  0025D6  3215               	rrcf	___ftmul@f1,f,c
  5978  0025D8  90D8               	bcf	status,0,c
  5979  0025DA  3618               	rlcf	___ftmul@f2,f,c
  5980  0025DC  3619               	rlcf	___ftmul@f2+1,f,c
  5981  0025DE  361A               	rlcf	___ftmul@f2+2,f,c
  5982  0025E0  2E22               	decfsz	___ftmul@cntr,f,c
  5983  0025E2  D7EE               	goto	l809
  5984  0025E4  0E09               	movlw	9
  5985  0025E6  6E22               	movwf	___ftmul@cntr,c
  5986  0025E8  A015               	btfss	___ftmul@f1,0,c
  5987  0025EA  D006               	goto	l813
  5988  0025EC  5018               	movf	___ftmul@f2,w,c
  5989  0025EE  261F               	addwf	___ftmul@f3_as_product,f,c
  5990  0025F0  5019               	movf	___ftmul@f2+1,w,c
  5991  0025F2  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5992  0025F4  501A               	movf	___ftmul@f2+2,w,c
  5993  0025F6  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5994  0025F8                     l813:
  5995  0025F8  90D8               	bcf	status,0,c
  5996  0025FA  3217               	rrcf	___ftmul@f1+2,f,c
  5997  0025FC  3216               	rrcf	___ftmul@f1+1,f,c
  5998  0025FE  3215               	rrcf	___ftmul@f1,f,c
  5999  002600  90D8               	bcf	status,0,c
  6000  002602  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  6001  002604  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  6002  002606  321F               	rrcf	___ftmul@f3_as_product,f,c
  6003  002608  2E22               	decfsz	___ftmul@cntr,f,c
  6004  00260A  D7EE               	goto	l812
  6005  00260C  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6006  002610  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6007  002614  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6008  002618  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  6009  00261C  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  6010  002620  EC8C  F013         	call	___ftpack	;wreg free
  6011  002624  C001  F015         	movff	?___ftpack,?___ftmul
  6012  002628  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  6013  00262C  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  6014  002630  0012               	return	
  6015  002632                     __end_of___ftmul:
  6016                           	opt stack 0
  6017                           tblptru	equ	0xFF8
  6018                           tblptrh	equ	0xFF7
  6019                           tblptrl	equ	0xFF6
  6020                           tablat	equ	0xFF5
  6021                           prodh	equ	0xFF4
  6022                           prodl	equ	0xFF3
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           indf2	equ	0xFDF
  6026                           postinc2	equ	0xFDE
  6027                           postdec2	equ	0xFDD
  6028                           fsr2h	equ	0xFDA
  6029                           fsr2l	equ	0xFD9
  6030                           status	equ	0xFD8
  6031                           
  6032 ;; *************** function ___ftpack *****************
  6033 ;; Defined at:
  6034 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  arg             3    0[COMRAM] unsigned um
  6037 ;;  exp             1    3[COMRAM] unsigned char 
  6038 ;;  sign            1    4[COMRAM] unsigned char 
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;		None
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  3    0[COMRAM] float 
  6043 ;; Registers used:
  6044 ;;		wreg, status,2, status,0
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6050 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;Total ram usage:        8 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; This function calls:
  6057 ;;		Nothing
  6058 ;; This function is called by:
  6059 ;;		___ftadd
  6060 ;;		___ftdiv
  6061 ;;		___ftmul
  6062 ;;		___lbtoft
  6063 ;;		___lltoft
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text23
  6068  002718                     __ptext23:
  6069                           	opt stack 0
  6070  002718                     ___ftpack:
  6071                           	opt stack 27
  6072                           
  6073                           ;incstack = 0
  6074  002718  5004               	movf	___ftpack@exp,w,c
  6075  00271A  B4D8               	btfsc	status,2,c
  6076  00271C  D005               	goto	u1520
  6077  00271E  5001               	movf	___ftpack@arg,w,c
  6078  002720  1002               	iorwf	___ftpack@arg+1,w,c
  6079  002722  1003               	iorwf	___ftpack@arg+2,w,c
  6080  002724  A4D8               	btfss	status,2,c
  6081  002726  D00C               	goto	l710
  6082  002728                     u1520:
  6083  002728  0E00               	movlw	0
  6084  00272A  6E01               	movwf	?___ftpack,c
  6085  00272C  0E00               	movlw	0
  6086  00272E  6E02               	movwf	?___ftpack+1,c
  6087  002730  0E00               	movlw	0
  6088  002732  6E03               	movwf	?___ftpack+2,c
  6089  002734  0012               	return	
  6090  002736  2A04               	incf	___ftpack@exp,f,c
  6091  002738  90D8               	bcf	status,0,c
  6092  00273A  3203               	rrcf	___ftpack@arg+2,f,c
  6093  00273C  3202               	rrcf	___ftpack@arg+1,f,c
  6094  00273E  3201               	rrcf	___ftpack@arg,f,c
  6095  002740                     l710:
  6096  002740  0E00               	movlw	0
  6097  002742  1401               	andwf	___ftpack@arg,w,c
  6098  002744  6E06               	movwf	??___ftpack& (0+255),c
  6099  002746  0E00               	movlw	0
  6100  002748  1402               	andwf	___ftpack@arg+1,w,c
  6101  00274A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6102  00274C  0EFE               	movlw	254
  6103  00274E  1403               	andwf	___ftpack@arg+2,w,c
  6104  002750  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6105  002752  5006               	movf	??___ftpack,w,c
  6106  002754  1007               	iorwf	??___ftpack+1,w,c
  6107  002756  1008               	iorwf	??___ftpack+2,w,c
  6108  002758  B4D8               	btfsc	status,2,c
  6109  00275A  D00C               	goto	l713
  6110  00275C  D7EC               	goto	l711
  6111  00275E  2A04               	incf	___ftpack@exp,f,c
  6112  002760  0E01               	movlw	1
  6113  002762  2601               	addwf	___ftpack@arg,f,c
  6114  002764  0E00               	movlw	0
  6115  002766  2202               	addwfc	___ftpack@arg+1,f,c
  6116  002768  0E00               	movlw	0
  6117  00276A  2203               	addwfc	___ftpack@arg+2,f,c
  6118  00276C  90D8               	bcf	status,0,c
  6119  00276E  3203               	rrcf	___ftpack@arg+2,f,c
  6120  002770  3202               	rrcf	___ftpack@arg+1,f,c
  6121  002772  3201               	rrcf	___ftpack@arg,f,c
  6122  002774                     l713:
  6123  002774  0E00               	movlw	0
  6124  002776  1401               	andwf	___ftpack@arg,w,c
  6125  002778  6E06               	movwf	??___ftpack& (0+255),c
  6126  00277A  0E00               	movlw	0
  6127  00277C  1402               	andwf	___ftpack@arg+1,w,c
  6128  00277E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6129  002780  0EFF               	movlw	255
  6130  002782  1403               	andwf	___ftpack@arg+2,w,c
  6131  002784  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6132  002786  5006               	movf	??___ftpack,w,c
  6133  002788  1007               	iorwf	??___ftpack+1,w,c
  6134  00278A  1008               	iorwf	??___ftpack+2,w,c
  6135  00278C  B4D8               	btfsc	status,2,c
  6136  00278E  D006               	goto	l716
  6137  002790  D7E6               	goto	l714
  6138  002792  0604               	decf	___ftpack@exp,f,c
  6139  002794  90D8               	bcf	status,0,c
  6140  002796  3601               	rlcf	___ftpack@arg,f,c
  6141  002798  3602               	rlcf	___ftpack@arg+1,f,c
  6142  00279A  3603               	rlcf	___ftpack@arg+2,f,c
  6143  00279C                     l716:
  6144  00279C  BE02               	btfsc	___ftpack@arg+1,7,c
  6145  00279E  D003               	goto	u1560
  6146  0027A0  0E02               	movlw	2
  6147  0027A2  6004               	cpfslt	___ftpack@exp,c
  6148  0027A4  D7F6               	goto	l717
  6149  0027A6                     u1560:
  6150  0027A6  A004               	btfss	___ftpack@exp,0,c
  6151  0027A8  9E02               	bcf	___ftpack@arg+1,7,c
  6152  0027AA  90D8               	bcf	status,0,c
  6153  0027AC  3204               	rrcf	___ftpack@exp,f,c
  6154  0027AE  5004               	movf	___ftpack@exp,w,c
  6155  0027B0  1203               	iorwf	___ftpack@arg+2,f,c
  6156  0027B2  5005               	movf	___ftpack@sign,w,c
  6157  0027B4  A4D8               	btfss	status,2,c
  6158  0027B6  8E03               	bsf	___ftpack@arg+2,7,c
  6159  0027B8  C001  F001         	movff	___ftpack@arg,?___ftpack
  6160  0027BC  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6161  0027C0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6162  0027C4  0012               	return	
  6163  0027C6                     __end_of___ftpack:
  6164                           	opt stack 0
  6165                           tblptru	equ	0xFF8
  6166                           tblptrh	equ	0xFF7
  6167                           tblptrl	equ	0xFF6
  6168                           tablat	equ	0xFF5
  6169                           prodh	equ	0xFF4
  6170                           prodl	equ	0xFF3
  6171                           postinc0	equ	0xFEE
  6172                           wreg	equ	0xFE8
  6173                           indf2	equ	0xFDF
  6174                           postinc2	equ	0xFDE
  6175                           postdec2	equ	0xFDD
  6176                           fsr2h	equ	0xFDA
  6177                           fsr2l	equ	0xFD9
  6178                           status	equ	0xFD8
  6179                           
  6180 ;; *************** function _pwm_config *****************
  6181 ;; Defined at:
  6182 ;;		line 46 in file "config.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;		None
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;		None
  6187 ;; Return value:  Size  Location     Type
  6188 ;;                  1    wreg      void 
  6189 ;; Registers used:
  6190 ;;		wreg, status,2
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6200 ;;Total ram usage:        0 bytes
  6201 ;; Hardware stack levels used:    1
  6202 ;; This function calls:
  6203 ;;		Nothing
  6204 ;; This function is called by:
  6205 ;;		_main
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text24
  6210  002FAC                     __ptext24:
  6211                           	opt stack 0
  6212  002FAC                     _pwm_config:
  6213                           	opt stack 30
  6214                           
  6215                           ;config.c: 48: CCPTMRS0=0b00000000;
  6216                           
  6217                           ;incstack = 0
  6218  002FAC  0E00               	movlw	0
  6219  002FAE  010F               	movlb	15	; () banked
  6220  002FB0  6F49               	movwf	73,b	;volatile
  6221                           
  6222                           ;config.c: 49: CCP2CON=0b00001100;
  6223  002FB2  0E0C               	movlw	12
  6224  002FB4  6E66               	movwf	3942,c	;volatile
  6225                           
  6226                           ;config.c: 50: CCP1CON=0b00001100;
  6227  002FB6  0E0C               	movlw	12
  6228  002FB8  6EBD               	movwf	4029,c	;volatile
  6229                           
  6230                           ;config.c: 51: T2CON=0b01111101;
  6231  002FBA  0E7D               	movlw	125
  6232  002FBC  6EBA               	movwf	4026,c	;volatile
  6233                           
  6234                           ;config.c: 52: PR2=160;
  6235  002FBE  0EA0               	movlw	160
  6236  002FC0  6EBB               	movwf	4027,c	;volatile
  6237                           
  6238                           ;config.c: 54: CCPR2L=128;
  6239  002FC2  0E80               	movlw	128
  6240  002FC4  6E67               	movwf	3943,c	;volatile
  6241                           
  6242                           ;config.c: 55: CCPR1L=64;
  6243  002FC6  0E40               	movlw	64
  6244  002FC8  6EBE               	movwf	4030,c	;volatile
  6245                           
  6246                           ;config.c: 56: CCP3CON=0b00001100;
  6247  002FCA  0E0C               	movlw	12
  6248  002FCC  6F5D               	movwf	93,b	;volatile
  6249                           
  6250                           ;config.c: 57: CCPR3L=128;
  6251  002FCE  0E80               	movlw	128
  6252  002FD0  6F5E               	movwf	94,b	;volatile
  6253                           
  6254                           ; BSR set to: 15
  6255  002FD2  0012               	return		;funcret
  6256  002FD4                     __end_of_pwm_config:
  6257                           	opt stack 0
  6258                           tblptru	equ	0xFF8
  6259                           tblptrh	equ	0xFF7
  6260                           tblptrl	equ	0xFF6
  6261                           tablat	equ	0xFF5
  6262                           prodh	equ	0xFF4
  6263                           prodl	equ	0xFF3
  6264                           postinc0	equ	0xFEE
  6265                           wreg	equ	0xFE8
  6266                           indf2	equ	0xFDF
  6267                           postinc2	equ	0xFDE
  6268                           postdec2	equ	0xFDD
  6269                           fsr2h	equ	0xFDA
  6270                           fsr2l	equ	0xFD9
  6271                           status	equ	0xFD8
  6272                           
  6273 ;; *************** function _init_io_display *****************
  6274 ;; Defined at:
  6275 ;;		line 88 in file "config.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;		None
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;		None
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  1    wreg      void 
  6282 ;; Registers used:
  6283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;Total ram usage:        2 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:    5
  6296 ;; This function calls:
  6297 ;;		_Cursor_Off
  6298 ;;		_I2C_Master_Init
  6299 ;;		_Lcd_Clear
  6300 ;;		_Lcd_Init
  6301 ;;		_Lcd_Set_Cursor
  6302 ;;		_Lcd_Write_String
  6303 ;; This function is called by:
  6304 ;;		_main
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           	psect	text25
  6309  002C52                     __ptext25:
  6310                           	opt stack 0
  6311  002C52                     _init_io_display:
  6312                           	opt stack 25
  6313                           
  6314                           ;config.c: 90: TRISCbits.TRISC3=1;
  6315                           
  6316                           ; BSR set to: 15
  6317                           ;incstack = 0
  6318  002C52  8694               	bsf	3988,3,c	;volatile
  6319                           
  6320                           ;config.c: 91: TRISCbits.TRISC4=1;
  6321  002C54  8894               	bsf	3988,4,c	;volatile
  6322                           
  6323                           ;config.c: 92: I2C_Master_Init(100000);
  6324  002C56  0EA0               	movlw	160
  6325  002C58  6E0E               	movwf	I2C_Master_Init@c,c
  6326  002C5A  0E86               	movlw	134
  6327  002C5C  6E0F               	movwf	I2C_Master_Init@c+1,c
  6328  002C5E  0E01               	movlw	1
  6329  002C60  6E10               	movwf	I2C_Master_Init@c+2,c
  6330  002C62  0E00               	movlw	0
  6331  002C64  6E11               	movwf	I2C_Master_Init@c+3,c
  6332  002C66  ECC0  F016         	call	_I2C_Master_Init	;wreg free
  6333                           
  6334                           ;config.c: 93: _delay((unsigned long)((100)*(64000000/4000.0)));
  6335  002C6A  0E09               	movlw	9
  6336  002C6C  6E17               	movwf	(??_init_io_display+1)& (0+255),c
  6337  002C6E  0E1E               	movlw	30
  6338  002C70  6E16               	movwf	??_init_io_display& (0+255),c
  6339  002C72  0EE4               	movlw	228
  6340  002C74                     u3067:
  6341  002C74  2EE8               	decfsz	wreg,f,c
  6342  002C76  D7FE               	bra	u3067
  6343  002C78  2E16               	decfsz	??_init_io_display& (0+255),f,c
  6344  002C7A  D7FC               	bra	u3067
  6345  002C7C  2E17               	decfsz	(??_init_io_display+1)& (0+255),f,c
  6346  002C7E  D7FA               	bra	u3067
  6347  002C80  D000               	nop2	
  6348                           
  6349                           ;config.c: 94: Lcd_Init();
  6350  002C82  EC3E  F015         	call	_Lcd_Init	;wreg free
  6351                           
  6352                           ;config.c: 95: Lcd_Clear();
  6353  002C86  EC57  F018         	call	_Lcd_Clear	;wreg free
  6354                           
  6355                           ;config.c: 96: Cursor_Off();
  6356  002C8A  EC5E  F018         	call	_Cursor_Off	;wreg free
  6357                           
  6358                           ;config.c: 97: Lcd_Set_Cursor(1,1);
  6359  002C8E  0E01               	movlw	1
  6360  002C90  6E0B               	movwf	Lcd_Set_Cursor@b,c
  6361  002C92  0E01               	movlw	1
  6362  002C94  EC43  F017         	call	_Lcd_Set_Cursor
  6363                           
  6364                           ;config.c: 98: Lcd_Write_String("Test");
  6365  002C98  0E77               	movlw	low STR_9
  6366  002C9A  6E08               	movwf	Lcd_Write_String@a,c
  6367  002C9C  0E10               	movlw	high STR_9
  6368  002C9E  6E09               	movwf	Lcd_Write_String@a+1,c
  6369  002CA0  EC7C  F015         	call	_Lcd_Write_String	;wreg free
  6370                           
  6371                           ;config.c: 99: _delay((unsigned long)((100)*(64000000/4000.0)));
  6372  002CA4  0E09               	movlw	9
  6373  002CA6  6E17               	movwf	(??_init_io_display+1)& (0+255),c
  6374  002CA8  0E1E               	movlw	30
  6375  002CAA  6E16               	movwf	??_init_io_display& (0+255),c
  6376  002CAC  0EE4               	movlw	228
  6377  002CAE                     u3077:
  6378  002CAE  2EE8               	decfsz	wreg,f,c
  6379  002CB0  D7FE               	bra	u3077
  6380  002CB2  2E16               	decfsz	??_init_io_display& (0+255),f,c
  6381  002CB4  D7FC               	bra	u3077
  6382  002CB6  2E17               	decfsz	(??_init_io_display+1)& (0+255),f,c
  6383  002CB8  D7FA               	bra	u3077
  6384  002CBA  D000               	nop2	
  6385  002CBC  0012               	return		;funcret
  6386  002CBE                     __end_of_init_io_display:
  6387                           	opt stack 0
  6388                           tblptru	equ	0xFF8
  6389                           tblptrh	equ	0xFF7
  6390                           tblptrl	equ	0xFF6
  6391                           tablat	equ	0xFF5
  6392                           prodh	equ	0xFF4
  6393                           prodl	equ	0xFF3
  6394                           postinc0	equ	0xFEE
  6395                           wreg	equ	0xFE8
  6396                           indf2	equ	0xFDF
  6397                           postinc2	equ	0xFDE
  6398                           postdec2	equ	0xFDD
  6399                           fsr2h	equ	0xFDA
  6400                           fsr2l	equ	0xFD9
  6401                           status	equ	0xFD8
  6402                           
  6403 ;; *************** function _Lcd_Write_String *****************
  6404 ;; Defined at:
  6405 ;;		line 115 in file "i2c_display.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;  a               2    7[COMRAM] PTR unsigned char 
  6408 ;;		 -> STR_9(5), STR_8(3), STR_6(4), STR_5(3), 
  6409 ;;		 -> main@str_A(8), STR_3(3), main@str_V(8), STR_1(3), 
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;  i               2   11[COMRAM] int 
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  1    wreg      void 
  6414 ;; Registers used:
  6415 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6421 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;Total ram usage:        6 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    4
  6428 ;; This function calls:
  6429 ;;		_Lcd_Write_Char
  6430 ;; This function is called by:
  6431 ;;		_main
  6432 ;;		_init_io_display
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           	psect	text26
  6437  002AF8                     __ptext26:
  6438                           	opt stack 0
  6439  002AF8                     _Lcd_Write_String:
  6440                           	opt stack 25
  6441                           
  6442                           ;i2c_display.c: 117: int i;
  6443                           ;i2c_display.c: 118: for(i=0;a[i]!='\0';i++)
  6444                           
  6445                           ;incstack = 0
  6446  002AF8  0E00               	movlw	0
  6447  002AFA  6E0D               	movwf	Lcd_Write_String@i+1,c
  6448  002AFC  0E00               	movlw	0
  6449  002AFE  6E0C               	movwf	Lcd_Write_String@i,c
  6450  002B00  D01B               	goto	l298
  6451  002B02                     
  6452                           ;i2c_display.c: 119: Lcd_Write_Char(a[i]);
  6453  002B02  500C               	movf	Lcd_Write_String@i,w,c
  6454  002B04  2408               	addwf	Lcd_Write_String@a,w,c
  6455  002B06  6E0A               	movwf	??_Lcd_Write_String& (0+255),c
  6456  002B08  500D               	movf	Lcd_Write_String@i+1,w,c
  6457  002B0A  2009               	addwfc	Lcd_Write_String@a+1,w,c
  6458  002B0C  6E0B               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  6459  002B0E  C00A  FFF6         	movff	??_Lcd_Write_String,tblptrl
  6460  002B12  C00B  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  6461  002B16  0E00               	movlw	low (__smallconst shr (0+16))
  6462  002B18  6EF8               	movwf	tblptru,c
  6463  002B1A  0E0F               	movlw	(high __ramtop+-1)
  6464  002B1C  64F7               	cpfsgt	tblptrh,c
  6465  002B1E  D003               	bra	u2037
  6466  002B20  0008               	tblrd		*
  6467  002B22  50F5               	movf	tablat,w,c
  6468  002B24  D005               	bra	u2030
  6469  002B26                     u2037:
  6470  002B26  CFF6 FFE9          	movff	tblptrl,fsr0l
  6471  002B2A  CFF7 FFEA          	movff	tblptrh,fsr0h
  6472  002B2E  50EF               	movf	indf0,w,c
  6473  002B30                     u2030:
  6474  002B30  ECED  F016         	call	_Lcd_Write_Char
  6475  002B34  4A0C               	infsnz	Lcd_Write_String@i,f,c
  6476  002B36  2A0D               	incf	Lcd_Write_String@i+1,f,c
  6477  002B38                     l298:
  6478  002B38  500C               	movf	Lcd_Write_String@i,w,c
  6479  002B3A  2408               	addwf	Lcd_Write_String@a,w,c
  6480  002B3C  6E0A               	movwf	??_Lcd_Write_String& (0+255),c
  6481  002B3E  500D               	movf	Lcd_Write_String@i+1,w,c
  6482  002B40  2009               	addwfc	Lcd_Write_String@a+1,w,c
  6483  002B42  6E0B               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  6484  002B44  C00A  FFF6         	movff	??_Lcd_Write_String,tblptrl
  6485  002B48  C00B  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  6486  002B4C  0E00               	movlw	low (__smallconst shr (0+16))
  6487  002B4E  6EF8               	movwf	tblptru,c
  6488  002B50  0E0F               	movlw	(high __ramtop+-1)
  6489  002B52  64F7               	cpfsgt	tblptrh,c
  6490  002B54  D003               	bra	u2047
  6491  002B56  0008               	tblrd		*
  6492  002B58  50F5               	movf	tablat,w,c
  6493  002B5A  D005               	bra	u2040
  6494  002B5C                     u2047:
  6495  002B5C  CFF6 FFE9          	movff	tblptrl,fsr0l
  6496  002B60  CFF7 FFEA          	movff	tblptrh,fsr0h
  6497  002B64  50EF               	movf	indf0,w,c
  6498  002B66                     u2040:
  6499  002B66  0900               	iorlw	0
  6500  002B68  B4D8               	btfsc	status,2,c
  6501  002B6A  0012               	return	
  6502  002B6C  D7CA               	goto	l299
  6503  002B6E                     __end_of_Lcd_Write_String:
  6504                           	opt stack 0
  6505                           tblptru	equ	0xFF8
  6506                           tblptrh	equ	0xFF7
  6507                           tblptrl	equ	0xFF6
  6508                           tablat	equ	0xFF5
  6509                           prodh	equ	0xFF4
  6510                           prodl	equ	0xFF3
  6511                           indf0	equ	0xFEF
  6512                           postinc0	equ	0xFEE
  6513                           fsr0h	equ	0xFEA
  6514                           fsr0l	equ	0xFE9
  6515                           wreg	equ	0xFE8
  6516                           indf2	equ	0xFDF
  6517                           postinc2	equ	0xFDE
  6518                           postdec2	equ	0xFDD
  6519                           fsr2h	equ	0xFDA
  6520                           fsr2l	equ	0xFD9
  6521                           status	equ	0xFD8
  6522                           
  6523 ;; *************** function _Lcd_Write_Char *****************
  6524 ;; Defined at:
  6525 ;;		line 91 in file "i2c_display.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;  a               1    wreg     unsigned char 
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;  a               1    4[COMRAM] unsigned char 
  6530 ;;  temp            1    6[COMRAM] unsigned char 
  6531 ;;  y               1    5[COMRAM] unsigned char 
  6532 ;; Return value:  Size  Location     Type
  6533 ;;                  1    wreg      void 
  6534 ;; Registers used:
  6535 ;;		wreg, status,2, status,0, cstack
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;Total ram usage:        3 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; Hardware stack levels required when called:    3
  6548 ;; This function calls:
  6549 ;;		_Lcd_Port
  6550 ;; This function is called by:
  6551 ;;		_Lcd_Write_String
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           	psect	text27
  6556  002DDA                     __ptext27:
  6557                           	opt stack 0
  6558  002DDA                     _Lcd_Write_Char:
  6559                           	opt stack 25
  6560                           
  6561                           ;incstack = 0
  6562                           ;Lcd_Write_Char@a stored from wreg
  6563  002DDA  6E05               	movwf	Lcd_Write_Char@a,c
  6564                           
  6565                           ;i2c_display.c: 93: char temp,y;
  6566                           ;i2c_display.c: 94: temp = a&0x0F;
  6567  002DDC  5005               	movf	Lcd_Write_Char@a,w,c
  6568  002DDE  0B0F               	andlw	15
  6569  002DE0  6E07               	movwf	Lcd_Write_Char@temp,c
  6570                           
  6571                           ;i2c_display.c: 95: temp=temp<<4;
  6572  002DE2  3807               	swapf	Lcd_Write_Char@temp,w,c
  6573  002DE4  0BF0               	andlw	240
  6574  002DE6  6E07               	movwf	Lcd_Write_Char@temp,c
  6575                           
  6576                           ;i2c_display.c: 96: y = a&0xF0;
  6577  002DE8  5005               	movf	Lcd_Write_Char@a,w,c
  6578  002DEA  0BF0               	andlw	240
  6579  002DEC  6E06               	movwf	Lcd_Write_Char@y,c
  6580                           
  6581                           ;i2c_display.c: 99: Lcd_Port(0x00 | 0x01 | 0x00 | 0x00);
  6582  002DEE  0E01               	movlw	1
  6583  002DF0  EC21  F018         	call	_Lcd_Port
  6584                           
  6585                           ;i2c_display.c: 100: Lcd_Port(y);
  6586  002DF4  5006               	movf	Lcd_Write_Char@y,w,c
  6587  002DF6  EC21  F018         	call	_Lcd_Port
  6588                           
  6589                           ;i2c_display.c: 102: Lcd_Port(y | 0x01 | 0x04 | 0x00);
  6590  002DFA  5006               	movf	Lcd_Write_Char@y,w,c
  6591  002DFC  0905               	iorlw	5
  6592  002DFE  EC21  F018         	call	_Lcd_Port
  6593                           
  6594                           ;i2c_display.c: 103: _delay((unsigned long)((40)*(64000000/4000000.0)));
  6595  002E02  0ED5               	movlw	213
  6596  002E04                     u3087:
  6597  002E04  2EE8               	decfsz	wreg,f,c
  6598  002E06  D7FE               	bra	u3087
  6599  002E08  F000               	nop	
  6600                           
  6601                           ;i2c_display.c: 105: Lcd_Port(y | 0x01 | 0x00 | 0x00);
  6602  002E0A  5006               	movf	Lcd_Write_Char@y,w,c
  6603  002E0C  0901               	iorlw	1
  6604  002E0E  EC21  F018         	call	_Lcd_Port
  6605                           
  6606                           ;i2c_display.c: 106: Lcd_Port(temp);
  6607  002E12  5007               	movf	Lcd_Write_Char@temp,w,c
  6608  002E14  EC21  F018         	call	_Lcd_Port
  6609                           
  6610                           ;i2c_display.c: 109: Lcd_Port(temp | 0x01 | 0x04 | 0x00);
  6611  002E18  5007               	movf	Lcd_Write_Char@temp,w,c
  6612  002E1A  0905               	iorlw	5
  6613  002E1C  EC21  F018         	call	_Lcd_Port
  6614                           
  6615                           ;i2c_display.c: 110: _delay((unsigned long)((40)*(64000000/4000000.0)));
  6616  002E20  0ED5               	movlw	213
  6617  002E22                     u3097:
  6618  002E22  2EE8               	decfsz	wreg,f,c
  6619  002E24  D7FE               	bra	u3097
  6620  002E26  F000               	nop	
  6621                           
  6622                           ;i2c_display.c: 112: Lcd_Port(temp | 0x01 | 0x00 | 0x00);
  6623  002E28  5007               	movf	Lcd_Write_Char@temp,w,c
  6624  002E2A  0901               	iorlw	1
  6625  002E2C  EC21  F018         	call	_Lcd_Port
  6626  002E30  0012               	return		;funcret
  6627  002E32                     __end_of_Lcd_Write_Char:
  6628                           	opt stack 0
  6629                           tblptru	equ	0xFF8
  6630                           tblptrh	equ	0xFF7
  6631                           tblptrl	equ	0xFF6
  6632                           tablat	equ	0xFF5
  6633                           prodh	equ	0xFF4
  6634                           prodl	equ	0xFF3
  6635                           indf0	equ	0xFEF
  6636                           postinc0	equ	0xFEE
  6637                           fsr0h	equ	0xFEA
  6638                           fsr0l	equ	0xFE9
  6639                           wreg	equ	0xFE8
  6640                           indf2	equ	0xFDF
  6641                           postinc2	equ	0xFDE
  6642                           postdec2	equ	0xFDD
  6643                           fsr2h	equ	0xFDA
  6644                           fsr2l	equ	0xFD9
  6645                           status	equ	0xFD8
  6646                           
  6647 ;; *************** function _Lcd_Set_Cursor *****************
  6648 ;; Defined at:
  6649 ;;		line 51 in file "i2c_display.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;  a               1    wreg     unsigned char 
  6652 ;;  b               1   10[COMRAM] unsigned char 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;  a               1   11[COMRAM] unsigned char 
  6655 ;;  temp            1   14[COMRAM] unsigned char 
  6656 ;;  y               1   13[COMRAM] unsigned char 
  6657 ;;  z               1   12[COMRAM] unsigned char 
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  1    wreg      void 
  6660 ;; Registers used:
  6661 ;;		wreg, status,2, status,0, cstack
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6667 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6668 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6671 ;;Total ram usage:        5 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    4
  6674 ;; This function calls:
  6675 ;;		_Lcd_Cmd
  6676 ;; This function is called by:
  6677 ;;		_main
  6678 ;;		_init_io_display
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           	psect	text28
  6683  002E86                     __ptext28:
  6684                           	opt stack 0
  6685  002E86                     _Lcd_Set_Cursor:
  6686                           	opt stack 25
  6687                           
  6688                           ;incstack = 0
  6689                           ;Lcd_Set_Cursor@a stored from wreg
  6690  002E86  6E0C               	movwf	Lcd_Set_Cursor@a,c
  6691                           
  6692                           ;i2c_display.c: 53: char temp,z,y;
  6693                           ;i2c_display.c: 54: if(a == 1)
  6694  002E88  040C               	decf	Lcd_Set_Cursor@a,w,c
  6695  002E8A  A4D8               	btfss	status,2,c
  6696  002E8C  D010               	goto	l286
  6697                           
  6698                           ;i2c_display.c: 55: {
  6699                           ;i2c_display.c: 56: temp = 0x80 + b - 1;
  6700  002E8E  500B               	movf	Lcd_Set_Cursor@b,w,c
  6701  002E90  0F7F               	addlw	127
  6702  002E92  6E0F               	movwf	Lcd_Set_Cursor@temp,c
  6703                           
  6704                           ;i2c_display.c: 57: z = temp>>4;
  6705  002E94  380F               	swapf	Lcd_Set_Cursor@temp,w,c
  6706  002E96  0B0F               	andlw	15
  6707  002E98  6E0D               	movwf	Lcd_Set_Cursor@z,c
  6708                           
  6709                           ;i2c_display.c: 58: y = temp & 0x0F;
  6710  002E9A  500F               	movf	Lcd_Set_Cursor@temp,w,c
  6711  002E9C  0B0F               	andlw	15
  6712  002E9E  6E0E               	movwf	Lcd_Set_Cursor@y,c
  6713                           
  6714                           ;i2c_display.c: 59: Lcd_Cmd(z);
  6715  002EA0  500D               	movf	Lcd_Set_Cursor@z,w,c
  6716  002EA2  EC6B  F017         	call	_Lcd_Cmd
  6717                           
  6718                           ;i2c_display.c: 60: Lcd_Cmd(y);
  6719  002EA6  500E               	movf	Lcd_Set_Cursor@y,w,c
  6720  002EA8  EC6B  F017         	call	_Lcd_Cmd
  6721                           
  6722                           ;i2c_display.c: 61: }
  6723  002EAC  0012               	return	
  6724  002EAE                     l286:
  6725                           
  6726                           ;i2c_display.c: 62: else if(a == 2)
  6727  002EAE  0E02               	movlw	2
  6728  002EB0  180C               	xorwf	Lcd_Set_Cursor@a,w,c
  6729  002EB2  A4D8               	btfss	status,2,c
  6730  002EB4  0012               	return	
  6731                           
  6732                           ;i2c_display.c: 63: {
  6733                           ;i2c_display.c: 64: temp = 0xC0 + b - 1;
  6734  002EB6  500B               	movf	Lcd_Set_Cursor@b,w,c
  6735  002EB8  0FBF               	addlw	191
  6736  002EBA  6E0F               	movwf	Lcd_Set_Cursor@temp,c
  6737                           
  6738                           ;i2c_display.c: 65: z = temp>>4;
  6739  002EBC  380F               	swapf	Lcd_Set_Cursor@temp,w,c
  6740  002EBE  0B0F               	andlw	15
  6741  002EC0  6E0D               	movwf	Lcd_Set_Cursor@z,c
  6742                           
  6743                           ;i2c_display.c: 66: y = temp & 0x0F;
  6744  002EC2  500F               	movf	Lcd_Set_Cursor@temp,w,c
  6745  002EC4  0B0F               	andlw	15
  6746  002EC6  6E0E               	movwf	Lcd_Set_Cursor@y,c
  6747                           
  6748                           ;i2c_display.c: 67: Lcd_Cmd(z);
  6749  002EC8  500D               	movf	Lcd_Set_Cursor@z,w,c
  6750  002ECA  EC6B  F017         	call	_Lcd_Cmd
  6751                           
  6752                           ;i2c_display.c: 68: Lcd_Cmd(y);
  6753  002ECE  500E               	movf	Lcd_Set_Cursor@y,w,c
  6754  002ED0  EC6B  F017         	call	_Lcd_Cmd
  6755  002ED4  0012               	return	
  6756  002ED6                     __end_of_Lcd_Set_Cursor:
  6757                           	opt stack 0
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           prodh	equ	0xFF4
  6763                           prodl	equ	0xFF3
  6764                           indf0	equ	0xFEF
  6765                           postinc0	equ	0xFEE
  6766                           fsr0h	equ	0xFEA
  6767                           fsr0l	equ	0xFE9
  6768                           wreg	equ	0xFE8
  6769                           indf2	equ	0xFDF
  6770                           postinc2	equ	0xFDE
  6771                           postdec2	equ	0xFDD
  6772                           fsr2h	equ	0xFDA
  6773                           fsr2l	equ	0xFD9
  6774                           status	equ	0xFD8
  6775                           
  6776 ;; *************** function _Lcd_Init *****************
  6777 ;; Defined at:
  6778 ;;		line 72 in file "i2c_display.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;		None
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;		None
  6783 ;; Return value:  Size  Location     Type
  6784 ;;                  1    wreg      void 
  6785 ;; Registers used:
  6786 ;;		wreg, status,2, status,0, cstack
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6794 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6795 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6796 ;;Total ram usage:        2 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    4
  6799 ;; This function calls:
  6800 ;;		_Lcd_Cmd
  6801 ;;		_Lcd_Port
  6802 ;; This function is called by:
  6803 ;;		_init_io_display
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text29
  6808  002A7C                     __ptext29:
  6809                           	opt stack 0
  6810  002A7C                     _Lcd_Init:
  6811                           	opt stack 25
  6812                           
  6813                           ;i2c_display.c: 74: Lcd_Port(0x00);
  6814                           
  6815                           ;incstack = 0
  6816  002A7C  0E00               	movlw	0
  6817  002A7E  EC21  F018         	call	_Lcd_Port
  6818                           
  6819                           ;i2c_display.c: 75: _delay((unsigned long)((20)*(64000000/4000.0)));
  6820  002A82  0E02               	movlw	2
  6821  002A84  6E0C               	movwf	(??_Lcd_Init+1)& (0+255),c
  6822  002A86  0EA0               	movlw	160
  6823  002A88  6E0B               	movwf	??_Lcd_Init& (0+255),c
  6824  002A8A  0E92               	movlw	146
  6825  002A8C                     u3107:
  6826  002A8C  2EE8               	decfsz	wreg,f,c
  6827  002A8E  D7FE               	bra	u3107
  6828  002A90  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  6829  002A92  D7FC               	bra	u3107
  6830  002A94  2E0C               	decfsz	(??_Lcd_Init+1)& (0+255),f,c
  6831  002A96  D7FA               	bra	u3107
  6832  002A98  D000               	nop2	
  6833                           
  6834                           ;i2c_display.c: 76: Lcd_Cmd(0x03);
  6835  002A9A  0E03               	movlw	3
  6836  002A9C  EC6B  F017         	call	_Lcd_Cmd
  6837                           
  6838                           ;i2c_display.c: 77: _delay((unsigned long)((5)*(64000000/4000.0)));
  6839  002AA0  0E68               	movlw	104
  6840  002AA2  6E0B               	movwf	??_Lcd_Init& (0+255),c
  6841  002AA4  0EE4               	movlw	228
  6842  002AA6                     u3117:
  6843  002AA6  2EE8               	decfsz	wreg,f,c
  6844  002AA8  D7FE               	bra	u3117
  6845  002AAA  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  6846  002AAC  D7FC               	bra	u3117
  6847  002AAE  D000               	nop2	
  6848                           
  6849                           ;i2c_display.c: 78: Lcd_Cmd(0x03);
  6850  002AB0  0E03               	movlw	3
  6851  002AB2  EC6B  F017         	call	_Lcd_Cmd
  6852                           
  6853                           ;i2c_display.c: 79: _delay((unsigned long)((11)*(64000000/4000.0)));
  6854  002AB6  0EE5               	movlw	229
  6855  002AB8  6E0B               	movwf	??_Lcd_Init& (0+255),c
  6856  002ABA  0E91               	movlw	145
  6857  002ABC                     u3127:
  6858  002ABC  2EE8               	decfsz	wreg,f,c
  6859  002ABE  D7FE               	bra	u3127
  6860  002AC0  2E0B               	decfsz	??_Lcd_Init& (0+255),f,c
  6861  002AC2  D7FC               	bra	u3127
  6862  002AC4  F000               	nop	
  6863                           
  6864                           ;i2c_display.c: 80: Lcd_Cmd(0x03);
  6865  002AC6  0E03               	movlw	3
  6866  002AC8  EC6B  F017         	call	_Lcd_Cmd
  6867                           
  6868                           ;i2c_display.c: 82: Lcd_Cmd(0x02);
  6869  002ACC  0E02               	movlw	2
  6870  002ACE  EC6B  F017         	call	_Lcd_Cmd
  6871                           
  6872                           ;i2c_display.c: 83: Lcd_Cmd(0x02);
  6873  002AD2  0E02               	movlw	2
  6874  002AD4  EC6B  F017         	call	_Lcd_Cmd
  6875                           
  6876                           ;i2c_display.c: 84: Lcd_Cmd(0x08);
  6877  002AD8  0E08               	movlw	8
  6878  002ADA  EC6B  F017         	call	_Lcd_Cmd
  6879                           
  6880                           ;i2c_display.c: 85: Lcd_Cmd(0x00);
  6881  002ADE  0E00               	movlw	0
  6882  002AE0  EC6B  F017         	call	_Lcd_Cmd
  6883                           
  6884                           ;i2c_display.c: 86: Lcd_Cmd(0x0C);
  6885  002AE4  0E0C               	movlw	12
  6886  002AE6  EC6B  F017         	call	_Lcd_Cmd
  6887                           
  6888                           ;i2c_display.c: 87: Lcd_Cmd(0x00);
  6889  002AEA  0E00               	movlw	0
  6890  002AEC  EC6B  F017         	call	_Lcd_Cmd
  6891                           
  6892                           ;i2c_display.c: 88: Lcd_Cmd(0x06);
  6893  002AF0  0E06               	movlw	6
  6894  002AF2  EC6B  F017         	call	_Lcd_Cmd
  6895  002AF6  0012               	return		;funcret
  6896  002AF8                     __end_of_Lcd_Init:
  6897                           	opt stack 0
  6898                           tblptru	equ	0xFF8
  6899                           tblptrh	equ	0xFF7
  6900                           tblptrl	equ	0xFF6
  6901                           tablat	equ	0xFF5
  6902                           prodh	equ	0xFF4
  6903                           prodl	equ	0xFF3
  6904                           indf0	equ	0xFEF
  6905                           postinc0	equ	0xFEE
  6906                           fsr0h	equ	0xFEA
  6907                           fsr0l	equ	0xFE9
  6908                           wreg	equ	0xFE8
  6909                           indf2	equ	0xFDF
  6910                           postinc2	equ	0xFDE
  6911                           postdec2	equ	0xFDD
  6912                           fsr2h	equ	0xFDA
  6913                           fsr2l	equ	0xFD9
  6914                           status	equ	0xFD8
  6915                           
  6916 ;; *************** function _Lcd_Clear *****************
  6917 ;; Defined at:
  6918 ;;		line 45 in file "i2c_display.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;		None
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;		None
  6923 ;; Return value:  Size  Location     Type
  6924 ;;                  1    wreg      void 
  6925 ;; Registers used:
  6926 ;;		wreg, status,2, status,0, cstack
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6936 ;;Total ram usage:        0 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; Hardware stack levels required when called:    4
  6939 ;; This function calls:
  6940 ;;		_Lcd_Cmd
  6941 ;; This function is called by:
  6942 ;;		_main
  6943 ;;		_init_io_display
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           	psect	text30
  6948  0030AE                     __ptext30:
  6949                           	opt stack 0
  6950  0030AE                     _Lcd_Clear:
  6951                           	opt stack 25
  6952                           
  6953                           ;i2c_display.c: 47: Lcd_Cmd(0);
  6954                           
  6955                           ;incstack = 0
  6956  0030AE  0E00               	movlw	0
  6957  0030B0  EC6B  F017         	call	_Lcd_Cmd
  6958                           
  6959                           ;i2c_display.c: 48: Lcd_Cmd(1);
  6960  0030B4  0E01               	movlw	1
  6961  0030B6  EC6B  F017         	call	_Lcd_Cmd
  6962  0030BA  0012               	return		;funcret
  6963  0030BC                     __end_of_Lcd_Clear:
  6964                           	opt stack 0
  6965                           tblptru	equ	0xFF8
  6966                           tblptrh	equ	0xFF7
  6967                           tblptrl	equ	0xFF6
  6968                           tablat	equ	0xFF5
  6969                           prodh	equ	0xFF4
  6970                           prodl	equ	0xFF3
  6971                           indf0	equ	0xFEF
  6972                           postinc0	equ	0xFEE
  6973                           fsr0h	equ	0xFEA
  6974                           fsr0l	equ	0xFE9
  6975                           wreg	equ	0xFE8
  6976                           indf2	equ	0xFDF
  6977                           postinc2	equ	0xFDE
  6978                           postdec2	equ	0xFDD
  6979                           fsr2h	equ	0xFDA
  6980                           fsr2l	equ	0xFD9
  6981                           status	equ	0xFD8
  6982                           
  6983 ;; *************** function _I2C_Master_Init *****************
  6984 ;; Defined at:
  6985 ;;		line 166 in file "i2c_display.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;  c               4   13[COMRAM] const unsigned long 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;		None
  6990 ;; Return value:  Size  Location     Type
  6991 ;;                  1    wreg      void 
  6992 ;; Registers used:
  6993 ;;		wreg, status,2, status,0, cstack
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6999 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7001 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;Total ram usage:        8 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; Hardware stack levels required when called:    1
  7006 ;; This function calls:
  7007 ;;		___lldiv
  7008 ;; This function is called by:
  7009 ;;		_init_io_display
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013                           	psect	text31
  7014  002D80                     __ptext31:
  7015                           	opt stack 0
  7016  002D80                     _I2C_Master_Init:
  7017                           	opt stack 28
  7018                           
  7019                           ;i2c_display.c: 168: SSP1CON1 = 0b00101000;
  7020                           
  7021                           ;incstack = 0
  7022  002D80  0E28               	movlw	40
  7023  002D82  6EC6               	movwf	4038,c	;volatile
  7024                           
  7025                           ;i2c_display.c: 169: SSP1CON2 = 0x00;
  7026  002D84  0E00               	movlw	0
  7027  002D86  6EC5               	movwf	4037,c	;volatile
  7028                           
  7029                           ;i2c_display.c: 170: SSP1ADD = (64000000/(4*c))-1;
  7030  002D88  0E00               	movlw	0
  7031  002D8A  6E01               	movwf	___lldiv@dividend,c
  7032  002D8C  0E90               	movlw	144
  7033  002D8E  6E02               	movwf	___lldiv@dividend+1,c
  7034  002D90  0ED0               	movlw	208
  7035  002D92  6E03               	movwf	___lldiv@dividend+2,c
  7036  002D94  0E03               	movlw	3
  7037  002D96  6E04               	movwf	___lldiv@dividend+3,c
  7038  002D98  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7039  002D9C  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7040  002DA0  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7041  002DA4  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7042  002DA8  0E02               	movlw	2
  7043  002DAA                     u2065:
  7044  002DAA  90D8               	bcf	status,0,c
  7045  002DAC  3612               	rlcf	??_I2C_Master_Init,f,c
  7046  002DAE  3613               	rlcf	??_I2C_Master_Init+1,f,c
  7047  002DB0  3614               	rlcf	??_I2C_Master_Init+2,f,c
  7048  002DB2  3615               	rlcf	??_I2C_Master_Init+3,f,c
  7049  002DB4  2EE8               	decfsz	wreg,f,c
  7050  002DB6  D7F9               	goto	u2065
  7051  002DB8  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  7052  002DBC  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7053  002DC0  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7054  002DC4  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7055  002DC8  ECFD  F014         	call	___lldiv	;wreg free
  7056  002DCC  0401               	decf	?___lldiv,w,c
  7057  002DCE  6EC8               	movwf	4040,c	;volatile
  7058                           
  7059                           ;i2c_display.c: 171: SSP1STAT = 0x00;
  7060  002DD0  0E00               	movlw	0
  7061  002DD2  6EC7               	movwf	4039,c	;volatile
  7062                           
  7063                           ;i2c_display.c: 172: TRISCbits.TRISC3=1;
  7064  002DD4  8694               	bsf	3988,3,c	;volatile
  7065                           
  7066                           ;i2c_display.c: 173: TRISCbits.TRISC4=1;
  7067  002DD6  8894               	bsf	3988,4,c	;volatile
  7068  002DD8  0012               	return		;funcret
  7069  002DDA                     __end_of_I2C_Master_Init:
  7070                           	opt stack 0
  7071                           tblptru	equ	0xFF8
  7072                           tblptrh	equ	0xFF7
  7073                           tblptrl	equ	0xFF6
  7074                           tablat	equ	0xFF5
  7075                           prodh	equ	0xFF4
  7076                           prodl	equ	0xFF3
  7077                           indf0	equ	0xFEF
  7078                           postinc0	equ	0xFEE
  7079                           fsr0h	equ	0xFEA
  7080                           fsr0l	equ	0xFE9
  7081                           wreg	equ	0xFE8
  7082                           indf2	equ	0xFDF
  7083                           postinc2	equ	0xFDE
  7084                           postdec2	equ	0xFDD
  7085                           fsr2h	equ	0xFDA
  7086                           fsr2l	equ	0xFD9
  7087                           status	equ	0xFD8
  7088                           
  7089 ;; *************** function ___lldiv *****************
  7090 ;; Defined at:
  7091 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;  dividend        4    0[COMRAM] unsigned long 
  7094 ;;  divisor         4    4[COMRAM] unsigned long 
  7095 ;; Auto vars:     Size  Location     Type
  7096 ;;  quotient        4    8[COMRAM] unsigned long 
  7097 ;;  counter         1   12[COMRAM] unsigned char 
  7098 ;; Return value:  Size  Location     Type
  7099 ;;                  4    0[COMRAM] unsigned long 
  7100 ;; Registers used:
  7101 ;;		wreg, status,2, status,0
  7102 ;; Tracked objects:
  7103 ;;		On entry : 0/0
  7104 ;;		On exit  : 0/0
  7105 ;;		Unchanged: 0/0
  7106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7107 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7108 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7110 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;Total ram usage:       13 bytes
  7112 ;; Hardware stack levels used:    1
  7113 ;; This function calls:
  7114 ;;		Nothing
  7115 ;; This function is called by:
  7116 ;;		_I2C_Master_Init
  7117 ;;		_sprintf
  7118 ;; This function uses a non-reentrant model
  7119 ;;
  7120                           
  7121                           	psect	text32
  7122  0029FA                     __ptext32:
  7123                           	opt stack 0
  7124  0029FA                     ___lldiv:
  7125                           	opt stack 29
  7126                           
  7127                           ;incstack = 0
  7128  0029FA  0E00               	movlw	0
  7129  0029FC  6E09               	movwf	___lldiv@quotient,c
  7130  0029FE  0E00               	movlw	0
  7131  002A00  6E0A               	movwf	___lldiv@quotient+1,c
  7132  002A02  0E00               	movlw	0
  7133  002A04  6E0B               	movwf	___lldiv@quotient+2,c
  7134  002A06  0E00               	movlw	0
  7135  002A08  6E0C               	movwf	___lldiv@quotient+3,c
  7136  002A0A  5005               	movf	___lldiv@divisor,w,c
  7137  002A0C  1006               	iorwf	___lldiv@divisor+1,w,c
  7138  002A0E  1007               	iorwf	___lldiv@divisor+2,w,c
  7139  002A10  1008               	iorwf	___lldiv@divisor+3,w,c
  7140  002A12  B4D8               	btfsc	status,2,c
  7141  002A14  D02A               	goto	l873
  7142  002A16  0E01               	movlw	1
  7143  002A18  6E0D               	movwf	___lldiv@counter,c
  7144  002A1A  D006               	goto	l868
  7145  002A1C  90D8               	bcf	status,0,c
  7146  002A1E  3605               	rlcf	___lldiv@divisor,f,c
  7147  002A20  3606               	rlcf	___lldiv@divisor+1,f,c
  7148  002A22  3607               	rlcf	___lldiv@divisor+2,f,c
  7149  002A24  3608               	rlcf	___lldiv@divisor+3,f,c
  7150  002A26  2A0D               	incf	___lldiv@counter,f,c
  7151  002A28                     l868:
  7152  002A28  AE08               	btfss	___lldiv@divisor+3,7,c
  7153  002A2A  D7F8               	goto	l869
  7154  002A2C                     u1990:
  7155  002A2C  90D8               	bcf	status,0,c
  7156  002A2E  3609               	rlcf	___lldiv@quotient,f,c
  7157  002A30  360A               	rlcf	___lldiv@quotient+1,f,c
  7158  002A32  360B               	rlcf	___lldiv@quotient+2,f,c
  7159  002A34  360C               	rlcf	___lldiv@quotient+3,f,c
  7160  002A36  5005               	movf	___lldiv@divisor,w,c
  7161  002A38  5C01               	subwf	___lldiv@dividend,w,c
  7162  002A3A  5006               	movf	___lldiv@divisor+1,w,c
  7163  002A3C  5802               	subwfb	___lldiv@dividend+1,w,c
  7164  002A3E  5007               	movf	___lldiv@divisor+2,w,c
  7165  002A40  5803               	subwfb	___lldiv@dividend+2,w,c
  7166  002A42  5008               	movf	___lldiv@divisor+3,w,c
  7167  002A44  5804               	subwfb	___lldiv@dividend+3,w,c
  7168  002A46  A0D8               	btfss	status,0,c
  7169  002A48  D009               	goto	l872
  7170  002A4A  5005               	movf	___lldiv@divisor,w,c
  7171  002A4C  5E01               	subwf	___lldiv@dividend,f,c
  7172  002A4E  5006               	movf	___lldiv@divisor+1,w,c
  7173  002A50  5A02               	subwfb	___lldiv@dividend+1,f,c
  7174  002A52  5007               	movf	___lldiv@divisor+2,w,c
  7175  002A54  5A03               	subwfb	___lldiv@dividend+2,f,c
  7176  002A56  5008               	movf	___lldiv@divisor+3,w,c
  7177  002A58  5A04               	subwfb	___lldiv@dividend+3,f,c
  7178  002A5A  8009               	bsf	___lldiv@quotient,0,c
  7179  002A5C                     l872:
  7180  002A5C  90D8               	bcf	status,0,c
  7181  002A5E  3208               	rrcf	___lldiv@divisor+3,f,c
  7182  002A60  3207               	rrcf	___lldiv@divisor+2,f,c
  7183  002A62  3206               	rrcf	___lldiv@divisor+1,f,c
  7184  002A64  3205               	rrcf	___lldiv@divisor,f,c
  7185  002A66  2E0D               	decfsz	___lldiv@counter,f,c
  7186  002A68  D7E1               	goto	u1990
  7187  002A6A                     l873:
  7188  002A6A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  7189  002A6E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  7190  002A72  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  7191  002A76  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  7192  002A7A  0012               	return		;funcret
  7193  002A7C                     __end_of___lldiv:
  7194                           	opt stack 0
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           prodh	equ	0xFF4
  7200                           prodl	equ	0xFF3
  7201                           indf0	equ	0xFEF
  7202                           postinc0	equ	0xFEE
  7203                           fsr0h	equ	0xFEA
  7204                           fsr0l	equ	0xFE9
  7205                           wreg	equ	0xFE8
  7206                           indf2	equ	0xFDF
  7207                           postinc2	equ	0xFDE
  7208                           postdec2	equ	0xFDD
  7209                           fsr2h	equ	0xFDA
  7210                           fsr2l	equ	0xFD9
  7211                           status	equ	0xFD8
  7212                           
  7213 ;; *************** function _Cursor_Off *****************
  7214 ;; Defined at:
  7215 ;;		line 140 in file "i2c_display.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;		None
  7218 ;; Auto vars:     Size  Location     Type
  7219 ;;		None
  7220 ;; Return value:  Size  Location     Type
  7221 ;;                  1    wreg      void 
  7222 ;; Registers used:
  7223 ;;		wreg, status,2, status,0, cstack
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7233 ;;Total ram usage:        0 bytes
  7234 ;; Hardware stack levels used:    1
  7235 ;; Hardware stack levels required when called:    4
  7236 ;; This function calls:
  7237 ;;		_Lcd_Cmd
  7238 ;; This function is called by:
  7239 ;;		_init_io_display
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           	psect	text33
  7244  0030BC                     __ptext33:
  7245                           	opt stack 0
  7246  0030BC                     _Cursor_Off:
  7247                           	opt stack 25
  7248                           
  7249                           ;i2c_display.c: 142: Lcd_Cmd(0x00);
  7250                           
  7251                           ;incstack = 0
  7252  0030BC  0E00               	movlw	0
  7253  0030BE  EC6B  F017         	call	_Lcd_Cmd
  7254                           
  7255                           ;i2c_display.c: 143: Lcd_Cmd(0x0C);
  7256  0030C2  0E0C               	movlw	12
  7257  0030C4  EC6B  F017         	call	_Lcd_Cmd
  7258  0030C8  0012               	return		;funcret
  7259  0030CA                     __end_of_Cursor_Off:
  7260                           	opt stack 0
  7261                           tblptru	equ	0xFF8
  7262                           tblptrh	equ	0xFF7
  7263                           tblptrl	equ	0xFF6
  7264                           tablat	equ	0xFF5
  7265                           prodh	equ	0xFF4
  7266                           prodl	equ	0xFF3
  7267                           indf0	equ	0xFEF
  7268                           postinc0	equ	0xFEE
  7269                           fsr0h	equ	0xFEA
  7270                           fsr0l	equ	0xFE9
  7271                           wreg	equ	0xFE8
  7272                           indf2	equ	0xFDF
  7273                           postinc2	equ	0xFDE
  7274                           postdec2	equ	0xFDD
  7275                           fsr2h	equ	0xFDA
  7276                           fsr2l	equ	0xFD9
  7277                           status	equ	0xFD8
  7278                           
  7279 ;; *************** function _Lcd_Cmd *****************
  7280 ;; Defined at:
  7281 ;;		line 26 in file "i2c_display.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;  a               1    wreg     unsigned char 
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  a               1    9[COMRAM] unsigned char 
  7286 ;;  buff            2    7[COMRAM] int 
  7287 ;; Return value:  Size  Location     Type
  7288 ;;                  1    wreg      void 
  7289 ;; Registers used:
  7290 ;;		wreg, status,2, status,0, cstack
  7291 ;; Tracked objects:
  7292 ;;		On entry : 0/0
  7293 ;;		On exit  : 0/0
  7294 ;;		Unchanged: 0/0
  7295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7297 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;Total ram usage:        6 bytes
  7301 ;; Hardware stack levels used:    1
  7302 ;; Hardware stack levels required when called:    3
  7303 ;; This function calls:
  7304 ;;		_Lcd_Port
  7305 ;; This function is called by:
  7306 ;;		_Lcd_Clear
  7307 ;;		_Lcd_Set_Cursor
  7308 ;;		_Lcd_Init
  7309 ;;		_Cursor_Off
  7310 ;;		_Lcd_Shift_Right
  7311 ;;		_Lcd_Shift_Left
  7312 ;;		_Cursor_On
  7313 ;;		_Cursor_Left
  7314 ;;		_Cursor_Right
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text34
  7319  002ED6                     __ptext34:
  7320                           	opt stack 0
  7321  002ED6                     _Lcd_Cmd:
  7322                           	opt stack 25
  7323                           
  7324                           ;incstack = 0
  7325                           ;Lcd_Cmd@a stored from wreg
  7326  002ED6  6E0A               	movwf	Lcd_Cmd@a,c
  7327                           
  7328                           ;i2c_display.c: 28: int buff;
  7329                           ;i2c_display.c: 29: a=a<<4;
  7330  002ED8  380A               	swapf	Lcd_Cmd@a,w,c
  7331  002EDA  0BF0               	andlw	240
  7332  002EDC  6E0A               	movwf	Lcd_Cmd@a,c
  7333                           
  7334                           ;i2c_display.c: 32: Lcd_Port(0x00 || 0x00 || 0x00 || 0x00);
  7335  002EDE  0E01               	movlw	1
  7336  002EE0  6E07               	movwf	_Lcd_Cmd$736,c
  7337  002EE2  0E00               	movlw	0
  7338  002EE4  6E07               	movwf	_Lcd_Cmd$736,c
  7339  002EE6  5007               	movf	_Lcd_Cmd$736,w,c
  7340  002EE8  EC21  F018         	call	_Lcd_Port
  7341                           
  7342                           ;i2c_display.c: 34: Lcd_Port(a);
  7343  002EEC  500A               	movf	Lcd_Cmd@a,w,c
  7344  002EEE  EC21  F018         	call	_Lcd_Port
  7345                           
  7346                           ;i2c_display.c: 37: buff=a | 0x00 | 0x04 | 0x00;
  7347  002EF2  0E04               	movlw	4
  7348  002EF4  C00A  F005         	movff	Lcd_Cmd@a,??_Lcd_Cmd
  7349  002EF8  6A06               	clrf	(??_Lcd_Cmd+1)& (0+255),c
  7350  002EFA  1005               	iorwf	??_Lcd_Cmd,w,c
  7351  002EFC  6E08               	movwf	Lcd_Cmd@buff,c
  7352  002EFE  5006               	movf	??_Lcd_Cmd+1,w,c
  7353  002F00  6E09               	movwf	Lcd_Cmd@buff+1,c
  7354                           
  7355                           ;i2c_display.c: 38: Lcd_Port(buff);
  7356  002F02  5008               	movf	Lcd_Cmd@buff,w,c
  7357  002F04  EC21  F018         	call	_Lcd_Port
  7358                           
  7359                           ;i2c_display.c: 39: _delay((unsigned long)((4)*(64000000/4000.0)));
  7360  002F08  0E54               	movlw	84
  7361  002F0A  6E05               	movwf	??_Lcd_Cmd& (0+255),c
  7362  002F0C  0E1C               	movlw	28
  7363  002F0E                     u3137:
  7364  002F0E  2EE8               	decfsz	wreg,f,c
  7365  002F10  D7FE               	bra	u3137
  7366  002F12  2E05               	decfsz	??_Lcd_Cmd& (0+255),f,c
  7367  002F14  D7FC               	bra	u3137
  7368  002F16  D000               	nop2	
  7369                           
  7370                           ;i2c_display.c: 41: buff=a | 0x00 | 0x00 | 0x00;
  7371  002F18  C00A  F008         	movff	Lcd_Cmd@a,Lcd_Cmd@buff
  7372  002F1C  6A09               	clrf	Lcd_Cmd@buff+1,c
  7373                           
  7374                           ;i2c_display.c: 42: Lcd_Port(buff);
  7375  002F1E  5008               	movf	Lcd_Cmd@buff,w,c
  7376  002F20  EC21  F018         	call	_Lcd_Port
  7377  002F24  0012               	return		;funcret
  7378  002F26                     __end_of_Lcd_Cmd:
  7379                           	opt stack 0
  7380                           tblptru	equ	0xFF8
  7381                           tblptrh	equ	0xFF7
  7382                           tblptrl	equ	0xFF6
  7383                           tablat	equ	0xFF5
  7384                           prodh	equ	0xFF4
  7385                           prodl	equ	0xFF3
  7386                           indf0	equ	0xFEF
  7387                           postinc0	equ	0xFEE
  7388                           fsr0h	equ	0xFEA
  7389                           fsr0l	equ	0xFE9
  7390                           wreg	equ	0xFE8
  7391                           indf2	equ	0xFDF
  7392                           postinc2	equ	0xFDE
  7393                           postdec2	equ	0xFDD
  7394                           fsr2h	equ	0xFDA
  7395                           fsr2l	equ	0xFD9
  7396                           status	equ	0xFD8
  7397                           
  7398 ;; *************** function _Lcd_Port *****************
  7399 ;; Defined at:
  7400 ;;		line 20 in file "i2c_display.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;  data            1    wreg     unsigned char 
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;  data            1    3[COMRAM] unsigned char 
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      void 
  7407 ;; Registers used:
  7408 ;;		wreg, status,2, status,0, cstack
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7417 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7418 ;;Total ram usage:        1 bytes
  7419 ;; Hardware stack levels used:    1
  7420 ;; Hardware stack levels required when called:    2
  7421 ;; This function calls:
  7422 ;;		_I2C_Master_Start
  7423 ;;		_I2C_Master_Stop
  7424 ;;		_I2C_Write_Display
  7425 ;; This function is called by:
  7426 ;;		_Lcd_Cmd
  7427 ;;		_Lcd_Init
  7428 ;;		_Lcd_Write_Char
  7429 ;; This function uses a non-reentrant model
  7430 ;;
  7431                           
  7432                           	psect	text35
  7433  003042                     __ptext35:
  7434                           	opt stack 0
  7435  003042                     _Lcd_Port:
  7436                           	opt stack 25
  7437                           
  7438                           ;incstack = 0
  7439                           ;Lcd_Port@data stored from wreg
  7440  003042  6E04               	movwf	Lcd_Port@data,c
  7441  003044  EC6E  F018         	call	_I2C_Master_Start	;wreg free
  7442                           
  7443                           ;i2c_display.c: 22: I2C_Write_Display(0x70);
  7444  003048  0E00               	movlw	0
  7445  00304A  6E03               	movwf	I2C_Write_Display@d+1,c
  7446  00304C  0E70               	movlw	112
  7447  00304E  6E02               	movwf	I2C_Write_Display@d,c
  7448  003050  EC65  F018         	call	_I2C_Write_Display	;wreg free
  7449                           
  7450                           ;i2c_display.c: 23: I2C_Write_Display(data);
  7451  003054  C004  F002         	movff	Lcd_Port@data,I2C_Write_Display@d
  7452  003058  6A03               	clrf	I2C_Write_Display@d+1,c
  7453  00305A  EC65  F018         	call	_I2C_Write_Display	;wreg free
  7454                           
  7455                           ;i2c_display.c: 24: I2C_Master_Stop();
  7456  00305E  EC6A  F018         	call	_I2C_Master_Stop	;wreg free
  7457  003062  0012               	return		;funcret
  7458  003064                     __end_of_Lcd_Port:
  7459                           	opt stack 0
  7460                           tblptru	equ	0xFF8
  7461                           tblptrh	equ	0xFF7
  7462                           tblptrl	equ	0xFF6
  7463                           tablat	equ	0xFF5
  7464                           prodh	equ	0xFF4
  7465                           prodl	equ	0xFF3
  7466                           indf0	equ	0xFEF
  7467                           postinc0	equ	0xFEE
  7468                           fsr0h	equ	0xFEA
  7469                           fsr0l	equ	0xFE9
  7470                           wreg	equ	0xFE8
  7471                           indf2	equ	0xFDF
  7472                           postinc2	equ	0xFDE
  7473                           postdec2	equ	0xFDD
  7474                           fsr2h	equ	0xFDA
  7475                           fsr2l	equ	0xFD9
  7476                           status	equ	0xFD8
  7477                           
  7478 ;; *************** function _I2C_Write_Display *****************
  7479 ;; Defined at:
  7480 ;;		line 207 in file "i2c_display.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  d               2    1[COMRAM] unsigned int 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;		None
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  1    wreg      void 
  7487 ;; Registers used:
  7488 ;;		wreg, status,2, status,0, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7497 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7498 ;;Total ram usage:        2 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; Hardware stack levels required when called:    1
  7501 ;; This function calls:
  7502 ;;		_I2C_Master_Wait
  7503 ;; This function is called by:
  7504 ;;		_Lcd_Port
  7505 ;; This function uses a non-reentrant model
  7506 ;;
  7507                           
  7508                           	psect	text36
  7509  0030CA                     __ptext36:
  7510                           	opt stack 0
  7511  0030CA                     _I2C_Write_Display:
  7512                           	opt stack 25
  7513                           
  7514                           ;i2c_display.c: 209: I2C_Master_Wait();
  7515                           
  7516                           ;incstack = 0
  7517  0030CA  EC4E  F018         	call	_I2C_Master_Wait	;wreg free
  7518                           
  7519                           ;i2c_display.c: 210: SSP1BUF = d;
  7520  0030CE  C002  FFC9         	movff	I2C_Write_Display@d,4041	;volatile
  7521  0030D2  0012               	return		;funcret
  7522  0030D4                     __end_of_I2C_Write_Display:
  7523                           	opt stack 0
  7524                           tblptru	equ	0xFF8
  7525                           tblptrh	equ	0xFF7
  7526                           tblptrl	equ	0xFF6
  7527                           tablat	equ	0xFF5
  7528                           prodh	equ	0xFF4
  7529                           prodl	equ	0xFF3
  7530                           indf0	equ	0xFEF
  7531                           postinc0	equ	0xFEE
  7532                           fsr0h	equ	0xFEA
  7533                           fsr0l	equ	0xFE9
  7534                           wreg	equ	0xFE8
  7535                           indf2	equ	0xFDF
  7536                           postinc2	equ	0xFDE
  7537                           postdec2	equ	0xFDD
  7538                           fsr2h	equ	0xFDA
  7539                           fsr2l	equ	0xFD9
  7540                           status	equ	0xFD8
  7541                           
  7542 ;; *************** function _I2C_Master_Stop *****************
  7543 ;; Defined at:
  7544 ;;		line 195 in file "i2c_display.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;		None
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;		None
  7549 ;; Return value:  Size  Location     Type
  7550 ;;                  1    wreg      void 
  7551 ;; Registers used:
  7552 ;;		wreg, status,2, status,0, cstack
  7553 ;; Tracked objects:
  7554 ;;		On entry : 0/0
  7555 ;;		On exit  : 0/0
  7556 ;;		Unchanged: 0/0
  7557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;Total ram usage:        0 bytes
  7563 ;; Hardware stack levels used:    1
  7564 ;; Hardware stack levels required when called:    1
  7565 ;; This function calls:
  7566 ;;		_I2C_Master_Wait
  7567 ;; This function is called by:
  7568 ;;		_Lcd_Port
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           	psect	text37
  7573  0030D4                     __ptext37:
  7574                           	opt stack 0
  7575  0030D4                     _I2C_Master_Stop:
  7576                           	opt stack 25
  7577                           
  7578                           ;i2c_display.c: 197: I2C_Master_Wait();
  7579                           
  7580                           ;incstack = 0
  7581  0030D4  EC4E  F018         	call	_I2C_Master_Wait	;wreg free
  7582                           
  7583                           ;i2c_display.c: 198: SSP1CON2bits.PEN = 1;
  7584  0030D8  84C5               	bsf	4037,2,c	;volatile
  7585  0030DA  0012               	return		;funcret
  7586  0030DC                     __end_of_I2C_Master_Stop:
  7587                           	opt stack 0
  7588                           tblptru	equ	0xFF8
  7589                           tblptrh	equ	0xFF7
  7590                           tblptrl	equ	0xFF6
  7591                           tablat	equ	0xFF5
  7592                           prodh	equ	0xFF4
  7593                           prodl	equ	0xFF3
  7594                           indf0	equ	0xFEF
  7595                           postinc0	equ	0xFEE
  7596                           fsr0h	equ	0xFEA
  7597                           fsr0l	equ	0xFE9
  7598                           wreg	equ	0xFE8
  7599                           indf2	equ	0xFDF
  7600                           postinc2	equ	0xFDE
  7601                           postdec2	equ	0xFDD
  7602                           fsr2h	equ	0xFDA
  7603                           fsr2l	equ	0xFD9
  7604                           status	equ	0xFD8
  7605                           
  7606 ;; *************** function _I2C_Master_Start *****************
  7607 ;; Defined at:
  7608 ;;		line 183 in file "i2c_display.c"
  7609 ;; Parameters:    Size  Location     Type
  7610 ;;		None
  7611 ;; Auto vars:     Size  Location     Type
  7612 ;;		None
  7613 ;; Return value:  Size  Location     Type
  7614 ;;                  1    wreg      void 
  7615 ;; Registers used:
  7616 ;;		wreg, status,2, status,0, cstack
  7617 ;; Tracked objects:
  7618 ;;		On entry : 0/0
  7619 ;;		On exit  : 0/0
  7620 ;;		Unchanged: 0/0
  7621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;Total ram usage:        0 bytes
  7627 ;; Hardware stack levels used:    1
  7628 ;; Hardware stack levels required when called:    1
  7629 ;; This function calls:
  7630 ;;		_I2C_Master_Wait
  7631 ;; This function is called by:
  7632 ;;		_Lcd_Port
  7633 ;; This function uses a non-reentrant model
  7634 ;;
  7635                           
  7636                           	psect	text38
  7637  0030DC                     __ptext38:
  7638                           	opt stack 0
  7639  0030DC                     _I2C_Master_Start:
  7640                           	opt stack 25
  7641                           
  7642                           ;i2c_display.c: 185: I2C_Master_Wait();
  7643                           
  7644                           ;incstack = 0
  7645  0030DC  EC4E  F018         	call	_I2C_Master_Wait	;wreg free
  7646                           
  7647                           ;i2c_display.c: 186: SSP1CON2bits.SEN = 1;
  7648  0030E0  80C5               	bsf	4037,0,c	;volatile
  7649  0030E2  0012               	return		;funcret
  7650  0030E4                     __end_of_I2C_Master_Start:
  7651                           	opt stack 0
  7652                           tblptru	equ	0xFF8
  7653                           tblptrh	equ	0xFF7
  7654                           tblptrl	equ	0xFF6
  7655                           tablat	equ	0xFF5
  7656                           prodh	equ	0xFF4
  7657                           prodl	equ	0xFF3
  7658                           indf0	equ	0xFEF
  7659                           postinc0	equ	0xFEE
  7660                           fsr0h	equ	0xFEA
  7661                           fsr0l	equ	0xFE9
  7662                           wreg	equ	0xFE8
  7663                           indf2	equ	0xFDF
  7664                           postinc2	equ	0xFDE
  7665                           postdec2	equ	0xFDD
  7666                           fsr2h	equ	0xFDA
  7667                           fsr2l	equ	0xFD9
  7668                           status	equ	0xFD8
  7669                           
  7670 ;; *************** function _I2C_Master_Wait *****************
  7671 ;; Defined at:
  7672 ;;		line 176 in file "i2c_display.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;		None
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;		None
  7677 ;; Return value:  Size  Location     Type
  7678 ;;                  1    wreg      void 
  7679 ;; Registers used:
  7680 ;;		wreg, status,2, status,0
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7689 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7690 ;;Total ram usage:        1 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; This function calls:
  7693 ;;		Nothing
  7694 ;; This function is called by:
  7695 ;;		_I2C_Master_Start
  7696 ;;		_I2C_Master_Stop
  7697 ;;		_I2C_Write_Display
  7698 ;;		_I2C_Master_RepeatedStart
  7699 ;;		_I2C_Master_Write
  7700 ;;		_I2C_Master_Read
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           	psect	text39
  7705  00309C                     __ptext39:
  7706                           	opt stack 0
  7707  00309C                     _I2C_Master_Wait:
  7708                           	opt stack 25
  7709                           
  7710                           ;i2c_display.c: 178: while ((SSP1STAT & 0x04) || (SSP1CON2 & 0x1F));
  7711                           
  7712                           ;incstack = 0
  7713  00309C  B4C7               	btfsc	4039,2,c	;volatile
  7714  00309E  D7FE               	goto	_I2C_Master_Wait
  7715  0030A0  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  7716  0030A4  0E1F               	movlw	31
  7717  0030A6  1601               	andwf	??_I2C_Master_Wait,f,c
  7718  0030A8  B4D8               	btfsc	status,2,c
  7719  0030AA  0012               	return	
  7720  0030AC  D7F7               	goto	_I2C_Master_Wait
  7721  0030AE                     __end_of_I2C_Master_Wait:
  7722                           	opt stack 0
  7723                           tblptru	equ	0xFF8
  7724                           tblptrh	equ	0xFF7
  7725                           tblptrl	equ	0xFF6
  7726                           tablat	equ	0xFF5
  7727                           prodh	equ	0xFF4
  7728                           prodl	equ	0xFF3
  7729                           indf0	equ	0xFEF
  7730                           postinc0	equ	0xFEE
  7731                           fsr0h	equ	0xFEA
  7732                           fsr0l	equ	0xFE9
  7733                           wreg	equ	0xFE8
  7734                           indf2	equ	0xFDF
  7735                           postinc2	equ	0xFDE
  7736                           postdec2	equ	0xFDD
  7737                           fsr2h	equ	0xFDA
  7738                           fsr2l	equ	0xFD9
  7739                           status	equ	0xFD8
  7740                           
  7741 ;; *************** function _config *****************
  7742 ;; Defined at:
  7743 ;;		line 7 in file "config.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;		None
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;		None
  7748 ;; Return value:  Size  Location     Type
  7749 ;;                  1    wreg      void 
  7750 ;; Registers used:
  7751 ;;		wreg, status,2
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7761 ;;Total ram usage:        0 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; This function calls:
  7764 ;;		Nothing
  7765 ;; This function is called by:
  7766 ;;		_main
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           	psect	text40
  7771  002E32                     __ptext40:
  7772                           	opt stack 0
  7773  002E32                     _config:
  7774                           	opt stack 30
  7775                           
  7776                           ;config.c: 9: TRISA=0Xff;
  7777                           
  7778                           ;incstack = 0
  7779  002E32  6892               	setf	3986,c	;volatile
  7780                           
  7781                           ;config.c: 10: TRISB=0X00;
  7782  002E34  0E00               	movlw	0
  7783  002E36  6E93               	movwf	3987,c	;volatile
  7784                           
  7785                           ;config.c: 11: TRISC=0X00;
  7786  002E38  0E00               	movlw	0
  7787  002E3A  6E94               	movwf	3988,c	;volatile
  7788                           
  7789                           ;config.c: 12: TRISD=0X00;
  7790  002E3C  0E00               	movlw	0
  7791  002E3E  6E95               	movwf	3989,c	;volatile
  7792                           
  7793                           ;config.c: 13: TRISE=0Xff;
  7794  002E40  6896               	setf	3990,c	;volatile
  7795                           
  7796                           ;config.c: 15: PORTA=0X00;
  7797  002E42  0E00               	movlw	0
  7798  002E44  6E80               	movwf	3968,c	;volatile
  7799                           
  7800                           ;config.c: 16: PORTB=0X00;
  7801  002E46  0E00               	movlw	0
  7802  002E48  6E81               	movwf	3969,c	;volatile
  7803                           
  7804                           ;config.c: 17: PORTC=0X00;
  7805  002E4A  0E00               	movlw	0
  7806  002E4C  6E82               	movwf	3970,c	;volatile
  7807                           
  7808                           ;config.c: 18: PORTD=0X00;
  7809  002E4E  0E00               	movlw	0
  7810  002E50  6E83               	movwf	3971,c	;volatile
  7811                           
  7812                           ;config.c: 19: PORTE=0X00;
  7813  002E52  0E00               	movlw	0
  7814  002E54  6E84               	movwf	3972,c	;volatile
  7815                           
  7816                           ;config.c: 21: LATA=0X00;
  7817  002E56  0E00               	movlw	0
  7818  002E58  6E89               	movwf	3977,c	;volatile
  7819                           
  7820                           ;config.c: 22: LATB=0X00;
  7821  002E5A  0E00               	movlw	0
  7822  002E5C  6E8A               	movwf	3978,c	;volatile
  7823                           
  7824                           ;config.c: 23: LATC=0X00;
  7825  002E5E  0E00               	movlw	0
  7826  002E60  6E8B               	movwf	3979,c	;volatile
  7827                           
  7828                           ;config.c: 24: LATD=0X00;
  7829  002E62  0E00               	movlw	0
  7830  002E64  6E8C               	movwf	3980,c	;volatile
  7831                           
  7832                           ;config.c: 25: LATE=0X00;
  7833  002E66  0E00               	movlw	0
  7834  002E68  6E8D               	movwf	3981,c	;volatile
  7835                           
  7836                           ;config.c: 27: ANSELA=0Xff;
  7837  002E6A  010F               	movlb	15	; () banked
  7838  002E6C  6938               	setf	56,b	;volatile
  7839                           
  7840                           ;config.c: 28: ANSELB=0X00;
  7841  002E6E  0E00               	movlw	0
  7842  002E70  6F39               	movwf	57,b	;volatile
  7843                           
  7844                           ;config.c: 29: ANSELC=0X00;
  7845  002E72  0E00               	movlw	0
  7846  002E74  6F3A               	movwf	58,b	;volatile
  7847                           
  7848                           ;config.c: 30: ANSELD=0X00;
  7849  002E76  0E00               	movlw	0
  7850  002E78  6F3B               	movwf	59,b	;volatile
  7851                           
  7852                           ;config.c: 31: ANSELE=0X00;
  7853  002E7A  0E00               	movlw	0
  7854  002E7C  6F3C               	movwf	60,b	;volatile
  7855                           
  7856                           ;config.c: 33: OSCCON=0b01110100;
  7857  002E7E  0E74               	movlw	116
  7858  002E80  6ED3               	movwf	4051,c	;volatile
  7859                           
  7860                           ; BSR set to: 15
  7861                           ;config.c: 34: OSCTUNEbits.PLLEN=1;
  7862  002E82  8C9B               	bsf	3995,6,c	;volatile
  7863                           
  7864                           ; BSR set to: 15
  7865  002E84  0012               	return		;funcret
  7866  002E86                     __end_of_config:
  7867                           	opt stack 0
  7868                           tblptru	equ	0xFF8
  7869                           tblptrh	equ	0xFF7
  7870                           tblptrl	equ	0xFF6
  7871                           tablat	equ	0xFF5
  7872                           prodh	equ	0xFF4
  7873                           prodl	equ	0xFF3
  7874                           indf0	equ	0xFEF
  7875                           postinc0	equ	0xFEE
  7876                           fsr0h	equ	0xFEA
  7877                           fsr0l	equ	0xFE9
  7878                           wreg	equ	0xFE8
  7879                           indf2	equ	0xFDF
  7880                           postinc2	equ	0xFDE
  7881                           postdec2	equ	0xFDD
  7882                           fsr2h	equ	0xFDA
  7883                           fsr2l	equ	0xFD9
  7884                           status	equ	0xFD8
  7885                           
  7886 ;; *************** function _adc_config *****************
  7887 ;; Defined at:
  7888 ;;		line 62 in file "config.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;		None
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;		None
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  1    wreg      void 
  7895 ;; Registers used:
  7896 ;;		wreg, status,2
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;Total ram usage:        0 bytes
  7907 ;; Hardware stack levels used:    1
  7908 ;; This function calls:
  7909 ;;		Nothing
  7910 ;; This function is called by:
  7911 ;;		_main
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915                           	psect	text41
  7916  003082                     __ptext41:
  7917                           	opt stack 0
  7918  003082                     _adc_config:
  7919                           	opt stack 30
  7920                           
  7921                           ; BSR set to: 15
  7922                           ;incstack = 0
  7923  003082  8092               	bsf	3986,0,c	;volatile
  7924                           
  7925                           ;config.c: 64: ANSELAbits.ANSA0=1;
  7926  003084  010F               	movlb	15	; () banked
  7927  003086  8138               	bsf	56,0,b	;volatile
  7928                           
  7929                           ;config.c: 65: TRISAbits.RA1=1;
  7930  003088  8292               	bsf	3986,1,c	;volatile
  7931                           
  7932                           ;config.c: 66: ANSELAbits.ANSA1=1;
  7933  00308A  8338               	bsf	56,1,b	;volatile
  7934                           
  7935                           ; BSR set to: 15
  7936                           ;config.c: 69: ADCON0=0b00000011;
  7937  00308C  0E03               	movlw	3
  7938  00308E  6EC2               	movwf	4034,c	;volatile
  7939                           
  7940                           ;config.c: 70: ADCON1=0b10000000;
  7941  003090  0E80               	movlw	128
  7942  003092  6EC1               	movwf	4033,c	;volatile
  7943                           
  7944                           ;config.c: 71: ADCON2=0b00111110;
  7945  003094  0E3E               	movlw	62
  7946  003096  6EC0               	movwf	4032,c	;volatile
  7947                           
  7948                           ; BSR set to: 15
  7949                           ;config.c: 72: ADCON2bits.ADFM=0;
  7950  003098  9EC0               	bcf	4032,7,c	;volatile
  7951                           
  7952                           ; BSR set to: 15
  7953  00309A  0012               	return		;funcret
  7954  00309C                     __end_of_adc_config:
  7955                           	opt stack 0
  7956                           tblptru	equ	0xFF8
  7957                           tblptrh	equ	0xFF7
  7958                           tblptrl	equ	0xFF6
  7959                           tablat	equ	0xFF5
  7960                           prodh	equ	0xFF4
  7961                           prodl	equ	0xFF3
  7962                           indf0	equ	0xFEF
  7963                           postinc0	equ	0xFEE
  7964                           fsr0h	equ	0xFEA
  7965                           fsr0l	equ	0xFE9
  7966                           wreg	equ	0xFE8
  7967                           indf2	equ	0xFDF
  7968                           postinc2	equ	0xFDE
  7969                           postdec2	equ	0xFDD
  7970                           fsr2h	equ	0xFDA
  7971                           fsr2l	equ	0xFD9
  7972                           status	equ	0xFD8
  7973                           tblptru	equ	0xFF8
  7974                           tblptrh	equ	0xFF7
  7975                           tblptrl	equ	0xFF6
  7976                           tablat	equ	0xFF5
  7977                           prodh	equ	0xFF4
  7978                           prodl	equ	0xFF3
  7979                           indf0	equ	0xFEF
  7980                           postinc0	equ	0xFEE
  7981                           fsr0h	equ	0xFEA
  7982                           fsr0l	equ	0xFE9
  7983                           wreg	equ	0xFE8
  7984                           indf2	equ	0xFDF
  7985                           postinc2	equ	0xFDE
  7986                           postdec2	equ	0xFDD
  7987                           fsr2h	equ	0xFDA
  7988                           fsr2l	equ	0xFD9
  7989                           status	equ	0xFD8
  7990                           
  7991                           	psect	rparam
  7992  0000                     tblptru	equ	0xFF8
  7993                           tblptrh	equ	0xFF7
  7994                           tblptrl	equ	0xFF6
  7995                           tablat	equ	0xFF5
  7996                           prodh	equ	0xFF4
  7997                           prodl	equ	0xFF3
  7998                           indf0	equ	0xFEF
  7999                           postinc0	equ	0xFEE
  8000                           fsr0h	equ	0xFEA
  8001                           fsr0l	equ	0xFE9
  8002                           wreg	equ	0xFE8
  8003                           indf2	equ	0xFDF
  8004                           postinc2	equ	0xFDE
  8005                           postdec2	equ	0xFDD
  8006                           fsr2h	equ	0xFDA
  8007                           fsr2l	equ	0xFD9
  8008                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    118
    Data        2
    BSS         175
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      95
    BANK0           160     63     159
    BANK1           256      0      64
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_7(CODE[5]), STR_4(CODE[5]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> main@str_A(BANK0[8]), main@str_V(BANK0[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 8
		 -> STR_9(CODE[5]), STR_8(CODE[3]), STR_6(CODE[4]), STR_5(CODE[3]), 
		 -> main@str_A(BANK0[8]), STR_3(CODE[3]), main@str_V(BANK0[8]), STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _read_Uout->___ftmul
    _read_Uin->___ftmul
    ___ftdiv->___ftpack
    _read_Iout->___ftmul
    ___lbtoft->___ftpack
    ___ftmul->___wmul
    _init_io_display->_I2C_Master_Init
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _Cursor_Off->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _Lcd_Port->_I2C_Write_Display
    _I2C_Write_Display->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                84    84      0   98567
                                             76 COMRAM     2     2      0
                                             23 BANK0     40    40      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                             ___ftge
                            ___ftmul
                         _adc_config
                             _config
                    _init_io_display
                         _pwm_config
                          _read_Iout
                           _read_Uin
                          _read_Uout
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   52437
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12667
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   12469
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     632
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _read_Uout                                            2     2      0   11739
                                             35 COMRAM     2     2      0
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (1) _read_Uin                                             2     2      0   11739
                                             35 COMRAM     2     2      0
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3215
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_Iout                                            2     2      0    8524
                                             35 COMRAM     2     2      0
                            ___ftmul
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2527
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5997
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _pwm_config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_io_display                                      2     2      0    4305
                                             21 COMRAM     2     2      0
                         _Cursor_Off
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2    1171
                                              7 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     397
                                              4 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1    1157
                                             10 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     551
                                             10 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     355
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     716
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _Cursor_Off                                           0     0      0     355
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              6     6      0     355
                                              4 COMRAM     6     6      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     196
                                              3 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                  _I2C_Write_Display
 ---------------------------------------------------------------------------------
 (5) _I2C_Write_Display                                    2     0      2     174
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   ___ftge
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _adc_config
   _config
   _init_io_display
     _Cursor_Off
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _I2C_Master_Init
       ___lldiv
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
   _pwm_config
   _read_Iout
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lbtoft
       ___ftpack
   _read_Uin
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lbtoft
       ___ftpack
   _read_Uout
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lbtoft
       ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      40       7       25.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      9F       5       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4E      5F       1      100.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13E      12        0.0%
DATA                 0      0     13E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Mar 12 13:19:09 2019

                         _b 00AA                           _c 0058                           _d 00A8  
                        l65 1E30                ___awdiv@sign 000C                          _nt 00AC  
       ___wmul@multiplicand 0011                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                ___ftadd@exp1 0039  
              ___ftadd@exp2 0038                ___ftadd@sign 0037          I2C_Write_Display@d 0002  
                       l410 19A2                         l411 18CE                         l404 1CE8  
                       l421 109E                         l414 197E                         l422 10B4  
                       l407 1DB4                         l415 1ACE                         l431 113A  
                       l423 112C                         l432 1162                         l424 1116  
                       l417 1B7E                         l441 12D6                         l425 10DE  
                       l434 16FC                         l442 1316                         l443 13DE  
                       l435 1176                         l460 1554                         l452 1444  
                       l436 11B8                         l428 113E                         l461 153E  
                       l286 2EAE                         l710 2740                         l470 16DC  
                       l446 1386                         l438 124A                         l711 2736  
                       l463 1578                         l439 12B0                         l800 2826  
                       l472 1714                         l464 157C                         l713 2774  
                       l473 1730                         l465 159E                         l457 1534  
                       l298 2B38                         l714 275E                         l810 25D0  
                       l650 29B0                         l466 16D0                         l458 14A0  
                       l299 2B02                         l475 1750                         l467 15EE  
                       l716 279C                         l812 25E8                         l660 2C02  
                       l476 1774                         l717 2792                         l813 25F8  
                       l741 2096                         l653 29D8                         l469 16F2  
                       l806 2566                         l750 2126                         l830 24DC  
                       l654 29E2                         l646 298A                         l662 2C18  
                       l823 2F82                         l655 29F0                         l647 299A  
                       l663 2C10                         l808 258E                         l680 235E  
                       l809 25C0                         l817 3010                         l745 20C0  
                       l681 23A0                         l649 29B8                         l690 2432  
                       l682 23D0                         l666 2C30                         l842 307A  
                       l755 211C                         l835 2510                         l827 2476  
                       l691 2426                         l667 2C3A                         l659 2BF6  
                       l764 215A                         l756 2112                         l836 2504  
                       l684 240E                         l668 2C48                         l765 2150  
                       l829 24EC                         l685 23FE                         l774 265A  
                       l838 252C                         l678 2340                         l782 221C  
                       l767 217E                         l872 2A5C                         l776 2682  
                       l768 219A                         l784 2248                         l873 2A6A  
                       l777 26C0                         l769 21CA                         l785 2282  
                       l778 26E6                         l882 2D04                         l890 2D2A  
                       l794 230A                         l786 22AA                         l883 2D12  
                       l795 22FE                         l868 2A28                         l788 22E6  
                       l869 2A1C                         l789 22D6                         l878 2CDC  
                       l799 27F6                         l879 2CD0                         l889 2D36  
              __CFG_CPB$OFF 000000                         _PR2 000FBB                __CFG_CPD$OFF 000000  
                       _Uin 008C                         _dir 00BA                         _cnt 005E  
                       _dty 00A0                         _str 0060                ___awmod@sign 0006  
                       wreg 000FE8                __CFG_LVP$OFF 000000                ___ftdiv@cntr 0012  
              ___ftdiv@sign 0017                        l3225 1360                        l3217 1316  
                      l3245 1448                        l3335 1770                        l2377 2852  
                      l3273 153E                        STR_1 1088                        STR_2 107C  
                      STR_3 1085                        STR_4 107C                        STR_5 108B  
                      STR_6 1081                        STR_7 107C                        STR_8 108E  
                      STR_9 1077                        u2030 2B30                        u2040 2B66  
                      u2037 2B26                        _LATA 000F89                        u2310 2438  
                      _LATB 000F8A                        u2047 2B5C                        u3007 2860  
                      _LATC 000F8B                        u1520 2728                        u2240 2310  
                      _LATD 000F8C                        u2065 2DAA                        u2321 2642  
                      u3017 2874                        u1601 2068                        u2161 2200  
                      _LATE 000F8D                        u3107 2A8C                        u3027 28F0  
                      u3117 2AA6                        u2341 266A                        u3037 2904  
                      u2421 245A                        u2181 222C                        u1630 2088  
                      u2510 2CE0                        u3127 2ABC                        u3047 2B78  
                      u1560 27A6                        u2440 2494                        u3137 2F0E  
                      u1801 254E                        u3057 2B8C                        u1730 212E  
                      u2610 11F0                        u3067 2C74                        u1660 20B2  
                      u3077 2CAE                        u1821 2576                        u2445 248C  
                      u3087 2E04                        u1591 2054                        u2615 11E6  
                      u1760 2162                        u2480 2516                        u3097 2E22  
                      u1690 20F0                        u2730 1480                        u2650 12E8  
                      u2660 1328                        u1950 2C1C                        u2760 1562  
                      u1890 29BC                        u2770 1572                        u2690 1360  
                      u2860 178C                        u1990 2A2C                        u2947 1E94  
                      u2957 1EB0                        u2967 1F2E                        u2977 1F4A  
                      u2987 1FC8                        u2997 1FE4                        _Iout 0092  
                      _Uout 008F                        _adcn 00A4                        _adcp 00A6  
                      _data 0098           ?_Lcd_Write_String 0008                        _buck 009E  
                      _main 1DF4                ___ftpack@arg 0001                        _pasi 00BC  
              ___ftpack@exp 0004                        _tens 004F                        fsr0h 000FEA  
                      indf0 000FEF                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr2l 000FD9               __CFG_BORV$190 000000  
                      _type 00A2                        prodh 000FF4                        prodl 000FF3  
                      start 0000          ??_Lcd_Write_String 000A               __CFG_IESO$OFF 000000  
              _sprintf$1534 00C0             __end_of_Lcd_Cmd 2F26                ___ftmul@cntr 0022  
              ___param_bank 000000                ___ftmul@sign 0023                ___fttol@exp1 0039  
              ___fttol@lval 0035            ?_I2C_Master_Init 000E            ?_I2C_Master_Wait 0001  
          ?_I2C_Master_Stop 0001                       ?_main 0001             __end_of___awdiv 29FA  
           __end_of___ftadd 21F0             __end_of___awmod 2C52             __end_of___ftdiv 2718  
           __end_of___ftneg 301E             __end_of___lldiv 2A7C             __end_of___ftmul 2632  
           ___awdiv@divisor 0009             __end_of___llmod 2D24             __end_of___ftsub 2FAC  
           __end_of___fttol 253E                       _T2CON 000FBA             ___awdiv@counter 000B  
                     _PORTA 000F80                       _PORTB 000F81                       _PORTC 000F82  
                     _PORTD 000F83                       _PORTE 000F84     __size_of_Lcd_Set_Cursor 0050  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       _TRISE 000F96                       _UQEnd 005C  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000                ___lltoft@exp 0011              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000             __end_of_dpowers 1029  
                     _boost 009C                       _scale 179A             __end_of_isdigit 3082  
        __CFG_MCLRE$EXTMCLR 000000               ___ftpack@sign 0005                       _str_A 007C  
                     _str_P 0074                       _start 00B2                       _str_V 0084  
                     main@c 00F8              __CFG_BOREN$OFF 000000                       tablat 000FF5  
                     status 000FD8             __end_of_sprintf 179A              __CFG_HFOFST$ON 000000  
            __CFG_PBADEN$ON 000000            __end_of_Lcd_Init 2AF8            __end_of_Lcd_Port 3064  
               _Lcd_Cmd$736 0007             __initialization 2F26                __end_of_main 2044  
                _Cursor_Off 30BC                      ??_main 004D               ___fttol@sign1 0034  
        __size_of_Lcd_Clear 000E               __activetblptr 000002              __CFG_PLLCFG$ON 000000  
      __size_of__tdiv_to_l_ 0132           ?_I2C_Master_Start 0001          ??_I2C_Master_Start 0002  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADCON2 000FC0  
          ___llmod@dividend 0001                      ?_scale 0024                      _ADRESH 000FC4  
                    _CCPR1L 000FBE                      _CCPR2L 000F67                      _CCPR3L 000F5E  
          ___awdiv@dividend 0007                      _ANSELA 000F38                      _ANSELB 000F39  
                    _ANSELC 000F3A                      _ANSELD 000F3B                      _ANSELE 000F3C  
          __end_of___ftpack 27C6            __end_of___lbtoft 3042            __end_of___lltoft 2D80  
            __CFG_WDTEN$OFF 000000                      _OSCCON 000FD3                   ??_Lcd_Cmd 0005  
   __size_of_Lcd_Write_Char 0058                      _SSPBUF 000FC9                      _URBuff 0100  
            __CFG_XINST$OFF 000000            __end_of__powers_ 1050                      ___ftge 27C6  
                    ___wmul 2FD4                   ??___awdiv 000B                   ??___ftadd 0034  
                 ??___awmod 0005                   ??___ftdiv 000F                   ??___ftneg 0004  
                 ??___lldiv 0009                   ??___ftmul 001B                   ??___llmod 0009  
                 ??___ftsub 0040                   ??___fttol 002F                      _config 2E32  
          __end_of_read_Uin 2976                      _fround 1BA2                      clear_0 2F44  
                    clear_1 2F50                      clear_2 2F5C            ___awdiv@quotient 000D  
           ___awmod@divisor 0003                      _tens_A 0095             ___awmod@counter 0005  
           _init_io_display 2C52       ___ftmul@f3_as_product 001F                __pdataCOMRAM 005E  
                 ??_isdigit 0001                __mediumconst 0000                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                   ??_sprintf 0047  
           Lcd_Set_Cursor@a 000C             Lcd_Set_Cursor@b 000B             Lcd_Set_Cursor@y 000E  
           Lcd_Set_Cursor@z 000D                  __accesstop 0060     __end_of__initialization 2F62  
                ___ftadd@f1 002E                  ___ftadd@f2 0031                  ___ftge@ff1 0001  
                ___ftge@ff2 0004           __end_of_Lcd_Clear 30BC               ___rparam_used 000001  
                ___ftdiv@f1 0009                  ___ftdiv@f2 000C                  ___ftdiv@f3 0013  
                ___ftneg@f1 0001                  ___lbtoft@c 000C                  ___ftmul@f1 0015  
                ___ftmul@f2 0018                  ___ftsub@f1 003A                  ___ftsub@f2 003D  
                ___fttol@f1 002B              __pcstackCOMRAM 0001                  _adc_config 3082  
                ___lltoft@c 0009               __end_of_scale 1BA2                 ?_Cursor_Off 0001  
            _Lcd_Set_Cursor 2E86                  __div_to_l_ 2322                   ?_Lcd_Init 0001  
                 ?_Lcd_Port 0001             __div_to_l_@exp1 000C             __div_to_l_@cntr 000B  
                   ??_scale 0027             __div_to_l_@quot 0007                  __pbssBANK0 0060  
                __pbssBANK1 0100          __size_of_read_Iout 0074               __div_to_l_@f1 0001  
             __div_to_l_@f2 0004          __size_of_read_Uout 0090          __CFG_CCP2MX$PORTC1 000000  
   __end_of_init_io_display 2CBE                     ?___ftge 0001                     ?___wmul 000F  
        __CFG_CCP3MX$PORTB5 000000                     ?_config 0001                     _CCP1CON 000FBD  
         _I2C_Write_Display 30CA                     _CCP2CON 000F66                     _CCP3CON 000F5D  
                   ?_fround 0024   __size_of_Lcd_Write_String 0076                   ?___ftpack 0001  
                 ?___lbtoft 0009      __end_of_Lcd_Set_Cursor 2ED6                   ?___lltoft 0009  
        ?_I2C_Write_Display 0002                  _directie_2 00B6           __CFG_PRICLKEN$OFF 000000  
       ??_I2C_Write_Display 0004                  ??_Lcd_Init 000B                     _SSP1ADD 000FC8  
                   _SSP1BUF 000FC9                  ??_Lcd_Port 0004                     _UQFront 005D  
            _Lcd_Write_Char 2DDA                     _Lcd_Cmd 2ED6         __size_of_Cursor_Off 000E  
                 ?_read_Uin 0001                  _go_stepper 00B4             __CFG_PWRTEN$OFF 000000  
         __end_of__npowers_ 1077                     __Hparam 0000                  _scale$1533 0027  
                   __Lparam 0000   __end_of_I2C_Write_Display 30D4                 ?_adc_config 0001  
           __size_of___ftge 0090                     ___awdiv 2976                     ___ftadd 2044  
                   ___awmod 2BE2                     ___ftdiv 2632                     ___ftneg 2FFA  
                   ___lldiv 29FA             __size_of___wmul 0026                     ___ftmul 253E  
                   ___llmod 2CBE                     ___ftsub 2F6C                     ___fttol 244A  
              __psmallconst 1000             __size_of_config 0054             __CFG_STVREN$OFF 000000  
                   __pcinit 2F26                  ??___ftpack 0006                  ??___lbtoft 000C  
           __size_of_fround 0252                     __ramtop 1000             ?_Lcd_Set_Cursor 000B  
                ??___lltoft 000D                     __ptext0 1DF4                     __ptext1 1092  
                   __ptext2 179A                     __ptext3 3064                     __ptext4 1BA2  
                   __ptext5 2FD4                     __ptext6 2BE2                     __ptext7 2976  
                   __ptext8 21F0                     __ptext9 2322                 ?__div_to_l_ 0001  
                   _dpowers 1001           __end_of_read_Iout 2BE2                     _dty_car 009A  
                   _isdigit 3064           __end_of_read_Uout 28E6                  _duty_boost 005A  
          ___awmod@dividend 0001                     _nr_pasi 00B8    __size_of_I2C_Master_Init 005A  
  __size_of_I2C_Master_Wait 0012    __size_of_I2C_Master_Stop 0008                     main@Uin 00F5  
                   _sprintf 1092                     main@dty 00DA      __end_of_Lcd_Write_Char 2E32  
      end_of_initialization 2F62                  ??_read_Uin 0024               __Lmediumconst 0000  
 __size_of_I2C_Master_Start 0008             ___lldiv@divisor 0005             ___lldiv@counter 000D  
          I2C_Master_Init@c 000E            ?_init_io_display 0001                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE              __tdiv_to_l_@f1 0001  
            __tdiv_to_l_@f2 0004               ??__tdiv_to_l_ 0007                   _TRISAbits 000F92  
                 _TRISCbits 000F94                   _TRISDbits 000F95                  _pwm_config 2FAC  
           ?_Lcd_Write_Char 0001         __size_of_adc_config 001A           Lcd_Write_String@a 0008  
         Lcd_Write_String@i 000C                 ___ftdiv@exp 0016                  main@curent 00EC  
       __size_of__div_to_l_ 0128                 ___ftmul@exp 001E                   _Lcd_Clear 30AE  
__size_of_I2C_Write_Display 000A              __end_of___ftge 2856                ??_Cursor_Off 000B  
            __end_of___wmul 2FFA            _Lcd_Write_String 2AF8               __pidataCOMRAM 30E4  
            __end_of_config 2E86              __end_of_fround 1DF4         start_initialization 2F26  
       __end_of__tdiv_to_l_ 2322           __size_of_Lcd_Init 007C           __size_of_Lcd_Port 0022  
         ??_I2C_Master_Init 0012           ??_I2C_Master_Wait 0001           ??_I2C_Master_Stop 0002  
        __end_of_Cursor_Off 30CA             ___llmod@divisor 0005             ___llmod@counter 0009  
                ?_Lcd_Clear 0001                    ??___ftge 0007                    ??___wmul 0013  
                  ??_config 0001             Lcd_Write_Char@a 0005             Lcd_Write_Char@y 0006  
                  ??_fround 0027               sprintf@tmpval 00CD                  fround@prec 002D  
         __size_of___ftpack 00AE           __size_of___lbtoft 0024           __size_of___lltoft 005C  
               __pbssCOMRAM 004F               __pcstackBANK0 00C0                 ?_pwm_config 0001  
              _isdigit$1157 0002                    ?_Lcd_Cmd 0001                 sprintf@flag 00C5  
               sprintf@fval 00D3                 sprintf@prec 00D1            _I2C_Master_Start 30DC  
         __size_of_read_Uin 0090            ??_Lcd_Set_Cursor 000C                ??_adc_config 0001  
                  ?___awdiv 0007                    ?___ftadd 002E                    ?___awmod 0001  
                  ?___ftdiv 0009                    ?___ftneg 0001                    ?___lldiv 0001  
                  ?___ftmul 0015                    ?___llmod 0001                    ?___ftsub 003A  
                 __npowers_ 1050                    ?___fttol 002B                 __tdiv_to_l_ 21F0  
              ??__div_to_l_ 0007                 __smallconst 1000                    ?_isdigit 0001  
                  _CCPTMRS0 000F49                   _read_Iout 2B6E                   _read_Uout 2856  
                  ?_sprintf 0040              __size_of_scale 0408          __end_of_adc_config 309C  
                 _duty_buck 00BE              ___wmul@product 0013                    _LATDbits 000F8C  
                  _PIE1bits 000F9D                   _rez_adc_A 0055                   _rez_adc_U 0052  
                  Lcd_Cmd@a 000A          __end_of__div_to_l_ 244A                 ??_Lcd_Clear 000B  
          __CFG_WDTPS$32768 000000         __size_of_pwm_config 0028                    _SSP1CON1 000FC6  
                  _SSP1CON2 000FC5                    _SSP1STAT 000FC7                  _ADCON0bits 000FC2  
                _ADCON2bits 000FC0           ___wmul@multiplier 000F                   main@Power 00D7  
          ??_Lcd_Write_Char 0005                   main@str_A 00DC                   main@str_V 00E4  
                  _Lcd_Init 2A7C                    _Lcd_Port 3042                  ?_read_Iout 0001  
                ?_read_Uout 0001    __end_of_Lcd_Write_String 2B6E            __size_of_Lcd_Cmd 0050  
              Lcd_Port@data 0004                    __Hrparam 0000                    __Lrparam 0000  
         __CFG_P2BMX$PORTD2 000000            __size_of___awdiv 0084            __size_of___ftadd 01AC  
          __size_of___awmod 0070            __size_of___ftdiv 00E6            __size_of___ftneg 0024  
          __size_of___lldiv 0082            __size_of___ftmul 00F4            __size_of___llmod 0066  
          __size_of___ftsub 0040            __size_of___fttol 00F4                    ___ftpack 2718  
                  ___lbtoft 301E                 _fround$1531 002A                 _fround$1532 0027  
                  ___lltoft 2D24                  _ANSELAbits 000F38    __size_of_init_io_display 006C  
                sprintf@exp 00CB                  sprintf@val 00C7             _I2C_Master_Init 2D80  
           _I2C_Master_Wait 309C             _I2C_Master_Stop 30D4            __size_of_isdigit 001E  
                  __ptext10 2D24                    __ptext11 2CBE                    __ptext20 2B6E  
                  __ptext12 244A                    __ptext21 301E                    __ptext13 2F6C  
                  __ptext30 30AE                    __ptext22 253E                    __ptext14 2044  
                  __ptext31 2D80                    __ptext23 2718                    __ptext15 2FFA  
                  __ptext40 2E32                    __ptext32 29FA                    __ptext24 2FAC  
                  __ptext16 27C6                    __ptext41 3082                    __ptext33 30BC  
                  __ptext25 2C52                    __ptext17 2856                    __ptext34 2ED6  
                  __ptext26 2AF8                    __ptext18 28E6                    __ptext35 3042  
                  __ptext27 2DDA                    __ptext19 2632                    __ptext36 30CA  
                  __ptext28 2E86                    __ptext37 30D4                    __ptext29 2A7C  
                  __ptext38 30DC                    __ptext39 309C                _SSP1CON2bits 000FC5  
                  __powers_ 1029            __size_of_sprintf 0708                 Lcd_Cmd@buff 0008  
                  _read_Uin 28E6               __size_of_main 0250                    _pasi_int 00B0  
                  _sel_pasi 00AE                    main@Iout 00EF                    main@Uout 00F2  
                  main@tens 00FA                    main@port 00FD    __end_of_I2C_Master_Start 30E4  
               _OSCTUNEbits 000F9B                  _INTCONbits 000FF2                ??_pwm_config 0001  
                  isdigit@c 0003                 ??_read_Iout 0024                    scale@scl 002A  
               ??_read_Uout 0024          Lcd_Write_Char@temp 0007                   sprintf@ap 00C3  
          __tdiv_to_l_@exp1 000F                   sprintf@sp 0040            __tdiv_to_l_@cntr 000E  
          __tdiv_to_l_@quot 000A            ___lldiv@dividend 0001          __end_of_pwm_config 2FD4  
   __end_of_I2C_Master_Init 2DDA     __end_of_I2C_Master_Wait 30AE     __end_of_I2C_Master_Stop 30DC  
        Lcd_Set_Cursor@temp 000F                ?__tdiv_to_l_ 0001                    sprintf@c 00D6  
                  sprintf@f 0042            ___lldiv@quotient 0009           __CFG_T3CMX$PORTC0 000000  
         ??_init_io_display 0016           __CFG_FOSC$INTIO67 000000  
